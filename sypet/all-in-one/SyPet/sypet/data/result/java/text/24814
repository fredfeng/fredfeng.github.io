{"id":24814,"className":"java.text.Bidi","methodName":"Bidi","signature":"\u003cjava.text.Bidi: void Bidi(char[],int,byte[],int,int,int)\u003e","javadoc":"/** \n * Create Bidi from the given text, embedding, and direction information. The embeddings array may be null.  If present, the values represent embedding level information.  Negative values from -1 to -61 indicate overrides at the absolute value of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are zero, the base embedding level as determined by the base direction is assumed.\n * @param text an array containing the paragraph of text to process.\n * @param textStart the index into the text array of the start of the paragraph.\n * @param embeddings an array containing embedding values for each character in the paragraph.This can be null, in which case it is assumed that there is no external embedding information.\n * @param embStart the index into the embedding array of the start of the paragraph.\n * @param paragraphLength the length of the paragraph in the text and embeddings arrays.\n * @param flags a collection of flags that control the algorithm.  Thealgorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved.\n */\n","tf":{"freq":{"understand":1,"paragraph":6,"thealgorithm":1,"zero":1,"algorithm":1,"level":3,"given":1,"indic":2,"reserv":1,"extern":1,"length":2,"valu":7,"direct":2,"control":1,"index":2,"may":1,"text":6,"assum":2,"charact":1,"repres":1,"creat":1,"absolut":1,"embed":10,"process":1,"present":1,"inform":3,"bidi":2,"flag":3,"start":4,"determin":1,"contain":2,"base":2,"emb":1,"negat":1,"posit":1,"collect":1,"array":6},"maxFreq":10,"totalTerms":84},"loc":20}