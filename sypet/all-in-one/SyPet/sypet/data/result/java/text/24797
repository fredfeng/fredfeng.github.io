{"id":24797,"className":"java.text.MessageFormat","methodName":"formatToCharacterIterator","signature":"\u003cjava.text.MessageFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)\u003e","javadoc":"/** \n * Formats an array of objects and inserts them into the \u003ccode\u003eMessageFormat\u003c/code\u003e\u0027s pattern, producing an \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e. You can use the returned \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e to build the resulting String, as well as to determine information about the resulting String. \u003cp\u003e The text of the returned \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e is the same that would be returned by \u003cblockquote\u003e \u003ccode\u003e {@link #format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()\u003c/code\u003e \u003c/blockquote\u003e \u003cp\u003e In addition, the \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e contains at least attributes indicating where text was generated from an argument in the \u003ccode\u003earguments\u003c/code\u003e array. The keys of these attributes are of type \u003ccode\u003eMessageFormat.Field\u003c/code\u003e, their values are \u003ccode\u003eInteger\u003c/code\u003e objects indicating the index in the \u003ccode\u003earguments\u003c/code\u003e array of the argument from which the text was generated. \u003cp\u003e The attributes/value from the underlying \u003ccode\u003eFormat\u003c/code\u003e instances that \u003ccode\u003eMessageFormat\u003c/code\u003e uses will also be placed in the resulting \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e. This allows you to not only find where an argument is placed in the resulting String, but also which fields it contains in turn.\n * @param arguments an array of objects to be formatted and substituted.\n * @return AttributedCharacterIterator describing the formatted value.\n * @exception NullPointerException if \u003ccode\u003earguments\u003c/code\u003e is null.\n * @exception IllegalArgumentException if an argument in the\u003ccode\u003earguments\u003c/code\u003e array is not of the type expected by the format element(s) that use it.\n * @since 1.4\n */\n","tf":{"freq":{"least":1,"type":2,"substitut":1,"expect":1,"buffer":2,"blockquot":2,"place":2,"key":1,"argument":11,"element":1,"turn":1,"text":4,"index":1,"except":4,"charact":7,"describ":1,"format":11,"instanc":1,"inform":1,"determin":1,"contain":2,"will":1,"pointer":1,"posit":1,"array":5,"result":4,"allow":1,"link":1,"use":3,"well":1,"object":4,"build":1,"lang":2,"attribut":9,"indic":2,"valu":3,"find":1,"addit":1,"messag":3,"produc":1,"illeg":1,"field":3,"pattern":1,"string":6,"generat":2,"java":3,"iter":7,"insert":1,"integ":1,"also":2},"maxFreq":11,"totalTerms":130},"loc":16}