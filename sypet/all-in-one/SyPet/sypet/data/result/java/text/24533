{"id":24533,"className":"java.text.DecimalFormat","methodName":"parse","signature":"\u003cjava.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)\u003e","javadoc":"/** \n * Parses text from a string to produce a \u003ccode\u003eNumber\u003c/code\u003e. \u003cp\u003e The method attempts to parse text starting at the index given by \u003ccode\u003epos\u003c/code\u003e. If parsing succeeds, then the index of \u003ccode\u003epos\u003c/code\u003e is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated \u003ccode\u003epos\u003c/code\u003e can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of \u003ccode\u003epos\u003c/code\u003e is not changed, the error index of \u003ccode\u003epos\u003c/code\u003e is set to the index of the character where the error occurred, and null is returned. \u003cp\u003e The subclass returned depends on the value of  {@link #isParseBigDecimal}as well as on the string being parsed. \u003cul\u003e \u003cli\u003eIf \u003ccode\u003eisParseBigDecimal()\u003c/code\u003e is false (the default), most integer values are returned as \u003ccode\u003eLong\u003c/code\u003e objects, no matter how they are written: \u003ccode\u003e\"17\"\u003c/code\u003e and \u003ccode\u003e\"17.000\"\u003c/code\u003e both parse to \u003ccode\u003eLong(17)\u003c/code\u003e. Values that cannot fit into a \u003ccode\u003eLong\u003c/code\u003e are returned as \u003ccode\u003eDouble\u003c/code\u003es. This includes values with a fractional part, infinite values, \u003ccode\u003eNaN\u003c/code\u003e, and the value -0.0. \u003ccode\u003eDecimalFormat\u003c/code\u003e does \u003cem\u003enot\u003c/em\u003e decide whether to return a \u003ccode\u003eDouble\u003c/code\u003e or a \u003ccode\u003eLong\u003c/code\u003e based on the presence of a decimal separator in the source string. Doing so would prevent integers that overflow the mantissa of a double, such as \u003ccode\u003e\"-9,223,372,036,854,775,808.00\"\u003c/code\u003e, from being parsed accurately. \u003cp\u003e Callers may use the \u003ccode\u003eNumber\u003c/code\u003e methods \u003ccode\u003edoubleValue\u003c/code\u003e, \u003ccode\u003elongValue\u003c/code\u003e, etc., to obtain the type they want. \u003cli\u003eIf \u003ccode\u003eisParseBigDecimal()\u003c/code\u003e is true, values are returned as \u003ccode\u003eBigDecimal\u003c/code\u003e objects. The values are the ones constructed by  {@link java.math.BigDecimal#BigDecimal(String)}for corresponding strings in locale-independent format. The special cases negative and positive infinity and NaN are returned as \u003ccode\u003eDouble\u003c/code\u003e instances holding the values of the corresponding \u003ccode\u003eDouble\u003c/code\u003e constants. \u003c/ul\u003e \u003cp\u003e \u003ccode\u003eDecimalFormat\u003c/code\u003e parses all Unicode characters that represent decimal digits, as defined by \u003ccode\u003eCharacter.digit()\u003c/code\u003e. In addition, \u003ccode\u003eDecimalFormat\u003c/code\u003e also recognizes as digits the ten consecutive characters starting with the localized zero digit defined in the \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e object.\n * @param text the string to be parsed\n * @param pos  A \u003ccode\u003eParsePosition\u003c/code\u003e object with index and errorindex information as described above.\n * @return     the parsed value, or \u003ccode\u003enull\u003c/code\u003e if the parse fails\n * @exception NullPointerException if \u003ccode\u003etext\u003c/code\u003e or\u003ccode\u003epos\u003c/code\u003e is null.\n */\n","tf":{"freq":{"fals":1,"ten":1,"last":1,"infin":1,"etc":1,"zero":1,"type":1,"whether":1,"pos":7,"independ":1,"infinit":1,"fail":1,"given":1,"accur":1,"recogn":1,"presenc":1,"except":2,"text":4,"index":7,"succeed":1,"symbol":1,"charact":6,"hold":1,"describ":1,"prevent":1,"number":3,"format":5,"consecut":1,"instanc":1,"digit":4,"inform":1,"obtain":1,"updat":2,"start":3,"separ":1,"overflow":1,"subclass":1,"pointer":1,"negat":1,"sourc":1,"big":6,"posit":2,"caller":1,"attempt":1,"defin":2,"call":1,"correspond":2,"one":1,"next":1,"link":2,"mantissa":1,"use":4,"well":1,"object":4,"decim":12,"fit":1,"indic":1,"written":1,"errorindex":1,"valu":12,"want":1,"end":1,"addit":1,"may":1,"fraction":1,"constant":1,"includ":1,"error":3,"repres":1,"matter":1,"depend":1,"true":1,"produc":1,"math":1,"point":1,"decid":1,"string":7,"unicod":1,"base":1,"special":1,"java":1,"method":3,"local":2,"construct":1,"chang":1,"necessarili":1,"part":1,"also":1,"pars":17,"integ":2,"occur":2},"maxFreq":17,"totalTerms":190},"loc":105}