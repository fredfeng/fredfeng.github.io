{"id":24796,"className":"java.text.MessageFormat","methodName":"format","signature":"\u003cjava.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)\u003e","javadoc":"/** \n * Formats an array of objects and appends the \u003ccode\u003eMessageFormat\u003c/code\u003e\u0027s pattern, with format elements replaced by the formatted objects, to the provided \u003ccode\u003eStringBuffer\u003c/code\u003e. This is equivalent to \u003cblockquote\u003e \u003ccode\u003e {@link #format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition) format}((Object[]) arguments, result, pos)\u003c/code\u003e \u003c/blockquote\u003e\n * @param arguments an array of objects to be formatted and substituted.\n * @param result where text is appended.\n * @param pos On input: an alignment field, if desired.On output: the offsets of the alignment field.\n * @exception IllegalArgumentException if an argument in the\u003ccode\u003earguments\u003c/code\u003e array is not of the type expected by the format element(s) that use it.\n */\n","tf":{"freq":{"result":2,"link":1,"use":1,"object":5,"type":1,"desir":1,"lang":2,"substitut":1,"pos":2,"expect":1,"buffer":2,"equival":1,"blockquot":2,"offset":1,"argument":5,"element":2,"append":2,"except":2,"text":2,"messag":1,"align":2,"format":9,"illeg":1,"provid":1,"field":3,"input":1,"pattern":1,"string":2,"replac":1,"java":3,"output":1,"posit":1,"array":3},"maxFreq":9,"totalTerms":66},"loc":3}