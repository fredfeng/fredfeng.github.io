{"id":24716,"className":"java.text.SimpleDateFormat","methodName":"parse","signature":"\u003cjava.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)\u003e","javadoc":"/** \n * Parses text from a string to produce a \u003ccode\u003eDate\u003c/code\u003e. \u003cp\u003e The method attempts to parse text starting at the index given by \u003ccode\u003epos\u003c/code\u003e. If parsing succeeds, then the index of \u003ccode\u003epos\u003c/code\u003e is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated \u003ccode\u003epos\u003c/code\u003e can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of \u003ccode\u003epos\u003c/code\u003e is not changed, the error index of \u003ccode\u003epos\u003c/code\u003e is set to the index of the character where the error occurred, and null is returned. \u003cp\u003eThis parsing operation uses the  {@link DateFormat#calendar calendar} to produce a {@code Date}. All of the  {@code calendar}\u0027s date-time fields are  {@linkplain Calendar#clear() cleared} before parsing, and the {@code calendar}\u0027s default values of the date-time fields are used for any missing date-time information. For example, the year value of the parsed  {@code Date} is 1970 with {@link GregorianCalendar} ifno year value is given from the parsing operation.  The  {@code TimeZone} value may be overwritten, depending on the givenpattern and the time zone value in  {@code text}. Any  {@code TimeZone} value that has previously been set by a call to{@link #setTimeZone(java.util.TimeZone) setTimeZone} may needto be restored for further operations.\n * @param text  A \u003ccode\u003eString\u003c/code\u003e, part of which should be parsed.\n * @param pos   A \u003ccode\u003eParsePosition\u003c/code\u003e object with index and errorindex information as described above.\n * @return A \u003ccode\u003eDate\u003c/code\u003e parsed from the string. In case oferror, returns null.\n * @exception NullPointerException if \u003ccode\u003etext\u003c/code\u003e or \u003ccode\u003epos\u003c/code\u003e is null.\n */\n","tf":{"freq":{"last":1,"pos":7,"time":9,"given":2,"oper":3,"year":2,"except":2,"text":5,"index":7,"succeed":1,"charact":3,"describ":1,"format":1,"oferror":1,"inform":2,"needto":1,"updat":2,"start":2,"restor":1,"pointer":1,"posit":1,"util":1,"attempt":1,"call":2,"linkplain":1,"next":1,"link":3,"ifno":1,"use":5,"object":1,"date":9,"clear":2,"indic":1,"givenpattern":1,"errorindex":1,"valu":6,"end":1,"calendar":6,"may":2,"error":3,"previous":1,"depend":1,"produc":2,"overwritten":1,"field":2,"point":1,"string":4,"exampl":1,"method":2,"java":1,"chang":1,"part":1,"necessarili":1,"gregorian":1,"pars":13,"miss":1,"zone":6,"occur":2},"maxFreq":13,"totalTerms":145},"loc":117}