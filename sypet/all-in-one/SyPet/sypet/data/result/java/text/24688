{"id":24688,"className":"java.text.DateFormat","methodName":"setLenient","signature":"\u003cjava.text.DateFormat: void setLenient(boolean)\u003e","javadoc":"/** \n * Specify whether or not date/time parsing is to be lenient.  With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object\u0027s format.  With strict parsing, inputs must match this object\u0027s format. \u003cp\u003eThis method is equivalent to the following call. \u003cblockquote\u003e\u003cpre\u003e getCalendar().setLenient(lenient) \u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003eThis leniency value is overwritten by a call to  {@link #setCalendar(java.util.Calendar) setCalendar()}.\n * @param lenient when {@code true}, parsing is lenient\n * @see java.util.Calendar#setLenient(boolean)\n */\n","tf":{"freq":{"call":2,"link":1,"interpret":1,"use":1,"object":2,"date":1,"lenient":8,"whether":1,"must":1,"specifi":1,"time":1,"equival":1,"blockquot":2,"precis":1,"valu":1,"lenienc":1,"heurist":1,"calendar":5,"follow":1,"may":1,"true":1,"format":2,"overwritten":1,"input":2,"pre":2,"java":2,"method":1,"match":2,"strict":1,"parser":1,"pars":4,"util":2},"maxFreq":8,"totalTerms":55},"loc":3}