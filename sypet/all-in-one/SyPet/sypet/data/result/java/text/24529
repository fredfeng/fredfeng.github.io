{"id":24529,"className":"java.text.DecimalFormat","methodName":"format","signature":"\u003cjava.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)\u003e","javadoc":"/** \n * Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of  {@link java.lang.Number}. \u003cp\u003e This implementation uses the maximum precision permitted.\n * @param number     the number to format\n * @param toAppendTo the \u003ccode\u003eStringBuffer\u003c/code\u003e to which the formattedtext is to be appended\n * @param pos        On input: an alignment field, if desired.On output: the offsets of the alignment field.\n * @return           the value passed in as \u003ccode\u003etoAppendTo\u003c/code\u003e\n * @exception IllegalArgumentException if \u003ccode\u003enumber\u003c/code\u003e isnull or not an instance of \u003ccode\u003eNumber\u003c/code\u003e.\n * @exception NullPointerException if \u003ccode\u003etoAppendTo\u003c/code\u003e or\u003ccode\u003epos\u003c/code\u003e is null\n * @exception ArithmeticException if rounding is needed with roundingmode being set to RoundingMode.UNNECESSARY\n * @see java.text.FieldPosition\n */\n","tf":{"freq":{"need":1,"result":1,"link":1,"permit":1,"arithmet":1,"use":1,"round":2,"desir":1,"lang":1,"formattedtext":1,"mode":1,"pos":2,"buffer":2,"roundingmod":1,"given":1,"isnul":1,"precis":1,"valu":1,"offset":1,"argument":1,"append":5,"except":6,"text":2,"align":2,"number":7,"format":3,"illeg":1,"instanc":1,"pass":1,"field":3,"input":1,"maximum":1,"string":2,"subclass":1,"pointer":1,"java":2,"output":1,"posit":1},"maxFreq":7,"totalTerms":64},"loc":18}