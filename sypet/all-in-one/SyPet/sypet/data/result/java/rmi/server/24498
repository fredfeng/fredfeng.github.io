{"id":24498,"className":"java.rmi.server.RemoteRef","methodName":"invoke","signature":"\u003cjava.rmi.server.RemoteRef: void invoke(java.rmi.server.RemoteCall)\u003e","javadoc":"/** \n * Executes the remote call. Invoke will raise any \"user\" exceptions which should pass through and not be caught by the stub.  If any exception is raised during the remote invocation, invoke should take care of cleaning up the connection before raising the \"user\" or remote exception.\n * @since JDK1.1\n * @deprecated 1.2 style stubs no longer use this method. Instead ofusing a sequence of method calls to the remote reference (\u003ccode\u003enewCall\u003c/code\u003e, \u003ccode\u003einvoke\u003c/code\u003e, and \u003ccode\u003edone\u003c/code\u003e), a stub uses a single method, \u003ccode\u003einvoke(Remote, Method, Object[], int)\u003c/code\u003e, on the remote reference to carry out parameter marshalling, remote method executing and unmarshalling of the return value.\n * @param call object representing remote call\n * @throws Exception if any exception occurs during remote method\n * @see #invoke(Remote,java.lang.reflect.Method,Object[],long)\n */\n","tf":{"freq":{"call":5,"deprec":1,"connect":1,"singl":1,"use":2,"object":3,"carri":1,"lang":1,"unmarshal":1,"rais":3,"clean":1,"style":1,"refer":2,"sequenc":1,"care":1,"longer":1,"valu":1,"caught":1,"marshal":1,"except":5,"repres":1,"stub":3,"invok":6,"done":1,"paramet":1,"ofus":1,"invoc":1,"pass":1,"remot":10,"take":1,"will":1,"instead":1,"java":1,"method":7,"execut":2,"user":2,"reflect":1,"occur":1},"maxFreq":10,"totalTerms":76},"loc":0}