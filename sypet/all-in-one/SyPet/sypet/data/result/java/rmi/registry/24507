{"id":24507,"className":"java.rmi.registry.Registry","methodName":"unbind","signature":"\u003cjava.rmi.registry.Registry: void unbind(java.lang.String)\u003e","javadoc":"/** \n * Removes the binding for the specified \u003ccode\u003ename\u003c/code\u003e in this registry.\n * @param name the name of the binding to remove\n * @throws NotBoundException if \u003ccode\u003ename\u003c/code\u003e is not currently bound\n * @throws RemoteException if remote communication with theregistry failed; if exception is a \u003ccode\u003eServerException\u003c/code\u003e containing an \u003ccode\u003eAccessException\u003c/code\u003e, then the registry denies the caller access to perform this operation (if originating from a non-local host, for example)\n * @throws AccessException if this registry is local and it deniesthe caller access to perform this operation\n * @throws NullPointerException if \u003ccode\u003ename\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"caller":2,"perform":2,"specifi":1,"deniesth":1,"theregistri":1,"fail":1,"oper":2,"name":5,"current":1,"deni":1,"except":7,"host":1,"remov":2,"origin":1,"unbind":1,"registri":3,"access":4,"non":1,"communic":1,"remot":2,"contain":1,"exampl":1,"pointer":1,"server":1,"local":2,"bind":2,"bound":2},"maxFreq":7,"totalTerms":50},"loc":0}