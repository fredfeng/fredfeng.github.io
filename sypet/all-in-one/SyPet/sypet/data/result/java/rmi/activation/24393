{"id":24393,"className":"java.rmi.activation.Activatable","methodName":"exportObject","signature":"\u003cjava.rmi.activation.Activatable: java.rmi.activation.ActivationID exportObject(java.rmi.Remote,java.lang.String,java.rmi.MarshalledObject,boolean,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)\u003e","javadoc":"/** \n * Registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports that object with the specified port, and the specified client and server socket factories. \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Using this method (as well as the \u003ccode\u003eActivatable\u003c/code\u003e constructors that both register and export an activatable remote object) is strongly discouraged because the actions of registering and exporting the remote object are \u003ci\u003enot\u003c/i\u003e guaranteed to be atomic.  Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly. \u003cp\u003eThis method first registers an activation descriptor for the specified object as follows. It obtains the activation system by invoking the method  {@link ActivationGroup#getSystem ActivationGroup.getSystem}.  This method then obtains an  {@link ActivationID} for the object by invoking the activation system\u0027s{@link ActivationSystem#registerObject registerObject} method withan  {@link ActivationDesc} constructed with the specified object\u0027sclass name, and the specified location, data, and restart mode.  If an exception occurs obtaining the activation system or registering the activation descriptor, that exception is thrown to the caller. \u003cp\u003eNext, this method exports the object by invoking the  {@link #exportObject(Remote,ActivationID,int,RMIClientSocketFactory,RMIServerSocketFactory) exportObject} method with the specified remote object, theactivation identifier obtained from registration, the specified port, and the specified client and server socket factories.  If an exception occurs exporting the object, this method attempts to unregister the activation identifier (obtained from registration) by invoking the activation system\u0027s  {@link ActivationSystem#unregisterObject unregisterObject} method with theactivation identifier.  If an exception occurs unregistering the identifier, that exception is ignored, and the original exception that occurred exporting the object is thrown to the caller. \u003cp\u003eFinally, this method invokes the  {@link ActivationGroup#activeObject activeObject} method on the activationgroup in this VM with the activation identifier and the specified remote object, and returns the activation identifier to the caller.\n * @param obj the object being exported\n * @param location the object\u0027s code location\n * @param data the object\u0027s bootstrapping data\n * @param restart if true, the object is restarted (reactivated) wheneither the activator is restarted or the object\u0027s activation group is restarted after an unexpected crash; if false, the object is only activated on demand.  Specifying \u003ccode\u003erestart\u003c/code\u003e to be \u003ccode\u003etrue\u003c/code\u003e does not force an initial immediate activation of a newly registered object;  initial activation is lazy.\n * @param port the port on which the object is exported (an anonymousport is used if port\u003d0)\n * @param csf the client-side socket factory for making calls to theremote object\n * @param ssf the server-side socket factory for receiving remote calls\n * @return the activation identifier obtained from registering thedescriptor with the activation system\n * @exception ActivationException if activation group is not active\n * @exception RemoteException if object registration or export fails\n * @since 1.2\n */\n","tf":{"freq":{"ssf":1,"fals":1,"atom":1,"client":3,"theremot":1,"specifi":12,"fail":1,"action":1,"socket":6,"proper":1,"withan":1,"crash":1,"demand":1,"follow":1,"ignor":1,"except":11,"thrown":2,"sclass":1,"invok":5,"discourag":1,"newli":1,"iclient":1,"obtain":6,"system":9,"strong":3,"separ":1,"remot":8,"reactiv":1,"make":1,"attempt":1,"port":5,"caller":3,"call":2,"unexpect":1,"bootstrap":1,"desc":1,"descriptor":4,"next":1,"link":7,"data":4,"use":2,"identifi":7,"well":1,"object":32,"activ":31,"applic":1,"mode":2,"side":2,"factori":6,"name":1,"regist":10,"immedi":1,"initi":2,"forc":1,"note":1,"constructor":1,"anonymousport":1,"export":13,"locat":4,"restart":7,"guarante":1,"origin":1,"iserv":1,"true":2,"receiv":1,"lazi":1,"thedescriptor":1,"registr":3,"handl":1,"csf":1,"theactiv":2,"activat":2,"instead":1,"obj":1,"method":11,"server":3,"unregist":4,"construct":1,"activationgroup":1,"group":5,"first":1,"wheneith":1,"occur":4},"maxFreq":32,"totalTerms":290},"loc":38}