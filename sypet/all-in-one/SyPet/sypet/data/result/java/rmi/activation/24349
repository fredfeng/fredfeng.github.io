{"id":24349,"className":"java.rmi.activation.Activator","methodName":"activate","signature":"\u003cjava.rmi.activation.Activator: java.rmi.MarshalledObject\u003c? extends java.rmi.Remote\u003e activate(java.rmi.activation.ActivationID,boolean)\u003e","javadoc":"/** \n * Activate the object associated with the activation identifier, \u003ccode\u003eid\u003c/code\u003e. If the activator knows the object to be active already, and \u003ccode\u003eforce\u003c/code\u003e is false , the stub with a \"live\" reference is returned immediately to the caller; otherwise, if the activator does not know that corresponding the remote object is active, the activator uses the activation descriptor information (previously registered) to determine the group (VM) in which the object should be activated. If an \u003ccode\u003eActivationInstantiator\u003c/code\u003e corresponding to the object\u0027s group descriptor already exists, the activator invokes the activation group\u0027s \u003ccode\u003enewInstance\u003c/code\u003e method passing it the object\u0027s id and descriptor. \u003cp\u003e If the activation group for the object\u0027s group descriptor does not yet exist, the activator starts an \u003ccode\u003eActivationInstantiator\u003c/code\u003e executing (by spawning a child process, for example). When the activator receives the activation group\u0027s call back (via the \u003ccode\u003eActivationSystem\u003c/code\u003e\u0027s \u003ccode\u003eactiveGroup\u003c/code\u003e method) specifying the activation group\u0027s reference, the activator can then invoke that activation instantiator\u0027s \u003ccode\u003enewInstance\u003c/code\u003e method to forward each pending activation request to the activation group and return the result (a marshalled remote object reference, a stub) to the caller.\u003cp\u003e Note that the activator receives a \"marshalled\" object instead of a Remote object so that the activator does not need to load the code for that object, or participate in distributed garbage collection for that object. If the activator kept a strong reference to the remote object, the activator would then prevent the object from being garbage collected under the normal distributed garbage collection mechanism. \u003cp\u003e\n * @param id the activation identifier for the object being activated\n * @param force if true, the activator contacts the group to obtainthe remote object\u0027s reference; if false, returning the cached value is allowed.\n * @return the remote object (a stub) in a marshalled form\n * @exception ActivationException if object activation fails\n * @exception UnknownObjectException if object is unknown (not registered)\n * @exception RemoteException if remote call fails\n * @since 1.2\n */\n","tf":{"freq":{"need":1,"fals":2,"obtainth":1,"via":1,"instanti":3,"normal":1,"distribut":2,"garbag":3,"specifi":1,"spawn":1,"fail":2,"refer":5,"forward":1,"request":1,"marshal":3,"live":1,"except":6,"form":1,"invok":2,"prevent":1,"instanc":2,"inform":1,"system":1,"strong":1,"start":1,"remot":8,"determin":1,"load":1,"execut":1,"collect":3,"otherwis":1,"caller":2,"call":2,"result":1,"allow":1,"descriptor":4,"correspond":2,"use":1,"identifi":2,"object":20,"activ":34,"contact":1,"child":1,"associ":1,"regist":2,"valu":1,"immedi":1,"forc":2,"exist":2,"note":1,"kept":1,"pend":1,"previous":1,"stub":3,"true":1,"particip":1,"back":1,"receiv":2,"unknown":2,"cach":1,"know":2,"pass":1,"process":1,"mechan":1,"instead":1,"exampl":1,"alreadi":2,"method":3,"group":10,"yet":1},"maxFreq":34,"totalTerms":178},"loc":0}