{"id":24420,"className":"java.rmi.server.RemoteObjectInvocationHandler","methodName":"invoke","signature":"\u003cjava.rmi.server.RemoteObjectInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])\u003e","javadoc":"/** \n * Processes a method invocation made on the encapsulating proxy instance, \u003ccode\u003eproxy\u003c/code\u003e, and returns the result. \u003cp\u003e\u003ccode\u003eRemoteObjectInvocationHandler\u003c/code\u003e implements this method as follows: \u003cp\u003eIf \u003ccode\u003emethod\u003c/code\u003e is one of the following methods, it is processed as described below: \u003cul\u003e \u003cli\u003e {@link Object#hashCode Object.hashCode}: Returns the hash code value for the proxy. \u003cli\u003e {@link Object#equals Object.equals}: Returns \u003ccode\u003etrue\u003c/code\u003e if the argument (\u003ccode\u003eargs[0]\u003c/code\u003e) is an instance of a dynamic proxy class and this invocation handler is equal to the invocation handler of that argument, and returns \u003ccode\u003efalse\u003c/code\u003e otherwise. \u003cli\u003e {@link Object#toString Object.toString}: Returns a string representation of the proxy. \u003c/ul\u003e \u003cp\u003eOtherwise, a remote call is made as follows: \u003cul\u003e \u003cli\u003eIf \u003ccode\u003eproxy\u003c/code\u003e is not an instance of the interface {@link Remote}, then an  {@link IllegalArgumentException} is thrown.\u003cli\u003eOtherwise, the  {@link RemoteRef#invoke invoke} method is invokedon this invocation handler\u0027s \u003ccode\u003eRemoteRef\u003c/code\u003e, passing \u003ccode\u003eproxy\u003c/code\u003e, \u003ccode\u003emethod\u003c/code\u003e, \u003ccode\u003eargs\u003c/code\u003e, and the method hash (defined in section 8.3 of the \"Java Remote Method Invocation (RMI) Specification\") for \u003ccode\u003emethod\u003c/code\u003e, and the result is returned. \u003cli\u003eIf an exception is thrown by \u003ccode\u003eRemoteRef.invoke\u003c/code\u003e and that exception is a checked exception that is not assignable to any exception in the \u003ccode\u003ethrows\u003c/code\u003e clause of the method implemented by the \u003ccode\u003eproxy\u003c/code\u003e\u0027s class, then that exception is wrapped in an  {@link UnexpectedException} and the wrappedexception is thrown.  Otherwise, the exception thrown by \u003ccode\u003einvoke\u003c/code\u003e is thrown by this method. \u003c/ul\u003e \u003cp\u003eThe semantics of this method are unspecified if the arguments could not have been produced by an instance of some valid dynamic proxy class containing this invocation handler.\n * @param proxy the proxy instance that the method was invoked on\n * @param method the \u003ccode\u003eMethod\u003c/code\u003e instance corresponding to theinterface method invoked on the proxy instance\n * @param args an array of objects containing the values of thearguments passed in the method invocation on the proxy instance, or \u003ccode\u003enull\u003c/code\u003e if the method takes no arguments\n * @return the value to return from the method invocation on the proxyinstance\n * @throws Throwable the exception to throw from the method invocationon the proxy instance\n */\n","tf":{"freq":{"fals":1,"proxyinst":1,"assign":1,"theargument":1,"arg":3,"invokedon":1,"wrappedexcept":1,"invocationon":1,"dynam":2,"follow":3,"argument":5,"wrap":1,"except":9,"thrown":5,"hash":4,"invok":7,"theinterfac":1,"describ":1,"invoc":9,"instanc":9,"remot":7,"contain":2,"array":1,"otherwis":4,"result":2,"call":1,"defin":1,"unspecifi":1,"valid":1,"unexpect":1,"correspond":1,"link":7,"one":1,"made":2,"object":8,"semant":1,"valu":3,"proxi":14,"check":1,"true":1,"equal":3,"claus":1,"produc":1,"illeg":1,"section":1,"represent":1,"pass":2,"process":2,"ref":3,"specif":1,"take":1,"string":3,"encapsul":1,"method":20,"java":1,"throwabl":1,"handler":5},"maxFreq":20,"totalTerms":174},"loc":7}