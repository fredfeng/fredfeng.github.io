{"id":24340,"className":"java.rmi.activation.ActivationGroup","methodName":"inactiveObject","signature":"\u003cjava.rmi.activation.ActivationGroup: boolean inactiveObject(java.rmi.activation.ActivationID)\u003e","javadoc":"/** \n * The group\u0027s \u003ccode\u003einactiveObject\u003c/code\u003e method is called indirectly via a call to the \u003ccode\u003eActivatable.inactive\u003c/code\u003e method. A remote object implementation must call \u003ccode\u003eActivatable\u003c/code\u003e\u0027s \u003ccode\u003einactive\u003c/code\u003e method when that object deactivates (the object deems that it is no longer active). If the object does not call \u003ccode\u003eActivatable.inactive\u003c/code\u003e when it deactivates, the object will never be garbage collected since the group keeps strong references to the objects it creates. \u003cp\u003e \u003cp\u003eThe group\u0027s \u003ccode\u003einactiveObject\u003c/code\u003e method unexports the remote object from the RMI runtime so that the object can no longer receive incoming RMI calls. An object will only be unexported if the object has no pending or executing calls. The subclass of \u003ccode\u003eActivationGroup\u003c/code\u003e must override this method and unexport the object. \u003cp\u003e \u003cp\u003eAfter removing the object from the RMI runtime, the group must inform its \u003ccode\u003eActivationMonitor\u003c/code\u003e (via the monitor\u0027s \u003ccode\u003einactiveObject\u003c/code\u003e method) that the remote object is not currently active so that the remote object will be re-activated by the activator upon a subsequent activation request.\u003cp\u003e \u003cp\u003eThis method simply informs the group\u0027s monitor that the object is inactive.  It is up to the concrete subclass of ActivationGroup to fulfill the additional requirement of unexporting the object. \u003cp\u003e\n * @param id the object\u0027s activation identifier\n * @return true if the object was successfully deactivated; otherwisereturns false.\n * @exception UnknownObjectException if object is unknown (may alreadybe inactive)\n * @exception RemoteException if call informing monitor fails\n * @exception ActivationException if group is inactive\n * @since 1.2\n */\n","tf":{"freq":{"fals":1,"via":2,"garbag":1,"inact":10,"must":3,"requir":1,"fail":1,"refer":1,"request":1,"otherwisereturn":1,"deem":1,"longer":2,"except":6,"monitor":4,"creat":1,"alreadyb":1,"runtim":2,"remov":1,"inform":3,"strong":1,"remot":5,"will":3,"subclass":2,"execut":1,"deactiv":3,"collect":1,"incom":1,"upon":1,"call":7,"simpli":1,"identifi":1,"object":24,"activ":10,"fulfil":1,"indirect":1,"unexport":4,"current":1,"concret":1,"subsequ":1,"pend":1,"addit":1,"may":1,"true":1,"receiv":1,"unknown":2,"never":1,"activat":3,"method":7,"group":8,"success":1,"keep":1},"maxFreq":24,"totalTerms":141},"loc":4}