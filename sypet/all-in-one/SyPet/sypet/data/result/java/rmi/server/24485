{"id":24485,"className":"java.rmi.server.RMIClassLoader","methodName":"loadProxyClass","signature":"\u003cjava.rmi.server.RMIClassLoader: java.lang.Class\u003c?\u003e loadProxyClass(java.lang.String,java.lang.String[],java.lang.ClassLoader)\u003e","javadoc":"/** \n * Loads a dynamic proxy class (see  {@link java.lang.reflect.Proxy}) that implements a set of interfaces with the given names from a codebase URL path. \u003cp\u003eThe interfaces will be resolved similar to classes loaded via the  {@link #loadClass(String,String)} method using the given\u003ccode\u003ecodebase\u003c/code\u003e. \u003cp\u003eThis method delegates to the {@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)}method of the provider instance, passing \u003ccode\u003ecodebase\u003c/code\u003e as the first argument, \u003ccode\u003einterfaces\u003c/code\u003e as the second argument, and \u003ccode\u003edefaultLoader\u003c/code\u003e as the third argument.\n * @param codebase the list of URLs (space-separated) to loadclasses from, or \u003ccode\u003enull\u003c/code\u003e\n * @param interfaces the names of the interfaces for the proxy classto implement\n * @param defaultLoader additional contextual class loaderto use, or \u003ccode\u003enull\u003c/code\u003e\n * @return  a dynamic proxy class that implements the named interfaces\n * @throws MalformedURLException if \u003ccode\u003ecodebase\u003c/code\u003e isnon-\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \u003ccode\u003ecodebase\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to load classes is invalid\n * @throws ClassNotFoundException if a definition for one ofthe named interfaces could not be found at the specified location, or if creation of the dynamic proxy class failed (such as if {@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])}would throw an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e for the given interface list)\n * @since   1.4\n */\n","tf":{"freq":{"via":1,"second":1,"lexcept":1,"specifi":1,"fail":1,"given":3,"invalid":2,"spi":1,"contextu":1,"dynam":3,"loadclass":1,"argument":4,"except":2,"loader":5,"resolv":1,"classto":1,"provid":2,"third":1,"instanc":1,"malform":1,"separ":1,"contain":1,"definit":1,"will":1,"load":6,"creation":1,"iclass":1,"link":4,"one":1,"use":3,"loaderto":1,"space":1,"lang":2,"codebas":6,"deleg":1,"name":4,"ofth":1,"path":1,"isnon":1,"similar":1,"addit":1,"locat":1,"proxi":9,"list":2,"illeg":1,"pass":1,"specif":1,"string":4,"method":3,"java":2,"first":1,"reflect":2,"found":2},"maxFreq":9,"totalTerms":103},"loc":3}