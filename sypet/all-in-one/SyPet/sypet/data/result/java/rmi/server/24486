{"id":24486,"className":"java.rmi.server.RMIClassLoader","methodName":"getClassLoader","signature":"\u003cjava.rmi.server.RMIClassLoader: java.lang.ClassLoader getClassLoader(java.lang.String)\u003e","javadoc":"/** \n * Returns a class loader that loads classes from the given codebase URL path. \u003cp\u003eThe class loader returned is the class loader that the {@link #loadClass(String,String)} method would use to load classesfor the same \u003ccode\u003ecodebase\u003c/code\u003e argument. \u003cp\u003eThis method delegates to the {@link RMIClassLoaderSpi#getClassLoader(String)} methodof the provider instance, passing \u003ccode\u003ecodebase\u003c/code\u003e as the argument. \u003cp\u003eIf there is a security manger, its \u003ccode\u003echeckPermission\u003c/code\u003e method will be invoked with a \u003ccode\u003eRuntimePermission(\"getClassLoader\")\u003c/code\u003e permission; this could result in a \u003ccode\u003eSecurityException\u003c/code\u003e. The provider implementation of this method may also perform further security checks to verify that the calling context has permission to connect to all of the URLs in the codebase URL path.\n * @param codebase the list of URLs (space-separated) from whichthe returned class loader will load classes from, or \u003ccode\u003enull\u003c/code\u003e\n * @return a class loader that loads classes from the given codebase URLpath\n * @throws MalformedURLException if \u003ccode\u003ecodebase\u003c/code\u003e isnon-\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \u003ccode\u003ecodebase\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to identify the class loader is invalid\n * @throws SecurityException if there is a security manager and theinvocation of its \u003ccode\u003echeckPermission\u003c/code\u003e method fails, or if the caller does not have permission to connect to all of the URLs in the codebase URL path\n * @since   1.3\n */\n","tf":{"freq":{"lpath":1,"lexcept":1,"perform":1,"fail":1,"given":2,"invalid":2,"spi":1,"verifi":1,"permiss":6,"argument":2,"except":2,"invok":1,"loader":10,"runtim":1,"provid":3,"instanc":1,"whichth":1,"malform":1,"separ":1,"contain":1,"will":2,"load":5,"caller":1,"result":1,"call":1,"iclass":1,"theinvoc":1,"connect":2,"link":2,"use":2,"identifi":1,"space":1,"codebas":9,"deleg":1,"path":3,"methodof":1,"isnon":1,"may":1,"check":3,"manger":1,"manag":1,"list":1,"pass":1,"specif":1,"secur":5,"classesfor":1,"string":3,"context":1,"method":5,"also":1},"maxFreq":10,"totalTerms":100},"loc":3}