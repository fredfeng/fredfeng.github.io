{"id":16257,"className":"java.awt.EventQueue","methodName":"invokeAndWait","signature":"\u003cjava.awt.EventQueue: void invokeAndWait(java.lang.Runnable)\u003e","javadoc":"/** \n * Causes \u003ccode\u003erunnable\u003c/code\u003e to have its \u003ccode\u003erun\u003c/code\u003e method called in the  {@link #isDispatchThread dispatch thread} of{@link Toolkit#getSystemEventQueue the system EventQueue}. This will happen after all pending events are processed. The call blocks until this has happened.  This method will throw an Error if called from the {@link #isDispatchThread event dispatcher thread}.\n * @param runnable  the \u003ccode\u003eRunnable\u003c/code\u003e whose \u003ccode\u003erun\u003c/code\u003emethod should be executed synchronously in the {@link #isDispatchThread event dispatch thread}of  {@link Toolkit#getSystemEventQueue the system EventQueue}\n * @exception InterruptedException  if any thread hasinterrupted this thread\n * @exception InvocationTargetException  if an throwable is thrownwhen running \u003ccode\u003erunnable\u003c/code\u003e\n * @see #invokeLater\n * @see Toolkit#getSystemEventQueue\n * @see #isDispatchThread\n * @since           1.2\n */\n","tf":{"freq":{"call":3,"queue":5,"link":5,"block":1,"wait":1,"run":3,"thrownwhen":1,"event":8,"thread":9,"toolkit":3,"dispatch":7,"happen":2,"runnabl":4,"pend":1,"except":4,"error":1,"whose":1,"later":1,"invok":2,"invoc":1,"interrupt":1,"process":1,"hasinterrupt":1,"system":5,"caus":1,"target":1,"will":2,"method":3,"throwabl":1,"execut":1},"maxFreq":9,"totalTerms":80},"loc":25}