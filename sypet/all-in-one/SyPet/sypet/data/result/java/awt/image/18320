{"id":18320,"className":"java.awt.image.IndexColorModel","methodName":"getDataElement","signature":"\u003cjava.awt.image.IndexColorModel: int getDataElement(int[],int)\u003e","javadoc":"/** \n * Returns a pixel value represented as an int in this \u003ccode\u003eColorModel\u003c/code\u003e given an array of unnormalized color/alpha components.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e.  Since \u003ccode\u003eColorModel\u003c/code\u003e can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType.\n * @param components an array of unnormalized color and alphacomponents\n * @param offset the index into \u003ccode\u003ecomponents\u003c/code\u003e at which tobegin retrieving the color and alpha components\n * @return an \u003ccode\u003eint\u003c/code\u003e pixel value in this\u003ccode\u003eColorModel\u003c/code\u003e corresponding to the specified components.\n * @throws ArrayIndexOutOfBoundsException ifthe \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e\n * @throws UnsupportedOperationException if \u003ccode\u003etransferType\u003c/code\u003eis invalid\n */\n","tf":{"freq":{"unsupport":2,"model":3,"pixel":2,"correspond":1,"unnorm":2,"data":1,"use":1,"type":2,"enough":2,"specifi":1,"invalid":1,"given":1,"oper":1,"alpha":4,"valu":2,"offset":3,"element":1,"transfer":2,"index":3,"except":4,"thrown":1,"ifth":1,"repres":1,"hold":2,"alphacompon":1,"tobegin":1,"compon":9,"color":8,"start":2,"retriev":1,"larg":2,"subclass":2,"method":1,"bound":2,"array":6},"maxFreq":9,"totalTerms":79},"loc":30}