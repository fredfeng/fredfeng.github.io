{"id":15628,"className":"java.awt.Toolkit","methodName":"getSystemSelection","signature":"\u003cjava.awt.Toolkit: java.awt.datatransfer.Clipboard getSystemSelection()\u003e","javadoc":"/** \n * Gets the singleton instance of the system selection as a \u003ccode\u003eClipboard\u003c/code\u003e object. This allows an application to read and modify the current, system-wide selection. \u003cp\u003e An application is responsible for updating the system selection whenever the user selects text, using either the mouse or the keyboard. Typically, this is implemented by installing a \u003ccode\u003eFocusListener\u003c/code\u003e on all \u003ccode\u003eComponent\u003c/code\u003es which support text selection, and, between \u003ccode\u003eFOCUS_GAINED\u003c/code\u003e and \u003ccode\u003eFOCUS_LOST\u003c/code\u003e events delivered to that \u003ccode\u003eComponent\u003c/code\u003e, updating the system selection \u003ccode\u003eClipboard\u003c/code\u003e when the selection changes inside the \u003ccode\u003eComponent\u003c/code\u003e. Properly updating the system selection ensures that a Java application will interact correctly with native applications and other Java applications running simultaneously on the system. Note that \u003ccode\u003ejava.awt.TextComponent\u003c/code\u003e and \u003ccode\u003ejavax.swing.text.JTextComponent\u003c/code\u003e already adhere to this policy. When using these classes, and their subclasses, developers need not write any additional code. \u003cp\u003e Some platforms do not support a system selection \u003ccode\u003eClipboard\u003c/code\u003e. On those platforms, this method will return \u003ccode\u003enull\u003c/code\u003e. In such a case, an application is absolved from its responsibility to update the system selection \u003ccode\u003eClipboard\u003c/code\u003e as described above. \u003cp\u003e Each actual implementation of this method should first check if there is a \u003ccode\u003eSecurityManager\u003c/code\u003e installed. If there is, the method should call the \u003ccode\u003eSecurityManager\u003c/code\u003e\u0027s \u003ccode\u003echeckSystemClipboardAccess\u003c/code\u003e method to ensure that client code has access the system selection. If the default implementation of \u003ccode\u003echeckSystemClipboardAccess\u003c/code\u003e is used (that is, if the method is not overridden), then this results in a call to the \u003ccode\u003eSecurityManager\u003c/code\u003e\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with an \u003ccode\u003eAWTPermission(\"accessClipboard\")\u003c/code\u003e permission.\n * @return the system selection as a \u003ccode\u003eClipboard\u003c/code\u003e, or\u003ccode\u003enull\u003c/code\u003e if the native platform does not support a system selection \u003ccode\u003eClipboard\u003c/code\u003e\n * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true\n * @see java.awt.datatransfer.Clipboard\n * @see java.awt.event.FocusListener\n * @see java.awt.event.FocusEvent#FOCUS_GAINED\n * @see java.awt.event.FocusEvent#FOCUS_LOST\n * @see TextComponent\n * @see javax.swing.text.JTextComponent\n * @see AWTPermission\n * @see GraphicsEnvironment#isHeadless\n * @since 1.4\n */\n","tf":{"freq":{"need":1,"client":1,"overridden":1,"simultan":1,"mous":1,"correct":1,"datatransf":1,"event":6,"javax":2,"permiss":2,"focus":4,"proper":1,"swing":2,"platform":3,"except":2,"text":6,"support":3,"respons":2,"select":14,"singleton":1,"environ":2,"describ":1,"wide":1,"polici":1,"headless":3,"instanc":1,"system":14,"awt":5,"updat":4,"will":2,"subclass":1,"result":1,"call":2,"graphic":2,"allow":1,"adher":1,"absolv":1,"typic":1,"use":3,"object":1,"run":1,"applic":6,"ensur":2,"write":1,"current":1,"tpermiss":2,"read":1,"develop":1,"listen":2,"note":1,"addit":1,"whenev":1,"keyboard":1,"check":4,"manag":3,"instal":2,"true":1,"access":4,"either":1,"secur":3,"compon":7,"jtext":2,"modifi":1,"deliv":1,"actual":1,"method":6,"insid":1,"java":7,"interact":1,"alreadi":1,"chang":1,"clipboard":10,"first":1,"user":1},"maxFreq":14,"totalTerms":183},"loc":10}