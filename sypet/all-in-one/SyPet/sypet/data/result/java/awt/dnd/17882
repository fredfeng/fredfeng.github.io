{"id":17882,"className":"java.awt.dnd.DragGestureEvent","methodName":"startDrag","signature":"\u003cjava.awt.dnd.DragGestureEvent: void startDrag(java.awt.Cursor,java.awt.datatransfer.Transferable)\u003e","javadoc":"/** \n * Starts the drag operation given the \u003ccode\u003eCursor\u003c/code\u003e for this drag operation and the \u003ccode\u003eTransferable\u003c/code\u003e representing the source data for this drag operation. \u003cbr\u003e If a \u003ccode\u003enull\u003c/code\u003e \u003ccode\u003eCursor\u003c/code\u003e is specified no exception will be thrown and default drag cursors will be used instead. \u003cbr\u003e If a \u003ccode\u003enull\u003c/code\u003e \u003ccode\u003eTransferable\u003c/code\u003e is specified \u003ccode\u003eNullPointerException\u003c/code\u003e will be thrown.\n * @param dragCursor     The initial {@code Cursor} for this drag operationor  {@code null} for the default cursor handling;see \u003ca href\u003d\"DragSourceContext.html#defaultCursor\"\u003eDragSourceContext\u003c/a\u003e for more details on the cursor handling mechanism during drag and drop\n * @param transferable The \u003ccode\u003eTransferable\u003c/code\u003e representing the sourcedata for this drag operation.\n * @throws InvalidDnDOperationException if the Drag and Dropsystem is unable to initiate a drag operation, or if the user attempts to start a drag while an existing drag operation is still executing.\n * @throws NullPointerException if the {@code Transferable} is {@code null}\n * @since 1.4\n */\n","tf":{"freq":{"attempt":1,"detail":1,"cursor":8,"drop":1,"data":1,"use":1,"specifi":2,"invalid":1,"given":1,"oper":6,"doper":1,"initi":2,"operationor":1,"exist":1,"href":1,"except":4,"transfer":5,"thrown":2,"repres":2,"drag":15,"still":1,"dropsystem":1,"handl":2,"unabl":1,"sourcedata":1,"start":3,"mechan":1,"will":3,"instead":1,"context":2,"pointer":2,"sourc":3,"html":1,"execut":1,"user":1},"maxFreq":15,"totalTerms":81},"loc":3}