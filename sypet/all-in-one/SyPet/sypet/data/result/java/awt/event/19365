{"id":19365,"className":"java.awt.event.InvocationEvent","methodName":"InvocationEvent","signature":"\u003cjava.awt.event.InvocationEvent: void InvocationEvent(java.lang.Object,java.lang.Runnable)\u003e","javadoc":"/** \n * Constructs an \u003ccode\u003eInvocationEvent\u003c/code\u003e with the specified source which will execute the runnable\u0027s \u003ccode\u003erun\u003c/code\u003e method when dispatched. \u003cp\u003eThis is a convenience constructor.  An invocation of the form \u003ctt\u003eInvocationEvent(source, runnable)\u003c/tt\u003e behaves in exactly the same way as the invocation of \u003ctt\u003e {@link #InvocationEvent(Object,Runnable,Object,boolean) InvocationEvent}(source, runnable, null, false)\u003c/tt\u003e. \u003cp\u003e This method throws an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if \u003ccode\u003esource\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @param source    The \u003ccode\u003eObject\u003c/code\u003e that originated the event\n * @param runnable  The \u003ccode\u003eRunnable\u003c/code\u003e whose \u003ccode\u003erun\u003c/code\u003emethod will be executed\n * @throws IllegalArgumentException if \u003ccode\u003esource\u003c/code\u003e is null\n * @see #getSource()\n * @see #InvocationEvent(Object,Runnable,Object,boolean)\n */\n","tf":{"freq":{"argument":2,"fals":1,"except":2,"form":1,"whose":1,"behav":1,"link":1,"origin":1,"way":1,"object":5,"run":2,"illeg":2,"invoc":8,"specifi":1,"event":7,"exact":1,"will":2,"sourc":7,"method":3,"dispatch":1,"construct":1,"execut":2,"runnabl":7,"conveni":1,"constructor":1},"maxFreq":8,"totalTerms":62},"loc":3}