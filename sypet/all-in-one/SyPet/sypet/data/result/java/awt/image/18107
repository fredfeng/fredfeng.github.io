{"id":18107,"className":"java.awt.image.BufferedImage","methodName":"getTile","signature":"\u003cjava.awt.image.BufferedImage: java.awt.image.Raster getTile(int,int)\u003e","javadoc":"/** \n * Returns tile (\u003ccode\u003etileX\u003c/code\u003e,\u0026nbsp;\u003ccode\u003etileY\u003c/code\u003e).  Note that \u003ccode\u003etileX\u003c/code\u003e and \u003ccode\u003etileY\u003c/code\u003e are indices into the tile array, not pixel locations.  The \u003ccode\u003eRaster\u003c/code\u003e that is returned is live, which means that it is updated if the image is changed.\n * @param tileX the x index of the requested tile in the tile array\n * @param tileY the y index of the requested tile in the tile array\n * @return a \u003ccode\u003eRaster\u003c/code\u003e that is the tile defined by thearguments \u003ccode\u003etileX\u003c/code\u003e and \u003ccode\u003etileY\u003c/code\u003e.\n * @exception \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if both\u003ccode\u003etileX\u003c/code\u003e and \u003ccode\u003etileY\u003c/code\u003e are not equal to 0\n */\n","tf":{"freq":{"defin":1,"except":2,"index":3,"locat":1,"theargument":1,"pixel":1,"equal":1,"imag":1,"raster":2,"indic":1,"updat":1,"request":2,"tile":18,"mean":1,"chang":1,"bound":1,"note":1,"nbsp":1,"array":4,"live":1},"maxFreq":18,"totalTerms":45},"loc":7}