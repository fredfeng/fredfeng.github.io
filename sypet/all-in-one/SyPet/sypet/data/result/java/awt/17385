{"id":17385,"className":"java.awt.GraphicsConfiguration","methodName":"createCompatibleImage","signature":"\u003cjava.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eBufferedImage\u003c/code\u003e that supports the specified transparency and has a data layout and color model compatible with this \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e.  This method has nothing to do with memory-mapping a device. The returned \u003ccode\u003eBufferedImage\u003c/code\u003e has a layout and color model that can be optimally blitted to a device with this \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e.\n * @param width the width of the returned \u003ccode\u003eBufferedImage\u003c/code\u003e\n * @param height the height of the returned \u003ccode\u003eBufferedImage\u003c/code\u003e\n * @param transparency the specified transparency mode\n * @return a \u003ccode\u003eBufferedImage\u003c/code\u003e whose data layout and colormodel is compatible with this \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e and also supports the specified transparency.\n * @throws IllegalArgumentException if the transparency is not a valid value\n * @see Transparency#OPAQUE\n * @see Transparency#BITMASK\n * @see Transparency#TRANSLUCENT\n */\n","tf":{"freq":{"valid":1,"graphic":3,"model":2,"memori":1,"data":2,"colormodel":1,"blit":1,"specifi":3,"mode":1,"buffer":5,"transpar":8,"height":2,"layout":3,"map":1,"noth":1,"valu":1,"argument":1,"except":1,"support":2,"optim":1,"creat":1,"whose":1,"width":2,"imag":6,"illeg":1,"configur":3,"color":2,"method":1,"devic":2,"also":1,"compat":3},"maxFreq":8,"totalTerms":64},"loc":13}