{"id":18050,"className":"java.awt.image.ConvolveOp","methodName":"filter","signature":"\u003cjava.awt.image.ConvolveOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)\u003e","javadoc":"/** \n * Performs a convolution on Rasters.  Each band of the source Raster will be convolved. The source and destination must have the same number of bands. If the destination Raster is null, a new Raster will be created. The IllegalArgumentException may be thrown if the source is the same as the destination.\n * @param src the source \u003ccode\u003eRaster\u003c/code\u003e to filter\n * @param dst the destination \u003ccode\u003eWritableRaster\u003c/code\u003e for thefiltered \u003ccode\u003esrc\u003c/code\u003e\n * @return the filtered \u003ccode\u003eWritableRaster\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003esrc\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @throws ImagingOpException if \u003ccode\u003esrc\u003c/code\u003e and \u003ccode\u003edst\u003c/code\u003edo not have the same number of bands\n * @throws ImagingOpException if \u003ccode\u003esrc\u003c/code\u003e cannot be filtered\n * @throws IllegalArgumentException if \u003ccode\u003esrc\u003c/code\u003e equals\u003ccode\u003edst\u003c/code\u003e\n */\n","tf":{"freq":{"argument":2,"thrown":1,"may":1,"except":5,"creat":1,"equal":1,"writabl":2,"perform":1,"number":2,"dst":3,"imag":2,"illeg":2,"must":1,"convolut":1,"raster":7,"band":3,"convolv":1,"will":2,"pointer":1,"thefilt":1,"sourc":4,"src":6,"filter":4,"destin":4},"maxFreq":7,"totalTerms":58},"loc":19}