{"id":17387,"className":"java.awt.GraphicsConfiguration","methodName":"createCompatibleVolatileImage","signature":"\u003cjava.awt.GraphicsConfiguration: java.awt.image.VolatileImage createCompatibleVolatileImage(int,int,int)\u003e","javadoc":"/** \n * Returns a  {@link VolatileImage} with a data layout and color modelcompatible with this \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e. The returned \u003ccode\u003eVolatileImage\u003c/code\u003e may have data that is stored optimally for the underlying graphics device and may therefore benefit from platform-specific rendering acceleration.\n * @param width the width of the returned \u003ccode\u003eVolatileImage\u003c/code\u003e\n * @param height the height of the returned \u003ccode\u003eVolatileImage\u003c/code\u003e\n * @param transparency the specified transparency mode\n * @return a \u003ccode\u003eVolatileImage\u003c/code\u003e whose data layout and colormodel is compatible with this \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e.\n * @throws IllegalArgumentException if the transparency is not a valid value\n * @see Transparency#OPAQUE\n * @see Transparency#BITMASK\n * @see Transparency#TRANSLUCENT\n * @see Component#createVolatileImage(int,int)\n * @since 1.5\n */\n","tf":{"freq":{"valid":1,"graphic":3,"store":1,"benefit":1,"link":1,"data":3,"colormodel":1,"therefor":1,"mode":1,"specifi":1,"transpar":6,"height":2,"layout":2,"valu":1,"argument":1,"platform":1,"except":1,"may":2,"optim":1,"whose":1,"creat":2,"width":2,"imag":7,"illeg":1,"render":1,"configur":2,"specif":1,"acceler":1,"compon":1,"color":1,"modelcompat":1,"devic":1,"compat":2},"maxFreq":7,"totalTerms":55},"loc":10}