{"id":16286,"className":"java.awt.Font","methodName":"Font","signature":"\u003cjava.awt.Font: void Font(java.lang.String,int,int)\u003e","javadoc":"/** \n * Creates a new \u003ccode\u003eFont\u003c/code\u003e from the specified name, style and point size. \u003cp\u003e The font name can be a font face name or a font family name. It is used together with the style to find an appropriate font face. When a font family name is specified, the style argument is used to select the most appropriate face from the family. When a font face name is specified, the face\u0027s style and the style argument are merged to locate the best matching font from the same family. For example if face name \"Arial Bold\" is specified with style \u003ccode\u003eFont.ITALIC\u003c/code\u003e, the font system looks for a face in the \"Arial\" family that is bold and italic, and may associate the font instance with the physical font face \"Arial Bold Italic\". The style argument is merged with the specified face\u0027s style, not added or subtracted. This means, specifying a bold face and a bold style does not double-embolden the font, and specifying a bold face and a plain style does not lighten the font. \u003cp\u003e If no face for the requested style can be found, the font system may apply algorithmic styling to achieve the desired style. For example, if \u003ccode\u003eITALIC\u003c/code\u003e is requested, but no italic face is available, glyphs from the plain face may be algorithmically obliqued (slanted). \u003cp\u003e Font name lookup is case insensitive, using the case folding rules of the US locale. \u003cp\u003e If the \u003ccode\u003ename\u003c/code\u003e parameter represents something other than a logical font, i.e. is interpreted as a physical font face or family, and this cannot be mapped by the implementation to a physical font or a compatible alternative, then the font system will map the Font instance to \"Dialog\", such that for example, the family as reported by  {@link #getFamily() getFamily} will be \"Dialog\".\u003cp\u003e\n * @param name the font name.  This can be a font face name or a fontfamily name, and may represent either a logical font or a physical font found in this  {@code GraphicsEnvironment}. The family names for logical fonts are: Dialog, DialogInput, Monospaced, Serif, or SansSerif. Pre-defined String constants exist for all of these names, for example,  {@code DIALOG}. If  {@code name} is{@code null}, the \u003cem\u003elogical font name\u003c/em\u003e of the new {@code Font} as returned by {@code getName()} is set tothe name \"Default\".\n * @param style the style constant for the {@code Font}The style argument is an integer bitmask that may be  {@code PLAIN}, or a bitwise union of  {@code BOLD} and/or{@code ITALIC} (for example, {@code ITALIC} or {@code BOLD|ITALIC}). If the style argument does not conform to one of the expected integer bitmasks then the style is set to  {@code PLAIN}.\n * @param size the point size of the {@code Font}\n * @see GraphicsEnvironment#getAllFonts\n * @see GraphicsEnvironment#getAvailableFontFamilyNames\n * @since JDK1.0\n */\n","tf":{"freq":{"bitwis":1,"toth":1,"desir":1,"lookup":1,"arial":3,"specifi":7,"expect":1,"bold":6,"altern":1,"request":2,"report":1,"monospac":1,"argument":5,"creat":1,"famili":11,"select":1,"font":33,"glyph":1,"environ":3,"avail":2,"togeth":1,"logic":4,"size":3,"instanc":2,"input":1,"system":3,"appli":1,"san":1,"bitmask":2,"lighten":1,"will":2,"match":1,"merg":2,"fontfamili":1,"compat":1,"defin":1,"face":16,"graphic":3,"one":1,"link":1,"interpret":1,"use":3,"someth":1,"algorithm":2,"style":18,"associ":1,"obliqu":1,"union":1,"rule":1,"name":20,"map":2,"best":1,"mean":1,"dialog":4,"plain":2,"exist":1,"find":1,"look":1,"locat":1,"may":5,"constant":2,"embolden":1,"repres":2,"physic":4,"paramet":1,"ital":3,"slant":1,"fold":1,"achiev":1,"serif":2,"point":2,"subtract":1,"either":1,"insensit":1,"conform":1,"pre":1,"appropri":2,"string":1,"exampl":5,"ad":1,"local":1,"integ":2,"found":2},"maxFreq":33,"totalTerms":238},"loc":6}