{"id":18632,"className":"java.awt.image.ComponentSampleModel","methodName":"setDataElements","signature":"\u003cjava.awt.image.ComponentSampleModel: void setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\u003e","javadoc":"/** \n * Sets the data for a single pixel in the specified \u003ccode\u003eDataBuffer\u003c/code\u003e from a primitive array of type \u003ccode\u003eTransferType\u003c/code\u003e.  For a \u003ccode\u003eComponentSampleModel\u003c/code\u003e, this is the same as the data type, and samples are transferred one per array element. \u003cp\u003e The following code illustrates transferring data for one pixel from \u003ccode\u003eDataBuffer\u003c/code\u003e \u003ccode\u003edb1\u003c/code\u003e, whose storage layout is described by \u003ccode\u003eComponentSampleModel\u003c/code\u003e \u003ccode\u003ecsm1\u003c/code\u003e, to \u003ccode\u003eDataBuffer\u003c/code\u003e \u003ccode\u003edb2\u003c/code\u003e, whose storage layout is described by \u003ccode\u003eComponentSampleModel\u003c/code\u003e \u003ccode\u003ecsm2\u003c/code\u003e. The transfer is usually more efficient than using \u003ccode\u003egetPixel\u003c/code\u003e and \u003ccode\u003esetPixel\u003c/code\u003e. \u003cpre\u003e ComponentSampleModel csm1, csm2; DataBufferInt db1, db2; csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1), db2); \u003c/pre\u003e Using \u003ccode\u003egetDataElements\u003c/code\u003e and \u003ccode\u003esetDataElements\u003c/code\u003e to transfer between two \u003ccode\u003eDataBuffer/SampleModel\u003c/code\u003e pairs is legitimate if the \u003ccode\u003eSampleModel\u003c/code\u003e objects have the same number of bands, corresponding bands have the same number of bits per sample, and the \u003ccode\u003eTransferType\u003c/code\u003es are the same. \u003cp\u003e A \u003ccode\u003eClassCastException\u003c/code\u003e is thrown if \u003ccode\u003eobj\u003c/code\u003e is not a primitive array of type \u003ccode\u003eTransferType\u003c/code\u003e. An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e might be thrown if the coordinates are not in bounds, or if \u003ccode\u003eobj\u003c/code\u003e is not large enough to hold the pixel data.\n * @param x         the X coordinate of the pixel location\n * @param y         the Y coordinate of the pixel location\n * @param obj       a primitive array containing pixel data\n * @param data      the DataBuffer containing the image data\n * @see #getDataElements(int,int,Object,DataBuffer)\n */\n","tf":{"freq":{"might":1,"primit":3,"model":6,"legitim":1,"pair":1,"pixel":8,"singl":1,"correspond":1,"one":2,"data":20,"use":2,"object":2,"enough":1,"type":6,"specifi":1,"buffer":7,"band":2,"layout":2,"effici":1,"follow":1,"coordin":3,"usual":1,"element":7,"locat":2,"index":1,"thrown":2,"except":2,"transfer":7,"whose":2,"hold":1,"describ":2,"number":2,"imag":1,"storag":2,"bit":1,"two":1,"cast":1,"compon":4,"per":2,"larg":1,"pre":2,"contain":2,"csm":6,"obj":3,"bound":2,"sampl":8,"illustr":1,"array":5},"maxFreq":20,"totalTerms":143},"loc":65}