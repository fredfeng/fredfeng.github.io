{"id":16470,"className":"java.awt.BorderLayout","methodName":"layoutContainer","signature":"\u003cjava.awt.BorderLayout: void layoutContainer(java.awt.Container)\u003e","javadoc":"/** \n * Lays out the container argument using this border layout. \u003cp\u003e This method actually reshapes the components in the specified container in order to satisfy the constraints of this \u003ccode\u003eBorderLayout\u003c/code\u003e object. The \u003ccode\u003eNORTH\u003c/code\u003e and \u003ccode\u003eSOUTH\u003c/code\u003e components, if any, are placed at the top and bottom of the container, respectively. The \u003ccode\u003eWEST\u003c/code\u003e and \u003ccode\u003eEAST\u003c/code\u003e components are then placed on the left and right, respectively. Finally, the \u003ccode\u003eCENTER\u003c/code\u003e object is placed in any remaining space in the middle. \u003cp\u003e Most applications do not call this method directly. This method is called when a container calls its \u003ccode\u003edoLayout\u003c/code\u003e method.\n * @param target   the container in which to do the layout.\n * @see java.awt.Container\n * @see java.awt.Container#doLayout()\n */\n","tf":{"freq":{"call":3,"use":1,"constraint":1,"reshap":1,"object":2,"space":1,"applic":1,"specifi":1,"order":1,"layout":6,"left":1,"middl":1,"border":2,"place":3,"right":1,"top":1,"direct":1,"argument":1,"lay":1,"awt":2,"compon":3,"remain":1,"contain":8,"satisfi":1,"target":1,"bottom":1,"actual":1,"java":2,"method":4,"respect":2},"maxFreq":8,"totalTerms":56},"loc":40}