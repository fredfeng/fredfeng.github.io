{"id":18650,"className":"java.awt.image.PackedColorModel","methodName":"getMask","signature":"\u003cjava.awt.image.PackedColorModel: int getMask(int)\u003e","javadoc":"/** \n * Returns the mask indicating which bits in a pixel contain the specified color/alpha sample.  For color samples, \u003ccode\u003eindex\u003c/code\u003e corresponds to the placement of color sample names in the color space.  Thus, an \u003ccode\u003eindex\u003c/code\u003e equal to 0 for a CMYK ColorSpace would correspond to Cyan and an \u003ccode\u003eindex\u003c/code\u003e equal to 1 would correspond to Magenta.  If there is alpha, the alpha \u003ccode\u003eindex\u003c/code\u003e would be: \u003cpre\u003e alphaIndex \u003d numComponents() - 1; \u003c/pre\u003e\n * @param index the specified color or alpha sample\n * @return the mask, which indicates which bits of the \u003ccode\u003eint\u003c/code\u003epixel representation contain the color or alpha sample specified by \u003ccode\u003eindex\u003c/code\u003e.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eindex\u003c/code\u003e isgreater than the number of components minus 1 in this \u003ccode\u003ePackedColorModel\u003c/code\u003e or if \u003ccode\u003eindex\u003c/code\u003e is less than zero\n */\n","tf":{"freq":{"placement":1,"model":1,"pixel":2,"correspond":3,"mask":3,"pack":1,"zero":1,"space":2,"specifi":3,"indic":2,"alpha":6,"name":1,"less":1,"except":1,"index":10,"minus":1,"thus":1,"number":1,"equal":2,"isgreat":1,"represent":1,"bit":2,"num":1,"cyan":1,"magenta":1,"compon":2,"color":8,"pre":2,"contain":2,"sampl":5,"bound":1,"array":1},"maxFreq":10,"totalTerms":71},"loc":3}