{"id":16121,"className":"java.awt.Image","methodName":"getScaledInstance","signature":"\u003cjava.awt.Image: java.awt.Image getScaledInstance(int,int,int)\u003e","javadoc":"/** \n * Creates a scaled version of this image. A new \u003ccode\u003eImage\u003c/code\u003e object is returned which will render the image at the specified \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e by default.  The new \u003ccode\u003eImage\u003c/code\u003e object may be loaded asynchronously even if the original source image has already been loaded completely. \u003cp\u003e If either \u003ccode\u003ewidth\u003c/code\u003e or \u003ccode\u003eheight\u003c/code\u003e is a negative number then a value is substituted to maintain the aspect ratio of the original image dimensions. If both \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e are negative, then the original image dimensions are used.\n * @param width the width to which to scale the image.\n * @param height the height to which to scale the image.\n * @param hints flags to indicate the type of algorithm to usefor image resampling.\n * @return     a scaled version of the image.\n * @exception IllegalArgumentException if \u003ccode\u003ewidth\u003c/code\u003eor \u003ccode\u003eheight\u003c/code\u003e is zero.\n * @see java.awt.Image#SCALE_DEFAULT\n * @see java.awt.Image#SCALE_FAST\n * @see java.awt.Image#SCALE_SMOOTH\n * @see java.awt.Image#SCALE_REPLICATE\n * @see java.awt.Image#SCALE_AREA_AVERAGING\n * @since      JDK1.1\n */\n","tf":{"freq":{"scale":5,"asynchron":1,"maintain":1,"resampl":1,"use":1,"object":2,"zero":1,"type":1,"substitut":1,"algorithm":1,"specifi":1,"version":2,"height":6,"indic":1,"valu":1,"usefor":1,"complet":1,"argument":1,"except":2,"may":1,"creat":1,"width":6,"origin":3,"hint":1,"number":1,"dimens":2,"imag":16,"illeg":1,"render":1,"instanc":1,"awt":5,"either":1,"flag":1,"aspect":1,"ratio":1,"will":1,"java":5,"load":2,"even":1,"sourc":1,"alreadi":1,"negat":2},"maxFreq":16,"totalTerms":87},"loc":11}