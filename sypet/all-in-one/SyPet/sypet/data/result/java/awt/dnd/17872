{"id":17872,"className":"java.awt.dnd.DragGestureEvent","methodName":"DragGestureEvent","signature":"\u003cjava.awt.dnd.DragGestureEvent: void DragGestureEvent(java.awt.dnd.DragGestureRecognizer,int,java.awt.Point,java.util.List)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eDragGestureEvent\u003c/code\u003e object given by the \u003ccode\u003eDragGestureRecognizer\u003c/code\u003e instance firing this event, an  {@code act} parameter representingthe user\u0027s preferred action, an  {@code ori} parameterindicating the origin of the drag, and a  {@code List} ofevents that comprise the gesture( {@code evs} parameter).\u003cP\u003e\n * @param dgr The \u003ccode\u003eDragGestureRecognizer\u003c/code\u003e firing this event\n * @param act The user\u0027s preferred action.For information on allowable values, see the class description for  {@link DragGestureEvent}\n * @param ori The origin of the drag\n * @param evs The \u003ccode\u003eList\u003c/code\u003e of events that comprise the gesture\u003cP\u003e\n * @throws IllegalArgumentException if any parameter equals {@code null}\n * @throws IllegalArgumentException if the act parameter does not comply withthe values given in the class description for  {@link DragGestureEvent}\n * @see java.awt.dnd.DnDConstants\n */\n","tf":{"freq":{"allow":1,"link":2,"compli":1,"object":1,"ori":2,"compris":2,"given":2,"event":7,"dnd":1,"action":2,"valu":2,"dgr":1,"dconstant":1,"recogn":2,"gestur":8,"argument":2,"except":2,"ev":2,"drag":8,"descript":2,"paramet":4,"origin":2,"equal":1,"list":2,"illeg":2,"fire":2,"instanc":1,"representingth":1,"inform":1,"awt":1,"withth":1,"ofev":1,"parameterind":1,"java":1,"construct":1,"act":3,"prefer":2,"user":2},"maxFreq":8,"totalTerms":80},"loc":22}