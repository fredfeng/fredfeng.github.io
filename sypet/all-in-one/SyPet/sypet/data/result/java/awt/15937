{"id":15937,"className":"java.awt.Window","methodName":"Window","signature":"\u003cjava.awt.Window: void Window(java.awt.Window)\u003e","javadoc":"/** \n * Constructs a new, initially invisible window with the specified \u003ccode\u003eWindow\u003c/code\u003e as its owner. This window will not be focusable unless its nearest owning \u003ccode\u003eFrame\u003c/code\u003e or \u003ccode\u003eDialog\u003c/code\u003e is showing on the screen. \u003cp\u003e If there is a security manager, this method first calls the security manager\u0027s \u003ccode\u003echeckTopLevelWindow\u003c/code\u003e method with \u003ccode\u003ethis\u003c/code\u003e as its argument to determine whether or not the window must be displayed with a warning banner.\n * @param owner the \u003ccode\u003eWindow\u003c/code\u003e to act as owner or\u003ccode\u003enull\u003c/code\u003e if this window has no owner\n * @exception IllegalArgumentException if the \u003ccode\u003eowner\u003c/code\u003e\u0027s\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e is not from a screen device\n * @exception HeadlessException when\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e\n * @see java.awt.GraphicsEnvironment#isHeadless\n * @see java.lang.SecurityManager#checkTopLevelWindow\n * @see #isShowing\n * @since     1.2\n */\n","tf":{"freq":{"warn":1,"call":1,"graphic":3,"show":2,"lang":1,"must":1,"whether":1,"specifi":1,"level":2,"unless":1,"focus":1,"initi":1,"dialog":1,"banner":1,"top":2,"argument":2,"screen":2,"except":4,"check":2,"manag":3,"invis":1,"environ":2,"true":1,"display":1,"headless":3,"illeg":1,"nearest":1,"awt":1,"configur":1,"frame":1,"secur":3,"window":9,"determin":1,"will":1,"owner":5,"java":2,"method":2,"devic":1,"construct":1,"act":1,"first":1},"maxFreq":9,"totalTerms":73},"loc":5}