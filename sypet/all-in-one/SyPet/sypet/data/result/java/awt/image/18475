{"id":18475,"className":"java.awt.image.DirectColorModel","methodName":"getComponents","signature":"\u003cjava.awt.image.DirectColorModel: int[] getComponents(java.lang.Object,int[],int)\u003e","javadoc":"/** \n * Returns an array of unnormalized color/alpha components given a pixel in this \u003ccode\u003eColorModel\u003c/code\u003e.  The pixel value is specified by an array of data elements of type \u003ccode\u003etransferType\u003c/code\u003e passed in as an object reference.  If \u003ccode\u003epixel\u003c/code\u003e is not a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if \u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e.  If the \u003ccode\u003ecomponents\u003c/code\u003e array is \u003ccode\u003enull\u003c/code\u003e, a new array is allocated.  The \u003ccode\u003ecomponents\u003c/code\u003e array is returned. Color/alpha components are stored in the \u003ccode\u003ecomponents\u003c/code\u003e array starting at \u003ccode\u003eoffset\u003c/code\u003e, even if the array is allocated by this method.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003ecomponents\u003c/code\u003e array is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components, starting at \u003ccode\u003eoffset\u003c/code\u003e. Since \u003ccode\u003eDirectColorModel\u003c/code\u003e can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported \u003ccode\u003etransferType\u003c/code\u003e.\n * @param pixel the specified pixel\n * @param components the array to receive the color and alphacomponents of the specified pixel\n * @param offset the offset into the \u003ccode\u003ecomponents\u003c/code\u003e array atwhich to start storing the color and alpha components\n * @return an array containing the color and alpha components of thespecified pixel starting at the specified offset.\n * @exception ClassCastException if \u003ccode\u003epixel\u003c/code\u003eis not a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e\n * @exception ArrayIndexOutOfBoundsException if\u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e, or if \u003ccode\u003ecomponents\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components, starting at \u003ccode\u003eoffset\u003c/code\u003e\n * @exception UnsupportedOperationException if this\u003ccode\u003etransferType\u003c/code\u003e is not supported by this color model\n */\n","tf":{"freq":{"primit":2,"unsupport":2,"model":5,"store":2,"pixel":12,"data":1,"unnorm":1,"use":1,"object":1,"enough":4,"type":8,"specifi":4,"given":1,"oper":1,"refer":1,"alpha":6,"thespecifi":1,"valu":3,"offset":6,"direct":1,"element":1,"transfer":5,"except":10,"thrown":3,"index":3,"support":1,"hold":4,"receiv":1,"alphacompon":1,"pass":1,"compon":14,"cast":2,"start":5,"color":12,"larg":4,"contain":1,"subclass":2,"atwhich":1,"method":2,"even":1,"bound":3,"alloc":2,"array":16},"maxFreq":16,"totalTerms":158},"loc":21}