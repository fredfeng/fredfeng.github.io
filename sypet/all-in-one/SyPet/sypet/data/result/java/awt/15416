{"id":15416,"className":"java.awt.AWTKeyStroke","methodName":"getAWTKeyStroke","signature":"\u003cjava.awt.AWTKeyStroke: java.awt.AWTKeyStroke getAWTKeyStroke(java.lang.String)\u003e","javadoc":"/** \n * Parses a string and returns an \u003ccode\u003eAWTKeyStroke\u003c/code\u003e. The string must have the following syntax: \u003cpre\u003e \u0026lt;modifiers\u0026gt;* (\u0026lt;typedID\u0026gt; | \u0026lt;pressedReleasedID\u0026gt;) modifiers :\u003d shift | control | ctrl | meta | alt | altGraph typedID :\u003d typed \u0026lt;typedKey\u0026gt; typedKey :\u003d string of length 1 giving Unicode character. pressedReleasedID :\u003d (pressed | released) key key :\u003d KeyEvent key code name, i.e. the name following \"VK_\". \u003c/pre\u003e If typed, pressed or released is not specified, pressed is assumed. Here are some examples: \u003cpre\u003e \"INSERT\" \u003d\u003e getAWTKeyStroke(KeyEvent.VK_INSERT, 0); \"control DELETE\" \u003d\u003e getAWTKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK); \"alt shift X\" \u003d\u003e getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK); \"alt shift released X\" \u003d\u003e getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true); \"typed a\" \u003d\u003e getAWTKeyStroke(\u0027a\u0027); \u003c/pre\u003e\n * @param s a String formatted as described above\n * @return an \u003ccode\u003eAWTKeyStroke\u003c/code\u003e object for that String\n * @throws IllegalArgumentException if \u003ccode\u003es\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e,or is formatted incorrectly\n */\n","tf":{"freq":{"press":5,"give":1,"object":1,"type":7,"ctrl":1,"must":1,"meta":1,"specifi":1,"stroke":8,"graph":1,"releas":5,"alt":4,"event":10,"name":2,"length":1,"tkey":8,"incorrect":1,"key":10,"follow":2,"argument":1,"control":2,"except":1,"assum":1,"charact":1,"describ":1,"true":1,"format":2,"illeg":1,"input":5,"syntax":1,"pre":4,"string":5,"exampl":1,"modifi":2,"unicod":1,"pars":1,"shift":3},"maxFreq":10,"totalTerms":104},"loc":94}