{"id":18371,"className":"java.awt.image.ComponentColorModel","methodName":"getNormalizedComponents","signature":"\u003cjava.awt.image.ComponentColorModel: float[] getNormalizedComponents(java.lang.Object,float[],int)\u003e","javadoc":"/** \n * Returns an array of all of the color/alpha components in normalized form, given a pixel in this \u003ccode\u003eColorModel\u003c/code\u003e.  The pixel value is specified by an array of data elements of type transferType passed in as an object reference.  If pixel is not a primitive array of type transferType, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown. An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if \u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e. Normalized components are float values between a per component minimum and maximum specified by the \u003ccode\u003eColorSpace\u003c/code\u003e object for this \u003ccode\u003eColorModel\u003c/code\u003e.  If the \u003ccode\u003enormComponents\u003c/code\u003e array is \u003ccode\u003enull\u003c/code\u003e, a new array will be allocated.  The \u003ccode\u003enormComponents\u003c/code\u003e array will be returned.  Color/alpha components are stored in the \u003ccode\u003enormComponents\u003c/code\u003e array starting at \u003ccode\u003enormOffset\u003c/code\u003e (even if the array is allocated by this method).  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003enormComponents\u003c/code\u003e array is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components (starting at \u003ccode\u003enormOffset\u003c/code\u003e). \u003cp\u003e This method must be overrridden by a subclass if that subclass is designed to translate pixel sample values to color component values in a non-default way.  The default translations implemented by this class is described in the class comments.  Any subclass implementing a non-default translation must follow the constraints on allowable translations defined there.\n * @param pixel the specified pixel\n * @param normComponents an array to receive the normalized components\n * @param normOffset the offset into the \u003ccode\u003enormComponents\u003c/code\u003earray at which to start storing normalized components\n * @return an array containing normalized color and alphacomponents.\n * @throws ClassCastException if \u003ccode\u003epixel\u003c/code\u003e is not a primitivearray of type transferType\n * @throws ArrayIndexOutOfBoundsException if\u003ccode\u003enormComponents\u003c/code\u003e is not large enough to hold all color and alpha components starting at \u003ccode\u003enormOffset\u003c/code\u003e\n * @throws ArrayIndexOutOfBoundsException if\u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e.\n * @since 1.4\n */\n","tf":{"freq":{"store":2,"normal":6,"type":6,"enough":4,"must":2,"specifi":3,"given":1,"norm":11,"refer":1,"follow":1,"element":1,"index":4,"thrown":3,"except":6,"transfer":3,"form":1,"hold":4,"describ":1,"non":2,"cast":2,"start":4,"maximum":1,"contain":1,"will":2,"subclass":3,"even":1,"comment":1,"array":16,"alloc":2,"defin":1,"primit":1,"model":4,"allow":1,"pixel":11,"minimum":1,"data":1,"constraint":1,"way":1,"object":2,"space":1,"primitivearray":1,"alpha":4,"valu":6,"overrridden":1,"offset":5,"receiv":1,"translat":4,"alphacompon":1,"pass":1,"compon":17,"per":1,"color":11,"larg":4,"method":2,"bound":4,"design":1,"sampl":1},"maxFreq":17,"totalTerms":185},"loc":81}