{"id":15860,"className":"java.awt.CompositeContext","methodName":"compose","signature":"\u003cjava.awt.CompositeContext: void compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)\u003e","javadoc":"/** \n * Composes the two source  {@link Raster} objects andplaces the result in the destination {@link WritableRaster}.  Note that the destination can be the same object as either the first or second source. Note that \u003ccode\u003edstIn\u003c/code\u003e and \u003ccode\u003edstOut\u003c/code\u003e must be compatible with the \u003ccode\u003edstColorModel\u003c/code\u003e passed to the {@link Composite#createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints) createContext}method of the \u003ccode\u003eComposite\u003c/code\u003e interface.\n * @param src the first source for the compositing operation\n * @param dstIn the second source for the compositing operation\n * @param dstOut the \u003ccode\u003eWritableRaster\u003c/code\u003e into which theresult of the operation is stored\n * @see Composite\n */\n","tf":{"freq":{"result":1,"model":3,"store":1,"second":2,"link":3,"object":2,"dst":5,"must":1,"oper":3,"src":1,"note":2,"composit":5,"creat":2,"compos":2,"theresult":1,"hint":1,"writabl":2,"imag":2,"render":1,"pass":1,"raster":3,"two":1,"awt":3,"either":1,"color":3,"andplac":1,"context":2,"method":1,"sourc":4,"java":3,"first":2,"destin":2,"compat":1},"maxFreq":5,"totalTerms":68},"loc":0}