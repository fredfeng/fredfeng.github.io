{"id":17612,"className":"java.awt.SecondaryLoop","methodName":"enter","signature":"\u003cjava.awt.SecondaryLoop: boolean enter()\u003e","javadoc":"/** \n * Blocks the execution of the current thread and enters a new secondary event loop on the event dispatch thread. \u003cp\u003e This method can be called by any thread including the event dispatch thread. This thread will be blocked until the  {@link #exit} method is called or the loop is terminated. A newsecondary loop will be created on the event dispatch thread for dispatching events in either case. \u003cp\u003e This method can only start one new event loop at a time per object. If a secondary event loop has already been started by this object and is currently still running, this method returns  {@code false} to indicate that it was not successfulin starting a new event loop. Otherwise, this method blocks the calling thread and later returns  {@code true} when thenew event loop is terminated. At such time, this object can again be used to start another new event loop.\n * @return {@code true} after termination of the secondary loop,if the secondary loop was started by this call, {@code false} otherwise\n */\n","tf":{"freq":{"otherwis":2,"fals":2,"call":4,"thenew":1,"newsecondari":1,"link":1,"one":1,"use":1,"block":3,"anoth":1,"object":3,"run":1,"time":2,"indic":1,"event":10,"thread":7,"loop":10,"current":2,"secondari":4,"dispatch":4,"includ":1,"creat":1,"later":1,"successfulin":1,"true":2,"still":1,"enter":2,"exit":1,"termin":3,"either":1,"per":1,"start":5,"will":2,"alreadi":1,"method":5,"execut":1},"maxFreq":10,"totalTerms":90},"loc":0}