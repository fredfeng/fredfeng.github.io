{"id":18200,"className":"java.awt.image.ColorModel","methodName":"getNormalizedComponents","signature":"\u003cjava.awt.image.ColorModel: float[] getNormalizedComponents(int[],int,float[],int)\u003e","javadoc":"/** \n * Returns an array of all of the color/alpha components in normalized form, given an unnormalized component array.  Unnormalized components are unsigned integral values between 0 and 2\u003csup\u003en\u003c/sup\u003e - 1, where n is the number of bits for a particular component.  Normalized components are float values between a per component minimum and maximum specified by the \u003ccode\u003eColorSpace\u003c/code\u003e object for this \u003ccode\u003eColorModel\u003c/code\u003e.  An \u003ccode\u003eIllegalArgumentException\u003c/code\u003e will be thrown if color component values for this \u003ccode\u003eColorModel\u003c/code\u003e are not conveniently representable in the unnormalized form.  If the \u003ccode\u003enormComponents\u003c/code\u003e array is \u003ccode\u003enull\u003c/code\u003e, a new array will be allocated.  The \u003ccode\u003enormComponents\u003c/code\u003e array will be returned.  Color/alpha components are stored in the \u003ccode\u003enormComponents\u003c/code\u003e array starting at \u003ccode\u003enormOffset\u003c/code\u003e (even if the array is allocated by this method).  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003enormComponents\u003c/code\u003e array is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components (starting at \u003ccode\u003enormOffset\u003c/code\u003e).  An \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown if the \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e. \u003cp\u003e Since \u003ccode\u003eColorModel\u003c/code\u003e is an abstract class, any instance is an instance of a subclass.  The default implementation of this method in this abstract class assumes that component values for this class are conveniently representable in the unnormalized form.  Therefore, subclasses which may have instances which do not support the unnormalized form must override this method.\n * @param components an array containing unnormalized components\n * @param offset the offset into the \u003ccode\u003ecomponents\u003c/code\u003e array atwhich to start retrieving unnormalized components\n * @param normComponents an array that receives the normalized components\n * @param normOffset the index into \u003ccode\u003enormComponents\u003c/code\u003e atwhich to begin storing normalized components\n * @return an array containing normalized color and alphacomponents.\n * @throws IllegalArgumentException If the component values for this\u003cCODE\u003eColorModel\u003c/CODE\u003e are not conveniently representable in the unnormalized form.\n * @throws UnsupportedOperationException if theconstructor of this \u003ccode\u003eColorModel\u003c/code\u003e called the \u003ccode\u003esuper(bits)\u003c/code\u003e constructor, but did not override this method.  See the constructor, {@link #ColorModel(int)}.\n * @throws UnsupportedOperationException if this method is unableto determine the number of bits per component\n */\n","tf":{"freq":{"unsupport":2,"integr":1,"store":2,"normal":6,"unnorm":8,"particular":1,"enough":2,"must":1,"specifi":1,"given":1,"norm":9,"oper":2,"argument":3,"except":6,"thrown":3,"index":2,"support":1,"form":5,"hold":2,"number":2,"instanc":3,"bit":3,"start":4,"maximum":1,"unsign":1,"determin":1,"contain":2,"will":3,"subclass":2,"atwhich":2,"even":1,"array":14,"alloc":2,"call":1,"model":6,"minimum":1,"link":1,"theconstructor":1,"object":1,"therefor":1,"space":1,"sup":2,"alpha":4,"valu":5,"offset":6,"unableto":1,"conveni":3,"constructor":2,"may":1,"assum":1,"receiv":1,"illeg":3,"alphacompon":1,"begin":1,"represent":3,"per":2,"compon":27,"color":13,"retriev":1,"larg":2,"method":5,"bound":1},"maxFreq":27,"totalTerms":197},"loc":50}