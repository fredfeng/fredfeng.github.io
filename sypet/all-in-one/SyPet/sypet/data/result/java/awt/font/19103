{"id":19103,"className":"java.awt.font.TextLayout","methodName":"getLogicalHighlightShape","signature":"\u003cjava.awt.font.TextLayout: java.awt.Shape getLogicalHighlightShape(int,int)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eShape\u003c/code\u003e enclosing the logical selection in the specified range, extended to the natural bounds of this \u003ccode\u003eTextLayout\u003c/code\u003e.  This method is a convenience overload of \u003ccode\u003egetLogicalHighlightShape\u003c/code\u003e that uses the natural bounds of this \u003ccode\u003eTextLayout\u003c/code\u003e.\n * @param firstEndpoint an endpoint in the range of characters to select\n * @param secondEndpoint the other endpoint of the range of charactersto select. Can be less than \u003ccode\u003efirstEndpoint\u003c/code\u003e.  The range includes the character at min(firstEndpoint, secondEndpoint), but excludes max(firstEndpoint, secondEndpoint).\n * @return a \u003ccode\u003eShape\u003c/code\u003e enclosing the selection.  This is instandard coordinates.\n */\n","tf":{"freq":{"second":3,"charactersto":1,"natur":2,"use":1,"exclud":1,"highlight":2,"specifi":1,"rang":4,"layout":2,"conveni":1,"less":1,"coordin":1,"min":1,"text":2,"max":1,"includ":1,"charact":2,"select":4,"overload":1,"shape":4,"logic":3,"endpoint":9,"instandard":1,"enclos":2,"method":1,"first":4,"bound":2},"maxFreq":9,"totalTerms":58},"loc":4}