{"id":19840,"className":"java.awt.geom.FlatteningPathIterator","methodName":"FlatteningPathIterator","signature":"\u003cjava.awt.geom.FlatteningPathIterator: void FlatteningPathIterator(java.awt.geom.PathIterator,double,int)\u003e","javadoc":"/** \n * Constructs a new \u003ccode\u003eFlatteningPathIterator\u003c/code\u003e object that flattens a path as it iterates over it. The \u003ccode\u003elimit\u003c/code\u003e parameter allows you to control the maximum number of recursive subdivisions that the iterator can make before it assumes that the curve is flat enough without measuring against the \u003ccode\u003eflatness\u003c/code\u003e parameter. The flattened iteration therefore never generates more than a maximum of \u003ccode\u003e(2^limit)\u003c/code\u003e line segments per curve.\n * @param src the original unflattened path being iterated over\n * @param flatness the maximum allowable distance between thecontrol points and the flattened curve\n * @param limit the maximum number of recursive subdivisionsallowed for any curved segment\n * @exception \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if\u003ccode\u003eflatness\u003c/code\u003e or \u003ccode\u003elimit\u003c/code\u003e is less than zero\n */\n","tf":{"freq":{"allow":2,"segment":2,"line":1,"object":1,"therefor":1,"zero":1,"enough":1,"flatten":5,"path":4,"thecontrol":1,"src":1,"curv":4,"less":1,"argument":1,"limit":4,"subdivisionsallow":1,"control":1,"except":2,"assum":1,"flat":4,"origin":1,"paramet":2,"number":2,"illeg":1,"without":1,"point":1,"never":1,"unflatten":1,"per":1,"maximum":4,"subdivis":1,"generat":1,"distanc":1,"measur":1,"construct":1,"iter":6,"make":1,"recurs":2},"maxFreq":6,"totalTerms":68},"loc":14}