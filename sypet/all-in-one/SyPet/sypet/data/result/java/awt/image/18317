{"id":18317,"className":"java.awt.image.IndexColorModel","methodName":"getDataElements","signature":"\u003cjava.awt.image.IndexColorModel: java.lang.Object getDataElements(int,java.lang.Object)\u003e","javadoc":"/** \n * Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model.  This array can then be passed to the {@link WritableRaster#setDataElements(int,int,java.lang.Object) setDataElements}method of a  {@link WritableRaster} object.  If the pixel variable is\u003ccode\u003enull\u003c/code\u003e, a new array is allocated.  If \u003ccode\u003epixel\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e, it must be a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e; otherwise, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if \u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e.  The pixel array is returned. \u003cp\u003e Since \u003ccode\u003eIndexColorModel\u003c/code\u003e can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported \u003ccode\u003etransferType\u003c/code\u003e.\n * @param rgb the integer pixel representation in the default RGBcolor model\n * @param pixel the specified pixel\n * @return an array representation of the specified pixel in this\u003ccode\u003eIndexColorModel\u003c/code\u003e.\n * @throws ClassCastException if \u003ccode\u003epixel\u003c/code\u003eis not a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e\n * @throws ArrayIndexOutOfBoundsException if\u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e\n * @throws UnsupportedOperationException if \u003ccode\u003etransferType\u003c/code\u003eis invalid\n * @see WritableRaster#setDataElements\n * @see SampleModel#setDataElements\n */\n","tf":{"freq":{"otherwis":1,"primit":2,"unsupport":2,"model":8,"pixel":14,"link":2,"variabl":1,"data":6,"use":1,"object":2,"enough":2,"type":6,"lang":1,"must":1,"specifi":2,"invalid":1,"given":1,"oper":1,"bcolor":1,"valu":2,"element":6,"index":4,"thrown":2,"except":6,"transfer":4,"hold":2,"rgb":1,"writabl":3,"pass":1,"represent":4,"raster":3,"cast":2,"color":6,"larg":2,"subclass":2,"java":1,"method":2,"integ":2,"sampl":1,"bound":2,"array":9,"alloc":1},"maxFreq":14,"totalTerms":123},"loc":153}