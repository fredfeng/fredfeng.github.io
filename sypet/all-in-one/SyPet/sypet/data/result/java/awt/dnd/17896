{"id":17896,"className":"java.awt.dnd.DragSource","methodName":"startDrag","signature":"\u003cjava.awt.dnd.DragSource: void startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)\u003e","javadoc":"/** \n * Start a drag, given the \u003ccode\u003eDragGestureEvent\u003c/code\u003e that initiated the drag, the initial \u003ccode\u003eCursor\u003c/code\u003e to use, the \u003ccode\u003eTransferable\u003c/code\u003e subject data of the drag, and the \u003ccode\u003eDragSourceListener\u003c/code\u003e. \u003cP\u003e\n * @param trigger           the \u003ccode\u003eDragGestureEvent\u003c/code\u003e that initiated the drag\n * @param dragCursor     the initial {@code Cursor} for this drag operationor  {@code null} for the default cursor handling;see \u003ca href\u003d\"DragSourceContext.html#defaultCursor\"\u003eDragSourceContext\u003c/a\u003e class for more details on the cursor handling mechanism during drag and drop\n * @param transferable      the subject data of the drag\n * @param dsl               the \u003ccode\u003eDragSourceListener\u003c/code\u003e\u003cP\u003e\n * @throws java.awt.dnd.InvalidDnDOperationException if the Drag and Drop system is unable to initiate a drag operation, or if the user attempts to start a drag while an existing drag operation is still executing\n */\n","tf":{"freq":{"attempt":1,"detail":1,"cursor":6,"subject":2,"drop":2,"data":2,"use":1,"invalid":1,"given":1,"oper":2,"event":2,"doper":1,"dnd":1,"initi":5,"operationor":1,"exist":1,"gestur":2,"listen":2,"href":1,"trigger":1,"except":1,"transfer":2,"drag":19,"still":1,"handl":2,"unabl":1,"system":1,"awt":1,"dsl":1,"start":3,"mechan":1,"context":2,"sourc":4,"html":1,"java":1,"execut":1,"user":1},"maxFreq":19,"totalTerms":79},"loc":3}