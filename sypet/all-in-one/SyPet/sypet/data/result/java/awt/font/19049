{"id":19049,"className":"java.awt.font.GlyphVector","methodName":"getPixelBounds","signature":"\u003cjava.awt.font.GlyphVector: java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext,float,float)\u003e","javadoc":"/** \n * Returns the pixel bounds of this \u003ccode\u003eGlyphVector\u003c/code\u003e when rendered in a graphics with the given \u003ccode\u003eFontRenderContext\u003c/code\u003e at the given location.  The renderFRC need not be the same as the \u003ccode\u003eFontRenderContext\u003c/code\u003e of this \u003ccode\u003eGlyphVector\u003c/code\u003e, and can be null.  If it is null, the \u003ccode\u003eFontRenderContext\u003c/code\u003e of this \u003ccode\u003eGlyphVector\u003c/code\u003e is used.  The default implementation returns the visual bounds, offset to x, y and rounded out to the next integer value (i.e. returns an integer rectangle which encloses the visual bounds) and ignores the FRC.  Subclassers should override this method.\n * @param renderFRC the \u003ccode\u003eFontRenderContext\u003c/code\u003e of the \u003ccode\u003eGraphics\u003c/code\u003e.\n * @param x the x-coordinate at which to render this \u003ccode\u003eGlyphVector\u003c/code\u003e.\n * @param y the y-coordinate at which to render this \u003ccode\u003eGlyphVector\u003c/code\u003e.\n * @return a \u003ccode\u003eRectangle\u003c/code\u003e bounding the pixels that would be affected.\n * @since 1.4\n */\n","tf":{"freq":{"need":1,"graphic":2,"pixel":3,"next":1,"use":1,"round":1,"affect":1,"rectangl":2,"given":2,"vector":5,"valu":1,"offset":1,"coordin":2,"locat":1,"ignor":1,"font":4,"glyph":5,"render":9,"visual":2,"enclos":1,"context":4,"subclass":1,"method":1,"integ":2,"bound":5},"maxFreq":9,"totalTerms":59},"loc":8}