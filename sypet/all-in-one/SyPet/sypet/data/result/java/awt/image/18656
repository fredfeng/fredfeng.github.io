{"id":18656,"className":"java.awt.image.BufferedImageOp","methodName":"filter","signature":"\u003cjava.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)\u003e","javadoc":"/** \n * Performs a single-input/single-output operation on a \u003cCODE\u003eBufferedImage\u003c/CODE\u003e. If the color models for the two images do not match, a color conversion into the destination color model is performed. If the destination image is null, a \u003cCODE\u003eBufferedImage\u003c/CODE\u003e with an appropriate \u003cCODE\u003eColorModel\u003c/CODE\u003e is created. \u003cp\u003e An \u003cCODE\u003eIllegalArgumentException\u003c/CODE\u003e may be thrown if the source and/or destination image is incompatible with the types of images       $ allowed by the class implementing this filter.\n * @param src The \u003cCODE\u003eBufferedImage\u003c/CODE\u003e to be filtered\n * @param dest The \u003cCODE\u003eBufferedImage\u003c/CODE\u003e in which to store the results$\n * @return The filtered \u003cCODE\u003eBufferedImage\u003c/CODE\u003e.\n * @throws IllegalArgumentException If the source and/or destinationimage is not compatible with the types of images allowed by the class implementing this filter.\n */\n","tf":{"freq":{"result":1,"model":3,"store":1,"allow":2,"singl":2,"convers":1,"perform":2,"type":2,"buffer":5,"oper":1,"src":1,"argument":2,"except":2,"may":1,"thrown":1,"creat":1,"imag":10,"illeg":2,"incompat":1,"two":1,"input":1,"dest":1,"color":4,"appropri":1,"destinationimag":1,"sourc":2,"match":1,"output":1,"filter":5,"compat":1,"destin":3},"maxFreq":10,"totalTerms":63},"loc":0}