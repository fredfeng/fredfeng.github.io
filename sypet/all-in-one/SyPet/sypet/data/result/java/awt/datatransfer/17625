{"id":17625,"className":"java.awt.datatransfer.SystemFlavorMap","methodName":"addUnencodedNativeForFlavor","signature":"\u003cjava.awt.datatransfer.SystemFlavorMap: void addUnencodedNativeForFlavor(java.awt.datatransfer.DataFlavor,java.lang.String)\u003e","javadoc":"/** \n * Adds a mapping from the specified \u003ccode\u003eDataFlavor\u003c/code\u003e (and all \u003ccode\u003eDataFlavor\u003c/code\u003es equal to the specified \u003ccode\u003eDataFlavor\u003c/code\u003e) to the specified \u003ccode\u003eString\u003c/code\u003e native. Unlike \u003ccode\u003egetNativesForFlavor\u003c/code\u003e, the mapping will only be established in one direction, and the native will not be encoded. To establish a two-way mapping, call \u003ccode\u003eaddFlavorForUnencodedNative\u003c/code\u003e as well. The new mapping will be of lower priority than any existing mapping. This method has no effect if a mapping from the specified or equal \u003ccode\u003eDataFlavor\u003c/code\u003e to the specified \u003ccode\u003eString\u003c/code\u003e native already exists.\n * @param flav the \u003ccode\u003eDataFlavor\u003c/code\u003e key for the mapping\n * @param nat the \u003ccode\u003eString\u003c/code\u003e native value for the mapping\n * @throws NullPointerException if flav or nat is \u003ccode\u003enull\u003c/code\u003e\n * @see #addFlavorForUnencodedNative\n * @since 1.4\n */\n","tf":{"freq":{"call":1,"lower":1,"one":1,"data":5,"way":1,"well":1,"add":4,"specifi":5,"unlik":1,"map":8,"valu":1,"exist":2,"key":1,"direct":1,"except":1,"flav":2,"prioriti":1,"establish":2,"flavor":9,"equal":2,"two":1,"encod":1,"effect":1,"unencod":3,"string":3,"will":3,"pointer":1,"nat":2,"method":1,"alreadi":1},"maxFreq":9,"totalTerms":67},"loc":16}