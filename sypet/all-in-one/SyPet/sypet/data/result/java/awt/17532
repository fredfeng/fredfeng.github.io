{"id":17532,"className":"java.awt.Container","methodName":"setComponentZOrder","signature":"\u003cjava.awt.Container: void setComponentZOrder(java.awt.Component,int)\u003e","javadoc":"/** \n * Moves the specified component to the specified z-order index in the container. The z-order determines the order that components are painted; the component with the highest z-order paints first and the component with the lowest z-order paints last. Where components overlap, the component with the lower z-order paints over the component with the higher z-order. \u003cp\u003e If the component is a child of some other container, it is removed from that container before being added to this container. The important difference between this method and \u003ccode\u003ejava.awt.Container.add(Component, int)\u003c/code\u003e is that this method doesn\u0027t call \u003ccode\u003eremoveNotify\u003c/code\u003e on the component while removing it from its previous container unless necessary and when allowed by the underlying native windowing system. This way, if the component has the keyboard focus, it maintains the focus when moved to the new position. \u003cp\u003e This property is guaranteed to apply only to lightweight non-\u003ccode\u003eContainer\u003c/code\u003e components. \u003cp\u003e This method changes layout-related information, and therefore, invalidates the component hierarchy. \u003cp\u003e \u003cb\u003eNote\u003c/b\u003e: Not all platforms support changing the z-order of heavyweight components from one container into another without the call to \u003ccode\u003eremoveNotify\u003c/code\u003e. There is no way to detect whether a platform supports this, so developers shouldn\u0027t make any assumptions.\n * @param comp the component to be moved\n * @param index the position in the container\u0027s list toinsert the component, where \u003ccode\u003egetComponentCount()\u003c/code\u003e appends to the end\n * @exception NullPointerException if \u003ccode\u003ecomp\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n * @exception IllegalArgumentException if \u003ccode\u003ecomp\u003c/code\u003e is one of thecontainer\u0027s parents\n * @exception IllegalArgumentException if \u003ccode\u003eindex\u003c/code\u003e is not inthe range \u003ccode\u003e[0, getComponentCount()]\u003c/code\u003e for moving between containers, or not in the range \u003ccode\u003e[0, getComponentCount()-1]\u003c/code\u003e for moving inside a container\n * @exception IllegalArgumentException if adding a container to itself\n * @exception IllegalArgumentException if adding a \u003ccode\u003eWindow\u003c/code\u003eto a container\n * @see #getComponentZOrder(java.awt.Component)\n * @see #invalidate\n * @since 1.5\n */\n","tf":{"freq":{"lower":1,"count":3,"last":1,"heavyweight":1,"maintain":1,"higher":1,"necessari":1,"whether":1,"specifi":2,"invalid":2,"rang":2,"relat":1,"focus":2,"thecontain":1,"toinsert":1,"move":5,"argument":4,"notifi":2,"append":1,"platform":2,"except":10,"index":3,"support":2,"overlap":1,"remov":4,"parent":1,"paint":4,"without":1,"non":1,"inform":1,"awt":2,"system":1,"appli":1,"window":2,"contain":13,"determin":1,"pointer":1,"properti":1,"lightweight":1,"make":1,"posit":2,"call":2,"allow":1,"highest":1,"one":2,"way":2,"hierarchi":1,"anoth":1,"therefor":1,"add":1,"child":1,"inth":1,"order":8,"unless":1,"layout":1,"develop":1,"zorder":2,"end":1,"note":1,"detect":1,"comp":3,"keyboard":1,"previous":1,"guarante":1,"list":1,"illeg":4,"differ":1,"compon":22,"ad":3,"insid":1,"java":2,"method":3,"chang":2,"first":1,"lowest":1,"assumpt":1},"maxFreq":22,"totalTerms":167},"loc":28}