{"id":19623,"className":"java.awt.geom.AffineTransform","methodName":"deltaTransform","signature":"\u003cjava.awt.geom.AffineTransform: java.awt.geom.Point2D deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)\u003e","javadoc":"/** \n * Transforms the relative distance vector specified by \u003ccode\u003eptSrc\u003c/code\u003e and stores the result in \u003ccode\u003eptDst\u003c/code\u003e. A relative distance vector is transformed without applying the translation components of the affine transformation matrix using the following equations: \u003cpre\u003e [  x\u0027 ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ] [  y\u0027 ] \u003d [  m10  m11 (m12) ] [  y  ] \u003d [ m10x + m11y ] [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ] \u003c/pre\u003e If \u003ccode\u003eptDst\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a new \u003ccode\u003ePoint2D\u003c/code\u003e object is allocated and then the result of the transform is stored in this object. In either case, \u003ccode\u003eptDst\u003c/code\u003e, which contains the transformed point, is returned for convenience. If \u003ccode\u003eptSrc\u003c/code\u003e and \u003ccode\u003eptDst\u003c/code\u003e are the same object, the input point is correctly overwritten with the transformed point.\n * @param ptSrc the distance vector to be delta transformed\n * @param ptDst the resulting transformed distance vector\n * @return \u003ccode\u003eptDst\u003c/code\u003e, which contains the result of thetransformation.\n * @since 1.2\n */\n","tf":{"freq":{"result":4,"store":2,"use":1,"dst":6,"object":3,"specifi":1,"thetransform":1,"transform":9,"correct":1,"vector":4,"relat":2,"src":3,"conveni":1,"follow":1,"equat":1,"delta":2,"matrix":1,"translat":1,"without":1,"overwritten":1,"point":4,"input":1,"appli":1,"either":1,"compon":1,"pre":2,"contain":2,"distanc":4,"affin":1,"alloc":1},"maxFreq":9,"totalTerms":64},"loc":35}