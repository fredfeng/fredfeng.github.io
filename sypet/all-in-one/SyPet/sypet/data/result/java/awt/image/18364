{"id":18364,"className":"java.awt.image.ComponentColorModel","methodName":"getComponents","signature":"\u003cjava.awt.image.ComponentColorModel: int[] getComponents(java.lang.Object,int[],int)\u003e","javadoc":"/** \n * Returns an array of unnormalized color/alpha components given a pixel in this \u003cCODE\u003eColorModel\u003c/CODE\u003e.  The pixel value is specified by an array of data elements of type \u003cCODE\u003etransferType\u003c/CODE\u003e passed in as an object reference. An IllegalArgumentException is thrown if the component values for this \u003cCODE\u003eColorModel\u003c/CODE\u003e are not conveniently representable in the unnormalized form. Color/alpha components are stored in the \u003cCODE\u003ecomponents\u003c/CODE\u003e array starting at  \u003cCODE\u003eoffset\u003c/CODE\u003e (even if the array is allocated by this method).  Since \u003ccode\u003eComponentColorModel\u003c/code\u003e can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then this method might throw an exception if they use an unsupported \u003ccode\u003etransferType\u003c/code\u003e.\n * @param pixel A pixel value specified by an array of data elements oftype \u003cCODE\u003etransferType\u003c/CODE\u003e.\n * @param components An integer array in which to store the unnormalizedcolor/alpha components. If the \u003cCODE\u003ecomponents\u003c/CODE\u003e array is null, a new array is allocated.\n * @param offset An offset into the \u003cCODE\u003ecomponents\u003c/CODE\u003e array.\n * @return The \u003cCODE\u003ecomponents\u003c/CODE\u003e array.\n * @throws IllegalArgumentException If this\u003cCODE\u003eComponentColorModel\u003c/CODE\u003e does not support the unnormalized form\n * @throws UnsupportedOperationException in some cases iff thetransfer type of this \u003cCODE\u003eComponentColorModel\u003c/CODE\u003e is not one of the following transfer types: \u003cCODE\u003eDataBuffer.TYPE_BYTE\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_USHORT\u003c/CODE\u003e, or \u003cCODE\u003eDataBuffer.TYPE_INT\u003c/CODE\u003e.\n * @throws ClassCastException If \u003cCODE\u003epixel\u003c/CODE\u003e is not a primitivearray of type \u003cCODE\u003etransferType\u003c/CODE\u003e.\n * @throws IllegalArgumentException If the \u003cCODE\u003ecomponents\u003c/CODE\u003e array isnot null and is not large enough to hold all the color and alpha components (starting at offset), or if \u003cCODE\u003epixel\u003c/CODE\u003e is not large enough to hold a pixel value for this ColorModel.\n */\n","tf":{"freq":{"thetransf":1,"unsupport":2,"store":2,"unnorm":3,"enough":2,"type":8,"specifi":2,"buffer":3,"given":1,"refer":1,"oper":1,"follow":1,"argument":3,"element":2,"thrown":1,"except":6,"transfer":5,"support":1,"form":2,"hold":2,"iff":1,"cast":1,"start":2,"subclass":2,"even":1,"array":11,"alloc":2,"might":1,"oftyp":1,"model":6,"pixel":7,"one":1,"data":5,"use":1,"object":1,"isnot":1,"primitivearray":1,"alpha":4,"valu":4,"offset":4,"conveni":1,"illeg":3,"represent":1,"pass":1,"compon":15,"color":9,"larg":2,"unnormalizedcolor":1,"method":3,"integ":1},"maxFreq":15,"totalTerms":143},"loc":34}