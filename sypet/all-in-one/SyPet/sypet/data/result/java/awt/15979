{"id":15979,"className":"java.awt.Window","methodName":"setAlwaysOnTop","signature":"\u003cjava.awt.Window: void setAlwaysOnTop(boolean)\u003e","javadoc":"/** \n * Sets whether this window should always be above other windows.  If there are multiple always-on-top windows, their relative order is unspecified and platform dependent. \u003cp\u003e If some other window is already always-on-top then the relative order between these windows is unspecified (depends on platform).  No window can be brought to be over the always-on-top window except maybe another always-on-top window. \u003cp\u003e All windows owned by an always-on-top window inherit this state and automatically become always-on-top.  If a window ceases to be always-on-top, the windows that it owns will no longer be always-on-top.  When an always-on-top window is sent  {@link #toBack toBack}, its always-on-top state is set to \u003ccode\u003efalse\u003c/code\u003e. \u003cp\u003e When this method is called on a window with a value of \u003ccode\u003etrue\u003c/code\u003e, and the window is visible and the platform supports always-on-top for this window, the window is immediately brought forward, \"sticking\" it in the top-most position. If the window isn`t currently visible, this method sets the always-on-top state to \u003ccode\u003etrue\u003c/code\u003e but does not bring the window forward. When the window is later shown, it will be always-on-top. \u003cp\u003e When this method is called on a window with a value of \u003ccode\u003efalse\u003c/code\u003e the always-on-top state is set to normal. The window remains in the top-most position but it`s z-order can be changed as for any other window.  Calling this method with a value of \u003ccode\u003efalse\u003c/code\u003e on a window that has a normal state has no effect.  Setting the always-on-top state to false has no effect on the relative z-order of the windows if there are no other always-on-top windows. \u003cp\u003e\u003cb\u003eNote\u003c/b\u003e: some platforms might not support always-on-top windows.  To detect if always-on-top windows are supported by the current platform, use  {@link Toolkit#isAlwaysOnTopSupported()} and{@link Window#isAlwaysOnTopSupported()}.  If always-on-top mode isn\u0027t supported by the toolkit or for this window, calling this method has no effect. \u003cp\u003e If a SecurityManager is installed, the calling thread must be granted the AWTPermission \"setWindowAlwaysOnTop\" in order to set the value of this property. If this permission is not granted, this method will throw a SecurityException, and the current value of the property will be left unchanged.\n * @param alwaysOnTop true if the window should always be above otherwindows\n * @throws SecurityException if the calling thread does not havepermission to set the value of always-on-top property\n * @see #isAlwaysOnTop\n * @see #toFront\n * @see #toBack\n * @see AWTPermission\n * @see #isAlwaysOnTopSupported\n * @see Toolkit#isAlwaysOnTopSupported\n * @since 1.5\n */\n","tf":{"freq":{"fals":4,"grant":2,"normal":2,"bring":1,"must":1,"whether":1,"sent":1,"becom":1,"forward":2,"thread":2,"permiss":1,"relat":3,"longer":1,"platform":5,"except":3,"unchang":1,"support":8,"multipl":1,"alway":30,"shown":1,"havepermiss":1,"window":32,"will":4,"properti":3,"posit":2,"unspecifi":2,"call":6,"might":1,"stick":1,"ceas":1,"visibl":2,"link":3,"state":6,"use":1,"anoth":1,"brought":2,"automat":1,"mode":1,"order":5,"current":3,"tpermiss":2,"left":1,"valu":6,"immedi":1,"toolkit":3,"note":1,"top":30,"detect":1,"manag":1,"depend":2,"later":1,"otherwindow":1,"instal":1,"back":3,"true":3,"front":1,"mayb":1,"secur":3,"remain":1,"effect":3,"alreadi":1,"method":6,"chang":1},"maxFreq":32,"totalTerms":223},"loc":23}