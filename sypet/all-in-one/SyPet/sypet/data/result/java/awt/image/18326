{"id":18326,"className":"java.awt.image.IndexColorModel","methodName":"convertToIntDiscrete","signature":"\u003cjava.awt.image.IndexColorModel: java.awt.image.BufferedImage convertToIntDiscrete(java.awt.image.Raster,boolean)\u003e","javadoc":"/** \n * Returns a new \u003ccode\u003eBufferedImage\u003c/code\u003e of TYPE_INT_ARGB or TYPE_INT_RGB that has a \u003ccode\u003eRaster\u003c/code\u003e with pixel data computed by expanding the indices in the source \u003ccode\u003eRaster\u003c/code\u003e using the color/alpha component arrays of this \u003ccode\u003eColorModel\u003c/code\u003e. Only the lower \u003cem\u003en\u003c/em\u003e bits of each index value in the source \u003ccode\u003eRaster\u003c/code\u003e, as specified in the \u003ca href\u003d\"#index_values\"\u003eclass description\u003c/a\u003e above, are used to compute the color/alpha values in the returned image. If \u003ccode\u003eforceARGB\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, a TYPE_INT_ARGB image is returned regardless of whether or not this \u003ccode\u003eColorModel\u003c/code\u003e has an alpha component array or a transparent pixel.\n * @param raster the specified \u003ccode\u003eRaster\u003c/code\u003e\n * @param forceARGB if \u003ccode\u003etrue\u003c/code\u003e, the returned\u003ccode\u003eBufferedImage\u003c/code\u003e is TYPE_INT_ARGB; otherwise it is TYPE_INT_RGB\n * @return a \u003ccode\u003eBufferedImage\u003c/code\u003e created with the specified\u003ccode\u003eRaster\u003c/code\u003e\n * @throws IllegalArgumentException if the raster argument is notcompatible with this IndexColorModel\n */\n","tf":{"freq":{"otherwis":1,"discret":1,"notcompat":1,"model":3,"lower":1,"pixel":2,"data":1,"use":2,"convert":1,"whether":1,"specifi":3,"buffer":3,"transpar":1,"indic":1,"alpha":3,"expand":1,"valu":3,"forc":2,"href":1,"regardless":1,"argument":2,"except":1,"index":3,"creat":1,"descript":1,"true":2,"imag":5,"illeg":1,"raster":7,"bit":1,"compon":2,"color":5,"comput":2,"sourc":2,"array":2},"maxFreq":7,"totalTerms":70},"loc":43}