{"id":18851,"className":"java.awt.image.renderable.RenderableImage","methodName":"createScaledRendering","signature":"\u003cjava.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createScaledRendering(int,int,java.awt.RenderingHints)\u003e","javadoc":"/** \n * Creates a RenderedImage instance of this image with width w, and height h in pixels.  The RenderContext is built automatically with an appropriate usr2dev transform and an area of interest of the full image.  All the rendering hints come from hints passed in. \u003cp\u003e If w \u003d\u003d 0, it will be taken to equal Math.round(h*(getWidth()/getHeight())). Similarly, if h \u003d\u003d 0, it will be taken to equal Math.round(w*(getHeight()/getWidth())).  One of w or h must be non-zero or else an IllegalArgumentException will be thrown. \u003cp\u003e The created RenderedImage may have a property identified by the String HINTS_OBSERVED to indicate which RenderingHints were used to create the image.  In addition any RenderedImages that are obtained via the getSources() method on the created RenderedImage may have such a property.\n * @param w the width of rendered image in pixels, or 0.\n * @param h the height of rendered image in pixels, or 0.\n * @param hints a RenderingHints object containg hints.\n * @return a RenderedImage containing the rendered data.\n */\n","tf":{"freq":{"via":1,"round":2,"zero":1,"must":1,"height":4,"interest":1,"taken":2,"argument":1,"except":1,"thrown":1,"creat":5,"width":4,"imag":10,"els":1,"render":13,"instanc":1,"non":1,"obtain":1,"contain":1,"will":3,"sourc":1,"properti":2,"scale":1,"dev":1,"pixel":3,"one":1,"data":1,"conta":1,"use":1,"identifi":1,"object":1,"automat":1,"transform":1,"area":1,"indic":1,"full":1,"usr":1,"built":1,"similar":1,"addit":1,"may":2,"come":1,"equal":2,"hint":6,"illeg":1,"pass":1,"math":2,"appropri":1,"string":1,"context":1,"method":1},"maxFreq":13,"totalTerms":97},"loc":0}