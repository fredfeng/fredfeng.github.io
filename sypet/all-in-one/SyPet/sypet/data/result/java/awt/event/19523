{"id":19523,"className":"java.awt.event.InputEvent","methodName":"getMaskForButton","signature":"\u003cjava.awt.event.InputEvent: int getMaskForButton(int)\u003e","javadoc":"/** \n * A method to obtain a mask for any existing mouse button. The returned mask may be used for different purposes. Following are some of them: \u003cul\u003e \u003cli\u003e  {@link java.awt.Robot#mousePress(int) mousePress(buttons)} and{@link java.awt.Robot#mouseRelease(int) mouseRelease(buttons)}\u003cli\u003e as a  {@code modifiers} parameter when creating a new {@link MouseEvent} instance\u003cli\u003e to check  {@link MouseEvent#getModifiersEx() modifiersEx} of existing {@code MouseEvent}\u003c/ul\u003e\n * @param button is a number to represent a button starting from 1.For example, \u003cpre\u003e int button \u003d InputEvent.getMaskForButton(1); \u003c/pre\u003e will have the same meaning as \u003cpre\u003e int button \u003d InputEvent.getMaskForButton(MouseEvent.BUTTON1); \u003c/pre\u003e because  {@link MouseEvent#BUTTON1 MouseEvent.BUTTON1} equals to 1.If a mouse has three enabled buttons(see  {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}) then the values from the left column passed into the method will return corresponding values from the right column: \u003cPRE\u003e \u003cb\u003ebutton \u003c/b\u003e   \u003cb\u003ereturned mask\u003c/b\u003e {@link MouseEvent#BUTTON1 BUTTON1}  {@link MouseEvent#BUTTON1_DOWN_MASK BUTTON1_DOWN_MASK}{@link MouseEvent#BUTTON2 BUTTON2}  {@link MouseEvent#BUTTON2_DOWN_MASK BUTTON2_DOWN_MASK}{@link MouseEvent#BUTTON3 BUTTON3}  {@link MouseEvent#BUTTON3_DOWN_MASK BUTTON3_DOWN_MASK}\u003c/PRE\u003e If a mouse has more than three enabled buttons then more values are admissible (4, 5, etc.). There is no assigned constants for these extended buttons. The button masks for the extra buttons returned by this method have no assigned names like the first three button masks. \u003cp\u003e This method has the following implementation restriction. It returns masks for a limited number of buttons only. The maximum number is implementation dependent and may vary. This limit is defined by the relevant number of buttons that may hypothetically exist on the mouse but it is greater than the {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}. \u003cp\u003e\n * @throws IllegalArgumentException if {@code button} is less than zero or greater than the numberof button masks reserved for buttons\n * @since 7.0\n * @see java.awt.MouseInfo#getNumberOfButtons()\n * @see Toolkit#areExtraMouseButtonsEnabled()\n * @see MouseEvent#getModifiers()\n * @see MouseEvent#getModifiersEx()\n */\n","tf":{"freq":{"assign":2,"greater":2,"relev":1,"etc":1,"mask":10,"zero":1,"mous":28,"info":5,"button":28,"event":16,"three":3,"purpos":1,"right":1,"follow":2,"argument":1,"limit":2,"except":1,"creat":1,"enabl":3,"extra":2,"number":9,"like":1,"restrict":1,"instanc":1,"awt":5,"obtain":1,"input":2,"start":1,"maximum":1,"will":2,"column":2,"vari":1,"defin":1,"press":2,"correspond":1,"link":13,"use":1,"numberof":1,"hypothet":1,"releas":2,"reserv":1,"name":1,"mean":1,"toolkit":1,"valu":3,"left":1,"exist":3,"less":1,"admiss":1,"may":3,"constant":1,"check":1,"repres":1,"depend":1,"paramet":1,"robot":2,"equal":1,"illeg":1,"pass":1,"differ":1,"pre":4,"modifi":5,"exampl":1,"java":5,"method":4,"first":1},"maxFreq":28,"totalTerms":207},"loc":6}