{"id":15638,"className":"java.awt.Toolkit","methodName":"getSystemEventQueue","signature":"\u003cjava.awt.Toolkit: java.awt.EventQueue getSystemEventQueue()\u003e","javadoc":"/** \n * Get the application\u0027s or applet\u0027s EventQueue instance. Depending on the Toolkit implementation, different EventQueues may be returned for different applets.  Applets should therefore not assume that the EventQueue instance returned by this method will be shared by other applets or the system. \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckAwtEventQueueAccess\u003c/code\u003e method is called. If  the default implementation of \u003ccode\u003echeckAwtEventQueueAccess\u003c/code\u003e is used (that is, that method is not overriden), then this results in a call to the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with an \u003ccode\u003eAWTPermission(\"accessEventQueue\")\u003c/code\u003e permission.\n * @return    the \u003ccode\u003eEventQueue\u003c/code\u003e object\n * @throws SecurityException if a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkAwtEventQueueAccess}\u003c/code\u003e method denies access to the \u003ccode\u003eEventQueue\u003c/code\u003e\n * @see java.awt.AWTPermission\n */\n","tf":{"freq":{"result":1,"queue":10,"call":2,"link":1,"use":1,"object":1,"therefor":1,"lang":1,"applic":1,"share":1,"event":10,"permiss":2,"tpermiss":2,"applet":4,"toolkit":1,"exist":1,"deni":1,"overriden":1,"except":1,"may":1,"assum":1,"check":4,"depend":1,"manag":4,"access":5,"instanc":2,"differ":2,"system":2,"awt":4,"secur":5,"will":1,"java":2,"method":5,"first":1},"maxFreq":10,"totalTerms":83},"loc":7}