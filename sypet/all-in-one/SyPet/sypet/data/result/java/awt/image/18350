{"id":18350,"className":"java.awt.image.ComponentColorModel","methodName":"ComponentColorModel","signature":"\u003cjava.awt.image.ComponentColorModel: void ComponentColorModel(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)\u003e","javadoc":"/** \n * Constructs a \u003cCODE\u003eComponentColorModel\u003c/CODE\u003e from the specified parameters. Color components will be in the specified \u003cCODE\u003eColorSpace\u003c/CODE\u003e.  The supported transfer types are \u003cCODE\u003eDataBuffer.TYPE_BYTE\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_USHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_INT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_SHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_FLOAT\u003c/CODE\u003e, and \u003cCODE\u003eDataBuffer.TYPE_DOUBLE\u003c/CODE\u003e. If not null, the \u003cCODE\u003ebits\u003c/CODE\u003e array specifies the number of significant bits per color and alpha component and its length should be at least the number of components in the \u003cCODE\u003eColorSpace\u003c/CODE\u003e if there is no alpha information in the pixel values, or one more than this number if there is alpha information.  When the \u003cCODE\u003etransferType\u003c/CODE\u003e is \u003cCODE\u003eDataBuffer.TYPE_SHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_FLOAT\u003c/CODE\u003e, or \u003cCODE\u003eDataBuffer.TYPE_DOUBLE\u003c/CODE\u003e the \u003cCODE\u003ebits\u003c/CODE\u003e array argument is ignored.  \u003cCODE\u003ehasAlpha\u003c/CODE\u003e indicates whether alpha information is present.  If \u003cCODE\u003ehasAlpha\u003c/CODE\u003e is true, then the boolean \u003cCODE\u003eisAlphaPremultiplied\u003c/CODE\u003e specifies how to interpret color and alpha samples in pixel values. If the boolean is true, color samples are assumed to have been multiplied by the alpha sample. The \u003cCODE\u003etransparency\u003c/CODE\u003e specifies what alpha values can be represented by this color model. The acceptable \u003ccode\u003etransparency\u003c/code\u003e values are \u003cCODE\u003eOPAQUE\u003c/CODE\u003e, \u003cCODE\u003eBITMASK\u003c/CODE\u003e or \u003cCODE\u003eTRANSLUCENT\u003c/CODE\u003e. The \u003cCODE\u003etransferType\u003c/CODE\u003e is the type of primitive array used to represent pixel values.\n * @param colorSpace       The \u003cCODE\u003eColorSpace\u003c/CODE\u003e associatedwith this color model.\n * @param bits             The number of significant bits per component.May be null, in which case all bits of all component samples will be significant. Ignored if transferType is one of \u003cCODE\u003eDataBuffer.TYPE_SHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_FLOAT\u003c/CODE\u003e, or \u003cCODE\u003eDataBuffer.TYPE_DOUBLE\u003c/CODE\u003e, in which case all bits of all component samples will be significant.\n * @param hasAlpha         If true, this color model supports alpha.\n * @param isAlphaPremultiplied If true, alpha is premultiplied.\n * @param transparency     Specifies what alpha values can be representedby this color model.\n * @param transferType     Specifies the type of primitive array used torepresent pixel values.\n * @throws IllegalArgumentException If the \u003cCODE\u003ebits\u003c/CODE\u003e arrayargument is not null, its length is less than the number of color and alpha components, and transferType is one of \u003cCODE\u003eDataBuffer.TYPE_BYTE\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_USHORT\u003c/CODE\u003e, or \u003cCODE\u003eDataBuffer.TYPE_INT\u003c/CODE\u003e.\n * @throws IllegalArgumentException If transferType is not one of\u003cCODE\u003eDataBuffer.TYPE_BYTE\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_USHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_INT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_SHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_FLOAT\u003c/CODE\u003e, or \u003cCODE\u003eDataBuffer.TYPE_DOUBLE\u003c/CODE\u003e.\n * @see ColorSpace\n * @see java.awt.Transparency\n */\n","tf":{"freq":{"primit":2,"arrayargu":1,"model":6,"representedbi":1,"pixel":4,"accept":1,"least":1,"one":4,"interpret":1,"data":21,"use":2,"associatedwith":1,"type":9,"space":5,"whether":1,"specifi":7,"premultipli":3,"buffer":21,"transpar":4,"indic":1,"alpha":16,"length":2,"multipli":1,"valu":7,"less":1,"torepres":1,"argument":3,"except":2,"may":1,"ignor":2,"transfer":7,"assum":1,"support":2,"repres":2,"paramet":1,"signific":4,"true":4,"number":5,"illeg":2,"present":1,"bit":8,"inform":3,"awt":1,"compon":9,"per":2,"color":16,"will":3,"java":1,"construct":1,"sampl":5,"array":4},"maxFreq":21,"totalTerms":214},"loc":29}