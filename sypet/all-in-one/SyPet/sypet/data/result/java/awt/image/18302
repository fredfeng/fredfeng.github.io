{"id":18302,"className":"java.awt.image.IndexColorModel","methodName":"IndexColorModel","signature":"\u003cjava.awt.image.IndexColorModel: void IndexColorModel(int,int,int[],int,int,java.math.BigInteger)\u003e","javadoc":"/** \n * Constructs an \u003ccode\u003eIndexColorModel\u003c/code\u003e from an \u003ccode\u003eint\u003c/code\u003e array where each \u003ccode\u003eint\u003c/code\u003e is comprised of red, green, blue, and alpha components in the default RGB color model format. The array must have enough values in it to fill all of the needed component arrays of the specified size. The \u003ccode\u003eColorSpace\u003c/code\u003e is the default sRGB space. The transparency value may be any of \u003ccode\u003eTransparency.OPAQUE\u003c/code\u003e, \u003ccode\u003eTransparency.BITMASK\u003c/code\u003e, or \u003ccode\u003eTransparency.TRANSLUCENT\u003c/code\u003e depending on the arguments, as specified in the \u003ca href\u003d\"#transparency\"\u003eclass description\u003c/a\u003e above. The transfer type must be one of \u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e \u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e. The \u003ccode\u003eBigInteger\u003c/code\u003e object specifies the valid/invalid pixels in the \u003ccode\u003ecmap\u003c/code\u003e array.  A pixel is valid if the \u003ccode\u003eBigInteger\u003c/code\u003e value at that index is set, and is invalid if the \u003ccode\u003eBigInteger\u003c/code\u003e bit  at that index is not set.\n * @param bits the number of bits each pixel occupies\n * @param size the size of the color component array\n * @param cmap the array of color components\n * @param start the starting offset of the first color component\n * @param transferType the specified data type\n * @param validBits a \u003ccode\u003eBigInteger\u003c/code\u003e object.  If a bit isset in the BigInteger, the pixel at that index is valid. If a bit is not set, the pixel at that index is considered invalid.  If null, all pixels are valid. Only bits from 0 to the map size are considered.\n * @throws IllegalArgumentException if \u003ccode\u003ebits\u003c/code\u003e is lessthan 1 or greater than 16\n * @throws IllegalArgumentException if \u003ccode\u003esize\u003c/code\u003e is lessthan 1\n * @throws IllegalArgumentException if \u003ccode\u003etransferType\u003c/code\u003e is notone of \u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e or \u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e\n * @since 1.3\n */\n","tf":{"freq":{"need":1,"greater":1,"occupi":1,"enough":1,"type":4,"must":2,"specifi":4,"buffer":4,"compris":1,"invalid":3,"lessthan":2,"isset":1,"href":1,"argument":4,"except":3,"index":6,"transfer":3,"descript":1,"number":1,"format":1,"size":5,"bit":8,"start":2,"big":5,"array":6,"valid":5,"model":3,"pixel":6,"one":1,"data":5,"object":2,"space":2,"consid":2,"transpar":5,"alpha":1,"map":1,"valu":3,"offset":1,"noton":1,"may":1,"depend":1,"green":1,"fill":1,"illeg":3,"red":1,"compon":5,"color":7,"blue":1,"cmap":2,"construct":1,"integ":5,"first":1},"maxFreq":8,"totalTerms":139},"loc":33}