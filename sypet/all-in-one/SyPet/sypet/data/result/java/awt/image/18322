{"id":18322,"className":"java.awt.image.IndexColorModel","methodName":"createCompatibleWritableRaster","signature":"\u003cjava.awt.image.IndexColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eWritableRaster\u003c/code\u003e with the specified width and height that has a data layout (\u003ccode\u003eSampleModel\u003c/code\u003e) compatible with this \u003ccode\u003eColorModel\u003c/code\u003e.  This method only works for color models with 16 or fewer bits per pixel. \u003cp\u003e Since \u003ccode\u003eIndexColorModel\u003c/code\u003e can be subclassed, any subclass that supports greater than 16 bits per pixel must override this method.\n * @param w the width to apply to the new \u003ccode\u003eWritableRaster\u003c/code\u003e\n * @param h the height to apply to the new \u003ccode\u003eWritableRaster\u003c/code\u003e\n * @return a \u003ccode\u003eWritableRaster\u003c/code\u003e object with the specifiedwidth and height.\n * @throws UnsupportedOperationException if the number of bits in apixel is greater than 16\n * @see WritableRaster\n * @see SampleModel\n */\n","tf":{"freq":{"unsupport":1,"model":5,"greater":2,"pixel":2,"data":1,"object":1,"must":1,"specifi":1,"height":3,"oper":1,"layout":1,"work":1,"except":1,"index":1,"support":1,"creat":2,"apixel":1,"width":2,"number":1,"writabl":6,"raster":6,"bit":3,"appli":2,"per":2,"color":3,"subclass":2,"fewer":1,"specifiedwidth":1,"method":2,"sampl":2,"compat":2},"maxFreq":6,"totalTerms":61},"loc":23}