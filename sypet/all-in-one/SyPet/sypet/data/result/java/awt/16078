{"id":16078,"className":"java.awt.Graphics","methodName":"drawImage","signature":"\u003cjava.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)\u003e","javadoc":"/** \n * Draws as much of the specified image as has already been scaled to fit inside the specified rectangle. \u003cp\u003e The image is drawn inside the specified rectangle of this graphics context\u0027s coordinate space, and is scaled if necessary. Transparent pixels are drawn in the specified background color. This operation is equivalent to filling a rectangle of the width and height of the specified image with the given color and then drawing the image on top of it, but possibly more efficient. \u003cp\u003e This method returns immediately in all cases, even if the entire image has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete then \u003ccode\u003edrawImage\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e. As more of the image becomes available, the process that loads the image notifies the specified image observer. \u003cp\u003e A scaled version of an image will not necessarily be available immediately just because an unscaled version of the image has been constructed for this output device.  Each size of the image may be cached separately and generated from the original data in a separate image production sequence.\n * @param img       the specified image to be drawn. This method doesnothing if \u003ccode\u003eimg\u003c/code\u003e is null.\n * @param x         the \u003ci\u003ex\u003c/i\u003e coordinate.\n * @param y         the \u003ci\u003ey\u003c/i\u003e coordinate.\n * @param width     the width of the rectangle.\n * @param height    the height of the rectangle.\n * @param bgcolor   the background color to paint under thenon-opaque portions of the image.\n * @param observer    object to be notified as more ofthe image is converted.\n * @return   \u003ccode\u003efalse\u003c/code\u003e if the image pixels are still changing;\u003ccode\u003etrue\u003c/code\u003e otherwise.\n * @see java.awt.Image\n * @see java.awt.image.ImageObserver\n * @see java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)\n */\n","tf":{"freq":{"fals":2,"img":2,"possibl":1,"necessari":1,"bgcolor":1,"specifi":7,"draw":4,"height":3,"becom":1,"observ":4,"given":1,"equival":1,"oper":1,"sequenc":1,"effici":1,"coordin":3,"notifi":2,"width":3,"paint":1,"avail":2,"imag":25,"much":1,"size":1,"unscal":1,"awt":4,"updat":1,"separ":2,"dither":1,"will":1,"even":1,"load":1,"output":3,"entir":1,"otherwis":1,"scale":4,"graphic":1,"pixel":2,"data":1,"convert":2,"object":1,"space":1,"rectangl":5,"version":2,"opaqu":1,"transpar":1,"fit":1,"ofth":1,"current":2,"immedi":2,"thenon":1,"drawn":3,"portion":1,"top":1,"complet":1,"doesnoth":1,"just":1,"may":1,"fill":1,"origin":1,"true":1,"still":1,"cach":1,"represent":1,"product":1,"process":1,"color":3,"generat":1,"background":2,"context":1,"java":4,"alreadi":1,"insid":2,"method":2,"chang":1,"construct":1,"devic":2,"necessarili":1,"yet":2},"maxFreq":25,"totalTerms":154},"loc":0}