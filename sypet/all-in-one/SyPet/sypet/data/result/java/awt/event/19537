{"id":19537,"className":"java.awt.event.InputMethodEvent","methodName":"InputMethodEvent","signature":"\u003cjava.awt.event.InputMethodEvent: void InputMethodEvent(java.awt.Component,int,long,java.text.AttributedCharacterIterator,int,java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)\u003e","javadoc":"/** \n * Constructs an \u003ccode\u003eInputMethodEvent\u003c/code\u003e with the specified source component, type, time, text, caret, and visiblePosition. \u003cp\u003e The offsets of caret and visiblePosition are relative to the current composed text; that is, the composed text within \u003ccode\u003etext\u003c/code\u003e if this is an \u003ccode\u003eINPUT_METHOD_TEXT_CHANGED\u003c/code\u003e event, the composed text within the \u003ccode\u003etext\u003c/code\u003e of the preceding \u003ccode\u003eINPUT_METHOD_TEXT_CHANGED\u003c/code\u003e event otherwise. \u003cp\u003eNote that passing in an invalid \u003ccode\u003eid\u003c/code\u003e results in unspecified behavior. This method throws an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if \u003ccode\u003esource\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @param source the object where the event originated\n * @param id the event type\n * @param when a long integer that specifies the time the event occurred\n * @param text the combined committed and composed text,committed text first; must be \u003ccode\u003enull\u003c/code\u003e when the event type is \u003ccode\u003eCARET_POSITION_CHANGED\u003c/code\u003e; may be \u003ccode\u003enull\u003c/code\u003e for \u003ccode\u003eINPUT_METHOD_TEXT_CHANGED\u003c/code\u003e if there\u0027s no committed or composed text\n * @param committedCharacterCount the number of committedcharacters in the text\n * @param caret the caret (a.k.a. insertion point);\u003ccode\u003enull\u003c/code\u003e if there\u0027s no caret within current composed text\n * @param visiblePosition the position that\u0027s most importantto be visible; \u003ccode\u003enull\u003c/code\u003e if there\u0027s no recommendation for a visible position within current composed text\n * @throws IllegalArgumentException if \u003ccode\u003eid\u003c/code\u003e is notin the range \u003ccode\u003eINPUT_METHOD_FIRST\u003c/code\u003e..\u003ccode\u003eINPUT_METHOD_LAST\u003c/code\u003e; or if id is \u003ccode\u003eCARET_POSITION_CHANGED\u003c/code\u003e and \u003ccode\u003etext\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e; or if \u003ccode\u003ecommittedCharacterCount\u003c/code\u003e is not in the range \u003ccode\u003e0\u003c/code\u003e..\u003ccode\u003e(text.getEndIndex() - text.getBeginIndex())\u003c/code\u003e\n * @throws IllegalArgumentException if \u003ccode\u003esource\u003c/code\u003e is null\n * @since 1.4\n */\n","tf":{"freq":{"count":2,"type":3,"must":1,"specifi":2,"time":2,"invalid":1,"commit":5,"event":8,"rang":2,"relat":1,"combin":1,"notin":1,"argument":3,"index":2,"text":16,"except":3,"charact":2,"number":1,"input":2,"sourc":4,"posit":5,"otherwis":1,"result":1,"unspecifi":1,"visibl":5,"behavior":1,"object":1,"recommend":1,"current":3,"offset":1,"end":1,"note":1,"importantto":1,"may":1,"compos":7,"origin":1,"illeg":3,"committedcharact":1,"begin":1,"pass":1,"preced":1,"caret":5,"point":1,"compon":1,"method":3,"within":4,"construct":1,"insert":1,"integ":1,"first":1,"occur":1},"maxFreq":16,"totalTerms":120},"loc":25}