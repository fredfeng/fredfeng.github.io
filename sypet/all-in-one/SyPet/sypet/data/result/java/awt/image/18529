{"id":18529,"className":"java.awt.image.PixelGrabber","methodName":"PixelGrabber","signature":"\u003cjava.awt.image.PixelGrabber: void PixelGrabber(java.awt.Image,int,int,int,int,boolean)\u003e","javadoc":"/** \n * Create a PixelGrabber object to grab the (x, y, w, h) rectangular section of pixels from the specified image.  The pixels are accumulated in the original ColorModel if the same ColorModel is used for every call to setPixels, otherwise the pixels are accumulated in the default RGB ColorModel.  If the forceRGB parameter is true, then the pixels will be accumulated in the default RGB ColorModel anyway.  A buffer is allocated by the PixelGrabber to hold the pixels in either case.  If (w \u003c 0) or (h \u003c 0), then they will default to the remaining width and height of the source data when that information is delivered.\n * @param img the image to retrieve the image data from\n * @param x the x coordinate of the upper left corner of the rectangleof pixels to retrieve from the image, relative to the default (unscaled) size of the image\n * @param y the y coordinate of the upper left corner of the rectangleof pixels to retrieve from the image\n * @param w the width of the rectangle of pixels to retrieve\n * @param h the height of the rectangle of pixels to retrieve\n * @param forceRGB true if the pixels should always be converted tothe default RGB ColorModel\n */\n","tf":{"freq":{"otherwis":1,"rectangular":1,"grab":1,"call":1,"model":5,"grabber":3,"pixel":14,"img":1,"data":2,"convert":1,"use":1,"object":1,"toth":1,"rectangl":2,"specifi":1,"anyway":1,"buffer":1,"upper":2,"height":2,"rectangleof":2,"relat":1,"left":2,"everi":1,"forc":2,"coordin":2,"corner":2,"creat":1,"alway":1,"width":2,"hold":1,"origin":1,"paramet":1,"true":2,"imag":6,"section":1,"size":1,"unscal":1,"accumul":3,"inform":1,"either":1,"remain":1,"color":5,"retriev":5,"deliv":1,"will":2,"sourc":1,"alloc":1},"maxFreq":14,"totalTerms":93},"loc":10}