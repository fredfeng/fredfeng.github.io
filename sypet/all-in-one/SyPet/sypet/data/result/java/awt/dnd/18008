{"id":18008,"className":"java.awt.dnd.DropTargetDragEvent","methodName":"DropTargetDragEvent","signature":"\u003cjava.awt.dnd.DropTargetDragEvent: void DropTargetDragEvent(java.awt.dnd.DropTargetContext,java.awt.Point,int,int)\u003e","javadoc":"/** \n * Construct a \u003ccode\u003eDropTargetDragEvent\u003c/code\u003e given the \u003ccode\u003eDropTargetContext\u003c/code\u003e for this operation, the location of the \"Drag\" \u003ccode\u003eCursor\u003c/code\u003e\u0027s hotspot in the \u003ccode\u003eComponent\u003c/code\u003e\u0027s coordinates, the user drop action, and the source drop actions. \u003cP\u003e\n * @param dtc        The DropTargetContext for this operation\n * @param cursorLocn The location of the \"Drag\" Cursor\u0027shotspot in Component coordinates\n * @param dropAction The user drop action\n * @param srcActions The source drop actions\n * @throws NullPointerException if cursorLocn is null\n * @throws \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if dropAction is not one of\u003ccode\u003eDnDConstants\u003c/code\u003e.\n * @throws \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if srcActions is nota bitwise mask of \u003ccode\u003eDnDConstants\u003c/code\u003e.\n * @throws \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if dtc is \u003ccode\u003enull\u003c/code\u003e.\n */\n","tf":{"freq":{"nota":1,"cursor":4,"bitwis":1,"drop":10,"one":1,"shotspot":1,"mask":1,"given":1,"oper":2,"event":2,"action":8,"src":2,"dconstant":2,"dtc":2,"hotspot":1,"coordin":2,"argument":3,"locat":2,"except":4,"drag":4,"locn":2,"illeg":3,"compon":2,"context":2,"target":4,"pointer":1,"sourc":2,"construct":1,"user":2},"maxFreq":10,"totalTerms":73},"loc":17}