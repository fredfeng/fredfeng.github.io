{"id":18368,"className":"java.awt.image.ComponentColorModel","methodName":"getDataElements","signature":"\u003cjava.awt.image.ComponentColorModel: java.lang.Object getDataElements(int[],int,java.lang.Object)\u003e","javadoc":"/** \n * Returns a data element array representation of a pixel in this \u003cCODE\u003eColorModel\u003c/CODE\u003e, given an array of unnormalized color/alpha components. This array can then be passed to the \u003cCODE\u003esetDataElements\u003c/CODE\u003e method of a \u003cCODE\u003eWritableRaster\u003c/CODE\u003e object.\n * @param components An array of unnormalized color/alpha components.\n * @param offset The integer offset into the \u003cCODE\u003ecomponents\u003c/CODE\u003e array.\n * @param obj The object in which to store the data element arrayrepresentation of the pixel. If \u003cCODE\u003eobj\u003c/CODE\u003e variable is null, a new array is allocated.  If \u003cCODE\u003eobj\u003c/CODE\u003e is not null, it must be a primitive array of type \u003cCODE\u003etransferType\u003c/CODE\u003e. An \u003cCODE\u003eArrayIndexOutOfBoundsException\u003c/CODE\u003e is thrown if \u003cCODE\u003eobj\u003c/CODE\u003e is not large enough to hold a pixel value for this \u003cCODE\u003eColorModel\u003c/CODE\u003e.  Since \u003ccode\u003eComponentColorModel\u003c/code\u003e can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported \u003ccode\u003etransferType\u003c/code\u003e.\n * @return The data element array representation of a pixelin this \u003cCODE\u003eColorModel\u003c/CODE\u003e.\n * @throws IllegalArgumentException If the components arrayis not large enough to hold all the color and alpha components (starting at offset).\n * @throws ClassCastException If \u003cCODE\u003eobj\u003c/CODE\u003e is not null and is not aprimitive  array of type \u003cCODE\u003etransferType\u003c/CODE\u003e.\n * @throws ArrayIndexOutOfBoundsException If \u003cCODE\u003eobj\u003c/CODE\u003e is not largeenough to hold a pixel value for this \u003cCODE\u003eColorModel\u003c/CODE\u003e.\n * @throws IllegalArgumentException If this\u003cCODE\u003eComponentColorModel\u003c/CODE\u003e does not support the unnormalized form\n * @throws UnsupportedOperationException If the transfer type ofthis \u003cCODE\u003eComponentColorModel\u003c/CODE\u003e is not one of the following transfer types: \u003cCODE\u003eDataBuffer.TYPE_BYTE\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_USHORT\u003c/CODE\u003e, or \u003cCODE\u003eDataBuffer.TYPE_INT\u003c/CODE\u003e.\n * @see WritableRaster#setDataElements\n * @see SampleModel#setDataElements\n */\n","tf":{"freq":{"unsupport":2,"store":1,"variabl":1,"unnorm":3,"type":7,"enough":2,"must":1,"buffer":3,"given":1,"oper":1,"largeenough":1,"follow":1,"argument":2,"element":7,"transfer":5,"index":2,"except":7,"thrown":1,"support":1,"form":1,"hold":3,"writabl":2,"cast":1,"start":1,"subclass":2,"pixelin":1,"alloc":1,"array":11,"primit":1,"model":8,"pixel":4,"one":1,"data":10,"use":1,"object":2,"alpha":3,"valu":2,"offset":3,"arrayrepresent":1,"illeg":2,"represent":2,"pass":1,"ofthi":1,"raster":2,"aprimit":1,"compon":9,"arrayi":1,"color":10,"larg":2,"obj":6,"method":2,"integ":1,"sampl":1,"bound":2},"maxFreq":11,"totalTerms":151},"loc":64}