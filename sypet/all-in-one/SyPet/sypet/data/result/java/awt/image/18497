{"id":18497,"className":"java.awt.image.SampleModel","methodName":"setDataElements","signature":"\u003cjava.awt.image.SampleModel: void setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\u003e","javadoc":"/** \n * Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.  For image data supported by the Java 2D API, this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array may be in a packed format, thus increasing efficiency for data transfers. \u003cp\u003e The following code illustrates transferring data for one pixel from DataBuffer \u003ccode\u003edb1\u003c/code\u003e, whose storage layout is described by SampleModel \u003ccode\u003esm1\u003c/code\u003e, to DataBuffer \u003ccode\u003edb2\u003c/code\u003e, whose storage layout is described by SampleModel \u003ccode\u003esm2\u003c/code\u003e. The transfer will generally be more efficient than using getPixel/setPixel. \u003cpre\u003e SampleModel sm1, sm2; DataBuffer db1, db2; sm2.setDataElements(x, y, sm1.getDataElements(x, y, null, db1), db2); \u003c/pre\u003e Using getDataElements/setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModels have the same number of bands, corresponding bands have the same number of bits per sample, and the TransferTypes are the same. \u003cp\u003e obj must be a primitive array of type TransferType.  Otherwise, a ClassCastException is thrown.  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds, or if obj is not large enough to hold the pixel data.\n * @param x         The X coordinate of the pixel location.\n * @param y         The Y coordinate of the pixel location.\n * @param obj       A primitive array containing pixel data.\n * @param data      The DataBuffer containing the image data.\n * @see #getNumDataElements\n * @see #getTransferType\n * @see #getDataElements(int,int,Object,DataBuffer)\n * @see java.awt.image.DataBuffer\n * @throws NullPointerException if data is null.\n * @throws ArrayIndexOutOfBoundsException if the coordinates arenot in bounds, or if obj is too small to hold the input.\n */\n","tf":{"freq":{"singl":1,"pack":1,"enough":1,"type":6,"must":1,"specifi":1,"buffer":14,"band":2,"effici":2,"follow":1,"coordin":4,"element":7,"transfer":8,"except":4,"thrown":2,"index":2,"support":1,"whose":2,"hold":2,"describ":2,"number":2,"format":1,"imag":3,"bit":1,"input":1,"awt":1,"cast":1,"contain":2,"will":2,"pointer":1,"small":1,"array":6,"increas":1,"otherwis":1,"primit":3,"model":5,"legitim":1,"pixel":8,"pair":1,"correspond":1,"one":2,"data":31,"use":2,"object":1,"layout":2,"locat":2,"may":2,"thus":1,"storag":2,"general":1,"two":1,"num":1,"per":1,"larg":1,"pre":2,"java":2,"obj":4,"arenot":1,"illustr":1,"sampl":6,"bound":4},"maxFreq":31,"totalTerms":177},"loc":0}