{"id":16276,"className":"java.awt.RenderingHints","methodName":"equals","signature":"\u003cjava.awt.RenderingHints: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Compares the specified \u003ccode\u003eObject\u003c/code\u003e with this \u003ccode\u003eRenderingHints\u003c/code\u003e for equality. Returns \u003ccode\u003etrue\u003c/code\u003e if the specified object is also a \u003ccode\u003eMap\u003c/code\u003e and the two \u003ccode\u003eMap\u003c/code\u003e objects represent the same mappings.  More formally, two \u003ccode\u003eMap\u003c/code\u003e objects \u003ccode\u003et1\u003c/code\u003e and \u003ccode\u003et2\u003c/code\u003e represent the same mappings if \u003ccode\u003et1.keySet().equals(t2.keySet())\u003c/code\u003e and for every key \u003ccode\u003ek\u003c/code\u003e in \u003ccode\u003et1.keySet()\u003c/code\u003e, \u003cpre\u003e (t1.get(k)\u003d\u003dnull ? t2.get(k)\u003d\u003dnull : t1.get(k).equals(t2.get(k))) \u003c/pre\u003e. This ensures that the \u003ccode\u003eequals\u003c/code\u003e method works properly across different implementations of the \u003ccode\u003eMap\u003c/code\u003e interface.\n * @param o \u003ccode\u003eObject\u003c/code\u003e to be compared for equality withthis \u003ccode\u003eRenderingHints\u003c/code\u003e.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the specified \u003ccode\u003eObject\u003c/code\u003eis equal to this \u003ccode\u003eRenderingHints\u003c/code\u003e.\n */\n","tf":{"freq":{"work":1,"repres":2,"true":2,"equal":7,"hint":3,"object":6,"across":1,"ensur":1,"specifi":3,"render":3,"differ":1,"two":2,"formal":1,"pre":2,"map":6,"method":1,"withthi":1,"proper":1,"everi":1,"compar":2,"also":1,"key":4},"maxFreq":7,"totalTerms":52},"loc":8}