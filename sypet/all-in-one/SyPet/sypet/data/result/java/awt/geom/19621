{"id":19621,"className":"java.awt.geom.AffineTransform","methodName":"inverseTransform","signature":"\u003cjava.awt.geom.AffineTransform: java.awt.geom.Point2D inverseTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)\u003e","javadoc":"/** \n * Inverse transforms the specified \u003ccode\u003eptSrc\u003c/code\u003e and stores the result in \u003ccode\u003eptDst\u003c/code\u003e. If \u003ccode\u003eptDst\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a new \u003ccode\u003ePoint2D\u003c/code\u003e object is allocated and then the result of the transform is stored in this object. In either case, \u003ccode\u003eptDst\u003c/code\u003e, which contains the transformed point, is returned for convenience. If \u003ccode\u003eptSrc\u003c/code\u003e and \u003ccode\u003eptDst\u003c/code\u003e are the same object, the input point is correctly overwritten with the transformed point.\n * @param ptSrc the point to be inverse transformed\n * @param ptDst the resulting transformed point\n * @return \u003ccode\u003eptDst\u003c/code\u003e, which contains the result of theinverse transform.\n * @exception NoninvertibleTransformException  if the matrix cannot beinverted.\n * @since 1.2\n */\n","tf":{"freq":{"result":4,"except":2,"theinvers":1,"store":2,"matrix":1,"dst":6,"object":3,"overwritten":1,"specifi":1,"beinvert":1,"transform":9,"point":6,"input":1,"either":1,"invers":3,"correct":1,"contain":2,"src":3,"conveni":1,"noninvert":1,"alloc":1},"maxFreq":9,"totalTerms":51},"loc":58}