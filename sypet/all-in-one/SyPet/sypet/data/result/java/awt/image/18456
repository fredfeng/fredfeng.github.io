{"id":18456,"className":"java.awt.image.DirectColorModel","methodName":"DirectColorModel","signature":"\u003cjava.awt.image.DirectColorModel: void DirectColorModel(int,int,int,int)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eDirectColorModel\u003c/code\u003e from the specified masks that indicate which bits in an \u003ccode\u003eint\u003c/code\u003e pixel representation contain the red, green and blue color samples.  As pixel values do not contain alpha information, all pixels are treated as opaque, which means that alpha\u0026nbsp;\u003d\u0026nbsp;1.0.  All of the bits in each mask must be contiguous and fit in the specified number of least significant bits of an \u003ccode\u003eint\u003c/code\u003e pixel representation. The \u003ccode\u003eColorSpace\u003c/code\u003e is the default sRGB space. The transparency value is Transparency.OPAQUE.  The transfer type is the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT that can hold a single pixel.\n * @param bits the number of bits in the pixel values; for example,the sum of the number of bits in the masks.\n * @param rmask specifies a mask indicating which bits in aninteger pixel contain the red component\n * @param gmask specifies a mask indicating which bits in aninteger pixel contain the green component\n * @param bmask specifies a mask indicating which bits in aninteger pixel contain the blue component\n */\n","tf":{"freq":{"model":2,"gmask":1,"singl":1,"pixel":9,"least":1,"rmask":1,"data":3,"sum":1,"mask":6,"type":1,"space":2,"must":1,"specifi":5,"buffer":3,"bmask":1,"transpar":2,"fit":1,"opaqu":1,"indic":4,"alpha":2,"mean":1,"valu":3,"nbsp":2,"direct":2,"transfer":1,"green":2,"hold":1,"smallest":1,"signific":1,"number":3,"contigu":1,"represent":2,"bit":9,"inform":1,"red":2,"compon":3,"aninteg":3,"color":4,"blue":2,"contain":5,"exampl":1,"construct":1,"sampl":1,"treat":1},"maxFreq":9,"totalTerms":101},"loc":3}