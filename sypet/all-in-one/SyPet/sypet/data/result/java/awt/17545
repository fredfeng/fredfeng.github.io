{"id":17545,"className":"java.awt.Container","methodName":"validate","signature":"\u003cjava.awt.Container: void validate()\u003e","javadoc":"/** \n * Validates this container and all of its subcomponents. \u003cp\u003e Validating a container means laying out its subcomponents. Layout-related changes, such as setting the bounds of a component, or adding a component to the container, invalidate the container automatically.  Note that the ancestors of the container may be invalidated also (see  {@link Component#invalidate} for details.)Therefore, to restore the validity of the hierarchy, the  {@code validate()} method should be invoked on the top-most invalidcontainer of the hierarchy. \u003cp\u003e Validating the container may be a quite time-consuming operation. For performance reasons a developer may postpone the validation of the hierarchy till a set of layout-related operations completes, e.g. after adding all the children to the container. \u003cp\u003e If this  {@code Container} is not valid, this method invokesthe  {@code validateTree} method and marks this {@code Container}as valid. Otherwise, no action is performed.\n * @see #add(java.awt.Component)\n * @see #invalidate\n * @see Container#isValidateRoot\n * @see javax.swing.JComponent#revalidate()\n * @see #validateTree\n */\n","tf":{"freq":{"invalidcontain":1,"detail":1,"reason":1,"root":1,"subcompon":2,"perform":2,"jcompon":1,"time":1,"invalid":4,"tree":2,"oper":2,"javax":1,"relat":2,"action":1,"swing":1,"invok":1,"mark":1,"awt":1,"contain":10,"restor":1,"otherwis":1,"valid":12,"link":1,"children":1,"revalid":1,"hierarchi":3,"therefor":1,"add":1,"automat":1,"quit":1,"consum":1,"layout":2,"mean":1,"develop":1,"ancestor":1,"note":1,"top":1,"complet":1,"invokesth":1,"may":3,"lay":1,"till":1,"compon":4,"postpon":1,"ad":2,"method":3,"java":1,"chang":1,"also":1,"bound":1},"maxFreq":12,"totalTerms":89},"loc":28}