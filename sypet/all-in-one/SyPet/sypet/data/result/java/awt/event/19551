{"id":19551,"className":"java.awt.event.WindowEvent","methodName":"WindowEvent","signature":"\u003cjava.awt.event.WindowEvent: void WindowEvent(java.awt.Window,int,java.awt.Window,int,int)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eWindowEvent\u003c/code\u003e object. \u003cp\u003eThis method throws an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if \u003ccode\u003esource\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @param source    The \u003ccode\u003eWindow\u003c/code\u003e objectthat originated the event\n * @param id        An integer indicating the type of event.For information on allowable values, see the class description for  {@link WindowEvent}\n * @param opposite  The other window involved in the focus or activationchange, or \u003ccode\u003enull\u003c/code\u003e\n * @param oldState  Previous state of the window for window state change event.See  {@code #getOldState()} for allowable values\n * @param newState  New state of the window for window state change event.See  {@code #getNewState()} for allowable values\n * @throws IllegalArgumentException if \u003ccode\u003esource\u003c/code\u003e is null\n * @see #getWindow()\n * @see #getID()\n * @see #getOppositeWindow()\n * @see #getOldState()\n * @see #getNewState()\n * @since 1.4\n */\n","tf":{"freq":{"objectthat":1,"old":3,"allow":3,"link":1,"state":10,"object":1,"type":1,"opposit":2,"indic":1,"activationchang":1,"event":7,"valu":3,"focus":1,"argument":2,"except":2,"previous":1,"origin":1,"descript":1,"involv":1,"illeg":2,"inform":1,"window":11,"sourc":3,"method":1,"chang":2,"construct":1,"integ":1},"maxFreq":11,"totalTerms":65},"loc":6}