{"id":18977,"className":"java.awt.font.LineBreakMeasurer","methodName":"nextLayout","signature":"\u003cjava.awt.font.LineBreakMeasurer: java.awt.font.TextLayout nextLayout(float,int,boolean)\u003e","javadoc":"/** \n * Returns the next layout, and updates the current position.\n * @param wrappingWidth the maximum visible advance permittedfor the text in the next layout\n * @param offsetLimit the first character that can not beincluded in the next layout, even if the text after the limit would fit within the wrapping width; \u003ccode\u003eoffsetLimit\u003c/code\u003e must be greater than the current position\n * @param requireNextWord if \u003ccode\u003etrue\u003c/code\u003e, and if the entire wordat the current position does not fit within the wrapping width, \u003ccode\u003enull\u003c/code\u003e is returned. If \u003ccode\u003efalse\u003c/code\u003e, a valid layout is returned that includes at least the character at the current position\n * @return a \u003ccode\u003eTextLayout\u003c/code\u003e, beginning at the currentposition, that represents the next line fitting within \u003ccode\u003ewrappingWidth\u003c/code\u003e.  If the current position is at the end of the text used by this \u003ccode\u003eLineBreakMeasurer\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e is returned\n */\n","tf":{"freq":{"fals":1,"valid":1,"greater":1,"least":1,"visibl":1,"next":6,"use":1,"line":2,"permittedfor":1,"must":1,"fit":3,"requir":1,"layout":6,"current":5,"offset":2,"end":1,"limit":3,"wrap":4,"text":4,"includ":1,"repres":1,"charact":2,"width":4,"true":1,"begin":1,"beinclud":1,"updat":1,"advanc":1,"maximum":1,"wordat":1,"currentposit":1,"measur":1,"even":1,"word":1,"within":3,"entir":1,"posit":5,"first":1},"maxFreq":6,"totalTerms":74},"loc":16}