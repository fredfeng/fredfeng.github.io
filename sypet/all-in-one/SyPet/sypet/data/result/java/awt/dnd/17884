{"id":17884,"className":"java.awt.dnd.DragGestureEvent","methodName":"startDrag","signature":"\u003cjava.awt.dnd.DragGestureEvent: void startDrag(java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)\u003e","javadoc":"/** \n * Start the drag given the initial \u003ccode\u003eCursor\u003c/code\u003e to display, a drag \u003ccode\u003eImage\u003c/code\u003e, the offset of the \u003ccode\u003eImage\u003c/code\u003e, the \u003ccode\u003eTransferable\u003c/code\u003e object, and the \u003ccode\u003eDragSourceListener\u003c/code\u003e to use. \u003cP\u003e\n * @param dragCursor     The initial {@code Cursor} for this drag operationor  {@code null} for the default cursor handling;see \u003ca href\u003d\"DragSourceContext.html#defaultCursor\"\u003eDragSourceContext\u003c/a\u003e for more details on the cursor handling mechanism during drag and drop\n * @param dragImage    The source\u0027s dragImage\n * @param imageOffset  The dragImage\u0027s offset\n * @param transferable The source\u0027s Transferable\n * @param dsl          The source\u0027s DragSourceListener\u003cP\u003e\n * @throws InvalidDnDOperationException ifthe Drag and Drop system is unable to initiate a drag operation, or if the user attempts to start a drag while an existing drag operation is still executing.\n */\n","tf":{"freq":{"attempt":1,"detail":1,"cursor":6,"drop":2,"use":1,"object":1,"given":1,"invalid":1,"oper":2,"doper":1,"initi":3,"operationor":1,"offset":3,"exist":1,"listen":2,"href":1,"except":1,"transfer":3,"ifth":1,"drag":17,"still":1,"display":1,"imag":6,"handl":2,"unabl":1,"system":1,"dsl":1,"start":3,"mechan":1,"context":2,"sourc":7,"html":1,"execut":1,"user":1},"maxFreq":17,"totalTerms":79},"loc":3}