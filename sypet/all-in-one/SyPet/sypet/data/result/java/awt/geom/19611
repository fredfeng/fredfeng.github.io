{"id":19611,"className":"java.awt.geom.AffineTransform","methodName":"concatenate","signature":"\u003cjava.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)\u003e","javadoc":"/** \n * Concatenates an \u003ccode\u003eAffineTransform\u003c/code\u003e \u003ccode\u003eTx\u003c/code\u003e to this \u003ccode\u003eAffineTransform\u003c/code\u003e Cx in the most commonly useful way to provide a new user space that is mapped to the former user space by \u003ccode\u003eTx\u003c/code\u003e. Cx is updated to perform the combined transformation. Transforming a point p by the updated transform Cx\u0027 is equivalent to first transforming p by \u003ccode\u003eTx\u003c/code\u003e and then transforming the result by the original transform Cx like this: Cx\u0027(p) \u003d Cx(Tx(p)) In matrix notation, if this transform Cx is represented by the matrix [this] and \u003ccode\u003eTx\u003c/code\u003e is represented by the matrix [Tx] then this method does the following: \u003cpre\u003e [this] \u003d [this] x [Tx] \u003c/pre\u003e\n * @param Tx the \u003ccode\u003eAffineTransform\u003c/code\u003e object to beconcatenated with this \u003ccode\u003eAffineTransform\u003c/code\u003e object.\n * @see #preConcatenate\n * @since 1.2\n */\n","tf":{"freq":{"result":1,"common":1,"way":1,"use":1,"former":1,"perform":1,"beconcaten":1,"object":2,"space":2,"transform":11,"equival":1,"map":1,"combin":1,"follow":1,"repres":2,"concaten":3,"matrix":3,"origin":1,"like":1,"provid":1,"point":1,"notat":1,"updat":2,"pre":3,"method":1,"user":2,"first":1,"affin":4},"maxFreq":11,"totalTerms":52},"loc":183}