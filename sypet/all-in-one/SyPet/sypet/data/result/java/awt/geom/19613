{"id":19613,"className":"java.awt.geom.AffineTransform","methodName":"createInverse","signature":"\u003cjava.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eAffineTransform\u003c/code\u003e object representing the inverse transformation. The inverse transform Tx\u0027 of this transform Tx maps coordinates transformed by Tx back to their original coordinates. In other words, Tx\u0027(Tx(p)) \u003d p \u003d Tx(Tx\u0027(p)). \u003cp\u003e If this transform maps all coordinates onto a point or a line then it will not have an inverse, since coordinates that do not lie on the destination point or line will not have an inverse mapping. The \u003ccode\u003egetDeterminant\u003c/code\u003e method can be used to determine if this transform has no inverse, in which case an exception will be thrown if the \u003ccode\u003ecreateInverse\u003c/code\u003e method is called.\n * @return a new \u003ccode\u003eAffineTransform\u003c/code\u003e object representing theinverse transformation.\n * @see #getDeterminant\n * @exception NoninvertibleTransformException if the matrix cannot be inverted.\n * @since 1.2\n */\n","tf":{"freq":{"call":1,"line":2,"use":1,"object":2,"invert":1,"transform":10,"invers":7,"map":3,"noninvert":1,"coordin":4,"onto":1,"except":3,"thrown":1,"theinvers":1,"repres":2,"creat":2,"matrix":1,"origin":1,"back":1,"point":2,"determin":3,"will":3,"word":1,"method":2,"lie":1,"affin":2,"destin":1},"maxFreq":10,"totalTerms":60},"loc":72}