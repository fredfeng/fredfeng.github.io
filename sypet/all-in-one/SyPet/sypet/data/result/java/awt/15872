{"id":15872,"className":"java.awt.Graphics2D","methodName":"drawGlyphVector","signature":"\u003cjava.awt.Graphics2D: void drawGlyphVector(java.awt.font.GlyphVector,float,float)\u003e","javadoc":"/** \n * Renders the text of the specified {@link GlyphVector} usingthe \u003ccode\u003eGraphics2D\u003c/code\u003e context\u0027s rendering attributes. The rendering attributes applied include the \u003ccode\u003eClip\u003c/code\u003e, \u003ccode\u003eTransform\u003c/code\u003e, \u003ccode\u003ePaint\u003c/code\u003e, and \u003ccode\u003eComposite\u003c/code\u003e attributes.  The \u003ccode\u003eGlyphVector\u003c/code\u003e specifies individual glyphs from a  {@link Font}. The \u003ccode\u003eGlyphVector\u003c/code\u003e can also contain the glyph positions. This is the fastest way to render a set of characters to the screen.\n * @param g the \u003ccode\u003eGlyphVector\u003c/code\u003e to be rendered\n * @param x the x position in User Space where the glyphs shouldbe rendered\n * @param y the y position in User Space where the glyphs shouldbe rendered\n * @throws NullPointerException if \u003ccode\u003eg\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see java.awt.Font#createGlyphVector\n * @see java.awt.font.GlyphVector\n * @see #setPaint\n * @see java.awt.Graphics#setColor\n * @see #setTransform\n * @see #setComposite\n * @see #setClip\n */\n","tf":{"freq":{"graphic":2,"link":2,"way":1,"space":2,"usingth":1,"specifi":2,"draw":1,"transform":2,"attribut":3,"vector":7,"individu":1,"clip":2,"screen":1,"except":1,"text":1,"includ":1,"creat":1,"charact":1,"composit":2,"font":3,"glyph":11,"paint":2,"render":7,"shouldb":2,"awt":3,"appli":1,"color":1,"contain":1,"context":1,"pointer":1,"java":3,"user":2,"also":1,"posit":3,"fastest":1},"maxFreq":11,"totalTerms":77},"loc":0}