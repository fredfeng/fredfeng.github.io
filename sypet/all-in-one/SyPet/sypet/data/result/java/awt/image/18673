{"id":18673,"className":"java.awt.image.DataBufferInt","methodName":"DataBufferInt","signature":"\u003cjava.awt.image.DataBufferInt: void DataBufferInt(int[][],int,int[])\u003e","javadoc":"/** \n * Constructs an integer-based \u003cCODE\u003eDataBuffer\u003c/CODE\u003e with the specified arrays, size, and offsets. The number of banks is equal to \u003cCODE\u003edataArray.length\u003c/CODE\u003e.  Each array must be at least as large as \u003cCODE\u003esize\u003c/CODE\u003e + the corresponding offset.   There must be an entry in the offset array for each \u003cCODE\u003edataArray\u003c/CODE\u003e entry.  For each bank, only elements \u003cCODE\u003eoffset\u003c/CODE\u003e through \u003cCODE\u003eoffset\u003c/CODE\u003e + \u003cCODE\u003esize\u003c/CODE\u003e - 1 should be used by accessors of this \u003cCODE\u003eDataBuffer\u003c/CODE\u003e. \u003cp\u003e Note that  {@code DataBuffer} objects created by this constructormay be incompatible with \u003ca href\u003d\"#optimizations\"\u003eperformance optimizations\u003c/a\u003e used by some implementations (such as caching an associated image in video memory).\n * @param dataArray The integer arrays for the \u003cCODE\u003eDataBuffer\u003c/CODE\u003e.\n * @param size The size of the banks in the \u003cCODE\u003eDataBuffer\u003c/CODE\u003e.\n * @param offsets The offsets into each array.\n */\n","tf":{"freq":{"memori":1,"least":1,"correspond":1,"data":9,"use":2,"perform":1,"object":1,"must":2,"specifi":1,"buffer":6,"constructormay":1,"associ":1,"length":1,"bank":3,"offset":7,"href":1,"video":1,"note":1,"element":1,"optim":2,"creat":1,"entri":2,"equal":1,"number":1,"cach":1,"imag":1,"incompat":1,"size":5,"larg":1,"accessor":1,"base":1,"construct":1,"integ":2,"array":8},"maxFreq":9,"totalTerms":71},"loc":5}