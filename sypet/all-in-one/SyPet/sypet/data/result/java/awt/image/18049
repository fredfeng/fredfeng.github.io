{"id":18049,"className":"java.awt.image.ConvolveOp","methodName":"filter","signature":"\u003cjava.awt.image.ConvolveOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)\u003e","javadoc":"/** \n * Performs a convolution on BufferedImages.  Each component of the source image will be convolved (including the alpha component, if present). If the color model in the source image is not the same as that in the destination image, the pixels will be converted in the destination.  If the destination image is null, a BufferedImage will be created with the source ColorModel. The IllegalArgumentException may be thrown if the source is the same as the destination.\n * @param src the source \u003ccode\u003eBufferedImage\u003c/code\u003e to filter\n * @param dst the destination \u003ccode\u003eBufferedImage\u003c/code\u003e for thefiltered \u003ccode\u003esrc\u003c/code\u003e\n * @return the filtered \u003ccode\u003eBufferedImage\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003esrc\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @throws IllegalArgumentException if \u003ccode\u003esrc\u003c/code\u003e equals\u003ccode\u003edst\u003c/code\u003e\n * @throws ImagingOpException if \u003ccode\u003esrc\u003c/code\u003e cannot be filtered\n */\n","tf":{"freq":{"model":2,"pixel":1,"convert":1,"perform":1,"dst":2,"buffer":5,"alpha":1,"thefilt":1,"src":5,"argument":2,"except":4,"may":1,"thrown":1,"includ":1,"creat":1,"equal":1,"imag":10,"illeg":2,"present":1,"convolut":1,"compon":2,"color":2,"convolv":1,"will":3,"pointer":1,"sourc":5,"filter":4,"destin":5},"maxFreq":10,"totalTerms":67},"loc":60}