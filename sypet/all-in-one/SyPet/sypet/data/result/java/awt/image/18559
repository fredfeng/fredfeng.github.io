{"id":18559,"className":"java.awt.image.SinglePixelPackedSampleModel","methodName":"getDataElements","signature":"\u003cjava.awt.image.SinglePixelPackedSampleModel: java.lang.Object getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\u003e","javadoc":"/** \n * Returns data for a single pixel in a primitive array of type TransferType.  For a SinglePixelPackedSampleModel, the array will have one element, and the type will be the same as the storage data type.  Generally, obj should be passed in as null, so that the Object will be created automatically and will be of the right primitive data type. \u003cp\u003e The following code illustrates transferring data for one pixel from DataBuffer \u003ccode\u003edb1\u003c/code\u003e, whose storage layout is described by SinglePixelPackedSampleModel \u003ccode\u003esppsm1\u003c/code\u003e, to DataBuffer \u003ccode\u003edb2\u003c/code\u003e, whose storage layout is described by SinglePixelPackedSampleModel \u003ccode\u003esppsm2\u003c/code\u003e. The transfer will generally be more efficient than using getPixel/setPixel. \u003cpre\u003e SinglePixelPackedSampleModel sppsm1, sppsm2; DataBufferInt db1, db2; sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null, db1), db2); \u003c/pre\u003e Using getDataElements/setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModels have the same number of bands, corresponding bands have the same number of bits per sample, and the TransferTypes are the same. \u003cp\u003e If obj is non-null, it should be a primitive array of type TransferType. Otherwise, a ClassCastException is thrown.  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds, or if obj is non-null and is not large enough to hold the pixel data.\n * @param x         The X coordinate of the pixel location.\n * @param y         The Y coordinate of the pixel location.\n * @param obj       If non-null, a primitive array in which to returnthe pixel data.\n * @param data      The DataBuffer containing the image data.\n * @return the data for the specified pixel.\n * @see #setDataElements(int,int,Object,DataBuffer)\n */\n","tf":{"freq":{"singl":5,"pack":4,"sppsm":6,"enough":1,"type":8,"specifi":1,"buffer":6,"band":2,"effici":1,"right":1,"follow":1,"coordin":3,"element":7,"transfer":6,"except":2,"thrown":2,"index":1,"creat":1,"whose":2,"hold":1,"describ":2,"number":2,"imag":1,"non":3,"bit":1,"returnth":1,"cast":1,"contain":1,"will":5,"array":5,"otherwis":1,"primit":4,"model":6,"legitim":1,"pixel":13,"pair":1,"correspond":1,"one":2,"data":21,"use":2,"object":2,"automat":1,"layout":2,"locat":2,"may":1,"storag":3,"general":2,"pass":1,"two":1,"per":1,"larg":1,"pre":2,"obj":4,"illustr":1,"sampl":7,"bound":2},"maxFreq":21,"totalTerms":168},"loc":56}