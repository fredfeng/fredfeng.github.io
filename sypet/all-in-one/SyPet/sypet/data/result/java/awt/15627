{"id":15627,"className":"java.awt.Toolkit","methodName":"getSystemClipboard","signature":"\u003cjava.awt.Toolkit: java.awt.datatransfer.Clipboard getSystemClipboard()\u003e","javadoc":"/** \n * Gets the singleton instance of the system Clipboard which interfaces with clipboard facilities provided by the native platform. This clipboard enables data transfer between Java programs and native applications which use native clipboard facilities. \u003cp\u003e In addition to any and all formats specified in the flavormap.properties file, or other file specified by the \u003ccode\u003eAWT.DnD.flavorMapFileURL \u003c/code\u003e Toolkit property, text returned by the system Clipboard\u0027s \u003ccode\u003e getTransferData()\u003c/code\u003e method is available in the following flavors: \u003cul\u003e \u003cli\u003eDataFlavor.stringFlavor\u003c/li\u003e \u003cli\u003eDataFlavor.plainTextFlavor (\u003cb\u003edeprecated\u003c/b\u003e)\u003c/li\u003e \u003c/ul\u003e As with \u003ccode\u003ejava.awt.datatransfer.StringSelection\u003c/code\u003e, if the requested flavor is \u003ccode\u003eDataFlavor.plainTextFlavor\u003c/code\u003e, or an equivalent flavor, a Reader is returned. \u003cb\u003eNote:\u003c/b\u003e The behavior of the system Clipboard\u0027s \u003ccode\u003egetTransferData()\u003c/code\u003e method for \u003ccode\u003e DataFlavor.plainTextFlavor\u003c/code\u003e, and equivalent DataFlavors, is inconsistent with the definition of \u003ccode\u003eDataFlavor.plainTextFlavor \u003c/code\u003e. Because of this, support for \u003ccode\u003e DataFlavor.plainTextFlavor\u003c/code\u003e, and equivalent flavors, is \u003cb\u003edeprecated\u003c/b\u003e. \u003cp\u003e Each actual implementation of this method should first check if there is a security manager installed. If there is, the method should call the security manager\u0027s \u003ccode\u003echeckSystemClipboardAccess\u003c/code\u003e method to ensure it\u0027s ok to to access the system clipboard. If the default implementation of \u003ccode\u003echeckSystemClipboardAccess\u003c/code\u003e is used (that is, that method is not overriden), then this results in a call to the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with an \u003ccode\u003e AWTPermission(\"accessClipboard\")\u003c/code\u003e permission.\n * @return    the system Clipboard\n * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true\n * @see java.awt.GraphicsEnvironment#isHeadless\n * @see java.awt.datatransfer.Clipboard\n * @see java.awt.datatransfer.StringSelection\n * @see java.awt.datatransfer.DataFlavor#stringFlavor\n * @see java.awt.datatransfer.DataFlavor#plainTextFlavor\n * @see java.io.Reader\n * @see java.awt.AWTPermission\n * @since     JDK1.1\n */\n","tf":{"freq":{"deprec":2,"flavormap":1,"specifi":2,"datatransf":5,"equival":3,"file":3,"request":1,"permiss":2,"follow":1,"facil":2,"platform":1,"except":2,"text":7,"transfer":3,"support":1,"singleton":1,"enabl":1,"select":2,"environ":2,"flavor":22,"avail":1,"format":1,"headless":3,"provid":1,"instanc":1,"system":8,"awt":7,"reader":2,"program":1,"definit":1,"properti":2,"result":1,"inconsist":1,"call":2,"graphic":2,"behavior":1,"data":12,"use":2,"applic":1,"ensur":1,"map":1,"tpermiss":2,"toolkit":1,"plain":6,"note":1,"overriden":1,"addit":1,"check":4,"manag":3,"instal":1,"true":1,"access":4,"secur":3,"string":4,"actual":1,"java":9,"method":7,"clipboard":13,"first":1},"maxFreq":22,"totalTerms":179},"loc":0}