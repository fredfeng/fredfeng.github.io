{"id":18901,"className":"java.awt.font.TextMeasurer","methodName":"insertChar","signature":"\u003cjava.awt.font.TextMeasurer: void insertChar(java.text.AttributedCharacterIterator,int)\u003e","javadoc":"/** \n * Updates the \u003ccode\u003eTextMeasurer\u003c/code\u003e after a single character has been inserted into the paragraph currently represented by this \u003ccode\u003eTextMeasurer\u003c/code\u003e.  After this call, this \u003ccode\u003eTextMeasurer\u003c/code\u003e is equivalent to a new \u003ccode\u003eTextMeasurer\u003c/code\u003e created from the text;  however, it will usually be more efficient to update an existing \u003ccode\u003eTextMeasurer\u003c/code\u003e than to create a new one from scratch.\n * @param newParagraph the text of the paragraph after performingthe insertion.  Cannot be null.\n * @param insertPos the position in the text where the character wasinserted.  Must not be less than the start of \u003ccode\u003enewParagraph\u003c/code\u003e, and must be less than the end of \u003ccode\u003enewParagraph\u003c/code\u003e.\n * @throws IndexOutOfBoundsException if \u003ccode\u003einsertPos\u003c/code\u003e is lessthan the start of \u003ccode\u003enewParagraph\u003c/code\u003e or greater than or equal to the end of \u003ccode\u003enewParagraph\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003enewParagraph\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"call":1,"greater":1,"paragraph":8,"singl":1,"one":1,"must":2,"pos":2,"equival":1,"lessthan":1,"current":1,"effici":1,"howev":1,"exist":1,"end":2,"less":2,"usual":1,"scratch":1,"except":2,"index":1,"text":8,"wasinsert":1,"creat":2,"repres":1,"charact":2,"equal":1,"updat":2,"start":2,"will":1,"pointer":1,"measur":5,"performingth":1,"insert":5,"posit":1,"bound":1},"maxFreq":8,"totalTerms":65},"loc":43}