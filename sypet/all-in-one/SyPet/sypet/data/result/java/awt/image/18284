{"id":18284,"className":"java.awt.image.AffineTransformOp","methodName":"AffineTransformOp","signature":"\u003cjava.awt.image.AffineTransformOp: void AffineTransformOp(java.awt.geom.AffineTransform,java.awt.RenderingHints)\u003e","javadoc":"/** \n * Constructs an \u003cCODE\u003eAffineTransformOp\u003c/CODE\u003e given an affine transform. The interpolation type is determined from the \u003cCODE\u003eRenderingHints\u003c/CODE\u003e object.  If the interpolation hint is defined, it will be used. Otherwise, if the rendering quality hint is defined, the interpolation type is determined from its value.  If no hints are specified (\u003cCODE\u003ehints\u003c/CODE\u003e is null), the interpolation type is  {@link #TYPE_NEAREST_NEIGHBOR TYPE_NEAREST_NEIGHBOR}.\n * @param xform The \u003cCODE\u003eAffineTransform\u003c/CODE\u003e to use for theoperation.\n * @param hints The \u003cCODE\u003eRenderingHints\u003c/CODE\u003e object used to specifythe interpolation type for the operation.\n * @throws ImagingOpException if the transform is non-invertible.\n * @see java.awt.RenderingHints#KEY_INTERPOLATION\n * @see java.awt.RenderingHints#KEY_RENDERING\n */\n","tf":{"freq":{"otherwis":1,"defin":2,"xform":1,"link":1,"use":3,"theoper":1,"object":2,"type":4,"specifi":1,"invert":1,"transform":5,"given":1,"oper":1,"interpol":5,"valu":1,"except":1,"qualiti":1,"hint":9,"imag":1,"non":1,"render":5,"awt":2,"determin":2,"will":1,"java":2,"construct":1,"specifyth":1,"affin":4},"maxFreq":9,"totalTerms":61},"loc":30}