{"id":18321,"className":"java.awt.image.IndexColorModel","methodName":"getDataElements","signature":"\u003cjava.awt.image.IndexColorModel: java.lang.Object getDataElements(int[],int,java.lang.Object)\u003e","javadoc":"/** \n * Returns a data element array representation of a pixel in this \u003ccode\u003eColorModel\u003c/code\u003e given an array of unnormalized color/alpha components.  This array can then be passed to the \u003ccode\u003esetDataElements\u003c/code\u003e method of a \u003ccode\u003eWritableRaster\u003c/code\u003e object.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e. If the pixel variable is \u003ccode\u003enull\u003c/code\u003e, a new array is allocated.  If \u003ccode\u003epixel\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e, it must be a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e; otherwise, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown. An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if pixel is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e. \u003cp\u003e Since \u003ccode\u003eIndexColorModel\u003c/code\u003e can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported \u003ccode\u003etransferType\u003c/code\u003e\n * @param components an array of unnormalized color and alphacomponents\n * @param offset the index into \u003ccode\u003ecomponents\u003c/code\u003e at which tobegin retrieving color and alpha components\n * @param pixel the \u003ccode\u003eObject\u003c/code\u003e representing an array of colorand alpha components\n * @return an \u003ccode\u003eObject\u003c/code\u003e representing an array of color andalpha components.\n * @throws ClassCastException if \u003ccode\u003epixel\u003c/code\u003eis not a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e\n * @throws ArrayIndexOutOfBoundsException if\u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e or the \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e\n * @throws UnsupportedOperationException if \u003ccode\u003etransferType\u003c/code\u003eis not one of the supported transer types\n * @see WritableRaster#setDataElements\n * @see SampleModel#setDataElements\n */\n","tf":{"freq":{"otherwis":1,"primit":2,"transer":1,"unsupport":2,"model":5,"pixel":9,"one":1,"andalpha":1,"variabl":1,"unnorm":2,"data":5,"colorand":1,"use":1,"object":3,"type":7,"enough":4,"must":1,"given":1,"oper":1,"alpha":5,"valu":2,"offset":3,"element":5,"transfer":4,"index":5,"except":7,"thrown":3,"support":1,"repres":2,"hold":4,"writabl":2,"alphacompon":1,"pass":1,"represent":1,"tobegin":1,"raster":2,"cast":2,"compon":10,"color":10,"start":2,"retriev":1,"larg":4,"subclass":2,"method":2,"sampl":1,"bound":3,"alloc":1,"array":14},"maxFreq":14,"totalTerms":150},"loc":11}