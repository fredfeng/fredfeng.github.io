{"id":19078,"className":"java.awt.font.TextLayout","methodName":"getLeading","signature":"\u003cjava.awt.font.TextLayout: float getLeading()\u003e","javadoc":"/** \n * Returns the leading of the \u003ccode\u003eTextLayout\u003c/code\u003e. The leading is the suggested interline spacing for this \u003ccode\u003eTextLayout\u003c/code\u003e.  This is in baseline-relative coordinates. \u003cp\u003e The leading is computed from the leading, descent, and baseline of all glyphvectors in the \u003ccode\u003eTextLayout\u003c/code\u003e.  The algorithm is roughly as follows: \u003cblockquote\u003e\u003cpre\u003e maxD \u003d 0; maxDL \u003d 0; for (GlyphVector g in all glyphvectors) { maxD \u003d max(maxD, g.getDescent() + offsets[g.getBaseline()]); maxDL \u003d max(maxDL, g.getDescent() + g.getLeading() + offsets[g.getBaseline()]); } return maxDL - maxD; \u003c/pre\u003e\u003c/blockquote\u003e\n * @return the leading of this \u003ccode\u003eTextLayout\u003c/code\u003e.\n */\n","tf":{"freq":{"coordin":1,"text":4,"max":10,"glyphvector":2,"glyph":1,"lead":7,"baselin":4,"descent":3,"suggest":1,"rough":1,"space":1,"algorithm":1,"interlin":1,"vector":1,"pre":2,"blockquot":2,"layout":4,"relat":1,"comput":1,"offset":2,"follow":1},"maxFreq":10,"totalTerms":51},"loc":4}