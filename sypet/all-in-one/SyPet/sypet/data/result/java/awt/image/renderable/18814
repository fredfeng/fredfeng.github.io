{"id":18814,"className":"java.awt.image.renderable.ContextualRenderedImageFactory","methodName":"mapRenderContext","signature":"\u003cjava.awt.image.renderable.ContextualRenderedImageFactory: java.awt.image.renderable.RenderContext mapRenderContext(int,java.awt.image.renderable.RenderContext,java.awt.image.renderable.ParameterBlock,java.awt.image.renderable.RenderableImage)\u003e","javadoc":"/** \n * Maps the operation\u0027s output RenderContext into a RenderContext for each of the operation\u0027s sources.  This is useful for operations that can be expressed in whole or in part simply as alterations in the RenderContext, such as an affine mapping, or operations that wish to obtain lower quality renderings of their sources in order to save processing effort or transmission bandwith.  Some operations, such as blur, can also use this mechanism to avoid obtaining sources of higher quality than necessary.\n * @param i the index of the source image.\n * @param renderContext the RenderContext being applied to the operation.\n * @param paramBlock a ParameterBlock containing the operation\u0027ssources and parameters.\n * @param image the RenderableImage being rendered.\n * @return a \u003ccode\u003eRenderContext\u003c/code\u003e forthe source at the specified index of the parameters Vector contained in the specified ParameterBlock.\n */\n","tf":{"freq":{"forth":1,"simpli":1,"lower":1,"save":1,"bandwith":1,"wish":1,"higher":1,"ssourc":1,"block":3,"use":2,"blur":1,"express":1,"necessari":1,"transmiss":1,"specifi":2,"avoid":1,"order":1,"oper":7,"vector":1,"map":3,"index":2,"paramet":4,"qualiti":2,"effort":1,"imag":3,"alter":1,"render":10,"process":1,"appli":1,"obtain":2,"mechan":1,"whole":1,"contain":2,"context":7,"sourc":5,"part":1,"output":1,"also":1,"affin":1},"maxFreq":10,"totalTerms":79},"loc":0}