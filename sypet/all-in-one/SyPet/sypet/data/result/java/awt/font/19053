{"id":19053,"className":"java.awt.font.GlyphVector","methodName":"getGlyphOutline","signature":"\u003cjava.awt.font.GlyphVector: java.awt.Shape getGlyphOutline(int,float,float)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eShape\u003c/code\u003e whose interior corresponds to the visual representation of the specified glyph within this \u003ccode\u003eGlyphVector\u003c/code\u003e, offset to x,\u0026nbsp;y. The outline returned by this method is positioned around the origin of each individual glyph.\n * @param glyphIndex the index into this \u003ccode\u003eGlyphVector\u003c/code\u003e\n * @param x the X coordinate of the location of this {@code GlyphVector}\n * @param y the Y coordinate of the location of this {@code GlyphVector}\n * @return a \u003ccode\u003eShape\u003c/code\u003e that is the outline of the glyphat the specified \u003ccode\u003eglyphIndex\u003c/code\u003e of this \u003ccode\u003eGlyphVector\u003c/code\u003e when rendered at the specified coordinates.\n * @throws IndexOutOfBoundsException if \u003ccode\u003eglyphIndex\u003c/code\u003eis less than 0 or greater than or equal to the number of glyphs in this \u003ccode\u003eGlyphVector\u003c/code\u003e\n * @since 1.4\n */\n","tf":{"freq":{"interior":1,"greater":1,"outlin":3,"correspond":1,"specifi":3,"vector":6,"offset":1,"less":1,"nbsp":1,"individu":1,"coordin":3,"except":1,"index":5,"locat":2,"whose":1,"glyph":13,"origin":1,"number":1,"equal":1,"shape":2,"represent":1,"around":1,"render":1,"visual":1,"method":1,"within":1,"glyphat":1,"posit":1,"bound":1},"maxFreq":13,"totalTerms":58},"loc":5}