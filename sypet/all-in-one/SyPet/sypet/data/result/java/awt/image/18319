{"id":18319,"className":"java.awt.image.IndexColorModel","methodName":"getComponents","signature":"\u003cjava.awt.image.IndexColorModel: int[] getComponents(java.lang.Object,int[],int)\u003e","javadoc":"/** \n * Returns an array of unnormalized color/alpha components for a specified pixel in this \u003ccode\u003eColorModel\u003c/code\u003e.  The pixel value is specified by an array of data elements of type \u003ccode\u003etransferType\u003c/code\u003e passed in as an object reference. If \u003ccode\u003epixel\u003c/code\u003e is not a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if \u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e.  If the \u003ccode\u003ecomponents\u003c/code\u003e array is \u003ccode\u003enull\u003c/code\u003e, a new array is allocated that contains \u003ccode\u003eoffset + getNumComponents()\u003c/code\u003e elements. The \u003ccode\u003ecomponents\u003c/code\u003e array is returned, with the alpha component included only if \u003ccode\u003ehasAlpha\u003c/code\u003e returns true. Color/alpha components are stored in the \u003ccode\u003ecomponents\u003c/code\u003e array starting at \u003ccode\u003eoffset\u003c/code\u003e even if the array is allocated by this method.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is also thrown if  the \u003ccode\u003ecomponents\u003c/code\u003e array is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e. \u003cp\u003e Since \u003ccode\u003eIndexColorModel\u003c/code\u003e can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported \u003ccode\u003etransferType\u003c/code\u003e.\n * @param pixel the specified pixel\n * @param components an array that receives the color and alphacomponents of the specified pixel\n * @param offset the index into the \u003ccode\u003ecomponents\u003c/code\u003e array atwhich to begin storing the color and alpha components of the specified pixel\n * @return an array containing the color and alpha components of thespecified pixel starting at the specified offset.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003epixel\u003c/code\u003eis not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e or if the \u003ccode\u003ecomponents\u003c/code\u003e array is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e\n * @throws ClassCastException if \u003ccode\u003epixel\u003c/code\u003e is not aprimitive array of type \u003ccode\u003etransferType\u003c/code\u003e\n * @throws UnsupportedOperationException if \u003ccode\u003etransferType\u003c/code\u003eis not one of the supported transer types\n * @see ColorModel#hasAlpha\n * @see ColorModel#getNumComponents\n */\n","tf":{"freq":{"transer":1,"unsupport":2,"store":2,"unnorm":1,"enough":4,"type":9,"specifi":6,"refer":1,"oper":1,"thespecifi":1,"element":2,"index":5,"thrown":3,"except":7,"transfer":5,"support":1,"hold":4,"cast":2,"start":4,"contain":2,"subclass":2,"atwhich":1,"even":1,"array":17,"alloc":2,"primit":1,"model":6,"pixel":13,"one":1,"data":1,"use":1,"object":1,"alpha":9,"valu":3,"offset":6,"includ":1,"true":1,"receiv":1,"pass":1,"alphacompon":1,"begin":1,"aprimit":1,"num":2,"compon":17,"color":13,"larg":4,"method":2,"also":1,"bound":3},"maxFreq":17,"totalTerms":177},"loc":21}