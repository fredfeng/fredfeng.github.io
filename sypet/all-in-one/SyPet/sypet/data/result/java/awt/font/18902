{"id":18902,"className":"java.awt.font.TextMeasurer","methodName":"deleteChar","signature":"\u003cjava.awt.font.TextMeasurer: void deleteChar(java.text.AttributedCharacterIterator,int)\u003e","javadoc":"/** \n * Updates the \u003ccode\u003eTextMeasurer\u003c/code\u003e after a single character has been deleted from the paragraph currently represented by this \u003ccode\u003eTextMeasurer\u003c/code\u003e.  After this call, this \u003ccode\u003eTextMeasurer\u003c/code\u003e is equivalent to a new \u003ccode\u003eTextMeasurer\u003c/code\u003e created from the text;  however, it will usually be more efficient to update an existing \u003ccode\u003eTextMeasurer\u003c/code\u003e than to create a new one from scratch.\n * @param newParagraph the text of the paragraph after performingthe deletion.  Cannot be null.\n * @param deletePos the position in the text where the character was removed.Must not be less than the start of \u003ccode\u003enewParagraph\u003c/code\u003e, and must not be greater than the end of \u003ccode\u003enewParagraph\u003c/code\u003e.\n * @throws IndexOutOfBoundsException if \u003ccode\u003edeletePos\u003c/code\u003e isless than the start of \u003ccode\u003enewParagraph\u003c/code\u003e or greater than the end of \u003ccode\u003enewParagraph\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003enewParagraph\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"call":1,"greater":2,"paragraph":8,"singl":1,"delet":5,"one":1,"must":2,"pos":2,"equival":1,"current":1,"effici":1,"howev":1,"exist":1,"end":2,"less":1,"usual":1,"scratch":1,"except":2,"index":1,"text":8,"creat":2,"repres":1,"charact":2,"remov":1,"updat":2,"start":2,"will":1,"pointer":1,"measur":5,"isless":1,"performingth":1,"posit":1,"bound":1},"maxFreq":8,"totalTerms":64},"loc":28}