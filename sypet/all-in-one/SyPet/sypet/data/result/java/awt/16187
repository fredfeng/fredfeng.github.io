{"id":16187,"className":"java.awt.Rectangle","methodName":"grow","signature":"\u003cjava.awt.Rectangle: void grow(int,int)\u003e","javadoc":"/** \n * Resizes the \u003ccode\u003eRectangle\u003c/code\u003e both horizontally and vertically. \u003cp\u003e This method modifies the \u003ccode\u003eRectangle\u003c/code\u003e so that it is \u003ccode\u003eh\u003c/code\u003e units larger on both the left and right side, and \u003ccode\u003ev\u003c/code\u003e units larger at both the top and bottom. \u003cp\u003e The new \u003ccode\u003eRectangle\u003c/code\u003e has  {@code (x - h, y - v)}as its upper-left corner, width of  {@code (width + 2h)}, and a height of  {@code (height + 2v)}. \u003cp\u003e If negative values are supplied for \u003ccode\u003eh\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e, the size of the \u003ccode\u003eRectangle\u003c/code\u003e decreases accordingly. The  {@code grow} method will check for integer overflowand underflow, but does not check whether the resulting values of  {@code width} and {@code height} growfrom negative to non-negative or shrink from non-negative to negative.\n * @param h the horizontal expansion\n * @param v the vertical expansion\n */\n","tf":{"freq":{"result":1,"decreas":1,"growfrom":1,"rectangl":4,"whether":1,"resiz":1,"upper":1,"height":3,"side":1,"left":2,"horizont":2,"valu":2,"right":1,"top":1,"check":2,"vertic":2,"corner":1,"larger":2,"width":3,"expans":2,"suppli":1,"accord":1,"underflow":1,"non":2,"size":1,"unit":2,"overflowand":1,"grow":2,"will":1,"modifi":1,"bottom":1,"shrink":1,"method":2,"negat":5,"integ":1},"maxFreq":5,"totalTerms":57},"loc":52}