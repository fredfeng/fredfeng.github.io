{"id":18078,"className":"java.awt.image.BufferedImage","methodName":"getRGB","signature":"\u003cjava.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)\u003e","javadoc":"/** \n * Returns an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, from a portion of the image data.  Color conversion takes place if the default model does not match the image \u003ccode\u003eColorModel\u003c/code\u003e.  There are only 8-bits of precision for each color component in the returned data when using this method.  With a specified coordinate (x,\u0026nbsp;y) in the image, the ARGB pixel can be accessed in this way: \u003c/p\u003e \u003cpre\u003e pixel   \u003d rgbArray[offset + (y-startY)*scansize + (x-startX)]; \u003c/pre\u003e \u003cp\u003e An \u003ccode\u003eArrayOutOfBoundsException\u003c/code\u003e may be thrown if the region is not in bounds. However, explicit bounds checking is not guaranteed.\n * @param startX      the starting X coordinate\n * @param startY      the starting Y coordinate\n * @param w           width of region\n * @param h           height of region\n * @param rgbArray    if not \u003ccode\u003enull\u003c/code\u003e, the rgb pixels arewritten here\n * @param offset      offset into the \u003ccode\u003ergbArray\u003c/code\u003e\n * @param scansize    scanline stride for the \u003ccode\u003ergbArray\u003c/code\u003e\n * @return            array of RGB pixels.\n * @see #setRGB(int,int,int)\n * @see #setRGB(int,int,int,int,int[],int,int)\n */\n","tf":{"freq":{"region":3,"model":3,"pixel":5,"convers":1,"data":2,"use":1,"way":1,"scansiz":2,"space":1,"specifi":1,"scanlin":1,"height":1,"precis":1,"howev":1,"offset":3,"place":1,"portion":1,"nbsp":1,"coordin":3,"thrown":1,"may":1,"except":1,"check":1,"guarante":1,"width":1,"rgb":5,"imag":3,"access":1,"stride":1,"bit":1,"compon":1,"explicit":1,"start":6,"color":5,"take":1,"pre":2,"arewritten":1,"method":1,"match":1,"integ":1,"bound":3,"array":7},"maxFreq":7,"totalTerms":80},"loc":42}