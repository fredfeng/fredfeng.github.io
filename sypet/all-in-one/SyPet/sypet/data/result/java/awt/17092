{"id":17092,"className":"java.awt.JobAttributes","methodName":"setPageRanges","signature":"\u003cjava.awt.JobAttributes: void setPageRanges(int[][])\u003e","javadoc":"/** \n * Specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed. All range numbers are inclusive. If this attribute is not specified, then the values from the fromPage and toPages attributes are used. If pageRanges and either or both of fromPage and toPage are specified, pageRanges takes precedence. Specifying none of pageRanges, fromPage, or toPage is equivalent to calling setPageRanges(new int[][] { new int[] { \u003ci\u003eminPage\u003c/i\u003e, \u003ci\u003eminPage\u003c/i\u003e } });\n * @param pageRanges an array of integer arrays of 2 elements. An arrayis interpreted as a range spanning all pages including and between the specified pages. Ranges must be in ascending order and must not overlap. Specified page numbers cannot be less than \u003ci\u003eminPage\u003c/i\u003e nor greater than \u003ci\u003emaxPage\u003c/i\u003e. For example: (new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 }, new int[] { 15, 19 } }), specifies pages 1, 2, 3, 5, 15, 16, 17, 18, and 19. Note that (new int[][] { new int[] { 1, 1 }, new int[] { 1, 2 } }), is an invalid set of page ranges because the two ranges overlap.\n * @throws IllegalArgumentException if one or more of the aboveconditions is violated.\n */\n","tf":{"freq":{"call":1,"greater":1,"one":1,"interpret":1,"use":2,"violat":1,"must":2,"specifi":7,"inclus":1,"attribut":3,"invalid":1,"order":1,"page":23,"equival":1,"rang":13,"none":1,"valu":1,"note":1,"less":1,"argument":1,"min":3,"element":1,"except":1,"max":1,"overlap":2,"includ":1,"job":1,"number":2,"illeg":1,"print":2,"two":1,"preced":1,"abovecondit":1,"either":1,"arrayi":1,"take":1,"exampl":1,"ascend":1,"integ":1,"array":2,"span":1},"maxFreq":23,"totalTerms":91},"loc":38}