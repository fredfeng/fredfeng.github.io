{"id":16080,"className":"java.awt.Graphics","methodName":"drawImage","signature":"\u003cjava.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)\u003e","javadoc":"/** \n * Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface. \u003cp\u003e Transparent pixels are drawn in the specified background color. This operation is equivalent to filling a rectangle of the width and height of the specified image with the given color and then drawing the image on top of it, but possibly more efficient. \u003cp\u003e This method returns immediately in all cases, even if the image area to be drawn has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete then \u003ccode\u003edrawImage\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e. As more of the image becomes available, the process that loads the image notifies the specified image observer. \u003cp\u003e This method always uses the unscaled version of the image to render the scaled rectangle and performs the required scaling on the fly. It does not use a cached, scaled version of the image for this operation. Scaling of the image from source to destination is performed such that the first coordinate of the source rectangle is mapped to the first coordinate of the destination rectangle, and the second source coordinate is mapped to the second destination coordinate. The subimage is scaled and flipped as needed to preserve those mappings.\n * @param img the specified image to be drawn. This method doesnothing if \u003ccode\u003eimg\u003c/code\u003e is null.\n * @param dx1 the \u003ci\u003ex\u003c/i\u003e coordinate of the first corner of thedestination rectangle.\n * @param dy1 the \u003ci\u003ey\u003c/i\u003e coordinate of the first corner of thedestination rectangle.\n * @param dx2 the \u003ci\u003ex\u003c/i\u003e coordinate of the second corner of thedestination rectangle.\n * @param dy2 the \u003ci\u003ey\u003c/i\u003e coordinate of the second corner of thedestination rectangle.\n * @param sx1 the \u003ci\u003ex\u003c/i\u003e coordinate of the first corner of thesource rectangle.\n * @param sy1 the \u003ci\u003ey\u003c/i\u003e coordinate of the first corner of thesource rectangle.\n * @param sx2 the \u003ci\u003ex\u003c/i\u003e coordinate of the second corner of thesource rectangle.\n * @param sy2 the \u003ci\u003ey\u003c/i\u003e coordinate of the second corner of thesource rectangle.\n * @param bgcolor the background color to paint under thenon-opaque portions of the image.\n * @param observer object to be notified as more of the image isscaled and converted.\n * @return   \u003ccode\u003efalse\u003c/code\u003e if the image pixels are still changing;\u003ccode\u003etrue\u003c/code\u003e otherwise.\n * @see java.awt.Image\n * @see java.awt.image.ImageObserver\n * @see java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)\n * @since       JDK1.1\n */\n","tf":{"freq":{"need":1,"fals":2,"second":6,"img":2,"possibl":1,"perform":2,"bgcolor":1,"specifi":7,"draw":4,"requir":1,"height":1,"becom":1,"observ":4,"given":1,"equival":1,"oper":2,"effici":1,"coordin":12,"notifi":2,"fli":2,"alway":1,"width":1,"preserv":1,"paint":1,"avail":2,"imag":23,"much":1,"render":1,"unscal":1,"awt":4,"surfac":1,"updat":1,"subimag":1,"thedestin":4,"dither":1,"sourc":3,"even":1,"load":1,"output":2,"drawabl":1,"otherwis":1,"scale":7,"pixel":2,"convert":2,"use":2,"object":1,"rectangl":12,"version":2,"opaqu":1,"transpar":1,"fit":1,"area":3,"isscal":1,"map":3,"current":3,"immedi":1,"thenon":1,"flip":1,"drawn":3,"portion":1,"top":1,"complet":1,"doesnoth":1,"corner":8,"fill":1,"true":1,"still":1,"cach":1,"represent":1,"process":1,"color":3,"thesourc":4,"background":2,"java":4,"insid":1,"method":3,"chang":1,"devic":1,"first":6,"destin":4,"yet":2},"maxFreq":23,"totalTerms":203},"loc":0}