{"id":18296,"className":"java.awt.image.IndexColorModel","methodName":"IndexColorModel","signature":"\u003cjava.awt.image.IndexColorModel: void IndexColorModel(int,int,byte[],byte[],byte[])\u003e","javadoc":"/** \n * Constructs an \u003ccode\u003eIndexColorModel\u003c/code\u003e from the specified arrays of red, green, and blue components.  Pixels described by this color model all have alpha components of 255 unnormalized (1.0\u0026nbsp;normalized), which means they are fully opaque.  All of the arrays specifying the color components must have at least the specified number of entries. The \u003ccode\u003eColorSpace\u003c/code\u003e is the default sRGB space. Since there is no alpha information in any of the arguments to this constructor, the transparency value is always \u003ccode\u003eTransparency.OPAQUE\u003c/code\u003e. The transfer type is the smallest of \u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e or \u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e that can hold a single pixel.\n * @param bits      the number of bits each pixel occupies\n * @param size      the size of the color component arrays\n * @param r         the array of red color components\n * @param g         the array of green color components\n * @param b         the array of blue color components\n * @throws IllegalArgumentException if \u003ccode\u003ebits\u003c/code\u003e is lessthan 1 or greater than 16\n * @throws IllegalArgumentException if \u003ccode\u003esize\u003c/code\u003e is lessthan 1\n */\n","tf":{"freq":{"model":3,"greater":1,"singl":1,"pixel":3,"least":1,"normal":1,"data":2,"unnorm":1,"occupi":1,"type":1,"space":2,"must":1,"specifi":3,"buffer":2,"transpar":2,"opaqu":1,"lessthan":2,"alpha":2,"mean":1,"valu":1,"constructor":1,"nbsp":1,"argument":3,"except":2,"transfer":1,"index":2,"alway":1,"green":2,"entri":1,"hold":1,"smallest":1,"describ":1,"fulli":1,"number":2,"illeg":2,"size":3,"bit":3,"inform":1,"red":2,"compon":7,"blue":2,"color":9,"construct":1,"array":6},"maxFreq":9,"totalTerms":88},"loc":12}