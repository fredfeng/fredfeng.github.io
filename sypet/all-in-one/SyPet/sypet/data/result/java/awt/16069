{"id":16069,"className":"java.awt.Graphics","methodName":"fillPolygon","signature":"\u003cjava.awt.Graphics: void fillPolygon(int[],int[],int)\u003e","javadoc":"/** \n * Fills a closed polygon defined by arrays of \u003ci\u003ex\u003c/i\u003e and \u003ci\u003ey\u003c/i\u003e coordinates. \u003cp\u003e This method draws the polygon defined by \u003ccode\u003enPoint\u003c/code\u003e line segments, where the first \u003ccode\u003enPoint\u0026nbsp;-\u0026nbsp;1\u003c/code\u003e line segments are line segments from \u003ccode\u003e(xPoints[i\u0026nbsp;-\u0026nbsp;1],\u0026nbsp;yPoints[i\u0026nbsp;-\u0026nbsp;1])\u003c/code\u003e to \u003ccode\u003e(xPoints[i],\u0026nbsp;yPoints[i])\u003c/code\u003e, for 1\u0026nbsp;\u0026le;\u0026nbsp;\u003ci\u003ei\u003c/i\u003e\u0026nbsp;\u0026le;\u0026nbsp;\u003ccode\u003enPoints\u003c/code\u003e. The figure is automatically closed by drawing a line connecting the final point to the first point, if those points are different. \u003cp\u003e The area inside the polygon is defined using an even-odd fill rule, also known as the alternating rule.\n * @param xPoints   a an array of \u003ccode\u003ex\u003c/code\u003e coordinates.\n * @param yPoints   a an array of \u003ccode\u003ey\u003c/code\u003e coordinates.\n * @param nPoints   a the total number of points.\n * @see java.awt.Graphics#drawPolygon(int[],int[],int)\n */\n","tf":{"freq":{"total":1,"defin":3,"graphic":1,"connect":1,"segment":3,"line":4,"use":1,"automat":1,"close":2,"draw":3,"polygon":5,"area":1,"altern":1,"rule":2,"nbsp":12,"coordin":3,"fill":3,"number":1,"figur":1,"point":14,"differ":1,"awt":1,"java":1,"method":1,"insid":1,"even":1,"known":1,"odd":1,"first":2,"also":1,"array":3},"maxFreq":14,"totalTerms":77},"loc":0}