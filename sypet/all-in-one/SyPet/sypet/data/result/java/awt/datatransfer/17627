{"id":17627,"className":"java.awt.datatransfer.SystemFlavorMap","methodName":"addFlavorForUnencodedNative","signature":"\u003cjava.awt.datatransfer.SystemFlavorMap: void addFlavorForUnencodedNative(java.lang.String,java.awt.datatransfer.DataFlavor)\u003e","javadoc":"/** \n * Adds a mapping from a single \u003ccode\u003eString\u003c/code\u003e native to a single \u003ccode\u003eDataFlavor\u003c/code\u003e. Unlike \u003ccode\u003egetFlavorsForNative\u003c/code\u003e, the mapping will only be established in one direction, and the native will not be encoded. To establish a two-way mapping, call \u003ccode\u003eaddUnencodedNativeForFlavor\u003c/code\u003e as well. The new mapping will be of lower priority than any existing mapping. This method has no effect if a mapping from the specified \u003ccode\u003eString\u003c/code\u003e native to the specified or equal \u003ccode\u003eDataFlavor\u003c/code\u003e already exists.\n * @param nat the \u003ccode\u003eString\u003c/code\u003e native key for the mapping\n * @param flav the \u003ccode\u003eDataFlavor\u003c/code\u003e value for the mapping\n * @throws NullPointerException if nat or flav is \u003ccode\u003enull\u003c/code\u003e\n * @see #addUnencodedNativeForFlavor\n * @since 1.4\n */\n","tf":{"freq":{"call":1,"lower":1,"singl":2,"one":1,"data":3,"way":1,"well":1,"add":4,"specifi":2,"unlik":1,"map":8,"valu":1,"exist":2,"key":1,"direct":1,"except":1,"flav":2,"prioriti":1,"establish":2,"flavor":7,"equal":1,"two":1,"encod":1,"effect":1,"unencod":3,"string":3,"will":3,"pointer":1,"nat":2,"alreadi":1,"method":1},"maxFreq":8,"totalTerms":61},"loc":16}