{"id":15616,"className":"java.awt.Toolkit","methodName":"getImage","signature":"\u003cjava.awt.Toolkit: java.awt.Image getImage(java.net.URL)\u003e","javadoc":"/** \n * Returns an image which gets pixel data from the specified URL. The pixel data referenced by the specified URL must be in one of the following formats: GIF, JPEG or PNG. The underlying toolkit attempts to resolve multiple requests with the same URL to the same returned Image. \u003cp\u003e Since the mechanism required to facilitate this sharing of \u003ccode\u003eImage\u003c/code\u003e objects may continue to hold onto images that are no longer in use for an indefinite period of time, developers are encouraged to implement their own caching of images by using the  {@link #createImage(java.net.URL) createImage}variant wherever available. If the image data stored at the specified URL changes, the \u003ccode\u003eImage\u003c/code\u003e object returned from this method may still contain stale information which was fetched from the URL after a prior call. Previously loaded image data can be manually discarded by calling the  {@link Image#flush flush} method on thereturned \u003ccode\u003eImage\u003c/code\u003e. \u003cp\u003e This method first checks if there is a security manager installed. If so, the method calls the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with the url.openConnection().getPermission() permission to ensure that the access to the image is allowed. For compatibility with pre-1.2 security managers, if the access is denied with \u003ccode\u003eFilePermission\u003c/code\u003e or \u003ccode\u003eSocketPermission\u003c/code\u003e, the method throws the \u003ccode\u003eSecurityException\u003c/code\u003e if the corresponding 1.1-style SecurityManager.checkXXX method also denies permission.\n * @param url   the URL to use in fetching the pixel data.\n * @return    an image which gets its pixel data fromthe specified URL.\n * @throws SecurityException  if a security manager exists and itscheckPermission method doesn\u0027t allow the operation.\n * @see #createImage(java.net.URL)\n */\n","tf":{"freq":{"store":1,"facilit":1,"must":1,"specifi":4,"prior":1,"referenc":1,"open":1,"time":1,"requir":1,"wherev":1,"oper":1,"file":1,"request":1,"encourag":1,"permiss":7,"socket":1,"longer":1,"itscheck":1,"fromth":1,"deni":2,"follow":1,"onto":1,"fetch":2,"except":2,"multipl":1,"creat":3,"hold":1,"resolv":1,"avail":1,"format":1,"imag":16,"period":1,"url":2,"continu":1,"inform":1,"contain":1,"load":1,"stale":1,"compat":1,"attempt":1,"call":3,"allow":2,"connect":1,"pixel":4,"correspond":1,"one":1,"link":2,"data":6,"use":3,"object":2,"discard":1,"net":2,"variant":1,"ensur":1,"share":1,"style":1,"toolkit":1,"develop":1,"exist":1,"thereturn":1,"may":2,"check":3,"previous":1,"manag":5,"instal":1,"still":1,"cach":1,"access":2,"manual":1,"secur":7,"flush":2,"pre":1,"mechan":1,"indefinit":1,"java":2,"method":8,"chang":1,"also":1,"first":1},"maxFreq":16,"totalTerms":148},"loc":0}