{"id":15865,"className":"java.awt.Graphics2D","methodName":"drawImage","signature":"\u003cjava.awt.Graphics2D: void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)\u003e","javadoc":"/** \n * Renders a \u003ccode\u003eBufferedImage\u003c/code\u003e that is filtered with a {@link BufferedImageOp}. The rendering attributes applied include the \u003ccode\u003eClip\u003c/code\u003e, \u003ccode\u003eTransform\u003c/code\u003e and \u003ccode\u003eComposite\u003c/code\u003e attributes.  This is equivalent to: \u003cpre\u003e img1 \u003d op.filter(img, null); drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null); \u003c/pre\u003e\n * @param op the filter to be applied to the image before rendering\n * @param img the specified \u003ccode\u003eBufferedImage\u003c/code\u003e to be rendered.This method does nothing if \u003ccode\u003eimg\u003c/code\u003e is null.\n * @param x the x coordinate of the location in user space wherethe upper left corner of the image is rendered\n * @param y the y coordinate of the location in user space wherethe upper left corner of the image is rendered\n * @see #transform\n * @see #setTransform\n * @see #setComposite\n * @see #clip\n * @see #setClip\n */\n","tf":{"freq":{"link":1,"img":5,"space":2,"specifi":1,"buffer":3,"draw":2,"upper":2,"transform":4,"whereth":2,"attribut":2,"equival":1,"noth":1,"left":2,"clip":3,"coordin":2,"locat":2,"includ":1,"corner":2,"composit":2,"imag":8,"render":6,"appli":2,"pre":2,"method":1,"user":2,"filter":3,"affin":1},"maxFreq":8,"totalTerms":65},"loc":0}