{"id":18381,"className":"java.awt.image.LookupOp","methodName":"filter","signature":"\u003cjava.awt.image.LookupOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)\u003e","javadoc":"/** \n * Performs a lookup operation on a \u003ccode\u003eBufferedImage\u003c/code\u003e. If the color model in the source image is not the same as that in the destination image, the pixels will be converted in the destination.  If the destination image is \u003ccode\u003enull\u003c/code\u003e, a \u003ccode\u003eBufferedImage\u003c/code\u003e will be created with an appropriate \u003ccode\u003eColorModel\u003c/code\u003e.  An \u003ccode\u003eIllegalArgumentException\u003c/code\u003e might be thrown if the number of arrays in the \u003ccode\u003eLookupTable\u003c/code\u003e does not meet the restrictions stated in the class comment above, or if the source image has an \u003ccode\u003eIndexColorModel\u003c/code\u003e.\n * @param src the \u003ccode\u003eBufferedImage\u003c/code\u003e to be filtered\n * @param dst the \u003ccode\u003eBufferedImage\u003c/code\u003e in which tostore the results of the filter operation\n * @return the filtered \u003ccode\u003eBufferedImage\u003c/code\u003e.\n * @throws IllegalArgumentException if the number of arrays in the\u003ccode\u003eLookupTable\u003c/code\u003e does not meet the restrictions described in the class comments, or if the source image has an \u003ccode\u003eIndexColorModel\u003c/code\u003e.\n */\n","tf":{"freq":{"result":1,"might":1,"model":4,"pixel":1,"state":1,"convert":1,"perform":1,"dst":1,"lookup":3,"buffer":5,"oper":2,"src":1,"argument":2,"index":2,"except":2,"thrown":1,"creat":1,"describ":1,"tostor":1,"number":2,"imag":10,"meet":2,"illeg":2,"restrict":2,"color":4,"appropri":1,"tabl":2,"will":2,"sourc":3,"comment":2,"filter":4,"destin":3,"array":2},"maxFreq":10,"totalTerms":73},"loc":107}