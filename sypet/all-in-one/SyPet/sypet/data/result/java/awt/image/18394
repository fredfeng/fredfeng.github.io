{"id":18394,"className":"java.awt.image.Raster","methodName":"createPackedRaster","signature":"\u003cjava.awt.image.Raster: java.awt.image.WritableRaster createPackedRaster(int,int,int,int,int,java.awt.Point)\u003e","javadoc":"/** \n * Creates a Raster based on a packed SampleModel with the specified data type, width, height, number of bands, and bits per band.  If the number of bands is one, the SampleModel will be a MultiPixelPackedSampleModel. \u003cp\u003e If the number of bands is more than one, the SampleModel will be a SinglePixelPackedSampleModel, with each band having bitsPerBand bits.  In either case, the requirements on dataType and bitsPerBand imposed by the corresponding SampleModel must be met. \u003cp\u003e The upper left corner of the Raster is given by the location argument.  If location is null, (0, 0) will be used. The dataType parameter should be one of the enumerated values defined in the DataBuffer class. \u003cp\u003e The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT, and TYPE_INT.\n * @param dataType  the data type for storing samples\n * @param w         the width in pixels of the image data\n * @param h         the height in pixels of the image data\n * @param bands     the number of bands\n * @param bitsPerBand the number of bits per band\n * @param location  the upper-left corner of the \u003ccode\u003eRaster\u003c/code\u003e\n * @return a WritableRaster object with the specified data type,width, height, number of bands, and bits per band.\n * @throws RasterFormatException if \u003ccode\u003ew\u003c/code\u003e or \u003ccode\u003eh\u003c/code\u003eis less than or equal to zero, or computing either \u003ccode\u003elocation.x + w\u003c/code\u003e or \u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow\n * @throws IllegalArgumentException if the product of\u003ccode\u003ebitsPerBand\u003c/code\u003e and \u003ccode\u003ebands\u003c/code\u003e is greater than the number of bits held by \u003ccode\u003edataType\u003c/code\u003e\n * @throws IllegalArgumentException if \u003ccode\u003ebitsPerBand\u003c/code\u003e or\u003ccode\u003ebands\u003c/code\u003e is not greater than zero\n * @throws IllegalArgumentException if \u003ccode\u003edataType\u003c/code\u003e is notone of the supported data types, which are \u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e or \u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e\n */\n","tf":{"freq":{"greater":2,"store":1,"singl":1,"pack":4,"type":10,"zero":2,"must":1,"specifi":2,"buffer":4,"requir":1,"band":17,"height":3,"given":1,"argument":4,"except":4,"support":2,"creat":2,"width":3,"number":7,"writabl":1,"format":1,"imag":2,"bit":10,"overflow":1,"multi":1,"will":3,"comput":1,"result":1,"defin":1,"model":6,"pixel":4,"correspond":1,"one":3,"data":16,"use":1,"object":1,"met":1,"upper":2,"current":1,"left":2,"valu":1,"noton":1,"less":1,"held":1,"locat":5,"corner":2,"paramet":1,"equal":1,"illeg":3,"impos":1,"product":1,"raster":6,"either":2,"per":8,"base":1,"integ":1,"sampl":7},"maxFreq":17,"totalTerms":174},"loc":65}