{"id":18712,"className":"java.awt.image.DataBufferUShort","methodName":"DataBufferUShort","signature":"\u003cjava.awt.image.DataBufferUShort: void DataBufferUShort(short[],int)\u003e","javadoc":"/** \n * Constructs an unsigned-short based \u003cCODE\u003eDataBuffer\u003c/CODE\u003e with a single bank using the specified array. Only the first \u003cCODE\u003esize\u003c/CODE\u003e elements should be used by accessors of this \u003cCODE\u003eDataBuffer\u003c/CODE\u003e.  \u003cCODE\u003edataArray\u003c/CODE\u003e must be large enough to hold \u003cCODE\u003esize\u003c/CODE\u003e elements. \u003cp\u003e Note that  {@code DataBuffer} objects created by this constructormay be incompatible with \u003ca href\u003d\"#optimizations\"\u003eperformance optimizations\u003c/a\u003e used by some implementations (such as caching an associated image in video memory).\n * @param dataArray The unsigned-short array for the \u003cCODE\u003eDataBuffer\u003c/CODE\u003e.\n * @param size The size of the \u003cCODE\u003eDataBuffer\u003c/CODE\u003e bank.\n */\n","tf":{"freq":{"memori":1,"singl":1,"data":8,"use":3,"perform":1,"object":1,"enough":1,"must":1,"specifi":1,"buffer":6,"constructormay":1,"associ":1,"bank":2,"href":1,"video":1,"note":1,"element":2,"optim":2,"creat":1,"hold":1,"cach":1,"ushort":1,"imag":1,"incompat":1,"size":4,"unsign":2,"accessor":1,"larg":1,"base":1,"construct":1,"first":1,"array":4},"maxFreq":8,"totalTerms":56},"loc":9}