{"id":18267,"className":"java.awt.image.MultiPixelPackedSampleModel","methodName":"setDataElements","signature":"\u003cjava.awt.image.MultiPixelPackedSampleModel: void setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\u003e","javadoc":"/** \n * Sets the data for a single pixel in the specified \u003ccode\u003eDataBuffer\u003c/code\u003e from a primitive array of type TransferType.  For a \u003ccode\u003eMultiPixelPackedSampleModel\u003c/code\u003e, only the first element of the array holds valid data, and the type must be the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT that can hold a single pixel. \u003cp\u003e The following code illustrates transferring data for one pixel from \u003ccode\u003eDataBuffer\u003c/code\u003e \u003ccode\u003edb1\u003c/code\u003e, whose storage layout is described by \u003ccode\u003eMultiPixelPackedSampleModel\u003c/code\u003e \u003ccode\u003emppsm1\u003c/code\u003e, to \u003ccode\u003eDataBuffer\u003c/code\u003e \u003ccode\u003edb2\u003c/code\u003e, whose storage layout is described by \u003ccode\u003eMultiPixelPackedSampleModel\u003c/code\u003e \u003ccode\u003emppsm2\u003c/code\u003e. The transfer is generally more efficient than using \u003ccode\u003egetPixel\u003c/code\u003e or \u003ccode\u003esetPixel\u003c/code\u003e. \u003cpre\u003e MultiPixelPackedSampleModel mppsm1, mppsm2; DataBufferInt db1, db2; mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null, db1), db2); \u003c/pre\u003e Using \u003ccode\u003egetDataElements\u003c/code\u003e or \u003ccode\u003esetDataElements\u003c/code\u003e to transfer between two \u003ccode\u003eDataBuffer/SampleModel\u003c/code\u003e pairs is legitimate if the \u003ccode\u003eSampleModel\u003c/code\u003e objects have the same number of bands, corresponding bands have the same number of bits per sample, and the TransferTypes are the same. \u003cp\u003e \u003ccode\u003eobj\u003c/code\u003e must be a primitive array of type TransferType. Otherwise, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the coordinates are not in bounds, or if \u003ccode\u003eobj\u003c/code\u003e is not large enough to hold the pixel data.\n * @param x the X coordinate of the pixel location\n * @param y the Y coordinate of the pixel location\n * @param obj a primitive array containing pixel data\n * @param data the \u003ccode\u003eDataBuffer\u003c/code\u003e containing the image data\n * @see #getDataElements(int,int,Object,DataBuffer)\n */\n","tf":{"freq":{"singl":2,"pack":4,"enough":1,"type":6,"must":2,"specifi":1,"buffer":10,"band":2,"effici":1,"follow":1,"coordin":3,"element":7,"transfer":6,"except":2,"thrown":2,"index":1,"whose":2,"hold":3,"describ":2,"number":2,"imag":1,"bit":1,"cast":1,"contain":2,"multi":4,"array":5,"otherwis":1,"valid":1,"primit":3,"mppsm":6,"model":6,"legitim":1,"pixel":13,"pair":1,"correspond":1,"one":1,"data":23,"use":2,"object":2,"layout":2,"locat":2,"smallest":1,"storag":2,"general":1,"two":1,"per":1,"larg":1,"pre":2,"obj":3,"first":1,"illustr":1,"sampl":7,"bound":2},"maxFreq":23,"totalTerms":162},"loc":38}