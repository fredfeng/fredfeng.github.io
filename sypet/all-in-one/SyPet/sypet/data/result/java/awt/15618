{"id":15618,"className":"java.awt.Toolkit","methodName":"createImage","signature":"\u003cjava.awt.Toolkit: java.awt.Image createImage(java.net.URL)\u003e","javadoc":"/** \n * Returns an image which gets pixel data from the specified URL. The returned Image is a new object which will not be shared with any other caller of this method or its getImage variant. \u003cp\u003e This method first checks if there is a security manager installed. If so, the method calls the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with the url.openConnection().getPermission() permission to ensure that the image creation is allowed. For compatibility with pre-1.2 security managers, if the access is denied with \u003ccode\u003eFilePermission\u003c/code\u003e or \u003ccode\u003eSocketPermission\u003c/code\u003e, the method throws \u003ccode\u003eSecurityException\u003c/code\u003e if the corresponding 1.1-style SecurityManager.checkXXX method also denies permission.\n * @param url   the URL to use in fetching the pixel data.\n * @return    an image which gets its pixel data fromthe specified URL.\n * @throws SecurityException  if a security manager exists and itscheckPermission method doesn\u0027t allow the operation.\n * @see #getImage(java.net.URL)\n */\n","tf":{"freq":{"caller":1,"call":1,"creation":1,"connect":1,"allow":2,"pixel":3,"correspond":1,"data":3,"use":1,"object":1,"net":1,"variant":1,"specifi":2,"ensur":1,"open":1,"share":1,"style":1,"oper":1,"file":1,"permiss":7,"socket":1,"itscheck":1,"exist":1,"fromth":1,"deni":2,"fetch":1,"except":2,"check":3,"creat":1,"manag":5,"instal":1,"access":1,"imag":7,"url":2,"secur":7,"pre":1,"will":1,"java":1,"method":7,"also":1,"first":1,"compat":1},"maxFreq":7,"totalTerms":81},"loc":0}