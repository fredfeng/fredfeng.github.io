{"id":18201,"className":"java.awt.image.ColorModel","methodName":"getDataElement","signature":"\u003cjava.awt.image.ColorModel: int getDataElement(int[],int)\u003e","javadoc":"/** \n * Returns a pixel value represented as an \u003ccode\u003eint\u003c/code\u003e in this \u003ccode\u003eColorModel\u003c/code\u003e, given an array of unnormalized color/alpha components.  This method will throw an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if component values for this \u003ccode\u003eColorModel\u003c/code\u003e are not conveniently representable as a single \u003ccode\u003eint\u003c/code\u003e or if color component values for this \u003ccode\u003eColorModel\u003c/code\u003e are not conveniently representable in the unnormalized form.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if  the \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all the color and alpha components (starting at \u003ccode\u003eoffset\u003c/code\u003e). Since \u003ccode\u003eColorModel\u003c/code\u003e is an abstract class, any instance is an instance of a subclass.  Subclasses must override this method since the implementation in this abstract class throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @param components an array of unnormalized color and alphacomponents\n * @param offset the index into \u003ccode\u003ecomponents\u003c/code\u003e at which tobegin retrieving the color and alpha components\n * @return an \u003ccode\u003eint\u003c/code\u003e pixel value in this\u003ccode\u003eColorModel\u003c/code\u003e corresponding to the specified components.\n * @throws IllegalArgumentException ifpixel values for this \u003ccode\u003eColorModel\u003c/code\u003e are not conveniently representable as a single \u003ccode\u003eint\u003c/code\u003e\n * @throws IllegalArgumentException ifcomponent values for this \u003ccode\u003eColorModel\u003c/code\u003e are not conveniently representable in the unnormalized form\n * @throws ArrayIndexOutOfBoundsException ifthe \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e\n * @throws UnsupportedOperationException if thismethod is not supported by this \u003ccode\u003eColorModel\u003c/code\u003e\n */\n","tf":{"freq":{"unsupport":2,"model":8,"pixel":2,"singl":2,"correspond":1,"unnorm":4,"data":1,"enough":2,"must":1,"specifi":1,"thismethod":1,"given":1,"oper":2,"alpha":4,"valu":6,"offset":3,"conveni":4,"argument":3,"element":1,"except":7,"index":3,"thrown":1,"support":1,"ifth":1,"form":2,"repres":1,"hold":2,"ifpixel":1,"illeg":3,"alphacompon":1,"instanc":2,"represent":4,"tobegin":1,"compon":11,"start":2,"color":14,"retriev":1,"larg":2,"subclass":2,"will":1,"method":2,"ifcompon":1,"bound":2,"array":6},"maxFreq":14,"totalTerms":123},"loc":4}