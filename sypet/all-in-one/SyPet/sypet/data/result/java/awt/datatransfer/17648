{"id":17648,"className":"java.awt.datatransfer.DataFlavor","methodName":"getReaderForText","signature":"\u003cjava.awt.datatransfer.DataFlavor: java.io.Reader getReaderForText(java.awt.datatransfer.Transferable)\u003e","javadoc":"/** \n * Gets a Reader for a text flavor, decoded, if necessary, for the expected charset (encoding). The supported representation classes are \u003ccode\u003ejava.io.Reader\u003c/code\u003e, \u003ccode\u003ejava.lang.String\u003c/code\u003e, \u003ccode\u003ejava.nio.CharBuffer\u003c/code\u003e, \u003ccode\u003e[C\u003c/code\u003e, \u003ccode\u003ejava.io.InputStream\u003c/code\u003e, \u003ccode\u003ejava.nio.ByteBuffer\u003c/code\u003e, and \u003ccode\u003e[B\u003c/code\u003e. \u003cp\u003e Because text flavors which do not support the charset parameter are encoded in a non-standard format, this method should not be called for such flavors. However, in order to maintain backward-compatibility, if this method is called for such a flavor, this method will treat the flavor as though it supports the charset parameter and attempt to decode it accordingly. See \u003ccode\u003eselectBestTextFlavor\u003c/code\u003e for a list of text flavors which do not support the charset parameter.\n * @param transferable the \u003ccode\u003eTransferable\u003c/code\u003e whose data will berequested in this flavor\n * @return a \u003ccode\u003eReader\u003c/code\u003e to read the \u003ccode\u003eTransferable\u003c/code\u003e\u0027sdata\n * @exception IllegalArgumentException if the representation classis not one of the seven listed above\n * @exception IllegalArgumentException if the \u003ccode\u003eTransferable\u003c/code\u003ehas \u003ccode\u003enull\u003c/code\u003e data\n * @exception NullPointerException if the \u003ccode\u003eTransferable\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n * @exception UnsupportedEncodingException if this flavor\u0027s representationis \u003ccode\u003ejava.io.InputStream\u003c/code\u003e, \u003ccode\u003ejava.nio.ByteBuffer\u003c/code\u003e, or \u003ccode\u003e[B\u003c/code\u003e and this flavor\u0027s encoding is not supported by this implementation of the Java platform\n * @exception UnsupportedFlavorException if the \u003ccode\u003eTransferable\u003c/code\u003edoes not support this flavor\n * @exception IOException if the data cannot be read because of anI/O error\n * @see #selectBestTextFlavor\n * @since 1.3\n */\n","tf":{"freq":{"unsupport":2,"sdata":1,"maintain":1,"necessari":1,"though":1,"buffer":3,"expect":1,"howev":1,"argument":2,"platform":1,"decod":2,"text":6,"transfer":6,"except":12,"support":6,"whose":1,"select":2,"representationi":1,"flavor":13,"charset":4,"format":1,"non":1,"input":2,"encod":4,"reader":4,"will":2,"pointer":1,"compat":1,"treat":1,"attempt":1,"call":2,"stream":2,"backward":1,"one":1,"data":3,"lang":1,"berequest":1,"order":1,"best":2,"read":2,"error":1,"standard":1,"paramet":3,"list":2,"accord":1,"illeg":2,"represent":2,"seven":1,"string":1,"classi":1,"method":3,"nio":3,"java":8},"maxFreq":13,"totalTerms":130},"loc":44}