{"id":19062,"className":"java.awt.font.GlyphVector","methodName":"getGlyphPixelBounds","signature":"\u003cjava.awt.font.GlyphVector: java.awt.Rectangle getGlyphPixelBounds(int,java.awt.font.FontRenderContext,float,float)\u003e","javadoc":"/** \n * Returns the pixel bounds of the glyph at index when this \u003ccode\u003eGlyphVector\u003c/code\u003e is rendered in a \u003ccode\u003eGraphics\u003c/code\u003e with the given \u003ccode\u003eFontRenderContext\u003c/code\u003e at the given location. The renderFRC need not be the same as the \u003ccode\u003eFontRenderContext\u003c/code\u003e of this \u003ccode\u003eGlyphVector\u003c/code\u003e, and can be null.  If it is null, the \u003ccode\u003eFontRenderContext\u003c/code\u003e of this \u003ccode\u003eGlyphVector\u003c/code\u003e is used.  The default implementation returns the visual bounds of the glyph, offset to x, y and rounded out to the next integer value, and ignores the FRC.  Subclassers should override this method.\n * @param index the index of the glyph.\n * @param renderFRC the \u003ccode\u003eFontRenderContext\u003c/code\u003e of the \u003ccode\u003eGraphics\u003c/code\u003e.\n * @param x the X position at which to render this \u003ccode\u003eGlyphVector\u003c/code\u003e.\n * @param y the Y position at which to render this \u003ccode\u003eGlyphVector\u003c/code\u003e.\n * @return a \u003ccode\u003eRectangle\u003c/code\u003e bounding the pixels that would be affected.\n * @since 1.4\n */\n","tf":{"freq":{"need":1,"graphic":2,"pixel":3,"next":1,"use":1,"round":1,"affect":1,"rectangl":1,"given":2,"vector":5,"valu":1,"offset":1,"locat":1,"index":3,"ignor":1,"font":4,"glyph":9,"render":9,"visual":1,"context":4,"subclass":1,"method":1,"integ":1,"posit":2,"bound":4},"maxFreq":9,"totalTerms":61},"loc":8}