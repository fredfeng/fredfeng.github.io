{"id":19391,"className":"java.awt.event.MouseEvent","methodName":"MouseEvent","signature":"\u003cjava.awt.event.MouseEvent: void MouseEvent(java.awt.Component,int,long,int,int,int,int,int,int,boolean,int)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eMouseEvent\u003c/code\u003e object with the specified source component, type, time, modifiers, coordinates, absolute coordinates, click count, popupTrigger flag, and button number. \u003cp\u003e Creating an invalid event (such as by using more than one of the old _MASKs, or modifier/button values which don\u0027t match) results in unspecified behavior. Even if inconsistent values for relative and absolute coordinates are passed to the constructor, the mouse event instance is still created and no exception is thrown. This method throws an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if \u003ccode\u003esource\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @param source       The \u003ccode\u003eComponent\u003c/code\u003e that originated the event\n * @param id              An integer indicating the type of event.For information on allowable values, see the class description for  {@link MouseEvent}\n * @param when         A long integer that gives the time the event occurred.Passing negative or zero value is not recommended\n * @param modifiers    The modifier keys down during event (e.g. shift, ctrl,alt, meta) Passing negative parameter is not recommended. Zero value means that no modifiers were passed. Use either an extended _DOWN_MASK or old _MASK modifiers, however do not mix models in the one event. The extended modifiers are preferred for using\n * @param x            The horizontal x coordinate for the mouse location.It is allowed to pass negative values\n * @param y            The vertical y coordinate for the mouse location.It is allowed to pass negative values\n * @param xAbs           The absolute horizontal x coordinate for the mouse locationIt is allowed to pass negative values\n * @param yAbs           The absolute vertical y coordinate for the mouse locationIt is allowed to pass negative values\n * @param clickCount   The number of mouse clicks associated with event.Passing negative value is not recommended\n * @param popupTrigger A boolean that equals {@code true} if this eventis a trigger for a popup menu\n * @param button       An integer that indicates, which of the mouse buttons haschanged its state. The following rules are applied to this parameter: \u003cul\u003e \u003cli\u003eIf support for the extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Javathen it is allowed to create  {@code MouseEvent} objects only with the standard buttons:{@code NOBUTTON},  {@code BUTTON1},  {@code BUTTON2}, and {@code BUTTON3}. \u003cli\u003e If support for the extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Javathen it is allowed to create  {@code MouseEvent} objects withthe standard buttons. In case the support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java, thenin addition to the standard buttons,  {@code MouseEvent} objects can be createdusing buttons from the range starting from 4 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}if the mouse has more than three buttons. \u003c/ul\u003e\n * @throws IllegalArgumentException if {@code button} is less then zero\n * @throws IllegalArgumentException if \u003ccode\u003esource\u003c/code\u003e is null\n * @throws IllegalArgumentException if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n * @throws IllegalArgumentException if {@code button} is greater then the{@link java.awt.MouseInfo#getNumberOfButtons() current number of buttons} and the supportfor extended mouse buttons is  {@link Toolkit#areExtraMouseButtonsEnabled() enabled}by Java\n * @throws IllegalArgumentException if an invalid \u003ccode\u003ebutton\u003c/code\u003evalue is passed in\n * @throws IllegalArgumentException if \u003ccode\u003esource\u003c/code\u003e is null\n * @see #getSource()\n * @see #getID()\n * @see #getWhen()\n * @see #getModifiers()\n * @see #getX()\n * @see #getY()\n * @see #getXOnScreen()\n * @see #getYOnScreen()\n * @see #getClickCount()\n * @see #isPopupTrigger()\n * @see #getButton()\n * @see #button\n * @see Toolkit#areExtraMouseButtonsEnabled()\n * @see java.awt.MouseInfo#getNumberOfButtons()\n * @see InputEvent#getMaskForButton(int)\n * @since 1.6\n */\n","tf":{"freq":{"greater":2,"zero":3,"ctrl":1,"mous":29,"specifi":1,"info":4,"time":2,"button":32,"event":15,"rang":1,"relat":1,"screen":2,"support":4,"extra":6,"menu":1,"number":7,"absolut":4,"instanc":1,"disabl":2,"start":1,"sourc":6,"createdus":1,"inconsist":1,"give":1,"behavior":1,"link":8,"click":4,"use":3,"meta":1,"eventi":1,"indic":2,"associ":1,"popup":4,"current":1,"horizont":2,"trigger":4,"addit":1,"haschang":1,"true":1,"thenin":1,"mix":1,"either":1,"compon":2,"method":1,"construct":1,"supportfor":1,"old":2,"count":3,"mask":1,"type":2,"invalid":2,"three":1,"howev":1,"javathen":2,"key":1,"follow":1,"argument":7,"coordin":7,"thrown":1,"except":8,"vertic":2,"creat":4,"enabl":9,"descript":1,"sks":1,"inform":1,"input":1,"appli":1,"awt":3,"flag":1,"withth":1,"even":1,"negat":7,"match":1,"prefer":1,"unspecifi":1,"result":1,"model":1,"allow":7,"one":2,"state":1,"object":4,"recommend":3,"alt":1,"rule":1,"mean":1,"valu":11,"toolkit":6,"less":1,"constructor":1,"locat":4,"standard":3,"origin":1,"paramet":2,"still":1,"equal":1,"yon":1,"illeg":7,"xon":1,"pass":10,"modifi":8,"java":6,"ab":2,"integ":3,"shift":1,"occur":1},"maxFreq":32,"totalTerms":339},"loc":46}