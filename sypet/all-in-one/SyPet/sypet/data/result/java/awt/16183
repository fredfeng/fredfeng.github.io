{"id":16183,"className":"java.awt.Rectangle","methodName":"union","signature":"\u003cjava.awt.Rectangle: java.awt.Rectangle union(java.awt.Rectangle)\u003e","javadoc":"/** \n * Computes the union of this \u003ccode\u003eRectangle\u003c/code\u003e with the specified \u003ccode\u003eRectangle\u003c/code\u003e. Returns a new \u003ccode\u003eRectangle\u003c/code\u003e that represents the union of the two rectangles. \u003cp\u003e If either  {@code Rectangle} has any dimension less than zerothe rules for \u003ca href\u003d#NonExistant\u003enon-existant\u003c/a\u003e rectangles apply. If only one has a dimension less than zero, then the result will be a copy of the other  {@code Rectangle}. If both have dimension less than zero, then the result will have at least one dimension less than zero. \u003cp\u003e If the resulting  {@code Rectangle} would have a dimensiontoo large to be expressed as an  {@code int}, the result will have a dimension of  {@code Integer.MAX_VALUE} alongthat dimension.\n * @param r the specified \u003ccode\u003eRectangle\u003c/code\u003e\n * @return    the smallest \u003ccode\u003eRectangle\u003c/code\u003e containing boththe specified \u003ccode\u003eRectangle\u003c/code\u003e and this \u003ccode\u003eRectangle\u003c/code\u003e.\n */\n","tf":{"freq":{"result":4,"dimensiontoo":1,"least":1,"one":2,"zero":3,"express":1,"rectangl":12,"copi":1,"specifi":3,"rule":1,"union":3,"href":1,"exist":2,"less":4,"repres":1,"smallest":1,"dimens":6,"non":2,"zeroth":1,"two":1,"either":1,"appli":1,"alongthat":1,"larg":1,"contain":1,"will":3,"comput":1,"integ":1,"bothth":1},"maxFreq":12,"totalTerms":62},"loc":38}