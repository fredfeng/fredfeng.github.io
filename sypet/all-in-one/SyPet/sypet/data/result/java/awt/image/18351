{"id":18351,"className":"java.awt.image.ComponentColorModel","methodName":"ComponentColorModel","signature":"\u003cjava.awt.image.ComponentColorModel: void ComponentColorModel(java.awt.color.ColorSpace,boolean,boolean,int,int)\u003e","javadoc":"/** \n * Constructs a \u003cCODE\u003eComponentColorModel\u003c/CODE\u003e from the specified parameters. Color components will be in the specified \u003cCODE\u003eColorSpace\u003c/CODE\u003e.  The supported transfer types are \u003cCODE\u003eDataBuffer.TYPE_BYTE\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_USHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_INT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_SHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_FLOAT\u003c/CODE\u003e, and \u003cCODE\u003eDataBuffer.TYPE_DOUBLE\u003c/CODE\u003e.  The number of significant bits per color and alpha component will be 8, 16, 32, 16, 32,  or 64, respectively.  The number of color components will be the number of components in the \u003cCODE\u003eColorSpace\u003c/CODE\u003e.  There will be an alpha component if \u003cCODE\u003ehasAlpha\u003c/CODE\u003e is \u003cCODE\u003etrue\u003c/CODE\u003e. If \u003cCODE\u003ehasAlpha\u003c/CODE\u003e is true, then the boolean \u003cCODE\u003eisAlphaPremultiplied\u003c/CODE\u003e specifies how to interpret color and alpha samples in pixel values. If the boolean is true, color samples are assumed to have been multiplied by the alpha sample. The \u003cCODE\u003etransparency\u003c/CODE\u003e specifies what alpha values can be represented by this color model. The acceptable \u003ccode\u003etransparency\u003c/code\u003e values are \u003cCODE\u003eOPAQUE\u003c/CODE\u003e, \u003cCODE\u003eBITMASK\u003c/CODE\u003e or \u003cCODE\u003eTRANSLUCENT\u003c/CODE\u003e. The \u003cCODE\u003etransferType\u003c/CODE\u003e is the type of primitive array used to represent pixel values.\n * @param colorSpace       The \u003cCODE\u003eColorSpace\u003c/CODE\u003e associatedwith this color model.\n * @param hasAlpha         If true, this color model supports alpha.\n * @param isAlphaPremultiplied If true, alpha is premultiplied.\n * @param transparency     Specifies what alpha values can be representedby this color model.\n * @param transferType     Specifies the type of primitive array used torepresent pixel values.\n * @throws IllegalArgumentException If transferType is not one of\u003cCODE\u003eDataBuffer.TYPE_BYTE\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_USHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_INT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_SHORT\u003c/CODE\u003e, \u003cCODE\u003eDataBuffer.TYPE_FLOAT\u003c/CODE\u003e, or \u003cCODE\u003eDataBuffer.TYPE_DOUBLE\u003c/CODE\u003e.\n * @see ColorSpace\n * @see java.awt.Transparency\n * @since 1.4\n */\n","tf":{"freq":{"primit":2,"model":6,"representedbi":1,"pixel":3,"accept":1,"one":1,"data":12,"interpret":1,"use":2,"associatedwith":1,"type":6,"space":5,"specifi":6,"buffer":12,"premultipli":3,"transpar":4,"alpha":13,"multipli":1,"valu":6,"torepres":1,"argument":1,"except":1,"transfer":4,"assum":1,"support":2,"repres":2,"paramet":1,"signific":1,"true":5,"number":3,"illeg":1,"bit":1,"awt":1,"compon":7,"per":1,"color":16,"will":4,"java":1,"construct":1,"respect":1,"sampl":3,"array":2},"maxFreq":16,"totalTerms":147},"loc":4}