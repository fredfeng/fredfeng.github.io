{"id":18477,"className":"java.awt.image.DirectColorModel","methodName":"getDataElement","signature":"\u003cjava.awt.image.DirectColorModel: int getDataElement(int[],int)\u003e","javadoc":"/** \n * Returns a pixel value represented as an \u003ccode\u003eint\u003c/code\u003e in this \u003ccode\u003eColorModel\u003c/code\u003e, given an array of unnormalized color/alpha components.   An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all the color and alpha components, starting at \u003ccode\u003eoffset\u003c/code\u003e.\n * @param components an array of unnormalized color and alphacomponents\n * @param offset the index into \u003ccode\u003ecomponents\u003c/code\u003e at which tobegin retrieving the color and alpha components\n * @return an \u003ccode\u003eint\u003c/code\u003e pixel value in this\u003ccode\u003eColorModel\u003c/code\u003e corresponding to the specified components.\n * @exception \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e ifthe \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e\n */\n","tf":{"freq":{"model":2,"pixel":2,"correspond":1,"unnorm":2,"data":1,"enough":2,"specifi":1,"given":1,"alpha":4,"valu":2,"offset":3,"element":1,"index":3,"except":3,"thrown":1,"ifth":1,"repres":1,"hold":2,"alphacompon":1,"tobegin":1,"compon":9,"color":7,"start":2,"larg":2,"retriev":1,"bound":2,"array":6},"maxFreq":9,"totalTerms":64},"loc":7}