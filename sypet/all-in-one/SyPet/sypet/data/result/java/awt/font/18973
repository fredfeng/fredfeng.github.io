{"id":18973,"className":"java.awt.font.LineBreakMeasurer","methodName":"LineBreakMeasurer","signature":"\u003cjava.awt.font.LineBreakMeasurer: void LineBreakMeasurer(java.text.AttributedCharacterIterator,java.text.BreakIterator,java.awt.font.FontRenderContext)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eLineBreakMeasurer\u003c/code\u003e for the specified text.\n * @param text the text for which this \u003ccode\u003eLineBreakMeasurer\u003c/code\u003eproduces \u003ccode\u003eTextLayout\u003c/code\u003e objects; the text must contain at least one character; if the text available through \u003ccode\u003eiter\u003c/code\u003e changes, further calls to this \u003ccode\u003eLineBreakMeasurer\u003c/code\u003e instance are undefined (except, in some cases, when \u003ccode\u003einsertChar\u003c/code\u003e or \u003ccode\u003edeleteChar\u003c/code\u003e are invoked afterward - see below)\n * @param breakIter the {@link BreakIterator} which defines linebreaks\n * @param frc contains information about a graphics device which isneeded to measure the text correctly; text measurements can vary slightly depending on the device resolution, and attributes such as antialiasing; this parameter does not specify a translation between the \u003ccode\u003eLineBreakMeasurer\u003c/code\u003e and user space\n * @throws IllegalArgumentException if the text has less than one character\n * @see LineBreakMeasurer#insertChar\n * @see LineBreakMeasurer#deleteChar\n */\n","tf":{"freq":{"defin":1,"call":1,"graphic":1,"frc":1,"delet":2,"linebreak":1,"least":1,"link":1,"one":2,"line":7,"object":1,"space":1,"must":1,"specifi":2,"resolut":1,"afterward":1,"attribut":1,"slight":1,"correct":1,"isneed":1,"layout":1,"undefin":1,"less":1,"argument":1,"text":9,"except":2,"antialias":1,"charact":2,"depend":1,"invok":1,"paramet":1,"produc":1,"avail":1,"translat":1,"illeg":1,"instanc":1,"inform":1,"contain":2,"measur":9,"devic":2,"construct":1,"chang":1,"iter":3,"insert":2,"user":1,"vari":1},"maxFreq":9,"totalTerms":78},"loc":13}