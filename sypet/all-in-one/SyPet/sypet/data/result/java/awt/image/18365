{"id":18365,"className":"java.awt.image.ComponentColorModel","methodName":"getUnnormalizedComponents","signature":"\u003cjava.awt.image.ComponentColorModel: int[] getUnnormalizedComponents(float[],int,int[],int)\u003e","javadoc":"/** \n * Returns an array of all of the color/alpha components in unnormalized form, given a normalized component array.  Unnormalized components are unsigned integral values between 0 and 2\u003csup\u003en\u003c/sup\u003e - 1, where n is the number of bits for a particular component.  Normalized components are float values between a per component minimum and maximum specified by the \u003ccode\u003eColorSpace\u003c/code\u003e object for this \u003ccode\u003eColorModel\u003c/code\u003e.  An \u003ccode\u003eIllegalArgumentException\u003c/code\u003e will be thrown if color component values for this \u003ccode\u003eColorModel\u003c/code\u003e are not conveniently representable in the unnormalized form.  If the \u003ccode\u003ecomponents\u003c/code\u003e array is \u003ccode\u003enull\u003c/code\u003e, a new array will be allocated.  The \u003ccode\u003ecomponents\u003c/code\u003e array will be returned.  Color/alpha components are stored in the \u003ccode\u003ecomponents\u003c/code\u003e array starting at \u003ccode\u003eoffset\u003c/code\u003e (even if the array is allocated by this method). An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003ecomponents\u003c/code\u003e array is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components (starting at \u003ccode\u003eoffset\u003c/code\u003e).  An \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown if the \u003ccode\u003enormComponents\u003c/code\u003e array is not large enough to hold all the color and alpha components starting at \u003ccode\u003enormOffset\u003c/code\u003e.\n * @param normComponents an array containing normalized components\n * @param normOffset the offset into the \u003ccode\u003enormComponents\u003c/code\u003earray at which to start retrieving normalized components\n * @param components an array that receives the components from\u003ccode\u003enormComponents\u003c/code\u003e\n * @param offset the index into \u003ccode\u003ecomponents\u003c/code\u003e at which tobegin storing normalized components from \u003ccode\u003enormComponents\u003c/code\u003e\n * @return an array containing unnormalized color and alphacomponents.\n * @throws IllegalArgumentException If this\u003cCODE\u003eComponentColorModel\u003c/CODE\u003e does not support the unnormalized form\n * @throws IllegalArgumentException if the length of\u003ccode\u003enormComponents\u003c/code\u003e minus \u003ccode\u003enormOffset\u003c/code\u003e is less than \u003ccode\u003enumComponents\u003c/code\u003e\n */\n","tf":{"freq":{"integr":1,"store":2,"normal":5,"unnorm":6,"particular":1,"enough":2,"specifi":1,"given":1,"norm":9,"argument":4,"except":5,"thrown":3,"index":2,"minus":1,"support":1,"form":3,"hold":2,"number":1,"bit":1,"tobegin":1,"start":4,"maximum":1,"unsign":1,"contain":2,"will":3,"even":1,"array":14,"alloc":2,"model":3,"minimum":1,"object":1,"space":1,"sup":2,"alpha":4,"length":1,"valu":3,"offset":7,"less":1,"conveni":1,"receiv":1,"illeg":4,"represent":1,"alphacompon":1,"num":1,"per":1,"compon":29,"color":10,"larg":2,"retriev":1,"method":1,"bound":1},"maxFreq":29,"totalTerms":158},"loc":12}