{"id":19207,"className":"java.awt.im.spi.InputMethod","methodName":"endComposition","signature":"\u003cjava.awt.im.spi.InputMethod: void endComposition()\u003e","javadoc":"/** \n * Ends any input composition that may currently be going on in this context. Depending on the platform and possibly user preferences, this may commit or delete uncommitted text. Any changes to the text are communicated to the active component using an input method event. \u003cp\u003e A text editing component may call this in a variety of situations, for example, when the user moves the insertion point within the text (but outside the composed text), or when the component\u0027s text is saved to a file or copied to the clipboard. \u003cp\u003e This method is called \u003cul\u003e \u003cli\u003eby  {@link java.awt.im.InputContext#endComposition InputContext.endComposition}, \u003cli\u003eby  {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}when switching to a different client component \u003cli\u003ewhen switching from this input method to a different one using the user interface or {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod}. \u003c/ul\u003e\n */\n","tf":{"freq":{"call":2,"client":1,"save":1,"delet":1,"one":1,"link":3,"possibl":1,"use":2,"uncommit":1,"activ":1,"copi":1,"situat":1,"commit":1,"file":1,"event":3,"current":1,"varieti":1,"dispatch":2,"move":1,"end":4,"platform":1,"may":3,"text":6,"composit":4,"select":2,"depend":1,"compos":1,"edit":1,"differ":2,"point":1,"awt":3,"input":11,"communic":1,"compon":4,"outsid":1,"exampl":1,"context":7,"java":3,"method":5,"within":1,"chang":1,"clipboard":1,"insert":1,"prefer":1,"user":3,"go":1},"maxFreq":11,"totalTerms":97},"loc":0}