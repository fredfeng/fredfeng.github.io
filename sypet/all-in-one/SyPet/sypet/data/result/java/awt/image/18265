{"id":18265,"className":"java.awt.image.MultiPixelPackedSampleModel","methodName":"getDataElements","signature":"\u003cjava.awt.image.MultiPixelPackedSampleModel: java.lang.Object getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\u003e","javadoc":"/** \n * Returns data for a single pixel in a primitive array of type TransferType.  For a \u003ccode\u003eMultiPixelPackedSampleModel\u003c/code\u003e, the array has one element, and the type is the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT that can hold a single pixel.  Generally, \u003ccode\u003eobj\u003c/code\u003e should be passed in as \u003ccode\u003enull\u003c/code\u003e, so that the \u003ccode\u003eObject\u003c/code\u003e is created automatically and is the correct primitive data type. \u003cp\u003e The following code illustrates transferring data for one pixel from \u003ccode\u003eDataBuffer\u003c/code\u003e \u003ccode\u003edb1\u003c/code\u003e, whose storage layout is described by \u003ccode\u003eMultiPixelPackedSampleModel\u003c/code\u003e \u003ccode\u003emppsm1\u003c/code\u003e, to \u003ccode\u003eDataBuffer\u003c/code\u003e \u003ccode\u003edb2\u003c/code\u003e, whose storage layout is described by \u003ccode\u003eMultiPixelPackedSampleModel\u003c/code\u003e \u003ccode\u003emppsm2\u003c/code\u003e. The transfer is generally more efficient than using \u003ccode\u003egetPixel\u003c/code\u003e or \u003ccode\u003esetPixel\u003c/code\u003e. \u003cpre\u003e MultiPixelPackedSampleModel mppsm1, mppsm2; DataBufferInt db1, db2; mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null, db1), db2); \u003c/pre\u003e Using \u003ccode\u003egetDataElements\u003c/code\u003e or \u003ccode\u003esetDataElements\u003c/code\u003e to transfer between two \u003ccode\u003eDataBuffer/SampleModel\u003c/code\u003e pairs is legitimate if the \u003ccode\u003eSampleModels\u003c/code\u003e have the same number of bands, corresponding bands have the same number of bits per sample, and the TransferTypes are the same. \u003cp\u003e If \u003ccode\u003eobj\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e, it should be a primitive array of type TransferType.  Otherwise, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the coordinates are not in bounds, or if \u003ccode\u003eobj\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold the pixel data.\n * @param x the X coordinate of the specified pixel\n * @param y the Y coordinate of the specified pixel\n * @param obj a primitive array in which to return the pixel data or\u003ccode\u003enull\u003c/code\u003e.\n * @param data the \u003ccode\u003eDataBuffer\u003c/code\u003e containing the image data.\n * @return an \u003ccode\u003eObject\u003c/code\u003e containing data for the specifiedpixel.\n * @exception ClassCastException if \u003ccode\u003eobj\u003c/code\u003e is not aprimitive array of type TransferType or is not \u003ccode\u003enull\u003c/code\u003e\n * @exception ArrayIndexOutOfBoundsException if the coordinates arenot in bounds, or if \u003ccode\u003eobj\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e or not large enough to hold the pixel data\n * @see #setDataElements(int,int,Object,DataBuffer)\n */\n","tf":{"freq":{"singl":2,"pack":4,"enough":2,"type":9,"specifi":2,"buffer":9,"band":2,"correct":1,"effici":1,"follow":1,"coordin":4,"element":7,"transfer":7,"except":6,"thrown":2,"index":2,"creat":1,"whose":2,"hold":3,"describ":2,"number":2,"imag":1,"bit":1,"cast":2,"contain":2,"multi":4,"array":7,"otherwis":1,"primit":4,"mppsm":6,"specifiedpixel":1,"model":6,"legitim":1,"pixel":14,"pair":1,"correspond":1,"one":2,"data":24,"use":2,"object":3,"automat":1,"layout":2,"smallest":1,"storag":2,"general":2,"pass":1,"aprimit":1,"two":1,"per":1,"larg":2,"pre":2,"obj":6,"arenot":1,"sampl":7,"illustr":1,"bound":4},"maxFreq":24,"totalTerms":189},"loc":65}