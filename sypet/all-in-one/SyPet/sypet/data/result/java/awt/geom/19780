{"id":19780,"className":"java.awt.geom.Path2D","methodName":"createTransformedShape","signature":"\u003cjava.awt.geom.Path2D: java.awt.Shape createTransformedShape(java.awt.geom.AffineTransform)\u003e","javadoc":"/** \n * Returns a new  {@code Shape} representing a transformed versionof this  {@code Path2D}. Note that the exact type and coordinate precision of the return value is not specified for this method. The method will return a Shape that contains no less precision for the transformed geometry than this  {@code Path2D} currentlymaintains, but it may contain no more precision either. If the tradeoff of precision vs. storage size in the result is important then the convenience constructors in the {@link Path2D.Float#Float(Shape,AffineTransform) Path2D.Float}and {@link Path2D.Double#Double(Shape,AffineTransform) Path2D.Double}subclasses should be used to make the choice explicit.\n * @param at the {@code AffineTransform} used to transform anew  {@code Shape}.\n * @return a new {@code Shape}, transformed with the specified {@code AffineTransform}.\n * @since 1.6\n */\n","tf":{"freq":{"result":1,"link":2,"versionof":1,"use":2,"type":1,"specifi":2,"transform":9,"exact":1,"precis":4,"path":6,"valu":1,"conveni":1,"note":1,"less":1,"constructor":1,"coordin":1,"currentlymaintain":1,"may":1,"repres":1,"creat":1,"choic":1,"tradeoff":1,"shape":7,"storag":1,"size":1,"either":1,"anew":1,"explicit":1,"contain":2,"subclass":1,"will":1,"method":2,"make":1,"geometri":1,"affin":4},"maxFreq":9,"totalTerms":65},"loc":7}