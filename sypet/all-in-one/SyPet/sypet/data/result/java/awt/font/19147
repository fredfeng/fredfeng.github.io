{"id":19147,"className":"java.awt.font.LayoutPath","methodName":"pathToPoint","signature":"\u003cjava.awt.font.LayoutPath: void pathToPoint(java.awt.geom.Point2D,boolean,java.awt.geom.Point2D)\u003e","javadoc":"/** \n * Convert a location relative to the path to a point in user coordinates.  The path might bend abruptly or be disjoint at the location\u0027s advance.  If this is the case, the value of \u0027preceding\u0027 is used to disambiguate the portion of the path whose location and slope is to be used to interpret the offset.\n * @param location a \u003ccode\u003ePoint2D\u003c/code\u003e representing the advance (in x) andoffset (in y) of a location relative to the path.  If location is not the same object as point, location will remain unmodified by this call.\n * @param preceding if true, the portion preceding the advanceshould be used, if false the portion after should be used. This has no effect if the path does not break or bend sharply at the advance.\n * @param point a \u003ccode\u003ePoint2D\u003c/code\u003e to hold the returned point.  It can bethe same object as location.\n * @throws NullPointerException if location or point is null\n * @since 1.6\n */\n","tf":{"freq":{"fals":1,"call":1,"might":1,"bend":2,"interpret":1,"convert":1,"use":4,"beth":1,"object":2,"abrupt":1,"advanceshould":1,"slope":1,"relat":2,"path":6,"valu":1,"offset":1,"portion":3,"coordin":1,"sharpli":1,"except":1,"locat":9,"whose":1,"repres":1,"hold":1,"disjoint":1,"true":1,"andoffset":1,"point":8,"preced":3,"unmodifi":1,"disambigu":1,"effect":1,"remain":1,"advanc":3,"will":1,"pointer":1,"user":1},"maxFreq":9,"totalTerms":69},"loc":0}