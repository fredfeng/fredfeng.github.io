{"id":15407,"className":"java.awt.SequencedEvent","methodName":"dispatch","signature":"\u003cjava.awt.SequencedEvent: void dispatch()\u003e","javadoc":"/** \n * Dispatches the nested event after all previous nested events have been dispatched or disposed. If this method is invoked before all previous nested events have been dispatched, then this method blocks until such a point is reached. While waiting disposes nested events to disposed AppContext NOTE: Locking protocol.  Since dispose() can get EventQueue lock, dispatch() shall never call dispose() while holding the lock on the list, as EventQueue lock is held during dispatching.  The locks should be acquired in the same order.\n */\n","tf":{"freq":{"acquir":1,"held":1,"call":1,"queue":2,"app":1,"protocol":1,"previous":2,"invok":1,"hold":1,"nest":4,"lock":5,"block":1,"list":1,"wait":1,"shall":1,"point":1,"reach":1,"never":1,"order":1,"event":6,"context":1,"dispos":5,"dispatch":6,"method":2},"maxFreq":6,"totalTerms":48},"loc":35}