{"id":18301,"className":"java.awt.image.IndexColorModel","methodName":"IndexColorModel","signature":"\u003cjava.awt.image.IndexColorModel: void IndexColorModel(int,int,int[],int,boolean,int,int)\u003e","javadoc":"/** \n * Constructs an \u003ccode\u003eIndexColorModel\u003c/code\u003e from an array of ints where each int is comprised of red, green, blue, and optional alpha components in the default RGB color model format. The specified transparent index represents a pixel that is made entirely transparent regardless of any alpha value specified for it.  The array must have enough values in it to fill all of the needed component arrays of the specified size. The \u003ccode\u003eColorSpace\u003c/code\u003e is the default sRGB space. The transparency value may be any of \u003ccode\u003eTransparency.OPAQUE\u003c/code\u003e, \u003ccode\u003eTransparency.BITMASK\u003c/code\u003e, or \u003ccode\u003eTransparency.TRANSLUCENT\u003c/code\u003e depending on the arguments, as specified in the \u003ca href\u003d\"#transparency\"\u003eclass description\u003c/a\u003e above.\n * @param bits      the number of bits each pixel occupies\n * @param size      the size of the color component arrays\n * @param cmap      the array of color components\n * @param start     the starting offset of the first color component\n * @param hasalpha  indicates whether alpha values are contained inthe \u003ccode\u003ecmap\u003c/code\u003e array\n * @param trans     the index of the fully transparent pixel\n * @param transferType the data type of the array used to representpixel values.  The data type must be either \u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e or \u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e.\n * @throws IllegalArgumentException if \u003ccode\u003ebits\u003c/code\u003e is lessthan 1 or greater than 16\n * @throws IllegalArgumentException if \u003ccode\u003esize\u003c/code\u003e is lessthan 1\n * @throws IllegalArgumentException if \u003ccode\u003etransferType\u003c/code\u003e is notone of \u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e or \u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e\n */\n","tf":{"freq":{"need":1,"greater":1,"occupi":1,"enough":1,"hasalpha":1,"type":4,"must":2,"whether":1,"specifi":4,"buffer":4,"compris":1,"lessthan":2,"href":1,"option":1,"argument":4,"except":3,"index":4,"transfer":2,"descript":1,"number":1,"format":1,"tran":1,"size":4,"bit":3,"start":2,"contain":1,"entir":1,"array":7,"model":3,"pixel":3,"data":6,"made":1,"use":1,"representpixel":1,"space":2,"transpar":8,"inth":1,"indic":1,"alpha":3,"valu":5,"offset":1,"noton":1,"regardless":1,"may":1,"repres":1,"green":1,"depend":1,"fill":1,"fulli":1,"illeg":3,"either":1,"red":1,"compon":5,"color":7,"blue":1,"cmap":2,"construct":1,"first":1},"maxFreq":8,"totalTerms":126},"loc":25}