{"id":18147,"className":"java.awt.image.ColorConvertOp","methodName":"filter","signature":"\u003cjava.awt.image.ColorConvertOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)\u003e","javadoc":"/** \n * ColorConverts the image data in the source Raster. If the destination Raster is null, a new Raster will be created. The number of bands in the source and destination Rasters must meet the requirements explained above.  The constructor used to create this ColorConvertOp must have provided enough information to define both source and destination color spaces.  See above. Otherwise, an exception is thrown.\n * @param src the source \u003ccode\u003eRaster\u003c/code\u003e to be converted\n * @param dest the destination \u003ccode\u003eWritableRaster\u003c/code\u003e,or \u003ccode\u003enull\u003c/code\u003e\n * @return \u003ccode\u003edest\u003c/code\u003e color converted from \u003ccode\u003esrc\u003c/code\u003eor a new, converted \u003ccode\u003eWritableRaster\u003c/code\u003e if \u003ccode\u003edest\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @exception IllegalArgumentException if the number of source ordestination bands is incorrect, the source or destination color spaces are undefined, or this op was constructed with one of the constructors that applies only to operations on BufferedImages.\n */\n","tf":{"freq":{"otherwis":1,"defin":1,"one":1,"data":1,"convert":5,"use":1,"enough":1,"space":2,"must":2,"buffer":1,"band":2,"requir":1,"ordestin":1,"oper":1,"src":2,"undefin":1,"incorrect":1,"constructor":2,"argument":1,"thrown":1,"except":3,"creat":2,"writabl":2,"number":2,"imag":2,"meet":1,"illeg":1,"provid":1,"raster":7,"inform":1,"appli":1,"dest":3,"color":5,"will":1,"sourc":6,"construct":1,"explain":1,"filter":1,"destin":5},"maxFreq":7,"totalTerms":75},"loc":107}