{"id":19115,"className":"java.awt.font.FontRenderContext","methodName":"FontRenderContext","signature":"\u003cjava.awt.font.FontRenderContext: void FontRenderContext(java.awt.geom.AffineTransform,boolean,boolean)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eFontRenderContext\u003c/code\u003e object from an optional  {@link AffineTransform} and two \u003ccode\u003eboolean\u003c/code\u003evalues that determine if the newly constructed object has anti-aliasing or fractional metrics. In each case the boolean values \u003cCODE\u003etrue\u003c/CODE\u003e and \u003cCODE\u003efalse\u003c/CODE\u003e correspond to the rendering hint values \u003cCODE\u003eON\u003c/CODE\u003e and \u003cCODE\u003eOFF\u003c/CODE\u003e respectively. \u003cp\u003e To specify other hint values, use the constructor which specifies the rendering hint values as parameters : {@link #FontRenderContext(AffineTransform,Object,Object)}.\n * @param tx the transform which is used to scale typographical pointsto pixels in this \u003ccode\u003eFontRenderContext\u003c/code\u003e.  If null, an identity transform is used.\n * @param isAntiAliased determines if the newly constructed objecthas anti-aliasing.\n * @param usesFractionalMetrics determines if the newly constructedobject has fractional metrics.\n */\n","tf":{"freq":{"fals":1,"scale":1,"pixel":1,"correspond":1,"link":2,"use":4,"object":4,"specifi":2,"objectha":1,"transform":4,"ident":1,"pointsto":1,"valu":5,"option":1,"constructor":1,"typograph":1,"fraction":3,"anti":3,"alias":3,"font":4,"paramet":1,"true":1,"hint":3,"constructedobject":1,"render":6,"two":1,"newli":3,"metric":3,"determin":3,"context":4,"construct":3,"respect":1,"affin":2},"maxFreq":6,"totalTerms":76},"loc":15}