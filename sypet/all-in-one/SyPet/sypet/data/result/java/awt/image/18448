{"id":18448,"className":"java.awt.image.RescaleOp","methodName":"filter","signature":"\u003cjava.awt.image.RescaleOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)\u003e","javadoc":"/** \n * Rescales the source BufferedImage. If the color model in the source image is not the same as that in the destination image, the pixels will be converted in the destination.  If the destination image is null, a BufferedImage will be created with the source ColorModel. An IllegalArgumentException may be thrown if the number of scaling factors/offsets in this object does not meet the restrictions stated in the class comments above, or if the source image has an IndexColorModel.\n * @param src the \u003ccode\u003eBufferedImage\u003c/code\u003e to be filtered\n * @param dst the destination for the filtering operationor \u003ccode\u003enull\u003c/code\u003e\n * @return the filtered \u003ccode\u003eBufferedImage\u003c/code\u003e.\n * @throws IllegalArgumentException if the \u003ccode\u003eColorModel\u003c/code\u003eof \u003ccode\u003esrc\u003c/code\u003e is an \u003ccode\u003eIndexColorModel\u003c/code\u003e, or if the number of scaling factors and offsets in this \u003ccode\u003eRescaleOp\u003c/code\u003e do not meet the requirements stated in the class comments.\n */\n","tf":{"freq":{"scale":2,"model":5,"pixel":1,"state":2,"convert":1,"dst":1,"object":1,"buffer":4,"requir":1,"rescal":2,"operationor":1,"src":2,"offset":2,"argument":2,"index":2,"except":2,"may":1,"thrown":1,"creat":1,"number":2,"factor":2,"imag":8,"meet":2,"illeg":2,"restrict":1,"color":5,"will":2,"sourc":4,"comment":2,"filter":4,"destin":4},"maxFreq":8,"totalTerms":72},"loc":118}