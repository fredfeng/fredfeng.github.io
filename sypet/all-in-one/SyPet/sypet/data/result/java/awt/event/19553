{"id":19553,"className":"java.awt.event.WindowEvent","methodName":"WindowEvent","signature":"\u003cjava.awt.event.WindowEvent: void WindowEvent(java.awt.Window,int,int,int)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eWindowEvent\u003c/code\u003e object with the specified previous and new window states. \u003cp\u003eThis method throws an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if \u003ccode\u003esource\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @param source    The \u003ccode\u003eWindow\u003c/code\u003e objectthat originated the event\n * @param id        An integer indicating the type of event.For information on allowable values, see the class description for  {@link WindowEvent}. It is expected that this constructor will not be used for other then {@code WINDOW_STATE_CHANGED}{@code WindowEvent}types, because the previous and new window states are meaningless for other event types.\n * @param oldState  An integer representing the previous window state.See  {@code #getOldState()} for allowable values\n * @param newState  An integer representing the new window state.See  {@code #getNewState()} for allowable values\n * @throws IllegalArgumentException if \u003ccode\u003esource\u003c/code\u003e is null\n * @see #getWindow()\n * @see #getID()\n * @see #getOldState()\n * @see #getNewState()\n * @since 1.4\n */\n","tf":{"freq":{"old":3,"objectthat":1,"allow":3,"link":1,"state":10,"use":1,"object":1,"type":3,"specifi":1,"expect":1,"indic":1,"event":7,"valu":3,"constructor":1,"argument":2,"except":2,"meaningless":1,"previous":3,"repres":2,"origin":1,"descript":1,"illeg":2,"inform":1,"window":10,"will":1,"sourc":3,"method":1,"construct":1,"integ":3},"maxFreq":10,"totalTerms":71},"loc":3}