{"id":19134,"className":"java.awt.font.GlyphJustificationInfo","methodName":"GlyphJustificationInfo","signature":"\u003cjava.awt.font.GlyphJustificationInfo: void GlyphJustificationInfo(float,boolean,int,float,float,boolean,int,float,float)\u003e","javadoc":"/** \n * Constructs information about the justification properties of a glyph.\n * @param weight the weight of this glyph when allocating space.  Must be non-negative.\n * @param growAbsorb if \u003ccode\u003etrue\u003c/code\u003e this glyph absorbsall extra space at this priority and lower priority levels when it grows\n * @param growPriority the priority level of this glyph when itgrows\n * @param growLeftLimit the maximum amount by which the left side of thisglyph can grow.  Must be non-negative.\n * @param growRightLimit the maximum amount by which the right side of thisglyph can grow.  Must be non-negative.\n * @param shrinkAbsorb if \u003ccode\u003etrue\u003c/code\u003e, this glyph absorbs allremaining shrinkage at this and lower priority levels when it shrinks\n * @param shrinkPriority the priority level of this glyph whenit shrinks\n * @param shrinkLeftLimit the maximum amount by which the left side of thisglyph can shrink.  Must be non-negative.\n * @param shrinkRightLimit the maximum amount by which the right sideof this glyph can shrink.  Must be non-negative.\n */\n","tf":{"freq":{"shrinkag":1,"weight":2,"lower":2,"space":2,"must":5,"absorbsal":1,"info":1,"amount":4,"level":4,"side":3,"itgrow":1,"left":4,"right":4,"sideof":1,"limit":4,"allremain":1,"prioriti":7,"whenit":1,"extra":1,"glyph":8,"true":2,"thisglyph":3,"non":5,"inform":1,"absorb":3,"maximum":4,"grow":7,"shrink":8,"negat":5,"properti":1,"construct":1,"justif":2,"alloc":1},"maxFreq":8,"totalTerms":100},"loc":35}