{"id":18408,"className":"java.awt.image.Raster","methodName":"createCompatibleWritableRaster","signature":"\u003cjava.awt.image.Raster: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int,int,int)\u003e","javadoc":"/** \n * Create a compatible WritableRaster with the specified location (minX, minY) and size (width, height), a new SampleModel, and a new initialized DataBuffer.\n * @param x the X coordinate of the upper-left corner ofthe \u003ccode\u003eWritableRaster\u003c/code\u003e\n * @param y the Y coordinate of the upper-left corner ofthe \u003ccode\u003eWritableRaster\u003c/code\u003e\n * @param w the specified width of the \u003ccode\u003eWritableRaster\u003c/code\u003e\n * @param h the specified height of the \u003ccode\u003eWritableRaster\u003c/code\u003e\n * @return a compatible \u003ccode\u003eWritableRaster\u003c/code\u003e with the specifiedsize and location and a new sample model and data buffer.\n * @throws RasterFormatException if \u003ccode\u003ew\u003c/code\u003e or \u003ccode\u003eh\u003c/code\u003eis less than or equal to zero, or computing either \u003ccode\u003ex + w\u003c/code\u003e or \u003ccode\u003ey + h\u003c/code\u003e results in integer overflow\n */\n","tf":{"freq":{"result":1,"model":2,"data":2,"zero":1,"specifi":3,"buffer":2,"upper":2,"height":2,"ofth":2,"left":2,"initi":1,"less":1,"min":2,"coordin":2,"locat":2,"except":1,"corner":2,"creat":2,"width":2,"specifieds":1,"equal":1,"writabl":7,"format":1,"size":1,"raster":8,"either":1,"overflow":1,"comput":1,"integ":1,"sampl":2,"compat":3},"maxFreq":8,"totalTerms":62},"loc":4}