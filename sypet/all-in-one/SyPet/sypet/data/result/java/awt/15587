{"id":15587,"className":"java.awt.Dialog","methodName":"setVisible","signature":"\u003cjava.awt.Dialog: void setVisible(boolean)\u003e","javadoc":"/** \n * Shows or hides this  {@code Dialog} depending on the value of parameter{@code b}.\n * @param b if {@code true}, makes the  {@code Dialog} visible,otherwise hides the  {@code Dialog}. If the dialog and/or its owner are not yet displayable, both are made displayable.  The dialog will be validated prior to being made visible. If  {@code false}, hides the  {@code Dialog} and then causes {@code setVisible(true)}to return if it is currently blocked. \u003cp\u003e \u003cb\u003eNotes for modal dialogs\u003c/b\u003e. \u003cul\u003e \u003cli\u003e {@code setVisible(true)}:  If the dialog is not already visible, this call will not return until the dialog is hidden by calling  {@code setVisible(false)} or{@code dispose}. \u003cli\u003e {@code setVisible(false)}:  Hides the dialog and then returns on  {@code setVisible(true)} if it is currently blocked.\u003cli\u003eIt is OK to call this method from the event dispatching thread because the toolkit ensures that other events are not blocked while this method is blocked. \u003c/ul\u003e\n * @see java.awt.Window#setVisible\n * @see java.awt.Window#dispose\n * @see java.awt.Component#isDisplayable\n * @see java.awt.Component#validate\n * @see java.awt.Dialog#isModal\n */\n","tf":{"freq":{"otherwis":1,"fals":3,"call":3,"valid":2,"visibl":10,"made":2,"block":4,"show":1,"ensur":1,"prior":1,"hide":4,"event":2,"thread":1,"current":2,"toolkit":1,"dispatch":1,"valu":1,"dialog":11,"modal":2,"note":1,"depend":1,"paramet":1,"true":4,"display":3,"awt":5,"caus":1,"compon":2,"window":2,"hidden":1,"owner":1,"will":2,"dispos":2,"java":5,"method":2,"alreadi":1,"make":1,"yet":1},"maxFreq":11,"totalTerms":89},"loc":3}