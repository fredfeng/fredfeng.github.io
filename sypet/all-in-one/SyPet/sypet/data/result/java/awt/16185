{"id":16185,"className":"java.awt.Rectangle","methodName":"add","signature":"\u003cjava.awt.Rectangle: void add(java.awt.Point)\u003e","javadoc":"/** \n * Adds the specified  {@code Point} to the bounds of this{@code Rectangle}. \u003cp\u003e If this  {@code Rectangle} has any dimension less than zero,the rules for \u003ca href\u003d#NonExistant\u003enon-existant\u003c/a\u003e rectangles apply. In that case, the new bounds of this  {@code Rectangle} willhave a location equal to the coordinates of the specified {@code Point} and width and height equal to zero.\u003cp\u003e After adding a \u003ccode\u003ePoint\u003c/code\u003e, a call to \u003ccode\u003econtains\u003c/code\u003e with the added \u003ccode\u003ePoint\u003c/code\u003e as an argument does not necessarily return \u003ccode\u003etrue\u003c/code\u003e. The \u003ccode\u003econtains\u003c/code\u003e method does not return \u003ccode\u003etrue\u003c/code\u003e for points on the right or bottom edges of a \u003ccode\u003eRectangle\u003c/code\u003e. Therefore if the added \u003ccode\u003ePoint\u003c/code\u003e falls on the right or bottom edge of the enlarged \u003ccode\u003eRectangle\u003c/code\u003e, \u003ccode\u003econtains\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e for that \u003ccode\u003ePoint\u003c/code\u003e. If the specified point must be contained within the new {@code Rectangle}, a 1x1 rectangle should be added instead: \u003cpre\u003e r.add(pt.x, pt.y, 1, 1); \u003c/pre\u003e\n * @param pt the new \u003ccode\u003ePoint\u003c/code\u003e to add to this\u003ccode\u003eRectangle\u003c/code\u003e\n */\n","tf":{"freq":{"fals":1,"call":1,"edg":2,"therefor":1,"zero":2,"add":4,"willhav":1,"rectangl":9,"must":1,"specifi":3,"height":1,"rule":1,"enlarg":1,"right":2,"exist":2,"href":1,"less":1,"coordin":1,"argument":1,"locat":1,"width":1,"true":2,"equal":2,"dimens":1,"non":2,"point":9,"appli":1,"pre":2,"fall":1,"contain":4,"instead":1,"bottom":2,"ad":4,"method":1,"within":1,"necessarili":1,"bound":2},"maxFreq":9,"totalTerms":74},"loc":3}