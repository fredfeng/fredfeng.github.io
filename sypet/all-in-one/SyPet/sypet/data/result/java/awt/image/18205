{"id":18205,"className":"java.awt.image.ColorModel","methodName":"getNormalizedComponents","signature":"\u003cjava.awt.image.ColorModel: float[] getNormalizedComponents(java.lang.Object,float[],int)\u003e","javadoc":"/** \n * Returns an array of all of the color/alpha components in normalized form, given a pixel in this \u003ccode\u003eColorModel\u003c/code\u003e.  The pixel value is specified by an array of data elements of type transferType passed in as an object reference.  If pixel is not a primitive array of type transferType, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown. An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if \u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e. Normalized components are float values between a per component minimum and maximum specified by the \u003ccode\u003eColorSpace\u003c/code\u003e object for this \u003ccode\u003eColorModel\u003c/code\u003e.  If the \u003ccode\u003enormComponents\u003c/code\u003e array is \u003ccode\u003enull\u003c/code\u003e, a new array will be allocated.  The \u003ccode\u003enormComponents\u003c/code\u003e array will be returned.  Color/alpha components are stored in the \u003ccode\u003enormComponents\u003c/code\u003e array starting at \u003ccode\u003enormOffset\u003c/code\u003e (even if the array is allocated by this method).  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003enormComponents\u003c/code\u003e array is not \u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components (starting at \u003ccode\u003enormOffset\u003c/code\u003e). Since \u003ccode\u003eColorModel\u003c/code\u003e is an abstract class, any instance is an instance of a subclass.  The default implementation of this method in this abstract class first retrieves color and alpha components in the unnormalized form using \u003ccode\u003egetComponents(Object, int[], int)\u003c/code\u003e and then calls \u003ccode\u003egetNormalizedComponents(int[], int, float[], int)\u003c/code\u003e. Subclasses which may have instances which do not support the unnormalized form must override this method.\n * @param pixel the specified pixel\n * @param normComponents an array to receive the normalized components\n * @param normOffset the offset into the \u003ccode\u003enormComponents\u003c/code\u003earray at which to start storing normalized components\n * @return an array containing normalized color and alphacomponents.\n * @throws ClassCastException if \u003ccode\u003epixel\u003c/code\u003e is not a primitivearray of type transferType\n * @throws ArrayIndexOutOfBoundsException if\u003ccode\u003enormComponents\u003c/code\u003e is not large enough to hold all color and alpha components starting at \u003ccode\u003enormOffset\u003c/code\u003e\n * @throws ArrayIndexOutOfBoundsException if\u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e.\n * @throws UnsupportedOperationException if theconstructor of this \u003ccode\u003eColorModel\u003c/code\u003e called the \u003ccode\u003esuper(bits)\u003c/code\u003e constructor, but did not override this method.  See the constructor, {@link #ColorModel(int)}.\n * @throws UnsupportedOperationException if this method is unableto determine the number of bits per component\n * @since 1.4\n */\n","tf":{"freq":{"unsupport":2,"store":2,"normal":7,"unnorm":2,"type":6,"enough":4,"must":1,"specifi":3,"given":1,"norm":11,"oper":2,"refer":1,"element":1,"index":4,"thrown":3,"except":8,"transfer":3,"support":1,"form":3,"hold":4,"number":1,"instanc":3,"bit":2,"cast":2,"start":4,"maximum":1,"determin":1,"contain":1,"will":2,"subclass":2,"even":1,"array":16,"alloc":2,"primit":1,"call":2,"model":7,"pixel":10,"minimum":1,"link":1,"data":1,"use":1,"theconstructor":1,"object":3,"space":1,"primitivearray":1,"alpha":5,"valu":4,"offset":5,"unableto":1,"constructor":2,"may":1,"receiv":1,"alphacompon":1,"pass":1,"compon":20,"per":2,"color":14,"larg":4,"retriev":1,"method":5,"first":1,"bound":4},"maxFreq":20,"totalTerms":209},"loc":5}