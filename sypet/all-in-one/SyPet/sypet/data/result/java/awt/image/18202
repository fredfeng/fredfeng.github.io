{"id":18202,"className":"java.awt.image.ColorModel","methodName":"getDataElements","signature":"\u003cjava.awt.image.ColorModel: java.lang.Object getDataElements(int[],int,java.lang.Object)\u003e","javadoc":"/** \n * Returns a data element array representation of a pixel in this \u003ccode\u003eColorModel\u003c/code\u003e, given an array of unnormalized color/alpha components.  This array can then be passed to the \u003ccode\u003esetDataElements\u003c/code\u003e method of a \u003ccode\u003eWritableRaster\u003c/code\u003e object.  This method will throw an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if color component values for this \u003ccode\u003eColorModel\u003c/code\u003e are not conveniently representable in the unnormalized form. An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if the \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all the color and alpha components (starting at \u003ccode\u003eoffset\u003c/code\u003e).  If the \u003ccode\u003eobj\u003c/code\u003e variable is \u003ccode\u003enull\u003c/code\u003e, a new array will be allocated.  If \u003ccode\u003eobj\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e, it must be a primitive array of type transferType; otherwise, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if \u003ccode\u003eobj\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e. Since \u003ccode\u003eColorModel\u003c/code\u003e is an abstract class, any instance is an instance of a subclass.  Subclasses must override this method since the implementation in this abstract class throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @param components an array of unnormalized color and alphacomponents\n * @param offset the index into \u003ccode\u003ecomponents\u003c/code\u003e at which tobegin retrieving color and alpha components\n * @param obj the \u003ccode\u003eObject\u003c/code\u003e representing an array of colorand alpha components\n * @return an \u003ccode\u003eObject\u003c/code\u003e representing an array of color andalpha components.\n * @throws ClassCastException if \u003ccode\u003eobj\u003c/code\u003eis not a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e\n * @throws ArrayIndexOutOfBoundsException if\u003ccode\u003eobj\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e or the \u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \u003ccode\u003eoffset\u003c/code\u003e\n * @throws IllegalArgumentException ifcomponent values for this \u003ccode\u003eColorModel\u003c/code\u003e are not conveniently representable in the unnormalized form\n * @throws UnsupportedOperationException if thismethod is not supported by this \u003ccode\u003eColorModel\u003c/code\u003e\n * @see WritableRaster#setDataElements\n * @see SampleModel#setDataElements\n */\n","tf":{"freq":{"unsupport":2,"variabl":1,"unnorm":4,"colorand":1,"enough":4,"type":4,"must":2,"given":1,"oper":2,"argument":2,"element":5,"index":4,"except":9,"thrown":3,"transfer":2,"support":1,"form":2,"hold":4,"writabl":2,"instanc":2,"tobegin":1,"cast":2,"start":2,"will":2,"subclass":2,"ifcompon":1,"array":14,"alloc":1,"otherwis":1,"primit":2,"model":8,"pixel":3,"andalpha":1,"data":5,"object":3,"thismethod":1,"alpha":5,"valu":4,"offset":3,"conveni":2,"repres":2,"illeg":2,"represent":3,"pass":1,"alphacompon":1,"raster":2,"compon":11,"color":14,"larg":4,"retriev":1,"method":3,"obj":6,"sampl":1,"bound":3},"maxFreq":14,"totalTerms":174},"loc":4}