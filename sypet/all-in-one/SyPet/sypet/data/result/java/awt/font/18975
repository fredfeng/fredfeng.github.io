{"id":18975,"className":"java.awt.font.LineBreakMeasurer","methodName":"nextOffset","signature":"\u003cjava.awt.font.LineBreakMeasurer: int nextOffset(float,int,boolean)\u003e","javadoc":"/** \n * Returns the position at the end of the next layout.  Does NOT update the current position of this \u003ccode\u003eLineBreakMeasurer\u003c/code\u003e.\n * @param wrappingWidth the maximum visible advance permitted forthe text in the next layout\n * @param offsetLimit the first character that can not be includedin the next layout, even if the text after the limit would fit within the wrapping width; \u003ccode\u003eoffsetLimit\u003c/code\u003e must be greater than the current position\n * @param requireNextWord if \u003ccode\u003etrue\u003c/code\u003e, the current positionthat is returned if the entire next word does not fit within \u003ccode\u003ewrappingWidth\u003c/code\u003e; if \u003ccode\u003efalse\u003c/code\u003e, the offset returned is at least one greater than the current position\n * @return an offset in the text representing the limit of thenext \u003ccode\u003eTextLayout\u003c/code\u003e\n */\n","tf":{"freq":{"fals":1,"forth":1,"greater":2,"least":1,"visibl":1,"one":1,"next":6,"permit":1,"line":1,"must":1,"includedin":1,"fit":2,"requir":1,"layout":4,"current":4,"offset":5,"end":1,"limit":4,"wrap":3,"text":4,"repres":1,"charact":1,"width":3,"true":1,"positionthat":1,"updat":1,"advanc":1,"maximum":1,"word":2,"measur":1,"even":1,"thenext":1,"within":2,"entir":1,"posit":4,"first":1},"maxFreq":6,"totalTerms":68},"loc":53}