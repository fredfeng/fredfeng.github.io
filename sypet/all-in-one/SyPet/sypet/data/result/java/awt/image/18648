{"id":18648,"className":"java.awt.image.PackedColorModel","methodName":"PackedColorModel","signature":"\u003cjava.awt.image.PackedColorModel: void PackedColorModel(java.awt.color.ColorSpace,int,int[],int,boolean,int,int)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003ePackedColorModel\u003c/code\u003e from a color mask array, which specifies which bits in an \u003ccode\u003eint\u003c/code\u003e pixel representation contain each of the color samples, and an alpha mask.  Color components are in the specified \u003ccode\u003eColorSpace\u003c/code\u003e.  The length of \u003ccode\u003ecolorMaskArray\u003c/code\u003e should be the number of components in the \u003ccode\u003eColorSpace\u003c/code\u003e.  All of the bits in each mask must be contiguous and fit in the specified number of least significant bits of an \u003ccode\u003eint\u003c/code\u003e pixel representation.  If the \u003ccode\u003ealphaMask\u003c/code\u003e is 0, there is no alpha.  If there is alpha, the \u003ccode\u003eboolean\u003c/code\u003e \u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e specifies how to interpret color and alpha samples in pixel values.  If the \u003ccode\u003eboolean\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, color samples are assumed to have been multiplied by the alpha sample.  The transparency, \u003ccode\u003etrans\u003c/code\u003e, specifies what alpha values can be represented by this color model.  The transfer type is the type of primitive array used to represent pixel values.\n * @param space the specified \u003ccode\u003eColorSpace\u003c/code\u003e\n * @param bits the number of bits in the pixel values\n * @param colorMaskArray array that specifies the masks representingthe bits of the pixel values that represent the color components\n * @param alphaMask specifies the mask representingthe bits of the pixel values that represent the alpha component\n * @param isAlphaPremultiplied \u003ccode\u003etrue\u003c/code\u003e if color samples arepremultiplied by the alpha sample; \u003ccode\u003efalse\u003c/code\u003e otherwise\n * @param trans specifies the alpha value that can be represented bythis color model\n * @param transferType the type of array used to represent pixel values\n * @throws IllegalArgumentException if \u003ccode\u003ebits\u003c/code\u003e is less than1 or greater than 32\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"primit":1,"model":4,"greater":1,"pixel":8,"least":1,"interpret":1,"use":2,"mask":9,"pack":2,"type":4,"space":4,"must":1,"specifi":9,"premultipli":2,"transpar":1,"fit":1,"alpha":13,"length":1,"multipli":1,"bythi":1,"valu":8,"less":1,"argument":1,"except":1,"transfer":2,"assum":1,"arepremultipli":1,"repres":6,"signific":1,"true":2,"number":3,"tran":2,"contigu":1,"illeg":1,"represent":2,"representingth":2,"bit":8,"compon":4,"color":16,"contain":1,"construct":1,"sampl":6,"array":6},"maxFreq":16,"totalTerms":146},"loc":24}