{"id":15398,"className":"java.awt.LinearGradientPaint","methodName":"LinearGradientPaint","signature":"\u003cjava.awt.LinearGradientPaint: void LinearGradientPaint(float,float,float,float,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod)\u003e","javadoc":"/** \n * Constructs a  {@code LinearGradientPaint} with a default {@code SRGB}color space.\n * @param startX the X coordinate of the gradient axis start pointin user space\n * @param startY the Y coordinate of the gradient axis start pointin user space\n * @param endX   the X coordinate of the gradient axis end pointin user space\n * @param endY   the Y coordinate of the gradient axis end pointin user space\n * @param fractions numbers ranging from 0.0 to 1.0 specifying thedistribution of colors along the gradient\n * @param colors array of colors corresponding to each fractional value\n * @param cycleMethod either {@code NO_CYCLE},  {@code REFLECT}, or  {@code REPEAT}\n * @throws NullPointerException if  {@code fractions} array is null,or  {@code colors} array is null,or  {@code cycleMethod} is null\n * @throws IllegalArgumentException if start and end points are the same points, or  {@code fractions.length !\u003d colors.length}, or  {@code colors} is less than 2 in size,or a  {@code fractions} value is less than 0.0 or greater than 1.0,or the  {@code fractions} are not provided in strictly increasing order\n */\n","tf":{"freq":{"increas":1,"greater":1,"axi":4,"correspond":1,"cycl":2,"space":5,"specifi":1,"order":1,"rang":1,"length":2,"valu":2,"along":1,"less":2,"end":5,"argument":1,"coordin":4,"thedistribut":1,"except":2,"linear":2,"fraction":6,"paint":2,"number":1,"provid":1,"illeg":1,"size":1,"point":2,"either":1,"start":5,"color":7,"pointin":4,"pointer":1,"method":2,"construct":1,"strict":1,"user":4,"gradient":7,"array":3},"maxFreq":7,"totalTerms":89},"loc":7}