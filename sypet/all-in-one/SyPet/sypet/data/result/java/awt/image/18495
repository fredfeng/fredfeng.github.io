{"id":18495,"className":"java.awt.image.SampleModel","methodName":"getDataElements","signature":"\u003cjava.awt.image.SampleModel: java.lang.Object getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\u003e","javadoc":"/** \n * Returns data for a single pixel in a primitive array of type TransferType.  For image data supported by the Java 2D API, this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format, thus increasing efficiency for data transfers. Generally, obj should be passed in as null, so that the Object will be created automatically and will be of the right primitive data type. \u003cp\u003e The following code illustrates transferring data for one pixel from DataBuffer \u003ccode\u003edb1\u003c/code\u003e, whose storage layout is described by SampleModel \u003ccode\u003esm1\u003c/code\u003e, to DataBuffer \u003ccode\u003edb2\u003c/code\u003e, whose storage layout is described by SampleModel \u003ccode\u003esm2\u003c/code\u003e. The transfer will generally be more efficient than using getPixel/setPixel. \u003cpre\u003e SampleModel sm1, sm2; DataBuffer db1, db2; sm2.setDataElements(x, y, sm1.getDataElements(x, y, null, db1), db2); \u003c/pre\u003e Using getDataElements/setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModels have the same number of bands, corresponding bands have the same number of bits per sample, and the TransferTypes are the same. \u003cp\u003e If obj is non-null, it should be a primitive array of type TransferType. Otherwise, a ClassCastException is thrown.  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds, or if obj is non-null and is not large enough to hold the pixel data.\n * @param x         The X coordinate of the pixel location.\n * @param y         The Y coordinate of the pixel location.\n * @param obj       If non-null, a primitive array in which to returnthe pixel data.\n * @param data      The DataBuffer containing the image data.\n * @return the data elements for the specified pixel.\n * @see #getNumDataElements\n * @see #getTransferType\n * @see java.awt.image.DataBuffer\n * @see #setDataElements(int,int,Object,DataBuffer)\n * @throws NullPointerException if data is null.\n * @throws ArrayIndexOutOfBoundsException if the coordinates arenot in bounds, or if obj is too small to hold the output.\n */\n","tf":{"freq":{"singl":1,"pack":1,"enough":1,"type":7,"specifi":1,"buffer":13,"band":2,"effici":2,"right":1,"follow":1,"coordin":4,"element":8,"index":2,"thrown":2,"except":4,"transfer":8,"support":1,"creat":1,"whose":2,"hold":2,"describ":2,"number":2,"format":1,"imag":3,"non":3,"bit":1,"awt":1,"returnth":1,"cast":1,"contain":1,"will":4,"pointer":1,"output":1,"small":1,"array":5,"increas":1,"otherwis":1,"primit":4,"model":5,"legitim":1,"pixel":9,"pair":1,"correspond":1,"one":2,"data":32,"use":2,"object":2,"automat":1,"layout":2,"locat":2,"may":2,"thus":1,"storag":2,"general":2,"pass":1,"two":1,"num":1,"per":1,"larg":1,"pre":2,"obj":5,"java":2,"arenot":1,"bound":4,"illustr":1,"sampl":6},"maxFreq":32,"totalTerms":191},"loc":0}