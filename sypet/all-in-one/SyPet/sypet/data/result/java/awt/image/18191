{"id":18191,"className":"java.awt.image.ColorModel","methodName":"getRed","signature":"\u003cjava.awt.image.ColorModel: int getRed(java.lang.Object)\u003e","javadoc":"/** \n * Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB \u003ccode\u003eColorSpace\u003c/code\u003e, sRGB.  A color conversion is done if necessary.  The pixel value is specified by an array of data elements of type transferType passed in as an object reference.  The returned value is a non pre-multiplied value.  For example, if alpha is premultiplied, this method divides it out before returning the value.  If the alpha value is 0, the red value is 0. If \u003ccode\u003einData\u003c/code\u003e is not a primitive array of type transferType, a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.  An \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e is thrown if \u003ccode\u003einData\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e. If this \u003ccode\u003etransferType\u003c/code\u003e is not supported, a \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown.  Since \u003ccode\u003eColorModel\u003c/code\u003e is an abstract class, any instance must be an instance of a subclass.  Subclasses inherit the implementation of this method and if they don\u0027t override it, this method throws an exception if the subclass uses a \u003ccode\u003etransferType\u003c/code\u003e other than \u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e, or \u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e.\n * @param inData an array of pixel values\n * @return the value of the red component of the specified pixel.\n * @throws ClassCastException if \u003ccode\u003einData\u003c/code\u003eis not a primitive array of type \u003ccode\u003etransferType\u003c/code\u003e\n * @throws ArrayIndexOutOfBoundsException if\u003ccode\u003einData\u003c/code\u003e is not large enough to hold a pixel value for this \u003ccode\u003eColorModel\u003c/code\u003e\n * @throws UnsupportedOperationException if this\u003ccode\u003etranferType\u003c/code\u003e is not supported by this \u003ccode\u003eColorModel\u003c/code\u003e\n */\n","tf":{"freq":{"primit":2,"scale":1,"unsupport":2,"model":4,"pixel":6,"convers":1,"data":9,"use":1,"object":1,"enough":2,"space":1,"type":9,"necessari":1,"must":1,"specifi":3,"buffer":3,"premultipli":1,"oper":2,"refer":1,"alpha":2,"multipli":1,"valu":10,"element":1,"tranfer":1,"index":2,"thrown":3,"except":7,"transfer":5,"support":2,"hold":2,"done":1,"divid":1,"instanc":2,"pass":1,"non":1,"red":4,"cast":2,"compon":2,"color":7,"larg":2,"pre":1,"subclass":3,"will":1,"exampl":1,"method":3,"bound":2,"array":6},"maxFreq":10,"totalTerms":127},"loc":30}