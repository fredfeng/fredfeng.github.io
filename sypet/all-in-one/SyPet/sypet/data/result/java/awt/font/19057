{"id":19057,"className":"java.awt.font.GlyphVector","methodName":"setGlyphTransform","signature":"\u003cjava.awt.font.GlyphVector: void setGlyphTransform(int,java.awt.geom.AffineTransform)\u003e","javadoc":"/** \n * Sets the transform of the specified glyph within this \u003ccode\u003eGlyphVector\u003c/code\u003e.  The transform is relative to the glyph position.  A \u003ccode\u003enull\u003c/code\u003e argument for \u003ccode\u003enewTX\u003c/code\u003e indicates that no special transform is applied for the specified glyph. This method can be used to rotate, mirror, translate and scale the glyph.  Adding a transform can result in signifant performance changes.\n * @param glyphIndex the index into this \u003ccode\u003eGlyphVector\u003c/code\u003e\n * @param newTX the new transform of the glyph at \u003ccode\u003eglyphIndex\u003c/code\u003e\n * @throws IndexOutOfBoundsException if \u003ccode\u003eglyphIndex\u003c/code\u003eis less than 0 or greater than or equal to the number of glyphs in this \u003ccode\u003eGlyphVector\u003c/code\u003e\n * @see #getGlyphTransform\n */\n","tf":{"freq":{"scale":1,"result":1,"greater":1,"use":1,"perform":1,"specifi":2,"mirror":1,"transform":7,"indic":1,"vector":3,"relat":1,"less":1,"argument":1,"except":1,"index":5,"glyph":14,"rotat":1,"signif":1,"number":1,"equal":1,"translat":1,"appli":1,"ad":1,"method":1,"special":1,"within":1,"chang":1,"posit":1,"bound":1},"maxFreq":14,"totalTerms":55},"loc":0}