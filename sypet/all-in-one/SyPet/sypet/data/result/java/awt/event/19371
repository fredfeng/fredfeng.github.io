{"id":19371,"className":"java.awt.event.InvocationEvent","methodName":"isDispatched","signature":"\u003cjava.awt.event.InvocationEvent: boolean isDispatched()\u003e","javadoc":"/** \n * Returns  {@code true} if the event is dispatched or any exception isthrown while dispatching,  {@code false} otherwise. The method shouldbe called by a waiting thread that calls the  {@code notifier.wait()} method.Since spurious wakeups are possible (as explained in  {@link Object#wait()}), this method should be used in a waiting loop to ensure that the event got dispatched: \u003cpre\u003e while (!event.isDispatched()) { notifier.wait(); } \u003c/pre\u003e If the waiting thread wakes up without dispatching the event, the  {@code isDispatched()} method returns {@code false}, and the  {@code while} loop executes once more, thus, causingthe awakened thread to revert to the waiting mode. \u003cp\u003e If the  {@code notifier.notifyAll()} happens before the waiting threadenters the  {@code notifier.wait()} method, the {@code while} loop ensuresthat the waiting thread will not enter the  {@code notifier.wait()} method.Otherwise, there is no guarantee that the waiting thread will ever be woken from the wait.\n * @return {@code true} if the event has been dispatched, or any exceptionhas been thrown while dispatching,  {@code false} otherwise\n * @see #dispatch\n * @see #notifier\n * @see #catchExceptions\n * @since 1.7\n */\n","tf":{"freq":{"otherwis":3,"fals":3,"call":2,"threadent":1,"link":1,"possibl":1,"use":1,"wait":13,"object":1,"exceptionha":1,"mode":1,"ensur":1,"isthrown":1,"revert":1,"wake":1,"event":5,"thread":5,"wakeup":1,"woken":1,"loop":3,"dispatch":10,"happen":1,"awaken":1,"notifi":7,"causingth":1,"thrown":1,"except":2,"spurious":1,"thus":1,"guarante":1,"ensuresthat":1,"true":2,"enter":1,"without":1,"shouldb":1,"pre":2,"will":2,"method":6,"execut":1,"explain":1,"got":1,"ever":1},"maxFreq":13,"totalTerms":93},"loc":3}