{"id":17647,"className":"java.awt.datatransfer.DataFlavor$TextFlavorComparator","methodName":"compare","signature":"\u003cjava.awt.datatransfer.DataFlavor$TextFlavorComparator: int compare(java.lang.Object,java.lang.Object)\u003e","javadoc":"/** \n * Compares two \u003ccode\u003eDataFlavor\u003c/code\u003e objects. Returns a negative integer, zero, or a positive integer as the first \u003ccode\u003eDataFlavor\u003c/code\u003e is worse than, equal to, or better than the second. \u003cp\u003e \u003ccode\u003eDataFlavor\u003c/code\u003es are ordered according to the rules outlined for \u003ccode\u003eselectBestTextFlavor\u003c/code\u003e.\n * @param obj1 the first \u003ccode\u003eDataFlavor\u003c/code\u003e to be compared\n * @param obj2 the second \u003ccode\u003eDataFlavor\u003c/code\u003e to be compared\n * @return a negative integer, zero, or a positive integer as the firstargument is worse, equal to, or better than the second\n * @throws ClassCastException if either of the arguments is not aninstance of \u003ccode\u003eDataFlavor\u003c/code\u003e\n * @throws NullPointerException if either of the arguments is\u003ccode\u003enull\u003c/code\u003e\n * @see #selectBestTextFlavor\n */\n","tf":{"freq":{"second":3,"outlin":1,"data":6,"object":1,"zero":2,"aninst":1,"order":1,"rule":1,"best":2,"argument":2,"except":2,"text":2,"select":2,"wors":2,"flavor":8,"firstargu":1,"equal":2,"accord":1,"two":1,"either":2,"cast":1,"better":2,"pointer":1,"negat":2,"obj":2,"first":2,"posit":2,"integ":4,"compar":4},"maxFreq":8,"totalTerms":63},"loc":16}