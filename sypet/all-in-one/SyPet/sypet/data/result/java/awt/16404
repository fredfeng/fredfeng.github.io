{"id":16404,"className":"java.awt.KeyboardFocusManager","methodName":"setDefaultFocusTraversalKeys","signature":"\u003cjava.awt.KeyboardFocusManager: void setDefaultFocusTraversalKeys(int,java.util.Set)\u003e","javadoc":"/** \n * Sets the default focus traversal keys for a given traversal operation. This traversal key \u003ccode\u003eSet\u003c/code\u003e will be in effect on all \u003ccode\u003eWindow\u003c/code\u003es that have no such \u003ccode\u003eSet\u003c/code\u003e of their own explicitly defined. This \u003ccode\u003eSet\u003c/code\u003e will also be inherited, recursively, by any child \u003ccode\u003eComponent\u003c/code\u003e of those \u003ccode\u003eWindows\u003c/code\u003e that has no such \u003ccode\u003eSet\u003c/code\u003e of its own explicitly defined. \u003cp\u003e The default values for the default focus traversal keys are implementation-dependent. Sun recommends that all implementations for a particular native platform use the same default values. The recommendations for Windows and Unix are listed below. These recommendations are used in the Sun AWT implementations. \u003ctable border\u003d1 summary\u003d\"Recommended default values for focus traversal keys\"\u003e \u003ctr\u003e \u003cth\u003eIdentifier\u003c/th\u003e \u003cth\u003eMeaning\u003c/th\u003e \u003cth\u003eDefault\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eKeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eNormal forward keyboard traversal\u003c/td\u003e \u003ctd\u003e\u003ccode\u003eTAB\u003c/code\u003e on \u003ccode\u003eKEY_PRESSED\u003c/code\u003e, \u003ccode\u003eCTRL-TAB\u003c/code\u003e on \u003ccode\u003eKEY_PRESSED\u003c/code\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eKeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eNormal reverse keyboard traversal\u003c/td\u003e \u003ctd\u003e\u003ccode\u003eSHIFT-TAB\u003c/code\u003e on \u003ccode\u003eKEY_PRESSED\u003c/code\u003e, \u003ccode\u003eCTRL-SHIFT-TAB\u003c/code\u003e on \u003ccode\u003eKEY_PRESSED\u003c/code\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eKeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eGo up one focus traversal cycle\u003c/td\u003e \u003ctd\u003enone\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eKeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eGo down one focus traversal cycle\u003c/td\u003e \u003ctd\u003enone\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e To disable a traversal key, use an empty \u003ccode\u003eSet\u003c/code\u003e; \u003ccode\u003eCollections.EMPTY_SET\u003c/code\u003e is recommended. \u003cp\u003e Using the \u003ccode\u003eAWTKeyStroke\u003c/code\u003e API, client code can specify on which of two specific \u003ccode\u003eKeyEvent\u003c/code\u003es, \u003ccode\u003eKEY_PRESSED\u003c/code\u003e or \u003ccode\u003eKEY_RELEASED\u003c/code\u003e, the focus traversal operation will occur. Regardless of which \u003ccode\u003eKeyEvent\u003c/code\u003e is specified, however, all \u003ccode\u003eKeyEvent\u003c/code\u003es related to the focus traversal key, including the associated \u003ccode\u003eKEY_TYPED\u003c/code\u003e event, will be consumed, and will not be dispatched to any \u003ccode\u003eComponent\u003c/code\u003e. It is a runtime error to specify a \u003ccode\u003eKEY_TYPED\u003c/code\u003e event as mapping to a focus traversal operation, or to map the same event to multiple default focus traversal operations.\n * @param id one of\u003ccode\u003eKeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\u003c/code\u003e, \u003ccode\u003eKeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\u003c/code\u003e, \u003ccode\u003eKeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e, or \u003ccode\u003eKeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e\n * @param keystrokes the Set of \u003ccode\u003eAWTKeyStroke\u003c/code\u003es for thespecified operation\n * @see #getDefaultFocusTraversalKeys\n * @see Component#setFocusTraversalKeys\n * @see Component#getFocusTraversalKeys\n * @throws IllegalArgumentException if id is not one of\u003ccode\u003eKeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\u003c/code\u003e, \u003ccode\u003eKeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\u003c/code\u003e, \u003ccode\u003eKeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e, or \u003ccode\u003eKeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e, or if keystrokes is \u003ccode\u003enull\u003c/code\u003e, or if keystrokes contains \u003ccode\u003enull\u003c/code\u003e, or if any \u003ccode\u003eObject\u003c/code\u003e in keystrokes is not an \u003ccode\u003eAWTKeyStroke\u003c/code\u003e, or if any keystroke represents a \u003ccode\u003eKEY_TYPED\u003c/code\u003e event, or if any keystroke already maps to another default focus traversal operation\n * @beaninfo bound: true\n */\n","tf":{"freq":{"client":1,"normal":2,"cycl":2,"particular":1,"keystrok":6,"specifi":3,"stroke":3,"given":1,"oper":6,"forward":1,"event":7,"relat":1,"thespecifi":1,"none":2,"tkey":3,"focus":26,"howev":1,"border":1,"key":13,"argument":1,"platform":1,"except":1,"multipl":1,"runtim":1,"summari":1,"window":3,"disabl":1,"explicit":2,"contain":1,"will":5,"recurs":1,"collect":1,"defin":2,"beaninfo":1,"one":4,"use":4,"identifi":1,"anoth":1,"object":1,"recommend":5,"sun":2,"consum":1,"child":1,"revers":1,"associ":1,"map":3,"mean":1,"dispatch":1,"valu":3,"regardless":1,"travers":19,"keyboard":14,"includ":1,"error":1,"repres":1,"depend":1,"manag":12,"true":1,"list":1,"illeg":1,"empti":1,"two":1,"specif":1,"compon":4,"effect":1,"tabl":2,"alreadi":1,"unix":1,"also":1,"bound":1,"occur":1},"maxFreq":26,"totalTerms":202},"loc":50}