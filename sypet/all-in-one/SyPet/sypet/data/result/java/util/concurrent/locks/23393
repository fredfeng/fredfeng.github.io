{"id":23393,"className":"java.util.concurrent.locks.AbstractQueuedSynchronizer","methodName":"acquireInterruptibly","signature":"\u003cjava.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireInterruptibly(int)\u003e","javadoc":"/** \n * Acquires in exclusive mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once  {@link #tryAcquire}, returning on success.  Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking  {@link #tryAcquire}until success or the thread is interrupted.  This method can be used to implement method  {@link Lock#lockInterruptibly}.\n * @param arg the acquire argument.  This value is conveyed to{@link #tryAcquire} but is otherwise uninterpreted andcan represent anything you like.\n * @throws InterruptedException if the current thread is interrupted\n */\n","tf":{"freq":{"acquir":6,"otherwis":2,"anyth":1,"least":1,"unblock":1,"link":4,"possibl":1,"block":1,"use":1,"repeat":1,"mode":1,"uninterpret":1,"convey":1,"arg":1,"thread":3,"current":1,"valu":1,"exclus":1,"argument":1,"except":1,"check":1,"repres":1,"status":1,"invok":2,"queu":1,"lock":2,"like":1,"interrupt":7,"method":2,"success":2,"first":1,"andcan":1,"abort":1},"maxFreq":7,"totalTerms":54},"loc":6}