{"id":22924,"className":"java.util.concurrent.ForkJoinPool","methodName":"managedBlock","signature":"\u003cjava.util.concurrent.ForkJoinPool: void managedBlock(java.util.concurrent.ForkJoinPool$ManagedBlocker)\u003e","javadoc":"/** \n * Blocks in accord with the given blocker.  If the current thread is a  {@link ForkJoinWorkerThread}, this method possibly arranges for a spare thread to be activated if necessary to ensure sufficient parallelism while the current thread is blocked. \u003cp\u003eIf the caller is not a  {@link ForkJoinTask}, this method is behaviorally equivalent to \u003cpre\u003e  {@code while (!blocker.isReleasable()) if (blocker.block()) return;}\u003c/pre\u003e If the caller is a  {@code ForkJoinTask}, then the pool may first be expanded to ensure parallelism, and later adjusted.\n * @param blocker the blocker\n * @throws InterruptedException if blocker.block did so\n */\n","tf":{"freq":{"caller":2,"behavior":1,"link":2,"block":5,"possibl":1,"activ":1,"blocker":6,"necessari":1,"ensur":2,"releas":1,"given":1,"pool":1,"equival":1,"thread":4,"adjust":1,"current":2,"expand":1,"worker":1,"parallel":2,"except":1,"may":1,"fork":3,"later":1,"manag":1,"task":2,"spare":1,"join":3,"accord":1,"interrupt":1,"arrang":1,"pre":2,"suffici":1,"method":2,"first":1},"maxFreq":6,"totalTerms":58},"loc":10}