{"id":22926,"className":"java.util.concurrent.ForkJoinTask","methodName":"fork","signature":"\u003cjava.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask\u003cV\u003e fork()\u003e","javadoc":"/** \n * Arranges to asynchronously execute this task.  While it is not necessarily enforced, it is a usage error to fork a task more than once unless it has completed and been reinitialized. Subsequent modifications to the state of this task or any data it operates on are not necessarily consistently observable by any thread other than the one executing it unless preceded by a call to  {@link #join} or related methods, or a call to {@link #isDone} returning {@code true}. \u003cp\u003eThis method may be invoked only from within  {@code ForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts result in exceptions or errors, possibly including  {@code ClassCastException}.\n * @return {@code this}, to simplify usage\n */\n","tf":{"freq":{"attempt":1,"result":1,"asynchron":1,"call":2,"one":1,"link":3,"state":1,"data":1,"possibl":1,"use":1,"observ":1,"unless":2,"pool":2,"oper":1,"thread":1,"relat":1,"subsequ":1,"complet":1,"except":2,"may":2,"fork":4,"includ":1,"error":2,"enforc":1,"consist":1,"invok":2,"task":3,"done":1,"true":1,"join":3,"reiniti":1,"arrang":1,"simplifi":1,"preced":1,"cast":1,"determin":1,"context":1,"comput":1,"method":3,"within":1,"usag":2,"necessarili":2,"execut":2,"modif":1},"maxFreq":4,"totalTerms":65},"loc":5}