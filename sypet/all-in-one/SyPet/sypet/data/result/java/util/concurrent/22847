{"id":22847,"className":"java.util.concurrent.Executors","methodName":"newSingleThreadScheduledExecutor","signature":"\u003cjava.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)\u003e","javadoc":"/** \n * Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically.  (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.)  Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent \u003ctt\u003enewScheduledThreadPool(1, threadFactory)\u003c/tt\u003e the returned executor is guaranteed not to be reconfigurable to use additional threads.\n * @param threadFactory the factory to use when creating newthreads\n * @return a newly created scheduled executor\n * @throws NullPointerException if threadFactory is null\n */\n","tf":{"freq":{"otherwis":1,"need":1,"reconfigur":1,"singl":3,"one":2,"use":2,"schedul":4,"activ":1,"run":1,"prior":1,"time":1,"newthread":1,"given":2,"pool":1,"equival":1,"factori":4,"thread":8,"unlik":1,"command":1,"howev":1,"place":1,"subsequ":1,"sequenti":1,"note":1,"shutdown":1,"addit":1,"except":1,"creat":3,"failur":1,"guarante":2,"task":3,"executor":4,"period":1,"newli":1,"termin":1,"take":1,"will":2,"pointer":1,"due":1,"delay":1,"execut":4},"maxFreq":8,"totalTerms":71},"loc":4}