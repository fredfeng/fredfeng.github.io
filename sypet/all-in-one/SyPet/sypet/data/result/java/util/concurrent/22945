{"id":22945,"className":"java.util.concurrent.ForkJoinTask","methodName":"reinitialize","signature":"\u003cjava.util.concurrent.ForkJoinTask: void reinitialize()\u003e","javadoc":"/** \n * Resets the internal bookkeeping state of this task, allowing a subsequent  {@code fork}. This method allows repeated reuse of this task, but only if reuse occurs when this task has either never been forked, or has been forked, then completed and all outstanding joins of this task have also completed. Effects under any other usage conditions are not guaranteed. This method may be useful when executing pre-constructed trees of subtasks in loops. \u003cp\u003eUpon completion of this method,  {@code isDone()} reports{@code false}, and  {@code getException()} reports {@code null}. However, the value returned by  {@code getRawResult} isunaffected. To clear this value, you can invoke  {@code setRawResult(null)}.\n */\n","tf":{"freq":{"raw":2,"fals":1,"subtask":1,"result":2,"allow":2,"state":1,"use":1,"repeat":1,"reus":2,"clear":1,"tree":1,"report":2,"loop":1,"reset":1,"valu":2,"howev":1,"subsequ":1,"complet":3,"condit":1,"except":1,"fork":3,"may":1,"outstand":1,"invok":1,"task":4,"guarante":1,"done":1,"isunaffect":1,"join":1,"reiniti":1,"either":1,"never":1,"effect":1,"pre":1,"bookkeep":1,"intern":1,"method":3,"construct":1,"usag":1,"execut":1,"also":1,"upon":1,"occur":1},"maxFreq":4,"totalTerms":58},"loc":6}