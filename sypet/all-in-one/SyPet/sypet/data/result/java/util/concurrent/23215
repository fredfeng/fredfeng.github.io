{"id":23215,"className":"java.util.concurrent.BlockingDeque","methodName":"remove","signature":"\u003cjava.util.concurrent.BlockingDeque: boolean remove(java.lang.Object)\u003e","javadoc":"/** \n * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element \u003ctt\u003ee\u003c/tt\u003e such that \u003ctt\u003eo.equals(e)\u003c/tt\u003e (if such an element exists). Returns \u003ctt\u003etrue\u003c/tt\u003e if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). \u003cp\u003eThis method is equivalent to {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.\n * @param o element to be removed from this deque, if present\n * @return \u003ctt\u003etrue\u003c/tt\u003e if this deque changed as a result of the call\n * @throws ClassCastException if the class of the specified elementis incompatible with this deque (\u003ca href\u003d\"../Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n * @throws NullPointerException if the specified element is null(\u003ca href\u003d\"../Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n */\n","tf":{"freq":{"result":2,"call":2,"elementi":1,"link":1,"object":1,"specifi":4,"occurr":3,"equival":2,"href":2,"exist":1,"option":4,"element":7,"except":2,"unchang":1,"remov":6,"true":2,"equal":1,"incompat":1,"restrict":2,"present":1,"formal":1,"cast":1,"contain":2,"pointer":1,"dequ":7,"html":2,"method":1,"chang":2,"first":4,"collect":2},"maxFreq":7,"totalTerms":69},"loc":0}