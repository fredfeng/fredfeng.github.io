{"id":20279,"className":"java.util.Arrays","methodName":"copyOfRange","signature":"\u003cjava.util.Arrays: T[] copyOfRange(U[],int,int,java.lang.Class)\u003e","javadoc":"/** \n * Copies the specified range of the specified array into a new array. The initial index of the range (\u003ctt\u003efrom\u003c/tt\u003e) must lie between zero and \u003ctt\u003eoriginal.length\u003c/tt\u003e, inclusive.  The value at \u003ctt\u003eoriginal[from]\u003c/tt\u003e is placed into the initial element of the copy (unless \u003ctt\u003efrom \u003d\u003d original.length\u003c/tt\u003e or \u003ctt\u003efrom \u003d\u003d to\u003c/tt\u003e). Values from subsequent elements in the original array are placed into subsequent elements in the copy.  The final index of the range (\u003ctt\u003eto\u003c/tt\u003e), which must be greater than or equal to \u003ctt\u003efrom\u003c/tt\u003e, may be greater than \u003ctt\u003eoriginal.length\u003c/tt\u003e, in which case \u003ctt\u003enull\u003c/tt\u003e is placed in all elements of the copy whose index is greater than or equal to \u003ctt\u003eoriginal.length - from\u003c/tt\u003e.  The length of the returned array will be \u003ctt\u003eto - from\u003c/tt\u003e. The resulting array is of the class \u003ctt\u003enewType\u003c/tt\u003e.\n * @param original the array from which a range is to be copied\n * @param from the initial index of the range to be copied, inclusive\n * @param to the final index of the range to be copied, exclusive.(This index may lie outside the array.)\n * @param newType the class of the copy to be returned\n * @return a new array containing the specified range from the original array,truncated or padded with nulls to obtain the required length\n * @throws ArrayIndexOutOfBoundsException if {@code from \u003c 0}or  {@code from \u003e original.length}\n * @throws IllegalArgumentException if \u003ctt\u003efrom \u0026gt; to\u003c/tt\u003e\n * @throws NullPointerException if \u003ctt\u003eoriginal\u003c/tt\u003e is null\n * @throws ArrayStoreException if an element copied from\u003ctt\u003eoriginal\u003c/tt\u003e is not of a runtime type that can be stored in an array of class \u003ctt\u003enewType\u003c/tt\u003e.\n * @since 1.6\n */\n","tf":{"freq":{"result":1,"greater":3,"store":2,"truncat":1,"zero":1,"type":4,"must":2,"copi":10,"specifi":3,"inclus":2,"requir":1,"unless":1,"rang":8,"length":7,"valu":2,"exclus":1,"initi":3,"place":3,"subsequ":2,"argument":1,"pad":1,"element":5,"except":4,"index":7,"may":2,"whose":1,"runtim":1,"origin":11,"equal":2,"illeg":1,"obtain":1,"outsid":1,"contain":1,"will":1,"pointer":1,"bound":1,"lie":2,"array":12},"maxFreq":12,"totalTerms":113},"loc":11}