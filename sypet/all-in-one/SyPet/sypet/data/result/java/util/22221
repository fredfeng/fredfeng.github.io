{"id":22221,"className":"java.util.Locale","methodName":"Locale","signature":"\u003cjava.util.Locale: void Locale(java.lang.String)\u003e","javadoc":"/** \n * Construct a locale from a language code. This constructor normalizes the language value to lowercase. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e \u003cul\u003e \u003cli\u003eISO 639 is not a stable standard; some of the language codes it defines (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other API on Locale will return only the OLD codes. \u003cli\u003eFor backward compatibility reasons, this constructor does not make any syntactic checks on the input. \u003c/ul\u003e\n * @param language An ISO 639 alpha-2 or alpha-3 language code, or a language subtagup to 8 characters in length.  See the \u003ccode\u003eLocale\u003c/code\u003e class description about valid language values.\n * @exception NullPointerException thrown if argument is null.\n * @since 1.4\n */\n","tf":{"freq":{"valid":1,"defin":1,"old":1,"backward":1,"reason":1,"accept":1,"normal":1,"languag":7,"syntact":1,"stabl":1,"alpha":2,"length":1,"valu":2,"note":1,"constructor":3,"argument":1,"thrown":1,"except":2,"lowercas":1,"standard":1,"check":1,"charact":1,"descript":1,"subtagup":1,"specif":1,"input":1,"will":1,"pointer":1,"construct":1,"local":4,"chang":1,"make":1,"compat":1},"maxFreq":7,"totalTerms":47},"loc":3}