{"id":21960,"className":"java.util.Collections","methodName":"synchronizedList","signature":"\u003cjava.util.Collections: java.util.List\u003cT\u003e synchronizedList(java.util.List)\u003e","javadoc":"/** \n * Returns a synchronized (thread-safe) list backed by the specified list.  In order to guarantee serial access, it is critical that \u003cstrong\u003eall\u003c/strong\u003e access to the backing list is accomplished through the returned list.\u003cp\u003e It is imperative that the user manually synchronize on the returned list when iterating over it: \u003cpre\u003e List list \u003d Collections.synchronizedList(new ArrayList()); ... synchronized (list) { Iterator i \u003d list.iterator(); // Must be in synchronized block while (i.hasNext()) foo(i.next()); } \u003c/pre\u003e Failure to follow this advice may result in non-deterministic behavior. \u003cp\u003eThe returned list will be serializable if the specified list is serializable.\n * @param list the list to be \"wrapped\" in a synchronized list.\n * @return a synchronized view of the specified list.\n */\n","tf":{"freq":{"result":1,"accomplish":1,"behavior":1,"serializ":2,"next":2,"block":1,"foo":1,"must":1,"specifi":3,"order":1,"determinist":1,"thread":1,"imper":1,"advic":1,"follow":1,"wrap":1,"safe":1,"may":1,"failur":1,"guarante":1,"back":2,"list":18,"access":2,"non":1,"manual":1,"strong":2,"pre":2,"will":1,"view":1,"iter":3,"serial":1,"user":1,"critic":1,"collect":1,"array":1},"maxFreq":18,"totalTerms":62},"loc":5}