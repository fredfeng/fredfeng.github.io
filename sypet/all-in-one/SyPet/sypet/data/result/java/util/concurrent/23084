{"id":23084,"className":"java.util.concurrent.Semaphore","methodName":"acquire","signature":"\u003cjava.util.concurrent.Semaphore: void acquire()\u003e","javadoc":"/** \n * Acquires a permit from this semaphore, blocking until one is available, or the thread is  {@linkplain Thread#interrupt interrupted}. \u003cp\u003eAcquires a permit, if one is available and returns immediately, reducing the number of available permits by one. \u003cp\u003eIf no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: \u003cul\u003e \u003cli\u003eSome other thread invokes the  {@link #release} method for thissemaphore and the current thread is next to be assigned a permit; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}the current thread. \u003c/ul\u003e \u003cp\u003eIf the current thread: \u003cul\u003e \u003cli\u003ehas its interrupted status set on entry to this method; or \u003cli\u003eis  {@linkplain Thread#interrupt interrupted} while waitingfor a permit, \u003c/ul\u003e then  {@link InterruptedException} is thrown and the current thread\u0027sinterrupted status is cleared.\n * @throws InterruptedException if the current thread is interrupted\n */\n","tf":{"freq":{"acquir":3,"linkplain":3,"assign":1,"next":1,"one":4,"permit":6,"link":2,"block":1,"schedul":1,"clear":1,"becom":1,"releas":1,"thread":13,"current":6,"purpos":1,"immedi":1,"happen":1,"sinterrupt":1,"waitingfor":1,"thrown":1,"except":2,"semaphor":1,"status":2,"entri":1,"invok":1,"number":1,"avail":4,"interrupt":10,"two":1,"disabl":1,"method":2,"reduc":1,"thissemaphor":1,"lie":1,"dormant":1,"thing":1},"maxFreq":13,"totalTerms":81},"loc":3}