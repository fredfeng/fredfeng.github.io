{"id":21236,"className":"java.util.Collection","methodName":"toArray","signature":"\u003cjava.util.Collection: T[] toArray(T[])\u003e","javadoc":"/** \n * Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this collection. \u003cp\u003eIf this collection fits in the specified array with room to spare (i.e., the array has more elements than this collection), the element in the array immediately following the end of the collection is set to \u003ctt\u003enull\u003c/tt\u003e.  (This is useful in determining the length of this collection \u003ci\u003eonly\u003c/i\u003e if the caller knows that this collection does not contain any \u003ctt\u003enull\u003c/tt\u003e elements.) \u003cp\u003eIf this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. \u003cp\u003eLike the  {@link #toArray()} method, this method acts as bridge betweenarray-based and collection-based APIs.  Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. \u003cp\u003eSuppose \u003ctt\u003ex\u003c/tt\u003e is a collection known to contain only strings. The following code can be used to dump the collection into a newly allocated array of \u003ctt\u003eString\u003c/tt\u003e: \u003cpre\u003e String[] y \u003d x.toArray(new String[0]);\u003c/pre\u003e Note that \u003ctt\u003etoArray(new Object[0])\u003c/tt\u003e is identical in function to \u003ctt\u003etoArray()\u003c/tt\u003e.\n * @param a the array into which the elements of this collection are to bestored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose.\n * @return an array containing all of the elements in this collection\n * @throws ArrayStoreException if the runtime type of the specified arrayis not a supertype of the runtime type of every element in this collection\n * @throws NullPointerException if the specified array is null\n */\n","tf":{"freq":{"store":1,"save":1,"enough":1,"type":6,"must":1,"function":1,"specifi":6,"precis":1,"purpos":1,"everi":1,"follow":2,"therein":1,"element":9,"control":1,"except":2,"spare":1,"runtim":6,"circumst":1,"like":1,"cost":1,"size":1,"newli":1,"determin":1,"contain":4,"pointer":1,"known":1,"big":1,"output":1,"make":1,"room":1,"array":21,"collect":15,"alloc":4,"caller":1,"otherwis":2,"dump":1,"allow":1,"link":1,"use":3,"object":1,"fit":2,"ident":1,"order":2,"bestor":1,"length":1,"immedi":1,"bridg":1,"note":1,"end":1,"may":1,"supertyp":1,"guarante":1,"suppos":1,"know":1,"arrayi":1,"pre":2,"string":4,"base":2,"method":4,"certain":1,"iter":1,"act":1,"betweenarray":1},"maxFreq":21,"totalTerms":141},"loc":0}