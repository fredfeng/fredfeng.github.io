{"id":23012,"className":"java.util.concurrent.BlockingQueue","methodName":"drainTo","signature":"\u003cjava.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)\u003e","javadoc":"/** \n * Removes all available elements from this queue and adds them to the given collection.  This operation may be more efficient than repeatedly polling this queue.  A failure encountered while attempting to add elements to collection \u003ctt\u003ec\u003c/tt\u003e may result in elements being in neither, either or both collections when the associated exception is thrown.  Attempts to drain a queue to itself result in \u003ctt\u003eIllegalArgumentException\u003c/tt\u003e. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.\n * @param c the collection to transfer elements into\n * @return the number of elements transferred\n * @throws UnsupportedOperationException if addition of elementsis not supported by the specified collection\n * @throws ClassCastException if the class of an element of this queueprevents it from being added to the specified collection\n * @throws NullPointerException if the specified collection is null\n * @throws IllegalArgumentException if the specified collection is thisqueue, or some property of an element of this queue prevents it from being added to the specified collection\n */\n","tf":{"freq":{"progress":1,"attempt":2,"queue":4,"result":2,"unsupport":1,"behavior":1,"queueprev":1,"repeat":1,"add":2,"specifi":6,"thisqueu":1,"poll":1,"given":1,"oper":4,"associ":1,"effici":1,"elementsi":1,"undefin":1,"argument":2,"addit":1,"element":7,"transfer":2,"may":2,"except":6,"thrown":1,"support":1,"failur":1,"remov":1,"prevent":1,"number":1,"avail":1,"drain":2,"illeg":2,"neither":1,"either":1,"cast":1,"encount":1,"modifi":1,"pointer":1,"ad":2,"properti":1,"collect":10},"maxFreq":10,"totalTerms":82},"loc":0}