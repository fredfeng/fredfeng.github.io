{"id":24108,"className":"java.util.logging.Logger","methodName":"throwing","signature":"\u003cjava.util.logging.Logger: void throwing(java.lang.String,java.lang.String,java.lang.Throwable)\u003e","javadoc":"/** \n * Log throwing an exception. \u003cp\u003e This is a convenience method to log that a method is terminating by throwing an exception.  The logging is done using the FINER level. \u003cp\u003e If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers.  The LogRecord\u0027s message is set to \"THROW\". \u003cp\u003e Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property.  Thus is it processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property. \u003cp\u003e\n * @param sourceClass    name of class that issued the logging request\n * @param sourceMethod  name of the method.\n * @param thrown  The Throwable that is being thrown.\n */\n","tf":{"freq":{"store":2,"use":1,"issu":1,"formatt":1,"level":2,"given":2,"forward":1,"request":1,"name":2,"current":1,"logger":1,"regist":1,"rather":1,"conveni":1,"note":1,"argument":2,"except":2,"thrown":4,"thus":1,"enabl":1,"messag":3,"done":1,"paramet":2,"format":1,"log":9,"process":1,"record":5,"termin":1,"sourc":2,"special":1,"method":4,"throwabl":1,"properti":3,"output":2,"treat":1,"handler":1},"maxFreq":9,"totalTerms":67},"loc":10}