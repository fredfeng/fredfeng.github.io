{"id":21230,"className":"java.util.Objects","methodName":"requireNonNull","signature":"\u003cjava.util.Objects: T requireNonNull(T,java.lang.String)\u003e","javadoc":"/** \n * Checks that the specified object reference is not  {@code null} andthrows a customized  {@link NullPointerException} if it is. This methodis designed primarily for doing parameter validation in methods and constructors with multiple parameters, as demonstrated below: \u003cblockquote\u003e\u003cpre\u003e public Foo(Bar bar, Baz baz) { this.bar \u003d Objects.requireNonNull(bar, \"bar must not be null\"); this.baz \u003d Objects.requireNonNull(baz, \"baz must not be null\"); } \u003c/pre\u003e\u003c/blockquote\u003e\n * @param obj     the object reference to check for nullity\n * @param message detail message to be used in the event that a {@code NullPointerException} is thrown\n * @param \u003c T \u003e the type of the reference\n * @return {@code obj} if not {@code null}\n * @throws NullPointerException if {@code obj} is {@code null}\n */\n","tf":{"freq":{"valid":1,"detail":1,"link":1,"use":1,"foo":1,"object":4,"type":1,"must":2,"primarili":1,"specifi":1,"requir":3,"refer":3,"event":1,"blockquot":2,"methodi":1,"custom":1,"constructor":1,"thrown":1,"nulliti":1,"except":3,"check":2,"multipl":1,"messag":2,"paramet":2,"non":3,"baz":5,"pre":2,"pointer":3,"obj":3,"method":1,"andthrow":1,"demonstr":1,"bar":5,"design":1},"maxFreq":5,"totalTerms":63},"loc":5}