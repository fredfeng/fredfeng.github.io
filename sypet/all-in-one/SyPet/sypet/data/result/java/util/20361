{"id":20361,"className":"java.util.ResourceBundle","methodName":"getBundle","signature":"\u003cjava.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)\u003e","javadoc":"/** \n * Gets a resource bundle using the specified base name, locale, and class loader. \u003cp\u003e\u003ca name\u003d\"default_behavior\"/\u003eThis method behaves the same as calling {@link #getBundle(String,Locale,ClassLoader,Control)} passing adefault instance of  {@link Control}. The following describes this behavior. \u003cp\u003e\u003ccode\u003egetBundle\u003c/code\u003e uses the base name, the specified locale, and the default locale (obtained from  {@link java.util.Locale#getDefault() Locale.getDefault}) to generate a sequence of \u003ca name\u003d\"candidates\"\u003e\u003cem\u003ecandidate bundle names\u003c/em\u003e\u003c/a\u003e.  If the specified locale\u0027s language, script, country, and variant are all empty strings, then the base name is the only candidate bundle name.  Otherwise, a list of candidate locales is generated from the attribute values of the specified locale (language, script, country and variant) and appended to the base name.  Typically, this will look like the following: \u003cpre\u003e baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant baseName + \"_\" + language + \"_\" + script + \"_\" + country baseName + \"_\" + language + \"_\" + script baseName + \"_\" + language + \"_\" + country + \"_\" + variant baseName + \"_\" + language + \"_\" + country baseName + \"_\" + language \u003c/pre\u003e \u003cp\u003eCandidate bundle names where the final component is an empty string are omitted, along with the underscore.  For example, if country is an empty string, the second and the fifth candidate bundle names above would be omitted.  Also, if script is an empty string, the candidate names including script are omitted.  For example, a locale with language \"de\" and variant \"JAVA\" will produce candidate names with base name \"MyResource\" below. \u003cpre\u003e MyResource_de__JAVA MyResource_de \u003c/pre\u003e In the case that the variant contains one or more underscores (\u0027_\u0027), a sequence of bundle names generated by truncating the last underscore and the part following it is inserted after a candidate bundle name with the original variant.  For example, for a locale with language \"en\", script \"Latn, country \"US\" and variant \"WINDOWS_VISTA\", and bundle base name \"MyResource\", the list of candidate bundle names below is generated: \u003cpre\u003e MyResource_en_Latn_US_WINDOWS_VISTA MyResource_en_Latn_US_WINDOWS MyResource_en_Latn_US MyResource_en_Latn MyResource_en_US_WINDOWS_VISTA MyResource_en_US_WINDOWS MyResource_en_US MyResource_en \u003c/pre\u003e \u003cblockquote\u003e\u003cb\u003eNote:\u003c/b\u003e For some \u003ccode\u003eLocale\u003c/code\u003es, the list of candidate bundle names contains extra names, or the order of bundle names is slightly modified.  See the description of the default implementation of  {@link Control#getCandidateLocales(String,Locale) getCandidateLocales} for details.\u003c/blockquote\u003e\u003cp\u003e\u003ccode\u003egetBundle\u003c/code\u003e then iterates over the candidate bundle names to find the first one for which it can \u003cem\u003einstantiate\u003c/em\u003e an actual resource bundle. It uses the default controls\u0027  {@link Control#getFormats getFormats} method, which generates two bundle names for each generatedname, the first a class name and the second a properties file name. For each candidate bundle name, it attempts to create a resource bundle: \u003cul\u003e\u003cli\u003eFirst, it attempts to load a class using the generated class name. If such a class can be found and loaded using the specified class loader, is assignment compatible with ResourceBundle, is accessible from ResourceBundle, and can be instantiated, \u003ccode\u003egetBundle\u003c/code\u003e creates a new instance of this class and uses it as the \u003cem\u003eresult resource bundle\u003c/em\u003e. \u003cli\u003eOtherwise, \u003ccode\u003egetBundle\u003c/code\u003e attempts to locate a property resource file using the generated properties file name.  It generates a path name from the candidate bundle name by replacing all \".\" characters with \"/\" and appending the string \".properties\".  It attempts to find a \"resource\" with this name using  {@link java.lang.ClassLoader#getResource(java.lang.String) ClassLoader.getResource}.  (Note that a \"resource\" in the sense of \u003ccode\u003egetResource\u003c/code\u003e has nothing to do with the contents of a resource bundle, it is just a container of data, such as a file.)  If it finds a \"resource\", it attempts to create a new  {@link PropertyResourceBundle} instance from its contents.  If successful, thisinstance becomes the \u003cem\u003eresult resource bundle\u003c/em\u003e.  \u003c/ul\u003e \u003cp\u003eThis continues until a result resource bundle is instantiated or the list of candidate bundle names is exhausted.  If no matching resource bundle is found, the default control\u0027s  {@link Control#getFallbackLocale getFallbackLocale} method is called, which returns the current defaultlocale.  A new sequence of candidate locale names is generated using this locale and and searched again, as above. \u003cp\u003eIf still no result bundle is found, the base name alone is looked up. If this still fails, a \u003ccode\u003eMissingResourceException\u003c/code\u003e is thrown. \u003cp\u003e\u003ca name\u003d\"parent_chain\"/\u003e Once a result resource bundle has been found, its \u003cem\u003eparent chain\u003c/em\u003e is instantiated.  If the result bundle already has a parent (perhaps because it was returned from a cache) the chain is complete. \u003cp\u003eOtherwise, \u003ccode\u003egetBundle\u003c/code\u003e examines the remainder of the candidate locale list that was used during the pass that generated the result resource bundle.  (As before, candidate bundle names where the final component is an empty string are omitted.)  When it comes to the end of the candidate list, it tries the plain bundle name.  With each of the candidate bundle names it attempts to instantiate a resource bundle (first looking for a class and then a properties file, as described above). \u003cp\u003eWhenever it succeeds, it calls the previously instantiated resource bundle\u0027s  {@link #setParent(java.util.ResourceBundle) setParent} methodwith the new resource bundle.  This continues until the list of names is exhausted or the current bundle already has a non-null parent. \u003cp\u003eOnce the parent chain is complete, the bundle is returned. \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e \u003ccode\u003egetBundle\u003c/code\u003e caches instantiated resource bundles and might return the same resource bundle instance multiple times. \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003eThe \u003ccode\u003ebaseName\u003c/code\u003e argument should be a fully qualified class name. However, for compatibility with earlier versions, Sun\u0027s Java SE Runtime Environments do not verify this, and so it is possible to access \u003ccode\u003ePropertyResourceBundle\u003c/code\u003es by specifying a path name (using \"/\") instead of a fully qualified class name (using \".\"). \u003cp\u003e\u003ca name\u003d\"default_behavior_example\"/\u003e \u003cstrong\u003eExample:\u003c/strong\u003e \u003cp\u003e The following class and property files are provided: \u003cpre\u003e MyResources.class MyResources.properties MyResources_fr.properties MyResources_fr_CH.class MyResources_fr_CH.properties MyResources_en.properties MyResources_es_ES.class \u003c/pre\u003e The contents of all files are valid (that is, public non-abstract subclasses of \u003ccode\u003eResourceBundle\u003c/code\u003e for the \".class\" files, syntactically correct \".properties\" files).  The default locale is \u003ccode\u003eLocale(\"en\", \"GB\")\u003c/code\u003e. \u003cp\u003eCalling \u003ccode\u003egetBundle\u003c/code\u003e with the locale arguments below will instantiate resource bundles as follows: \u003ctable\u003e \u003ctr\u003e\u003ctd\u003eLocale(\"fr\", \"CH\")\u003c/td\u003e\u003ctd\u003eMyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003eLocale(\"fr\", \"FR\")\u003c/td\u003e\u003ctd\u003eMyResources_fr.properties, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003eLocale(\"de\", \"DE\")\u003c/td\u003e\u003ctd\u003eMyResources_en.properties, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003eLocale(\"en\", \"US\")\u003c/td\u003e\u003ctd\u003eMyResources_en.properties, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003eLocale(\"es\", \"ES\")\u003c/td\u003e\u003ctd\u003eMyResources_es_ES.class, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e \u003cp\u003eThe file MyResources_fr_CH.properties is never used because it is hidden by the MyResources_fr_CH.class. Likewise, MyResources.properties is also hidden by MyResources.class.\n * @param baseName the base name of the resource bundle, a fully qualified class name\n * @param locale the locale for which a resource bundle is desired\n * @param loader the class loader from which to load the resource bundle\n * @return a resource bundle for the given base name and locale\n * @exception java.lang.NullPointerException if \u003ccode\u003ebaseName\u003c/code\u003e, \u003ccode\u003elocale\u003c/code\u003e, or \u003ccode\u003eloader\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @exception MissingResourceException if no resource bundle for the specified base name can be found\n * @since 1.2\n */\n","tf":{"freq":{"assign":1,"behav":1,"languag":10,"desir":1,"specifi":7,"time":1,"becom":1,"given":1,"correct":1,"fail":1,"search":1,"sequenc":3,"blockquot":2,"file":10,"verifi":1,"along":1,"adefault":1,"multipl":1,"charact":1,"loader":8,"extra":1,"runtim":1,"parent":13,"describ":2,"like":1,"provid":1,"non":2,"instanc":4,"content":3,"fallback":2,"obtain":1,"earlier":1,"will":3,"pointer":1,"generatednam":1,"load":3,"might":1,"behavior":3,"link":9,"typic":1,"data":1,"use":13,"truncat":1,"variant":8,"version":1,"attribut":1,"current":2,"noth":1,"thisinst":1,"end":1,"note":4,"complet":2,"look":3,"just":1,"whenev":1,"fifth":1,"previous":1,"perhap":1,"come":1,"fulli":3,"access":2,"empti":5,"remaind":1,"compon":2,"chain":4,"tabl":2,"omit":4,"string":9,"defaultlocal":1,"exampl":5,"base":19,"alon":1,"alreadi":2,"method":3,"part":1,"insert":1,"iter":1,"detail":1,"methodwith":1,"second":2,"last":1,"instanti":8,"possibl":1,"syntact":1,"slight":1,"howev":1,"examin":1,"sens":1,"follow":5,"argument":2,"append":2,"control":7,"thrown":1,"except":5,"succeed":1,"creat":3,"environ":1,"descript":1,"candid":22,"format":2,"script":8,"continu":2,"likewis":1,"strong":2,"contain":3,"subclass":1,"match":1,"properti":19,"countri":8,"bundl":58,"util":2,"latn":5,"compat":2,"otherwis":3,"attempt":6,"valid":1,"call":4,"result":7,"one":2,"lang":3,"sun":1,"resourc":70,"order":1,"name":55,"path":2,"valu":1,"plain":1,"find":3,"locat":1,"includ":1,"origin":1,"still":2,"list":7,"produc":1,"cach":2,"underscor":3,"pass":2,"two":1,"never":1,"hidden":2,"pre":8,"generat":10,"replac":1,"instead":1,"modifi":1,"actual":1,"exhaust":2,"java":6,"local":32,"also":2,"first":4,"success":1,"qualifi":3,"miss":2,"found":5},"maxFreq":70,"totalTerms":665},"loc":6}