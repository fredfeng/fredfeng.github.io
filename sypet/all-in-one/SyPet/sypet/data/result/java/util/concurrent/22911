{"id":22911,"className":"java.util.concurrent.ForkJoinPool","methodName":"getStealCount","signature":"\u003cjava.util.concurrent.ForkJoinPool: long getStealCount()\u003e","javadoc":"/** \n * Returns an estimate of the total number of tasks stolen from one thread\u0027s work queue by another. The reported value underestimates the actual total number of steals when the pool is not quiescent. This value may be useful for monitoring and tuning fork/join programs: in general, steal counts should be high enough to keep threads busy, but low enough to avoid overhead and contention across threads.\n * @return the number of steals\n */\n","tf":{"freq":{"total":2,"queue":1,"underestim":1,"count":2,"one":1,"use":1,"anoth":1,"enough":2,"across":1,"avoid":1,"estim":1,"overhead":1,"pool":1,"thread":3,"busi":1,"report":1,"valu":2,"quiescent":1,"stolen":1,"work":1,"steal":4,"may":1,"fork":1,"monitor":1,"task":1,"number":3,"join":1,"tune":1,"general":1,"content":1,"program":1,"actual":1,"high":1,"low":1,"keep":1},"maxFreq":4,"totalTerms":46},"loc":3}