{"id":21806,"className":"java.util.Scanner","methodName":"nextFloat","signature":"\u003cjava.util.Scanner: float nextFloat()\u003e","javadoc":"/** \n * Scans the next token of the input as a \u003ctt\u003efloat\u003c/tt\u003e. This method will throw \u003ccode\u003eInputMismatchException\u003c/code\u003e if the next token cannot be translated into a valid float value as described below. If the translation is successful, the scanner advances past the input that matched. \u003cp\u003e If the next token matches the \u003ca href\u003d\"#Float-regex\"\u003e\u003ci\u003eFloat\u003c/i\u003e\u003c/a\u003e regular expression defined above then the token is converted into a \u003ctt\u003efloat\u003c/tt\u003e value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via  {@link Character#digit Character.digit}, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to {@link Float#parseFloat Float.parseFloat}. If the token matches the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\" is passed to  {@link Float#parseFloat(String) Float.parseFloat} asappropriate.\n * @return the \u003ctt\u003efloat\u003c/tt\u003e scanned from the input\n * @throws InputMismatchException if the next token does not match the \u003ci\u003eFloat\u003c/i\u003e regular expression, or is out of range\n * @throws NoSuchElementException if input is exhausted\n * @throws IllegalStateException if this scanner is closed\n */\n","tf":{"freq":{"via":1,"infin":2,"close":1,"rang":1,"href":1,"scanner":2,"element":1,"except":4,"charact":2,"regex":1,"remov":1,"describ":1,"non":1,"digit":4,"sign":1,"present":1,"input":6,"advanc":1,"separ":1,"prefix":2,"will":1,"negat":2,"match":4,"defin":1,"valid":1,"result":1,"nan":1,"next":5,"link":3,"state":1,"convert":1,"express":2,"token":6,"map":1,"valu":2,"asappropri":1,"regular":2,"prepend":1,"past":1,"translat":2,"illeg":1,"suffix":2,"pass":2,"specif":3,"either":1,"string":3,"exhaust":1,"scan":2,"method":1,"local":4,"mismatch":2,"group":1,"success":1,"pars":4},"maxFreq":6,"totalTerms":102},"loc":16}