{"id":20752,"className":"java.util.Vector","methodName":"insertElementAt","signature":"\u003cjava.util.Vector: void insertElementAt(E,int)\u003e","javadoc":"/** \n * Inserts the specified object as a component in this vector at the specified  {@code index}. Each component in this vector with an index greater or equal to the specified  {@code index} isshifted upward to have an index one greater than the value it had previously. \u003cp\u003eThe index must be a value greater than or equal to  {@code 0}and less than or equal to the current size of the vector. (If the index is equal to the current size of the vector, the new element is appended to the Vector.) \u003cp\u003eThis method is identical in functionality to the {@link #add(int,Object) add(int, E)}method (which is part of the  {@link List} interface).  Note that the{@code add} method reverses the order of the parameters, to more closelymatch array usage.\n * @param obj     the component to insert\n * @param index   where to insert the new component\n * @throws ArrayIndexOutOfBoundsException if the index is out of range( {@code index \u003c 0 || index \u003e size()})\n */\n","tf":{"freq":{"greater":3,"one":1,"link":2,"closelymatch":1,"object":2,"add":3,"must":1,"specifi":3,"function":1,"revers":1,"order":1,"ident":1,"rang":1,"vector":5,"current":2,"valu":2,"note":1,"less":1,"element":2,"append":1,"except":1,"index":11,"previous":1,"paramet":1,"list":1,"upward":1,"equal":4,"size":3,"isshift":1,"compon":4,"obj":1,"method":3,"usag":1,"part":1,"insert":4,"bound":1,"array":2},"maxFreq":11,"totalTerms":76},"loc":11}