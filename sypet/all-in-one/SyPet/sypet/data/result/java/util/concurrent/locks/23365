{"id":23365,"className":"java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock","methodName":"lockInterruptibly","signature":"\u003cjava.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lockInterruptibly()\u003e","javadoc":"/** \n * Acquires the read lock unless the current thread is {@linkplain Thread#interrupt interrupted}. \u003cp\u003eAcquires the read lock if the write lock is not held by another thread and returns immediately. \u003cp\u003eIf the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: \u003cul\u003e \u003cli\u003eThe read lock is acquired by the current thread; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}the current thread. \u003c/ul\u003e \u003cp\u003eIf the current thread: \u003cul\u003e \u003cli\u003ehas its interrupted status set on entry to this method; or \u003cli\u003eis  {@linkplain Thread#interrupt interrupted} whileacquiring the read lock, \u003c/ul\u003e then  {@link InterruptedException} is thrown and the currentthread\u0027s interrupted status is cleared. \u003cp\u003eIn this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.\n * @throws InterruptedException if the current thread is interrupted\n */\n","tf":{"freq":{"acquir":3,"linkplain":3,"normal":1,"link":1,"one":1,"acquisit":1,"schedul":1,"anoth":2,"reentrant":1,"currentthread":1,"clear":1,"becom":1,"given":1,"unless":1,"respond":1,"thread":13,"write":2,"current":6,"read":4,"purpos":1,"immedi":1,"happen":1,"held":2,"thrown":1,"except":2,"status":2,"entri":1,"lock":8,"whileacquir":1,"interrupt":14,"point":1,"two":1,"disabl":1,"explicit":1,"method":2,"prefer":1,"lie":1,"dormant":1,"thing":1},"maxFreq":14,"totalTerms":89},"loc":3}