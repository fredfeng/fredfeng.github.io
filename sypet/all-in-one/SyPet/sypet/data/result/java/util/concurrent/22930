{"id":22930,"className":"java.util.concurrent.ForkJoinTask","methodName":"invokeAll","signature":"\u003cjava.util.concurrent.ForkJoinTask: void invokeAll(java.util.concurrent.ForkJoinTask\u003c?\u003e[])\u003e","javadoc":"/** \n * Forks the given tasks, returning when  {@code isDone} holds foreach task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using  {@link #getException()} andrelated methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed. \u003cp\u003eThis method may be invoked only from within  {@code ForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts result in exceptions or errors, possibly including  {@code ClassCastException}.\n * @param tasks the tasks\n * @throws NullPointerException if any task is null\n */\n","tf":{"freq":{"attempt":1,"foreach":1,"result":1,"normal":1,"one":2,"link":2,"possibl":1,"uncheck":1,"use":2,"cancel":2,"given":1,"pool":2,"left":1,"howev":1,"complet":1,"individu":1,"except":11,"fork":3,"may":4,"includ":1,"error":1,"check":1,"status":2,"task":9,"invok":3,"guarante":1,"hold":1,"done":1,"rethrown":1,"join":2,"andrel":1,"obtain":1,"cast":1,"encount":3,"determin":1,"context":1,"pointer":1,"comput":1,"method":4,"within":1,"unprocess":1,"execut":1,"upon":1},"maxFreq":11,"totalTerms":80},"loc":26}