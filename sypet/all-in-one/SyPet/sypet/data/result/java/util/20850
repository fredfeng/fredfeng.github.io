{"id":20850,"className":"java.util.Comparator","methodName":"compare","signature":"\u003cjava.util.Comparator: int compare(T,T)\u003e","javadoc":"/** \n * Compares its two arguments for order.  Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.\u003cp\u003e In the foregoing description, the notation \u003ctt\u003esgn(\u003c/tt\u003e\u003ci\u003eexpression\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e designates the mathematical \u003ci\u003esignum\u003c/i\u003e function, which is defined to return one of \u003ctt\u003e-1\u003c/tt\u003e, \u003ctt\u003e0\u003c/tt\u003e, or \u003ctt\u003e1\u003c/tt\u003e according to whether the value of \u003ci\u003eexpression\u003c/i\u003e is negative, zero or positive.\u003cp\u003e The implementor must ensure that \u003ctt\u003esgn(compare(x, y)) \u003d\u003d -sgn(compare(y, x))\u003c/tt\u003e for all \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e.  (This implies that \u003ctt\u003ecompare(x, y)\u003c/tt\u003e must throw an exception if and only if \u003ctt\u003ecompare(y, x)\u003c/tt\u003e throws an exception.)\u003cp\u003e The implementor must also ensure that the relation is transitive: \u003ctt\u003e((compare(x, y)\u0026gt;0) \u0026amp;\u0026amp; (compare(y, z)\u0026gt;0))\u003c/tt\u003e implies \u003ctt\u003ecompare(x, z)\u0026gt;0\u003c/tt\u003e.\u003cp\u003e Finally, the implementor must ensure that \u003ctt\u003ecompare(x, y)\u003d\u003d0\u003c/tt\u003e implies that \u003ctt\u003esgn(compare(x, z))\u003d\u003dsgn(compare(y, z))\u003c/tt\u003e for all \u003ctt\u003ez\u003c/tt\u003e.\u003cp\u003e It is generally the case, but \u003ci\u003enot\u003c/i\u003e strictly required that \u003ctt\u003e(compare(x, y)\u003d\u003d0) \u003d\u003d (x.equals(y))\u003c/tt\u003e.  Generally speaking, any comparator that violates this condition should clearly indicate this fact.  The recommended language is \"Note: this comparator imposes orderings that are inconsistent with equals.\"\n * @param o1 the first object to be compared.\n * @param o2 the second object to be compared.\n * @return a negative integer, zero, or a positive integer as thefirst argument is less than, equal to, or greater than the second.\n * @throws NullPointerException if an argument is null and thiscomparator does not permit null arguments\n * @throws ClassCastException if the arguments\u0027 types prevent them frombeing compared by this comparator.\n */\n","tf":{"freq":{"fromb":1,"greater":2,"second":3,"permit":1,"languag":1,"type":1,"zero":3,"violat":1,"transit":1,"whether":1,"must":4,"function":1,"requir":1,"thiscompar":1,"impli":3,"relat":1,"implementor":3,"argument":6,"except":4,"descript":1,"prevent":1,"sgn":5,"signum":1,"cast":1,"pointer":1,"negat":3,"strict":1,"compar":19,"posit":3,"amp":2,"inconsist":1,"defin":1,"one":1,"object":2,"express":2,"recommend":1,"ensur":3,"clear":1,"order":2,"indic":1,"valu":1,"less":2,"note":1,"condit":1,"thefirst":1,"mathemat":1,"speak":1,"equal":4,"accord":1,"general":2,"impos":1,"two":1,"notat":1,"fact":1,"forego":1,"integ":4,"first":2,"also":1,"design":1},"maxFreq":19,"totalTerms":120},"loc":0}