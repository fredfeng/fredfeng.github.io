{"id":23305,"className":"java.util.concurrent.Phaser","methodName":"awaitAdvanceInterruptibly","signature":"\u003cjava.util.concurrent.Phaser: int awaitAdvanceInterruptibly(int)\u003e","javadoc":"/** \n * Awaits the phase of this phaser to advance from the given phase value, throwing  {@code InterruptedException} if interruptedwhile waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.\n * @param phase an arrival phase number, or negative value ifterminated; this argument is normally the value returned by a previous call to  {@code arrive} or {@code arriveAndDeregister}.\n * @return the next arrival phase number, or the argument if it isnegative, or the (negative)  {@linkplain #getPhase() current phase}if terminated\n * @throws InterruptedException if thread interrupted while waiting\n */\n","tf":{"freq":{"linkplain":1,"call":1,"normal":1,"next":1,"wait":2,"isneg":1,"interruptedwhil":1,"given":2,"deregist":1,"thread":1,"current":2,"immedi":1,"valu":4,"argument":2,"except":2,"previous":1,"equal":1,"number":2,"interrupt":4,"iftermin":1,"termin":2,"await":2,"advanc":2,"phaser":2,"negat":2,"arriv":4,"phase":9},"maxFreq":9,"totalTerms":55},"loc":14}