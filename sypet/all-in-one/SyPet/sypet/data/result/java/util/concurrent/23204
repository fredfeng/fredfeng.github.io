{"id":23204,"className":"java.util.concurrent.BlockingDeque","methodName":"removeLastOccurrence","signature":"\u003cjava.util.concurrent.BlockingDeque: boolean removeLastOccurrence(java.lang.Object)\u003e","javadoc":"/** \n * Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element \u003ctt\u003ee\u003c/tt\u003e such that \u003ctt\u003eo.equals(e)\u003c/tt\u003e (if such an element exists). Returns \u003ctt\u003etrue\u003c/tt\u003e if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).\n * @param o element to be removed from this deque, if present\n * @return \u003ctt\u003etrue\u003c/tt\u003e if an element was removed as a result of this call\n * @throws ClassCastException if the class of the specified elementis incompatible with this deque (\u003ca href\u003d\"../Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n * @throws NullPointerException if the specified element is null(\u003ca href\u003d\"../Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n */\n","tf":{"freq":{"result":2,"call":2,"last":3,"elementi":1,"specifi":4,"occurr":2,"equival":1,"exist":1,"href":2,"option":4,"element":8,"except":2,"unchang":1,"remov":5,"true":2,"equal":1,"incompat":1,"restrict":2,"present":1,"formal":1,"cast":1,"contain":2,"pointer":1,"dequ":6,"html":2,"chang":1,"collect":2},"maxFreq":8,"totalTerms":61},"loc":0}