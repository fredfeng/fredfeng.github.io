{"id":20375,"className":"java.util.ResourceBundle$Control","methodName":"getTimeToLive","signature":"\u003cjava.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)\u003e","javadoc":"/** \n * Returns the time-to-live (TTL) value for resource bundles that are loaded under this \u003ccode\u003eResourceBundle.Control\u003c/code\u003e. Positive time-to-live values specify the number of milliseconds a bundle can remain in the cache without being validated against the source data from which it was constructed. The value 0 indicates that a bundle must be validated each time it is retrieved from the cache.  {@link #TTL_DONT_CACHE} specifies that loaded resource bundles are notput in the cache.  {@link #TTL_NO_EXPIRATION_CONTROL} specifiesthat loaded resource bundles are put in the cache with no expiration control. \u003cp\u003eThe expiration affects only the bundle loading process by the \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e factory method.  That is, if the factory method finds a resource bundle in the cache that has expired, the factory method calls the  {@link #needsReload(String,Locale,String,ClassLoader,ResourceBundle,long) needsReload} method to determine whether the resourcebundle needs to be reloaded. If \u003ccode\u003eneedsReload\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e, the cached resource bundle instance is removed from the cache. Otherwise, the instance stays in the cache, updated with the new TTL value returned by this method. \u003cp\u003eAll cached resource bundles are subject to removal from the cache due to memory constraints of the runtime environment. Returning a large positive value doesn\u0027t mean to lock loaded resource bundles in the cache. \u003cp\u003eThe default implementation returns  {@link #TTL_NO_EXPIRATION_CONTROL}.\n * @param baseName the base name of the resource bundle for which the expiration value is specified.\n * @param locale the locale of the resource bundle for which the expiration value is specified.\n * @return the time (0 or a positive millisecond offset from thecached time) to get loaded bundles expired in the cache, {@link #TTL_NO_EXPIRATION_CONTROL} to disable theexpiration control, or  {@link #TTL_DONT_CACHE} to disablecaching.\n * @exception NullPointerException if \u003ccode\u003ebaseName\u003c/code\u003e or \u003ccode\u003elocale\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"disablecach":1,"specifiesthat":1,"need":4,"memori":1,"must":1,"whether":1,"specifi":4,"expir":6,"theexpir":1,"time":6,"live":3,"control":3,"except":2,"loader":1,"thecach":1,"runtim":1,"environ":1,"remov":2,"number":1,"without":1,"instanc":2,"disabl":1,"updat":1,"determin":1,"pointer":1,"due":1,"sourc":1,"load":6,"posit":3,"reload":4,"bundl":17,"otherwis":1,"valid":2,"call":1,"put":1,"subject":1,"link":6,"data":1,"constraint":1,"notput":1,"affect":1,"resourcebundl":1,"resourc":12,"indic":1,"millisecond":2,"factori":3,"name":3,"mean":1,"valu":7,"offset":1,"find":1,"stay":1,"lock":1,"true":1,"cach":12,"process":1,"remain":1,"larg":1,"retriev":1,"string":2,"base":3,"method":5,"construct":1,"local":4},"maxFreq":17,"totalTerms":162},"loc":6}