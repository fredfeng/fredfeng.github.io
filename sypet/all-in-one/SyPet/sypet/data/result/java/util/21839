{"id":21839,"className":"java.util.Collections","methodName":"min","signature":"\u003cjava.util.Collections: T min(java.util.Collection,java.util.Comparator)\u003e","javadoc":"/** \n * Returns the minimum element of the given collection, according to the order induced by the specified comparator.  All elements in the collection must be \u003ci\u003emutually comparable\u003c/i\u003e by the specified comparator (that is, \u003ctt\u003ecomp.compare(e1, e2)\u003c/tt\u003e must not throw a \u003ctt\u003eClassCastException\u003c/tt\u003e for any elements \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e in the collection).\u003cp\u003e This method iterates over the entire collection, hence it requires time proportional to the size of the collection.\n * @param coll the collection whose minimum element is to be determined.\n * @param comp the comparator with which to determine the minimum element.A \u003ctt\u003enull\u003c/tt\u003e value indicates that the elements\u0027 \u003ci\u003enatural ordering\u003c/i\u003e should be used.\n * @return the minimum element of the given collection, accordingto the specified comparator.\n * @throws ClassCastException if the collection contains elements that arenot \u003ci\u003emutually comparable\u003c/i\u003e using the specified comparator.\n * @throws NoSuchElementException if the collection is empty.\n * @see Comparable\n */\n","tf":{"freq":{"minimum":4,"proport":1,"use":2,"natur":1,"must":2,"specifi":4,"time":1,"requir":1,"indic":1,"order":2,"given":2,"valu":1,"coll":1,"min":1,"element":9,"comp":2,"except":3,"henc":1,"whose":1,"accordingto":1,"accord":1,"empti":1,"size":1,"mutual":2,"cast":2,"contain":1,"determin":2,"method":1,"arenot":1,"iter":1,"compar":9,"entir":1,"induc":1,"collect":9},"maxFreq":9,"totalTerms":74},"loc":14}