{"id":20442,"className":"java.util.GregorianCalendar","methodName":"getActualMinimum","signature":"\u003cjava.util.GregorianCalendar: int getActualMinimum(int)\u003e","javadoc":"/** \n * Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}, {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}, {@link #getGregorianChange() getGregorianChange} and{@link Calendar#getTimeZone() getTimeZone} methods.\u003cp\u003eFor example, if the Gregorian change date is January 10, 1970 and the date of this \u003ccode\u003eGregorianCalendar\u003c/code\u003e is January 20, 1970, the actual minimum value of the \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e field is 10 because the previous date of January 10, 1970 is December 27, 1996 (in the Julian calendar). Therefore, December 28, 1969 to January 9, 1970 don\u0027t exist.\n * @param field the calendar field\n * @return the minimum of the given field for the time value ofthis \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n * @see #getMinimum(int)\n * @see #getMaximum(int)\n * @see #getGreatestMinimum(int)\n * @see #getLeastMaximum(int)\n * @see #getActualMaximum(int)\n * @since 1.2\n */\n","tf":{"freq":{"minimum":6,"least":1,"link":4,"therefor":1,"date":3,"minim":2,"time":4,"given":2,"consider":1,"current":1,"julian":1,"valu":5,"exist":1,"decemb":2,"calendar":8,"previous":1,"januari":4,"greatest":1,"ofthi":1,"field":5,"maximum":3,"take":1,"exampl":1,"actual":3,"method":1,"day":4,"chang":3,"gregorian":5,"first":4,"zone":2,"week":4},"maxFreq":8,"totalTerms":85},"loc":12}