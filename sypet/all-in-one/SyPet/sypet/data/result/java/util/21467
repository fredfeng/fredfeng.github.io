{"id":21467,"className":"java.util.Properties","methodName":"storeToXML","signature":"\u003cjava.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)\u003e","javadoc":"/** \n * Emits an XML document representing all of the properties contained in this table. \u003cp\u003e An invocation of this method of the form \u003ctt\u003eprops.storeToXML(os, comment)\u003c/tt\u003e behaves in exactly the same way as the invocation \u003ctt\u003eprops.storeToXML(os, comment, \"UTF-8\");\u003c/tt\u003e.\n * @param os the output stream on which to emit the XML document.\n * @param comment a description of the property list, or \u003ccode\u003enull\u003c/code\u003eif no comment is desired.\n * @throws IOException if writing to the specified output streamresults in an \u003ctt\u003eIOException\u003c/tt\u003e.\n * @throws NullPointerException if \u003ccode\u003eos\u003c/code\u003e is null.\n * @throws ClassCastException  if this \u003ccode\u003eProperties\u003c/code\u003e objectcontains any keys or values that are not \u003ccode\u003eStrings\u003c/code\u003e.\n * @see #loadFromXML(InputStream)\n * @since 1.5\n */\n","tf":{"freq":{"stream":2,"store":3,"behav":1,"way":1,"desir":1,"objectcontain":1,"specifi":1,"document":2,"exact":1,"write":1,"valu":1,"key":1,"emit":2,"except":4,"form":1,"repres":1,"streamresult":1,"prop":2,"descript":1,"list":1,"invoc":2,"input":1,"cast":1,"tabl":1,"string":1,"contain":1,"pointer":1,"load":1,"method":1,"properti":3,"comment":4,"output":2},"maxFreq":4,"totalTerms":48},"loc":5}