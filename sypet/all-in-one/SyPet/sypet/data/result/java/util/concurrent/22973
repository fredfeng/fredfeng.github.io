{"id":22973,"className":"java.util.concurrent.ConcurrentNavigableMap","methodName":"keySet","signature":"\u003cjava.util.concurrent.ConcurrentNavigableMap: java.util.NavigableSet\u003cK\u003e keySet()\u003e","javadoc":"/** \n * Returns a  {@link NavigableSet} view of the keys contained in this map.The set\u0027s iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  The set supports element removal, which removes the corresponding mapping from the map, via the  {@code Iterator.remove},  {@code Set.remove}, {@code removeAll},  {@code retainAll}, and  {@code clear}operations.  It does not support the  {@code add} or {@code addAll}operations. \u003cp\u003eThe view\u0027s  {@code iterator} is a \"weakly consistent\" iteratorthat will never throw  {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction. \u003cp\u003eThis method is equivalent to method  {@code navigableKeySet}.\n * @return a navigable set view of the keys in this map\n */\n","tf":{"freq":{"via":1,"iteratorthat":1,"vice":1,"concurr":1,"correspond":1,"link":2,"navig":3,"add":2,"clear":1,"order":1,"equival":1,"oper":2,"map":6,"subsequ":1,"exist":1,"key":5,"travers":1,"versa":1,"element":2,"may":1,"except":1,"support":2,"consist":1,"guarante":2,"remov":5,"back":1,"never":1,"contain":1,"will":1,"retain":1,"method":2,"weak":1,"construct":2,"chang":1,"view":3,"ascend":1,"iter":4,"modif":2,"reflect":2,"upon":1},"maxFreq":6,"totalTerms":70},"loc":0}