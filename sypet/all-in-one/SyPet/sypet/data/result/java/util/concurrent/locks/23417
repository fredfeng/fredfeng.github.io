{"id":23417,"className":"java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject","methodName":"awaitUninterruptibly","signature":"\u003cjava.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void awaitUninterruptibly()\u003e","javadoc":"/** \n * Implements uninterruptible condition wait. \u003col\u003e \u003cli\u003e Save lock state returned by  {@link #getState}. \u003cli\u003e Invoke  {@link #release} withsaved state as argument, throwing IllegalMonitorStateException if it fails. \u003cli\u003e Block until signalled. \u003cli\u003e Reacquire by invoking specialized version of {@link #acquire} with saved state as argument.\u003c/ol\u003e\n */\n","tf":{"freq":{"acquir":1,"condit":1,"argument":2,"except":1,"monitor":1,"save":2,"invok":2,"withsav":1,"link":3,"lock":1,"state":5,"block":1,"signal":1,"wait":1,"reacquir":1,"illeg":1,"version":1,"fail":1,"await":1,"releas":1,"special":1,"uninterrupt":2},"maxFreq":5,"totalTerms":32},"loc":12}