{"id":20221,"className":"java.util.Arrays","methodName":"sort","signature":"\u003cjava.util.Arrays: void sort(T[],java.util.Comparator)\u003e","javadoc":"/** \n * Sorts the specified array of objects according to the order induced by the specified comparator.  All elements in the array must be \u003ci\u003emutually comparable\u003c/i\u003e by the specified comparator (that is, {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}for any elements  {@code e1} and {@code e2} in the array).\u003cp\u003eThis sort is guaranteed to be \u003ci\u003estable\u003c/i\u003e:  equal elements will not be reordered as a result of the sort. \u003cp\u003eImplementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered.  If the input array is nearly sorted, the implementation requires approximately n comparisons.  Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. \u003cp\u003eThe implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array.  It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. \u003cp\u003eThe implementation was adapted from Tim Peters\u0027s list sort for Python (\u003ca href\u003d\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\"\u003e TimSort\u003c/a\u003e).  It uses techiques from Peter McIlroy\u0027s \"Optimistic Sorting and Information Theoretic Complexity\", in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993.\n * @param a the array to be sorted\n * @param c the comparator to determine the order of the array.  A{@code null} value indicates that the elements\u0027{@linkplain Comparable natural ordering} should be used.\n * @throws ClassCastException if the array contains elements that arenot \u003ci\u003emutually comparable\u003c/i\u003e using the specified comparator\n * @throws IllegalArgumentException (optional) if the comparator isfound to violate the  {@link Comparator} contract\n */\n","tf":{"freq":{"natur":1,"perform":1,"approxim":1,"violat":1,"symposium":1,"tim":2,"must":2,"specifi":4,"python":3,"requir":3,"refer":1,"proceed":1,"href":1,"option":1,"argument":1,"element":5,"except":3,"contract":1,"januari":1,"listsort":1,"peter":2,"techiqu":1,"concaten":1,"advantag":2,"random":2,"far":1,"partial":1,"isfound":1,"comparison":2,"tradit":1,"mergesort":2,"inform":1,"project":1,"input":7,"trunk":1,"cast":2,"near":2,"http":1,"contain":1,"determin":1,"will":1,"fewer":1,"ascend":2,"merg":1,"compar":10,"small":1,"array":16,"vari":1,"linkplain":1,"discret":1,"result":2,"complex":1,"simpli":1,"sort":13,"link":1,"use":3,"adapt":2,"object":3,"well":1,"org":1,"txt":1,"algorithm":1,"stabl":2,"indic":1,"order":7,"ilroy":1,"temporari":1,"valu":1,"theoret":1,"note":1,"annual":1,"constant":1,"guarante":1,"list":1,"equal":2,"svn":1,"accord":1,"offer":1,"storag":1,"illeg":1,"reorder":1,"fourth":1,"two":1,"differ":1,"optimist":1,"mutual":2,"take":2,"suit":1,"descend":2,"arenot":1,"iter":1,"part":1,"induc":1},"maxFreq":16,"totalTerms":175},"loc":6}