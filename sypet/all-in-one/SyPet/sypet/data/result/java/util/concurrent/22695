{"id":22695,"className":"java.util.concurrent.ThreadPoolExecutor","methodName":"ThreadPoolExecutor","signature":"\u003cjava.util.concurrent.ThreadPoolExecutor: void ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)\u003e","javadoc":"/** \n * Creates a new  {@code ThreadPoolExecutor} with the given initialparameters and default rejected execution handler.\n * @param corePoolSize the number of threads to keep in the pool, evenif they are idle, unless  {@code allowCoreThreadTimeOut} is set\n * @param maximumPoolSize the maximum number of threads to allow in thepool\n * @param keepAliveTime when the number of threads is greater thanthe core, this is the maximum time that excess idle threads will wait for new tasks before terminating.\n * @param unit the time unit for the {@code keepAliveTime} argument\n * @param workQueue the queue to use for holding tasks before they areexecuted.  This queue will hold only the  {@code Runnable}tasks submitted by the  {@code execute} method.\n * @param threadFactory the factory to use when the executorcreates a new thread\n * @throws IllegalArgumentException if one of the following holds:\u003cbr\u003e{@code corePoolSize \u003c 0}\u003cbr\u003e {@code keepAliveTime \u003c 0}\u003cbr\u003e {@code maximumPoolSize \u003c\u003d 0}\u003cbr\u003e {@code maximumPoolSize \u003c corePoolSize}\n * @throws NullPointerException if {@code workQueue}or  {@code threadFactory} is null\n */\n","tf":{"freq":{"queue":4,"reject":1,"greater":1,"allow":2,"one":1,"excess":1,"use":2,"executorcr":1,"wait":1,"time":6,"given":1,"unless":1,"pool":9,"factori":3,"thread":10,"areexecut":1,"runnabl":1,"thanth":1,"follow":1,"work":2,"argument":2,"except":2,"submit":1,"creat":1,"task":3,"hold":3,"executor":2,"number":3,"thepool":1,"illeg":1,"size":6,"idl":2,"initialparamet":1,"unit":2,"termin":1,"aliv":3,"maximum":5,"will":2,"pointer":1,"method":1,"core":5,"execut":2,"evenif":1,"handler":1,"keep":4},"maxFreq":10,"totalTerms":106},"loc":4}