{"id":20219,"className":"java.util.Arrays","methodName":"sort","signature":"\u003cjava.util.Arrays: void sort(java.lang.Object[])\u003e","javadoc":"/** \n * Sorts the specified array of objects into ascending order, according to the  {@linkplain Comparable natural ordering} of its elements.All elements in the array must implement the  {@link Comparable}interface.  Furthermore, all elements in the array must be \u003ci\u003emutually comparable\u003c/i\u003e (that is,  {@code e1.compareTo(e2)} mustnot throw a  {@code ClassCastException} for any elements {@code e1}and  {@code e2} in the array).\u003cp\u003eThis sort is guaranteed to be \u003ci\u003estable\u003c/i\u003e:  equal elements will not be reordered as a result of the sort. \u003cp\u003eImplementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered.  If the input array is nearly sorted, the implementation requires approximately n comparisons.  Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. \u003cp\u003eThe implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array.  It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. \u003cp\u003eThe implementation was adapted from Tim Peters\u0027s list sort for Python (\u003ca href\u003d\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\"\u003e TimSort\u003c/a\u003e).  It uses techiques from Peter McIlroy\u0027s \"Optimistic Sorting and Information Theoretic Complexity\", in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993.\n * @param a the array to be sorted\n * @throws ClassCastException if the array contains elements that are not\u003ci\u003emutually comparable\u003c/i\u003e (for example, strings and integers)\n * @throws IllegalArgumentException (optional) if the naturalordering of the array elements is found to violate the {@link Comparable} contract\n */\n","tf":{"freq":{"natur":1,"perform":1,"approxim":1,"violat":1,"symposium":1,"tim":2,"must":2,"specifi":1,"python":3,"requir":3,"refer":1,"proceed":1,"href":1,"option":1,"argument":1,"element":7,"except":3,"contract":1,"januari":1,"listsort":1,"peter":2,"techiqu":1,"concaten":1,"advantag":2,"random":2,"far":1,"partial":1,"comparison":2,"tradit":1,"mergesort":2,"inform":1,"project":1,"input":7,"trunk":1,"cast":2,"near":2,"http":1,"contain":1,"will":1,"fewer":1,"ascend":3,"merg":1,"compar":6,"small":1,"array":17,"vari":1,"discret":1,"result":2,"linkplain":1,"complex":1,"simpli":1,"furthermor":1,"sort":13,"link":2,"use":1,"well":1,"object":3,"adapt":2,"org":1,"txt":1,"algorithm":1,"stabl":2,"order":6,"ilroy":1,"temporari":1,"theoret":1,"note":1,"naturalord":1,"annual":1,"constant":1,"guarante":1,"list":1,"equal":2,"svn":1,"accord":1,"offer":1,"storag":1,"illeg":1,"reorder":1,"fourth":1,"two":1,"differ":1,"optimist":1,"mutual":2,"take":2,"string":1,"exampl":1,"suit":1,"mustnot":1,"descend":2,"part":1,"iter":1,"integ":1,"found":1},"maxFreq":17,"totalTerms":171},"loc":6}