{"id":21785,"className":"java.util.Scanner","methodName":"skip","signature":"\u003cjava.util.Scanner: java.util.Scanner skip(java.util.regex.Pattern)\u003e","javadoc":"/** \n * Skips input that matches the specified pattern, ignoring delimiters. This method will skip input if an anchored match of the specified pattern succeeds. \u003cp\u003eIf a match to the specified pattern is not found at the current position, then no input is skipped and a \u003ctt\u003eNoSuchElementException\u003c/tt\u003e is thrown. \u003cp\u003eSince this method seeks to match the specified pattern starting at the scanner\u0027s current position, patterns that can match a lot of input (\".*\", for example) may cause the scanner to buffer a large amount of input. \u003cp\u003eNote that it is possible to skip something without risking a \u003ccode\u003eNoSuchElementException\u003c/code\u003e by using a pattern that can match nothing, e.g., \u003ccode\u003esc.skip(\"[ \\t]*\")\u003c/code\u003e.\n * @param pattern a string specifying the pattern to skip over\n * @return this scanner\n * @throws NoSuchElementException if the specified pattern is not found\n * @throws IllegalStateException if this scanner is closed\n */\n","tf":{"freq":{"state":1,"use":1,"possibl":1,"skip":7,"someth":1,"close":1,"anchor":1,"specifi":6,"risk":1,"amount":1,"buffer":1,"current":2,"noth":1,"note":1,"scanner":4,"delimit":1,"element":3,"ignor":1,"except":4,"thrown":1,"may":1,"succeed":1,"illeg":1,"without":1,"seek":1,"input":5,"caus":1,"pattern":9,"start":1,"larg":1,"string":1,"will":1,"exampl":1,"lot":1,"method":2,"match":6,"posit":2,"found":2},"maxFreq":9,"totalTerms":78},"loc":20}