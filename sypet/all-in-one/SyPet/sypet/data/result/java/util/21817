{"id":21817,"className":"java.util.StringTokenizer","methodName":"StringTokenizer","signature":"\u003cjava.util.StringTokenizer: void StringTokenizer(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Constructs a string tokenizer for the specified string. The characters in the \u003ccode\u003edelim\u003c/code\u003e argument are the delimiters for separating tokens. Delimiter characters themselves will not be treated as tokens. \u003cp\u003e Note that if \u003ctt\u003edelim\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, this constructor does not throw an exception. However, trying to invoke other methods on the resulting \u003ctt\u003eStringTokenizer\u003c/tt\u003e may result in a \u003ctt\u003eNullPointerException\u003c/tt\u003e.\n * @param str     a string to be parsed.\n * @param delim   the delimiters.\n * @exception NullPointerException if str is \u003cCODE\u003enull\u003c/CODE\u003e\n */\n","tf":{"freq":{"argument":1,"result":2,"delimit":3,"may":1,"except":4,"charact":2,"invok":1,"delim":3,"specifi":1,"str":2,"token":5,"separ":1,"string":5,"will":1,"pointer":2,"method":1,"construct":1,"howev":1,"pars":1,"note":1,"constructor":1,"treat":1},"maxFreq":5,"totalTerms":41},"loc":3}