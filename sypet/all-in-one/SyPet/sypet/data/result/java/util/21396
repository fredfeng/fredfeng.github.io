{"id":21396,"className":"java.util.ServiceLoader","methodName":"iterator","signature":"\u003cjava.util.ServiceLoader: java.util.Iterator\u003cS\u003e iterator()\u003e","javadoc":"/** \n * Lazily loads the available providers of this loader\u0027s service. \u003cp\u003e The iterator returned by this method first yields all of the elements of the provider cache, in instantiation order.  It then lazily loads and instantiates any remaining providers, adding each one to the cache in turn. \u003cp\u003e To achieve laziness the actual work of parsing the available provider-configuration files and instantiating providers must be done by the iterator itself.  Its  {@link java.util.Iterator#hasNext hasNext} and{@link java.util.Iterator#next next} methods can therefore throw a{@link ServiceConfigurationError} if a provider-configuration fileviolates the specified format, or if it names a provider class that cannot be found and instantiated, or if the result of instantiating the class is not assignable to the service type, or if any other kind of exception or error is thrown as the next provider is located and instantiated.  To write robust code it is only necessary to catch  {@link ServiceConfigurationError} when using a service iterator.\u003cp\u003e If such an error is thrown then subsequent invocations of the iterator will make a best effort to locate and instantiate the next available provider, but in general such recovery cannot be guaranteed. \u003cblockquote style\u003d\"font-size: smaller; line-height: 1.2\"\u003e\u003cspan style\u003d\"padding-right: 1em; font-weight: bold\"\u003eDesign Note\u003c/span\u003e Throwing an error in these cases may seem extreme.  The rationale for this behavior is that a malformed provider-configuration file, like a malformed class file, indicates a serious problem with the way the Java virtual machine is configured or is being used.  As such it is preferable to throw an error rather than try to recover or, even worse, fail silently.\u003c/blockquote\u003e \u003cp\u003e The iterator returned by this method does not support removal. Invoking its  {@link java.util.Iterator#remove() remove} method willcause an  {@link UnsupportedOperationException} to be thrown.\n * @return  An iterator that lazily loads providers for this loader\u0027sservice\n */\n","tf":{"freq":{"willcaus":1,"assign":1,"yield":1,"servic":5,"specifi":1,"recov":1,"fail":1,"oper":1,"file":3,"blockquot":2,"right":1,"serious":1,"element":1,"turn":1,"support":1,"loader":2,"invok":1,"done":1,"remov":3,"avail":3,"like":1,"provid":11,"invoc":1,"configur":6,"will":1,"load":3,"virtual":1,"silent":1,"behavior":1,"next":6,"link":6,"use":2,"line":1,"therefor":1,"kind":1,"indic":1,"write":1,"best":1,"rather":1,"note":1,"robust":1,"may":1,"lazi":1,"seem":1,"remain":1,"method":4,"iter":10,"pars":1,"design":1,"unsupport":1,"instanti":7,"type":1,"necessari":1,"must":1,"lazili":3,"bold":1,"height":1,"extrem":1,"work":1,"thrown":3,"except":2,"font":2,"wors":1,"effort":1,"format":1,"size":1,"malform":2,"machin":1,"even":1,"prefer":1,"make":1,"util":3,"span":2,"result":1,"sservic":1,"weight":1,"one":1,"way":1,"smaller":1,"order":1,"style":2,"name":1,"rational":1,"subsequ":1,"pad":1,"locat":2,"error":6,"guarante":1,"problem":1,"cach":2,"fileviol":1,"general":1,"achiev":1,"ad":1,"actual":1,"java":4,"first":1,"found":1,"recoveri":1},"maxFreq":11,"totalTerms":178},"loc":24}