{"id":21816,"className":"java.util.StringTokenizer","methodName":"StringTokenizer","signature":"\u003cjava.util.StringTokenizer: void StringTokenizer(java.lang.String,java.lang.String,boolean)\u003e","javadoc":"/** \n * Constructs a string tokenizer for the specified string. All characters in the \u003ccode\u003edelim\u003c/code\u003e argument are the delimiters for separating tokens. \u003cp\u003e If the \u003ccode\u003ereturnDelims\u003c/code\u003e flag is \u003ccode\u003etrue\u003c/code\u003e, then the delimiter characters are also returned as tokens. Each delimiter is returned as a string of length one. If the flag is \u003ccode\u003efalse\u003c/code\u003e, the delimiter characters are skipped and only serve as separators between tokens. \u003cp\u003e Note that if \u003ctt\u003edelim\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, this constructor does not throw an exception. However, trying to invoke other methods on the resulting \u003ctt\u003eStringTokenizer\u003c/tt\u003e may result in a \u003ctt\u003eNullPointerException\u003c/tt\u003e.\n * @param str            a string to be parsed.\n * @param delim          the delimiters.\n * @param returnDelims   flag indicating whether to return the delimitersas tokens.\n * @exception NullPointerException if str is \u003cCODE\u003enull\u003c/CODE\u003e\n */\n","tf":{"freq":{"fals":1,"result":2,"one":1,"skip":1,"whether":1,"specifi":1,"indic":1,"token":7,"length":1,"serv":1,"howev":1,"note":1,"constructor":1,"argument":1,"delimit":5,"may":1,"except":4,"charact":3,"invok":1,"true":1,"delim":5,"delimitersa":1,"flag":3,"str":2,"separ":2,"string":6,"pointer":2,"method":1,"construct":1,"pars":1,"also":1},"maxFreq":7,"totalTerms":61},"loc":10}