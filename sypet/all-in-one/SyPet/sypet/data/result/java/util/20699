{"id":20699,"className":"java.util.Set","methodName":"removeAll","signature":"\u003cjava.util.Set: boolean removeAll(java.util.Collection)\u003e","javadoc":"/** \n * Removes from this set all of its elements that are contained in the specified collection (optional operation).  If the specified collection is also a set, this operation effectively modifies this set so that its value is the \u003ci\u003easymmetric set difference\u003c/i\u003e of the two sets.\n * @param c collection containing elements to be removed from this set\n * @return \u003ctt\u003etrue\u003c/tt\u003e if this set changed as a result of the call\n * @throws UnsupportedOperationException if the \u003ctt\u003eremoveAll\u003c/tt\u003e operationis not supported by this set\n * @throws ClassCastException if the class of an element of this setis incompatible with the specified collection (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n * @throws NullPointerException if this set contains a null element and thespecified collection does not permit null elements (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e), or if the specified collection is null\n * @see #remove(Object)\n * @see #contains(Object)\n */\n","tf":{"freq":{"result":1,"call":1,"unsupport":1,"permit":1,"object":2,"seti":1,"specifi":4,"oper":3,"thespecifi":1,"valu":1,"href":2,"option":5,"element":5,"except":3,"support":1,"remov":5,"true":1,"incompat":1,"restrict":2,"differ":1,"two":1,"effect":1,"cast":1,"operationi":1,"contain":4,"modifi":1,"pointer":1,"html":2,"chang":1,"also":1,"asymmetr":1,"collect":8},"maxFreq":8,"totalTerms":65},"loc":0}