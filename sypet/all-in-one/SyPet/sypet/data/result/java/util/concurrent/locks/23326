{"id":23326,"className":"java.util.concurrent.locks.ReentrantLock","methodName":"getHoldCount","signature":"\u003cjava.util.concurrent.locks.ReentrantLock: int getHoldCount()\u003e","javadoc":"/** \n * Queries the number of holds on this lock by the current thread. \u003cp\u003eA thread has a hold on a lock for each lock action that is not matched by an unlock action. \u003cp\u003eThe hold count information is typically only used for testing and debugging purposes. For example, if a certain section of code should not be entered with the lock already held then we can assert that fact: \u003cpre\u003e class X { ReentrantLock lock \u003d new ReentrantLock(); // ... public void m() { assert lock.getHoldCount() \u003d\u003d 0; lock.lock(); try { // ... method body } finally { lock.unlock(); } } } \u003c/pre\u003e\n * @return the number of holds on this lock by the current thread,or zero if this lock is not held by the current thread\n */\n","tf":{"freq":{"count":3,"test":1,"typic":1,"use":1,"debug":1,"zero":1,"reentrant":2,"thread":4,"action":2,"current":3,"purpos":1,"held":2,"unlock":2,"hold":6,"lock":13,"number":2,"enter":1,"section":1,"inform":1,"queri":1,"bodi":1,"fact":1,"pre":2,"exampl":1,"method":1,"alreadi":1,"match":1,"certain":1},"maxFreq":13,"totalTerms":58},"loc":3}