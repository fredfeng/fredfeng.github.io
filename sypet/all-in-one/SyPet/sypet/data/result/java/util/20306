{"id":20306,"className":"java.util.Arrays","methodName":"deepEquals","signature":"\u003cjava.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])\u003e","javadoc":"/** \n * Returns \u003ctt\u003etrue\u003c/tt\u003e if the two specified arrays are \u003ci\u003edeeply equal\u003c/i\u003e to one another.  Unlike the  {@link #equals(Object[],Object[])}method, this method is appropriate for use with nested arrays of arbitrary depth. \u003cp\u003eTwo array references are considered deeply equal if both are \u003ctt\u003enull\u003c/tt\u003e, or if they refer to arrays that contain the same number of elements and all corresponding pairs of elements in the two arrays are deeply equal. \u003cp\u003eTwo possibly \u003ctt\u003enull\u003c/tt\u003e elements \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e are deeply equal if any of the following conditions hold: \u003cul\u003e \u003cli\u003e \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e are both arrays of object reference types, and \u003ctt\u003eArrays.deepEquals(e1, e2) would return true\u003c/tt\u003e \u003cli\u003e \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e are arrays of the same primitive type, and the appropriate overloading of \u003ctt\u003eArrays.equals(e1, e2)\u003c/tt\u003e would return true. \u003cli\u003e \u003ctt\u003ee1 \u003d\u003d e2\u003c/tt\u003e \u003cli\u003e \u003ctt\u003ee1.equals(e2)\u003c/tt\u003e would return true. \u003c/ul\u003e Note that this definition permits \u003ctt\u003enull\u003c/tt\u003e elements at any depth. \u003cp\u003eIf either of the specified arrays contain themselves as elements either directly or indirectly through one or more levels of arrays, the behavior of this method is undefined.\n * @param a1 one array to be tested for equality\n * @param a2 the other array to be tested for equality\n * @return \u003ctt\u003etrue\u003c/tt\u003e if the two arrays are equal\n * @see #equals(Object[],Object[])\n * @see Objects#deepEquals(Object,Object)\n * @since 1.5\n */\n","tf":{"freq":{"primit":1,"test":2,"pair":1,"behavior":1,"correspond":1,"permit":1,"link":1,"one":3,"possibl":1,"use":1,"object":8,"anoth":1,"type":2,"consid":1,"specifi":2,"indirect":1,"arbitrari":1,"level":1,"refer":3,"unlik":1,"deepli":4,"undefin":1,"deep":3,"note":1,"follow":1,"direct":1,"condit":1,"element":5,"hold":1,"nest":1,"true":5,"overload":1,"equal":14,"number":1,"depth":2,"two":5,"either":2,"appropri":2,"definit":1,"contain":2,"method":3,"array":14},"maxFreq":14,"totalTerms":105},"loc":26}