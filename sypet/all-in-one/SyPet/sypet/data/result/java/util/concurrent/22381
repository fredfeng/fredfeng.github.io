{"id":22381,"className":"java.util.concurrent.ArrayBlockingQueue","methodName":"remove","signature":"\u003cjava.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)\u003e","javadoc":"/** \n * Removes a single instance of the specified element from this queue, if it is present.  More formally, removes an element  {@code e} suchthat  {@code o.equals(e)}, if this queue contains one or more such elements. Returns  {@code true} if this queue contained the specified element(or equivalently, if this queue changed as a result of the call). \u003cp\u003eRemoval of interior elements in circular array based queues is an intrinsically slow and disruptive operation, so should be undertaken only in exceptional circumstances, ideally only when the queue is known not to be accessible by other threads.\n * @param o element to be removed from this queue, if present\n * @return {@code true} if this queue changed as a result of the call\n */\n","tf":{"freq":{"queue":8,"result":2,"call":2,"interior":1,"singl":1,"one":1,"undertaken":1,"intrins":1,"specifi":2,"circular":1,"oper":1,"equival":1,"thread":1,"slow":1,"suchthat":1,"element":6,"except":1,"ideal":1,"remov":5,"true":2,"circumst":1,"equal":1,"disrupt":1,"access":1,"instanc":1,"present":2,"formal":1,"contain":2,"base":1,"known":1,"chang":2,"array":1},"maxFreq":8,"totalTerms":55},"loc":17}