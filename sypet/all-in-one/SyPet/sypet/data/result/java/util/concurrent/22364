{"id":22364,"className":"java.util.concurrent.ExecutorService","methodName":"invokeAll","signature":"\u003cjava.util.concurrent.ExecutorService: java.util.List\u003cjava.util.concurrent.Future\u003cT\u003e\u003e invokeAll(java.util.Collection)\u003e","javadoc":"/** \n * Executes the given tasks, returning a list of Futures holding their status and results when all complete. {@link Future#isDone} is \u003ctt\u003etrue\u003c/tt\u003e for eachelement of the returned list. Note that a \u003cem\u003ecompleted\u003c/em\u003e task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.\n * @param tasks the collection of tasks\n * @return A list of Futures representing the tasks, in the samesequential order as produced by the iterator for the given task list, each of which has completed.\n * @throws InterruptedException if interrupted while waiting, inwhich case unfinished tasks are cancelled.\n * @throws NullPointerException if tasks or any of its elements are \u003ctt\u003enull\u003c/tt\u003e\n * @throws RejectedExecutionException if any task cannot bescheduled for execution\n */\n","tf":{"freq":{"progress":1,"result":2,"reject":1,"link":1,"normal":1,"beschedul":1,"cancel":1,"wait":1,"order":1,"given":3,"oper":1,"inwhich":1,"eachel":1,"undefin":1,"note":1,"samesequenti":1,"complet":3,"element":1,"except":4,"futur":3,"repres":1,"status":1,"task":9,"invok":1,"done":1,"hold":1,"true":1,"produc":1,"list":4,"unfinish":1,"interrupt":2,"termin":1,"either":1,"modifi":1,"pointer":1,"method":1,"iter":1,"execut":3,"collect":2},"maxFreq":9,"totalTerms":64},"loc":0}