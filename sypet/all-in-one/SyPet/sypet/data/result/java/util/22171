{"id":22171,"className":"java.util.Collections","methodName":"reverseOrder","signature":"\u003cjava.util.Collections: java.util.Comparator\u003cT\u003e reverseOrder()\u003e","javadoc":"/** \n * Returns a comparator that imposes the reverse of the \u003cem\u003enatural ordering\u003c/em\u003e on a collection of objects that implement the {@code Comparable} interface.  (The natural ordering is the orderingimposed by the objects\u0027 own  {@code compareTo} method.)  This enables asimple idiom for sorting (or maintaining) collections (or arrays) of objects that implement the  {@code Comparable} interface inreverse-natural-order.  For example, suppose  {@code a} is an array ofstrings. Then: \u003cpre\u003e Arrays.sort(a, Collections.reverseOrder()); \u003c/pre\u003e sorts the array in reverse-lexicographic (alphabetical) order.\u003cp\u003e The returned comparator is serializable.\n * @return A comparator that imposes the reverse of the \u003ci\u003enaturalordering\u003c/i\u003e on a collection of objects that implement the \u003ctt\u003eComparable\u003c/tt\u003e interface.\n * @see Comparable\n */\n","tf":{"freq":{"naturalord":1,"orderingimpos":1,"sort":3,"enabl":1,"serializ":1,"maintain":1,"idiom":1,"suppos":1,"natur":3,"lexicograph":1,"object":4,"ofstr":1,"impos":2,"revers":5,"order":6,"pre":2,"exampl":1,"asimpl":1,"alphabet":1,"method":1,"compar":8,"inrevers":1,"array":4,"collect":4},"maxFreq":8,"totalTerms":55},"loc":3}