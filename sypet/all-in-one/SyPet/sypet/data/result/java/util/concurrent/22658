{"id":22658,"className":"java.util.concurrent.TransferQueue","methodName":"tryTransfer","signature":"\u003cjava.util.concurrent.TransferQueue: boolean tryTransfer(E,long,java.util.concurrent.TimeUnit)\u003e","javadoc":"/** \n * Transfers the element to a consumer if it is possible to do so before the timeout elapses. \u003cp\u003eMore precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in {@link #take} or timed {@link #poll(long,TimeUnit) poll}), else waits until the element is received by a consumer, returning  {@code false} if the specified wait time elapsesbefore the element can be transferred.\n * @param e the element to transfer\n * @param timeout how long to wait before giving up, in units of{@code unit}\n * @param unit a {@code TimeUnit} determining how to interpret the{@code timeout} parameter\n * @return {@code true} if successful, or {@code false} ifthe specified waiting time elapses before completion, in which case the element is not left enqueued\n * @throws InterruptedException if interrupted while waiting,in which case the element is not left enqueued\n * @throws ClassCastException if the class of the specified elementprevents it from being added to this queue\n * @throws NullPointerException if the specified element is null\n * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this queue\n */\n","tf":{"freq":{"fals":2,"queue":2,"give":1,"link":2,"enqueu":2,"interpret":1,"possibl":1,"wait":6,"specifi":5,"consum":3,"elaps":2,"time":5,"poll":2,"precis":1,"left":2,"immedi":1,"elapsesbefor":1,"exist":1,"complet":1,"argument":1,"element":8,"except":4,"transfer":5,"ifth":1,"paramet":1,"true":1,"prevent":1,"receiv":2,"illeg":1,"interrupt":2,"els":1,"unit":5,"cast":1,"specifiedel":1,"take":1,"determin":1,"pointer":1,"ad":2,"elementprev":1,"alreadi":1,"properti":1,"success":1,"timeout":3},"maxFreq":8,"totalTerms":88},"loc":0}