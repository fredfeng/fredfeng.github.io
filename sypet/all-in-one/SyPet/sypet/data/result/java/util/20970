{"id":20970,"className":"java.util.TreeMap","methodName":"TreeMap","signature":"\u003cjava.util.TreeMap: void TreeMap()\u003e","javadoc":"/** \n * Constructs a new, empty tree map, using the natural ordering of its keys.  All keys inserted into the map must implement the  {@link Comparable} interface.  Furthermore, all such keys must be\u003cem\u003emutually comparable\u003c/em\u003e:  {@code k1.compareTo(k2)} must not throwa  {@code ClassCastException} for any keys {@code k1} and{@code k2} in the map.  If the user attempts to put a key into themap that violates this constraint (for example, the user attempts to put a string key into a map whose keys are integers), the {@code put(Object key, Object value)} call will throw a{@code ClassCastException}.\n */\n","tf":{"freq":{"attempt":2,"call":1,"furthermor":1,"themap":1,"put":3,"link":1,"natur":1,"use":1,"constraint":1,"object":2,"violat":1,"must":3,"order":1,"tree":2,"throwa":1,"map":5,"valu":1,"key":8,"except":2,"whose":1,"empti":1,"mutual":1,"cast":2,"string":1,"will":1,"exampl":1,"construct":1,"insert":1,"integ":1,"compar":3,"user":2},"maxFreq":8,"totalTerms":54},"loc":3}