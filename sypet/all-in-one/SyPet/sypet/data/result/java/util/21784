{"id":21784,"className":"java.util.Scanner","methodName":"findWithinHorizon","signature":"\u003cjava.util.Scanner: java.lang.String findWithinHorizon(java.util.regex.Pattern,int)\u003e","javadoc":"/** \n * Attempts to find the next occurrence of the specified pattern. \u003cp\u003eThis method searches through the input up to the specified search horizon, ignoring delimiters. If the pattern is found the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected then the null is returned and the scanner\u0027s position remains unchanged. This method may block waiting for input that matches the pattern. \u003cp\u003eA scanner will never search more than \u003ccode\u003ehorizon\u003c/code\u003e code points beyond its current position. Note that a match may be clipped by the horizon; that is, an arbitrary match result may have been different if the horizon had been larger. The scanner treats the horizon as a transparent, non-anchoring bound (see  {@link Matcher#useTransparentBounds} and {@link Matcher#useAnchoringBounds}). \u003cp\u003eIf horizon is \u003ccode\u003e0\u003c/code\u003e, then the horizon is ignored and this method continues to search through the input looking for the specified pattern without bound. In this case it may buffer all of the input searching for the pattern. \u003cp\u003eIf horizon is negative, then an IllegalArgumentException is thrown.\n * @param pattern the pattern to scan for\n * @return the text that matched the specified pattern\n * @throws IllegalStateException if this scanner is closed\n * @throws IllegalArgumentException if horizon is negative\n */\n","tf":{"freq":{"wait":1,"close":1,"occurr":1,"specifi":4,"beyond":1,"anchor":2,"buffer":1,"arbitrari":1,"matcher":2,"search":5,"scanner":5,"argument":2,"delimit":1,"text":1,"thrown":1,"except":3,"ignor":2,"unchang":1,"horizon":10,"without":1,"continu":1,"non":1,"input":5,"advanc":1,"will":1,"negat":2,"match":6,"posit":2,"treat":1,"attempt":1,"result":1,"next":1,"link":2,"state":1,"block":1,"use":2,"transpar":2,"current":1,"find":2,"note":1,"clip":1,"look":1,"detect":1,"may":4,"larger":1,"past":1,"illeg":3,"point":1,"differ":1,"never":1,"remain":1,"pattern":10,"string":1,"scan":1,"method":3,"within":1,"bound":4,"found":1},"maxFreq":10,"totalTerms":118},"loc":22}