{"id":23357,"className":"java.util.concurrent.locks.Lock","methodName":"unlock","signature":"\u003cjava.util.concurrent.locks.Lock: void unlock()\u003e","javadoc":"/** \n * Releases the lock. \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e \u003cp\u003eA  {@code Lock} implementation will usually imposerestrictions on which thread can release a lock (typically only the holder of the lock can release it) and may throw an (unchecked) exception if the restriction is violated. Any restrictions and the exception type must be documented by that  {@code Lock} implementation.\n */\n","tf":{"freq":{"usual":1,"except":2,"unlock":1,"holder":1,"may":1,"lock":5,"typic":1,"uncheck":1,"imposerestrict":1,"type":1,"violat":1,"must":1,"restrict":2,"document":1,"releas":3,"consider":1,"thread":1,"will":1},"maxFreq":5,"totalTerms":26},"loc":0}