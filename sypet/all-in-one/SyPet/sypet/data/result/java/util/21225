{"id":21225,"className":"java.util.Objects","methodName":"hash","signature":"\u003cjava.util.Objects: int hash(java.lang.Object[])\u003e","javadoc":"/** \n * Generates a hash code for a sequence of input values. The hash code is generated as if all the input values were placed into an array, and that array were hashed by calling  {@link Arrays#hashCode(Object[])}. \u003cp\u003eThis method is useful for implementing  {@link Object#hashCode()} on objects containing multiple fields. Forexample, if an object that has three fields,  {@code x},  {@code y}, and  {@code z}, one could write: \u003cblockquote\u003e\u003cpre\u003e \u0026#064;Override public int hashCode() { return Objects.hash(x, y, z); } \u003c/pre\u003e\u003c/blockquote\u003e \u003cb\u003eWarning: When a single object reference is supplied, the returned value does not equal the hash code of that object reference.\u003c/b\u003e This value can be computed by calling  {@link #hashCode(Object)}.\n * @param values the values to be hashed\n * @return a hash value of the sequence of input values\n * @see Arrays#hashCode(Object[])\n * @see List#hashCode\n */\n","tf":{"freq":{"warn":1,"call":2,"singl":1,"link":3,"one":1,"use":1,"object":9,"refer":2,"sequenc":2,"blockquot":2,"three":1,"write":1,"valu":8,"place":1,"forexampl":1,"multipl":1,"hash":14,"list":1,"equal":1,"suppli":1,"field":2,"input":3,"pre":2,"generat":2,"contain":1,"comput":1,"method":1,"array":4},"maxFreq":14,"totalTerms":70},"loc":3}