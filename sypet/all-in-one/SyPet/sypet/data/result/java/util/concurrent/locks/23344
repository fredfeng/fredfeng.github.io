{"id":23344,"className":"java.util.concurrent.locks.LockSupport","methodName":"park","signature":"\u003cjava.util.concurrent.locks.LockSupport: void park(java.lang.Object)\u003e","javadoc":"/** \n * Disables the current thread for thread scheduling purposes unless the permit is available. \u003cp\u003eIf the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: \u003cul\u003e \u003cli\u003eSome other thread invokes  {@link #unpark unpark} with thecurrent thread as the target; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}the current thread; or \u003cli\u003eThe call spuriously (that is, for no reason) returns. \u003c/ul\u003e \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread upon return.\n * @param blocker the synchronization object responsible for thisthread parking\n * @since 1.6\n */\n","tf":{"freq":{"caller":2,"otherwis":1,"linkplain":1,"call":2,"reason":1,"permit":2,"one":1,"link":1,"schedul":2,"object":1,"blocker":1,"consum":1,"becom":1,"unless":1,"unpark":2,"thread":11,"report":1,"current":3,"three":1,"purpos":2,"immedi":1,"place":1,"happen":1,"condit":1,"may":1,"spurious":1,"thisthread":1,"respons":1,"check":1,"park":3,"status":1,"invok":1,"avail":2,"interrupt":3,"caus":2,"disabl":2,"determin":1,"exampl":1,"target":1,"thecurr":1,"method":2,"also":1,"first":1,"lie":1,"upon":1,"dormant":1,"thing":1},"maxFreq":11,"totalTerms":73},"loc":6}