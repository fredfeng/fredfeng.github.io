{"id":22948,"className":"java.util.concurrent.ForkJoinTask","methodName":"tryUnfork","signature":"\u003cjava.util.concurrent.ForkJoinTask: boolean tryUnfork()\u003e","javadoc":"/** \n * Tries to unschedule this task for execution. This method will typically succeed if this task is the most recently forked task by the current thread, and has not commenced executing in another thread.  This method may be useful when arranging alternative local processing of tasks that could have been, but were not, stolen. \u003cp\u003eThis method may be invoked only from within  {@code ForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts result in exceptions or errors, possibly including  {@code ClassCastException}.\n * @return {@code true} if unforked\n */\n","tf":{"freq":{"attempt":1,"result":1,"link":1,"typic":1,"possibl":1,"use":2,"anoth":1,"recent":1,"altern":1,"pool":2,"thread":2,"current":1,"stolen":1,"except":2,"fork":3,"may":3,"includ":1,"succeed":1,"error":1,"task":4,"invok":2,"unschedul":1,"true":1,"join":2,"commenc":1,"arrang":1,"process":1,"cast":1,"determin":1,"context":1,"will":1,"comput":1,"method":4,"unfork":2,"local":1,"within":1,"execut":2},"maxFreq":4,"totalTerms":55},"loc":4}