{"id":20774,"className":"java.util.Vector","methodName":"subList","signature":"\u003cjava.util.Vector: java.util.List\u003cE\u003e subList(int,int)\u003e","javadoc":"/** \n * Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive.  (If fromIndex and toIndex are equal, the returned List is empty.)  The returned List is backed by this List, so changes in the returned List are reflected in this List, and vice-versa.  The returned List supports all of the optional List operations supported by this List. \u003cp\u003eThis method eliminates the need for explicit range operations (of the sort that commonly exist for arrays).  Any operation that expects a List can be used as a range operation by operating on a subList view instead of a whole List.  For example, the following idiom removes a range of elements from a List: \u003cpre\u003e list.subList(from, to).clear(); \u003c/pre\u003e Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class can be applied to a subList. \u003cp\u003eThe semantics of the List returned by this method become undefined if the backing list (i.e., this List) is \u003ci\u003estructurally modified\u003c/i\u003e in any way other than via the returned List.  (Structural modifications are those that change the size of the List, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)\n * @param fromIndex low endpoint (inclusive) of the subList\n * @param toIndex high endpoint (exclusive) of the subList\n * @return a view of the specified range within this List\n * @throws IndexOutOfBoundsException if an endpoint index value is out of range{@code (fromIndex \u003c 0 || toIndex \u003e size)}\n * @throws IllegalArgumentException if the endpoint indices are out of order{@code (fromIndex \u003e toIndex)}\n */\n","tf":{"freq":{"progress":1,"need":1,"via":1,"last":1,"yield":1,"idiom":2,"specifi":1,"expect":1,"becom":1,"oper":5,"rang":5,"incorrect":1,"undefin":1,"option":1,"follow":1,"argument":1,"versa":1,"element":1,"except":2,"index":14,"support":2,"remov":1,"endpoint":4,"size":2,"elimin":1,"appli":1,"explicit":1,"whole":1,"view":3,"low":1,"array":1,"collect":1,"otherwis":1,"result":1,"fashion":1,"sub":6,"sort":1,"common":1,"vice":1,"structur":2,"way":1,"use":1,"algorithm":1,"clear":1,"inclus":2,"order":1,"indic":1,"semant":1,"valu":1,"perturb":1,"exclus":2,"exist":1,"portion":1,"similar":1,"may":2,"back":2,"list":25,"equal":1,"illeg":1,"empti":1,"pre":2,"modifi":1,"instead":1,"exampl":1,"method":2,"within":1,"high":1,"chang":2,"construct":1,"iter":1,"bound":1,"modif":1,"reflect":1},"maxFreq":25,"totalTerms":140},"loc":4}