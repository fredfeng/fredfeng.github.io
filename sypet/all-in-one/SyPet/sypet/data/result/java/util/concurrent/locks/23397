{"id":23397,"className":"java.util.concurrent.locks.AbstractQueuedSynchronizer","methodName":"acquireSharedInterruptibly","signature":"\u003cjava.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireSharedInterruptibly(int)\u003e","javadoc":"/** \n * Acquires in shared mode, aborting if interrupted.  Implemented by first checking interrupt status, then invoking at least once {@link #tryAcquireShared}, returning on success.  Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking  {@link #tryAcquireShared} until success or the threadis interrupted.\n * @param arg the acquire argumentThis value is conveyed to  {@link #tryAcquireShared} but isotherwise uninterpreted and can represent anything you like.\n * @throws InterruptedException if the current thread is interrupted\n */\n","tf":{"freq":{"acquir":6,"otherwis":1,"anyth":1,"least":1,"unblock":1,"link":3,"possibl":1,"block":1,"repeat":1,"mode":1,"uninterpret":1,"arg":1,"convey":1,"share":5,"thread":2,"current":1,"valu":1,"threadi":1,"argument":1,"except":1,"check":1,"repres":1,"status":1,"invok":2,"queu":1,"like":1,"interrupt":6,"isotherwis":1,"success":2,"first":1,"abort":1},"maxFreq":6,"totalTerms":50},"loc":6}