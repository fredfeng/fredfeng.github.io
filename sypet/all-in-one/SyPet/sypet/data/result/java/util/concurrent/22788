{"id":22788,"className":"java.util.concurrent.ScheduledThreadPoolExecutor","methodName":"shutdown","signature":"\u003cjava.util.concurrent.ScheduledThreadPoolExecutor: void shutdown()\u003e","javadoc":"/** \n * Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. \u003cp\u003eThis method does not wait for previously submitted tasks to complete execution.  Use  {@link #awaitTermination awaitTermination}to do that. \u003cp\u003eIf the  {@code ExecuteExistingDelayedTasksAfterShutdownPolicy}has been set  {@code false}, existing delayed tasks whose delays have not yet elapsed are cancelled.  And unless the  {@code ContinueExistingPeriodicTasksAfterShutdownPolicy} has been set{@code true}, future executions of existing periodic tasks will be cancelled.\n * @throws SecurityException {@inheritDoc}\n */\n","tf":{"freq":{"fals":1,"accept":1,"link":1,"use":1,"cancel":2,"wait":1,"elaps":1,"unless":1,"order":1,"shut":1,"initi":1,"exist":4,"shutdown":4,"complet":1,"addit":1,"except":1,"futur":1,"submit":2,"previous":2,"whose":1,"task":7,"true":1,"polici":2,"period":2,"continu":1,"invoc":1,"termin":2,"secur":1,"effect":1,"await":2,"will":2,"alreadi":1,"method":1,"delay":3,"execut":4,"yet":1},"maxFreq":7,"totalTerms":61},"loc":3}