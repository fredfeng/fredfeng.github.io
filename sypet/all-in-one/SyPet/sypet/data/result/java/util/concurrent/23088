{"id":23088,"className":"java.util.concurrent.Semaphore","methodName":"release","signature":"\u003cjava.util.concurrent.Semaphore: void release()\u003e","javadoc":"/** \n * Releases a permit, returning it to the semaphore. \u003cp\u003eReleases a permit, increasing the number of available permits by one.  If any threads are trying to acquire a permit, then one is selected and given the permit that was just released.  That thread is (re)enabled for thread scheduling purposes. \u003cp\u003eThere is no requirement that a thread that releases a permit must have acquired that permit by calling  {@link #acquire}. Correct usage of a semaphore is established by programming convention in the application.\n */\n","tf":{"freq":{"acquir":3,"increas":1,"call":1,"convent":1,"one":2,"permit":7,"link":1,"schedul":1,"applic":1,"must":1,"requir":1,"given":1,"releas":5,"correct":1,"thread":4,"purpos":1,"just":1,"semaphor":2,"select":1,"enabl":1,"establish":1,"avail":1,"number":1,"program":1,"usag":1},"maxFreq":7,"totalTerms":42},"loc":3}