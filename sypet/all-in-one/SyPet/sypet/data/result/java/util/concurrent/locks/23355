{"id":23355,"className":"java.util.concurrent.locks.Lock","methodName":"tryLock","signature":"\u003cjava.util.concurrent.locks.Lock: boolean tryLock()\u003e","javadoc":"/** \n * Acquires the lock only if it is free at the time of invocation. \u003cp\u003eAcquires the lock if it is available and returns immediately with the value  {@code true}. If the lock is not available then this method will return immediately with the value  {@code false}. \u003cp\u003eA typical usage idiom for this method would be: \u003cpre\u003e Lock lock \u003d ...; if (lock.tryLock()) { try { // manipulate protected state } finally { lock.unlock(); } } else { // perform alternative actions } \u003c/pre\u003e This usage ensures that the lock is unlocked if it was acquired, and doesn\u0027t try to unlock if the lock was not acquired.\n * @return {@code true} if the lock was acquired and{@code false} otherwise\n */\n","tf":{"freq":{"otherwis":1,"fals":2,"acquir":5,"manipul":1,"idiom":1,"typic":1,"state":1,"perform":1,"ensur":1,"time":1,"free":1,"altern":1,"action":1,"valu":2,"immedi":2,"unlock":3,"lock":12,"true":2,"avail":2,"invoc":1,"els":1,"pre":2,"will":1,"method":2,"usag":2},"maxFreq":12,"totalTerms":50},"loc":0}