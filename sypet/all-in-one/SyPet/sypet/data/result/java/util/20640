{"id":20640,"className":"java.util.IdentityHashMap","methodName":"equals","signature":"\u003cjava.util.IdentityHashMap: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Compares the specified object with this map for equality.  Returns \u003ctt\u003etrue\u003c/tt\u003e if the given object is also a map and the two maps represent identical object-reference mappings.  More formally, this map is equal to another map \u003ctt\u003em\u003c/tt\u003e if and only if \u003ctt\u003ethis.entrySet().equals(m.entrySet())\u003c/tt\u003e. \u003cp\u003e\u003cb\u003eOwing to the reference-equality-based semantics of this map it is possible that the symmetry and transitivity requirements of the \u003ctt\u003eObject.equals\u003c/tt\u003e contract may be violated if this map is compared to a normal map.  However, the \u003ctt\u003eObject.equals\u003c/tt\u003e contract is guaranteed to hold among \u003ctt\u003eIdentityHashMap\u003c/tt\u003e instances.\u003c/b\u003e\n * @param o object to be compared for equality with this map\n * @return \u003ctt\u003etrue\u003c/tt\u003e if the specified object is equal to this map\n * @see Object#equals(Object)\n */\n","tf":{"freq":{"normal":1,"possibl":1,"object":9,"anoth":1,"violat":1,"transit":1,"specifi":2,"owe":1,"requir":1,"ident":2,"given":1,"refer":2,"among":1,"semant":1,"map":12,"howev":1,"may":1,"hash":1,"repres":1,"contract":2,"guarante":1,"entri":2,"hold":1,"true":2,"equal":10,"symmetri":1,"instanc":1,"two":1,"formal":1,"base":1,"also":1,"compar":3},"maxFreq":12,"totalTerms":68},"loc":22}