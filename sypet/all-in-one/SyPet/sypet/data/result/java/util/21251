{"id":21251,"className":"java.util.Random","methodName":"nextInt","signature":"\u003cjava.util.Random: int nextInt(int)\u003e","javadoc":"/** \n * Returns a pseudorandom, uniformly distributed  {@code int} valuebetween 0 (inclusive) and the specified value (exclusive), drawn from this random number generator\u0027s sequence.  The general contract of {@code nextInt} is that one {@code int} value in the specified rangeis pseudorandomly generated and returned.  All  {@code n} possible{@code int} values are produced with (approximately) equalprobability.  The method  {@code nextInt(int n)} is implemented byclass  {@code Random} as if by:\u003cpre\u003e  {@code}public int nextInt(int n)  if (n \u003c\u003d 0) throw new IllegalArgumentException(\"n must be positive\"); if ((n \u0026 -n) \u003d\u003d n)  // i.e., n is a power of 2 return (int)((n * (long)next(31)) \u003e\u003e 31); int bits, val; do { bits \u003d next(31); val \u003d bits % n; } while (bits - val + (n-1) \u003c 0); return val; }}\u003c/pre\u003e \u003cp\u003eThe hedge \"approximately\" is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits.  If it were a perfect source of randomly chosen bits, then the algorithm shown would choose  {@code int}values from the stated range with perfect uniformity. \u003cp\u003e The algorithm is slightly tricky.  It rejects values that would result in an uneven distribution (due to the fact that 2^31 is not divisible by n). The probability of a value being rejected depends on n.  The worst case is n\u003d2^30+1, for which the probability of a reject is 1/2, and the expected number of iterations before the loop terminates is 2. \u003cp\u003e The algorithm treats the case where n is a power of two specially: it returns the correct number of high-order bits from the underlying pseudo-random number generator.  In the absence of special treatment, the correct number of \u003ci\u003elow-order\u003c/i\u003e bits would be returned.  Linear congruential pseudo-random number generators such as the one implemented by this class are known to have short periods in the sequence of values of their low-order bits.  Thus, this special case greatly increases the length of the sequence of values returned by successive calls to this method if n is a small power of two.\n * @param n the bound on the random number to be returned.  Must bepositive.\n * @return the next pseudorandom, uniformly distributed {@code int}value between  {@code 0} (inclusive) and {@code n} (exclusive)from this random number generator\u0027s sequence\n * @throws IllegalArgumentException if n is not positive\n * @since 1.2\n */\n","tf":{"freq":{"unbias":1,"hedg":1,"treatment":1,"pseudo":2,"uneven":1,"distribut":3,"possibl":1,"approxim":3,"must":2,"specifi":2,"expect":1,"independ":1,"rangei":1,"slight":1,"correct":2,"probabl":2,"equalprob":1,"sequenc":4,"rang":1,"power":3,"absenc":1,"tricki":1,"argument":2,"except":2,"contract":1,"random":7,"descript":1,"shown":1,"number":8,"period":1,"bit":9,"congruenti":1,"beposit":1,"due":1,"sourc":2,"known":1,"low":2,"small":1,"posit":2,"treat":1,"increas":1,"val":4,"call":1,"result":1,"reject":3,"one":2,"next":8,"state":1,"use":1,"chosen":2,"algorithm":3,"inclus":2,"order":3,"length":1,"loop":1,"choos":1,"valu":9,"exclus":2,"perfect":2,"drawn":1,"linear":1,"thus":1,"uniform":3,"worst":1,"depend":1,"produc":1,"illeg":2,"general":1,"two":2,"termin":1,"great":1,"fact":1,"forego":1,"pre":2,"generat":5,"special":3,"method":3,"high":1,"iter":1,"success":1,"byclass":1,"bound":1,"valuebetween":1,"divis":1,"pseudorandom":3},"maxFreq":9,"totalTerms":169},"loc":14}