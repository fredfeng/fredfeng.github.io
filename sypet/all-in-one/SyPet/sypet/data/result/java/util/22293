{"id":22293,"className":"java.util.AbstractList","methodName":"equals","signature":"\u003cjava.util.AbstractList: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Compares the specified object with this list for equality.  Returns {@code true} if and only if the specified object is also a list, bothlists have the same size, and all corresponding pairs of elements in the two lists are \u003ci\u003eequal\u003c/i\u003e.  (Two elements  {@code e1} and{@code e2} are \u003ci\u003eequal\u003c/i\u003e if {@code (e1\u003d\u003dnull ? e2\u003d\u003dnull :e1.equals(e2))}.)  In other words, two lists are defined to be equal if they contain the same elements in the same order.\u003cp\u003e This implementation first checks if the specified object is this list. If so, it returns  {@code true}; if not, it checks if the specified object is a list. If not, it returns  {@code false}; if so, it iterates over both lists, comparing corresponding pairs of elements. If any comparison returns  {@code false}, this method returns {@code false}.  If either iterator runs out of elements before the other it returns  {@code false} (as the lists are of unequal length);otherwise it returns  {@code true} when the iterations complete.\n * @param o the object to be compared for equality with this list\n * @return {@code true} if the specified object is equal to this list\n */\n","tf":{"freq":{"otherwis":1,"fals":4,"defin":1,"pair":2,"correspond":2,"object":6,"run":1,"specifi":5,"order":1,"length":1,"unequ":1,"complet":1,"element":5,"bothlist":1,"check":2,"true":4,"list":10,"equal":8,"comparison":1,"size":1,"two":3,"either":1,"contain":1,"word":1,"method":1,"iter":3,"also":1,"compar":3,"first":1},"maxFreq":10,"totalTerms":73},"loc":16}