{"id":22950,"className":"java.util.concurrent.ForkJoinTask","methodName":"getSurplusQueuedTaskCount","signature":"\u003cjava.util.concurrent.ForkJoinTask: int getSurplusQueuedTaskCount()\u003e","javadoc":"/** \n * Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them.  This value may be useful for heuristic decisions about whether to fork other tasks. In many usages of ForkJoinTasks, at steady state, each worker should aim to maintain a small constant surplus (for example, 3) of tasks, and to process computations locally if this threshold is exceeded. \u003cp\u003eThis method may be invoked only from within  {@code ForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts result in exceptions or errors, possibly including  {@code ClassCastException}.\n * @return the surplus number of tasks, which may be negative\n */\n","tf":{"freq":{"count":1,"maintain":1,"possibl":1,"whether":1,"estim":1,"thread":2,"mani":2,"fork":4,"except":2,"invok":2,"number":1,"steadi":1,"cast":1,"aim":1,"determin":1,"comput":2,"negat":1,"small":1,"attempt":1,"might":1,"result":1,"decis":1,"link":1,"state":1,"use":2,"pool":2,"current":1,"worker":3,"valu":1,"surplus":3,"heurist":1,"steal":1,"held":1,"may":4,"constant":1,"includ":1,"error":1,"task":6,"queu":2,"exceed":1,"join":3,"threshold":1,"process":1,"exampl":1,"context":1,"method":2,"usag":1,"local":2,"within":1},"maxFreq":6,"totalTerms":76},"loc":4}