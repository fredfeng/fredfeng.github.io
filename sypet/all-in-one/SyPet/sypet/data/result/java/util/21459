{"id":21459,"className":"java.util.Properties","methodName":"load","signature":"\u003cjava.util.Properties: void load(java.io.Reader)\u003e","javadoc":"/** \n * Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format. \u003cp\u003e Properties are processed in terms of lines. There are two kinds of line, \u003ci\u003enatural lines\u003c/i\u003e and \u003ci\u003elogical lines\u003c/i\u003e. A natural line is defined as a line of characters that is terminated either by a set of line terminator characters (\u003ccode\u003e\\n\u003c/code\u003e or \u003ccode\u003e\\r\u003c/code\u003e or \u003ccode\u003e\\r\\n\u003c/code\u003e) or by the end of the stream. A natural line may be either a blank line, a comment line, or hold all or some of a key-element pair. A logical line holds all the data of a key-element pair, which may be spread out across several adjacent natural lines by escaping the line terminator sequence with a backslash character \u003ccode\u003e\\\u003c/code\u003e.  Note that a comment line cannot be extended in this manner; every natural line that is a comment must have its own comment indicator, as described below. Lines are read from input until the end of the stream is reached. \u003cp\u003e A natural line that contains only white space characters is considered blank and is ignored.  A comment line has an ASCII \u003ccode\u003e\u0027#\u0027\u003c/code\u003e or \u003ccode\u003e\u0027!\u0027\u003c/code\u003e as its first non-white space character; comment lines are also ignored and do not encode key-element information.  In addition to line terminators, this format considers the characters space (\u003ccode\u003e\u0027 \u0027\u003c/code\u003e, \u003ccode\u003e\u0027\u0026#92;u0020\u0027\u003c/code\u003e), tab (\u003ccode\u003e\u0027\\t\u0027\u003c/code\u003e, \u003ccode\u003e\u0027\u0026#92;u0009\u0027\u003c/code\u003e), and form feed (\u003ccode\u003e\u0027\\f\u0027\u003c/code\u003e, \u003ccode\u003e\u0027\u0026#92;u000C\u0027\u003c/code\u003e) to be white space. \u003cp\u003e If a logical line is spread across several natural lines, the backslash escaping the line terminator sequence, the line terminator sequence, and any white space at the start of the following line have no affect on the key or element values. The remainder of the discussion of key and element parsing (when loading) will assume all the characters constituting the key and element appear on a single natural line after line continuation characters have been removed.  Note that it is \u003ci\u003enot\u003c/i\u003e sufficient to only examine the character preceding a line terminator sequence to decide if the line terminator is escaped; there must be an odd number of contiguous backslashes for the line terminator to be escaped. Since the input is processed from left to right, a non-zero even number of 2\u003ci\u003en\u003c/i\u003e contiguous backslashes before a line terminator (or elsewhere) encodes \u003ci\u003en\u003c/i\u003e backslashes after escape processing. \u003cp\u003e The key contains all of the characters in the line starting with the first non-white space character and up to, but not including, the first unescaped \u003ccode\u003e\u0027\u003d\u0027\u003c/code\u003e, \u003ccode\u003e\u0027:\u0027\u003c/code\u003e, or white space character other than a line terminator. All of these key termination characters may be included in the key by escaping them with a preceding backslash character; for example,\u003cp\u003e \u003ccode\u003e\\:\\\u003d\u003c/code\u003e\u003cp\u003e would be the two-character key \u003ccode\u003e\":\u003d\"\u003c/code\u003e.  Line terminator characters can be included using \u003ccode\u003e\\r\u003c/code\u003e and \u003ccode\u003e\\n\u003c/code\u003e escape sequences.  Any white space after the key is skipped; if the first non-white space character after the key is \u003ccode\u003e\u0027\u003d\u0027\u003c/code\u003e or \u003ccode\u003e\u0027:\u0027\u003c/code\u003e, then it is ignored and any white space characters after it are also skipped.  All remaining characters on the line become part of the associated element string; if there are no remaining characters, the element is the empty string \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e.  Once the raw character sequences constituting the key and element are identified, escape processing is performed as described above. \u003cp\u003e As an example, each of the following three lines specifies the key \u003ccode\u003e\"Truth\"\u003c/code\u003e and the associated element value \u003ccode\u003e\"Beauty\"\u003c/code\u003e: \u003cp\u003e \u003cpre\u003e Truth \u003d Beauty Truth:Beauty Truth                    :Beauty \u003c/pre\u003e As another example, the following three lines specify a single property: \u003cp\u003e \u003cpre\u003e fruits                           apple, banana, pear, \\ cantaloupe, watermelon, \\ kiwi, mango \u003c/pre\u003e The key is \u003ccode\u003e\"fruits\"\u003c/code\u003e and the associated element is: \u003cp\u003e \u003cpre\u003e\"apple, banana, pear, cantaloupe, watermelon, kiwi, mango\"\u003c/pre\u003e Note that a space appears before each \u003ccode\u003e\\\u003c/code\u003e so that a space will appear after each comma in the final result; the \u003ccode\u003e\\\u003c/code\u003e, line terminator, and leading white space on the continuation line are merely discarded and are \u003ci\u003enot\u003c/i\u003e replaced by one or more other characters. \u003cp\u003e As a third example, the line: \u003cp\u003e \u003cpre\u003echeeses \u003c/pre\u003e specifies that the key is \u003ccode\u003e\"cheeses\"\u003c/code\u003e and the associated element is the empty string \u003ccode\u003e\"\"\u003c/code\u003e.\u003cp\u003e \u003cp\u003e \u003ca name\u003d\"unicodeescapes\"\u003e\u003c/a\u003e Characters in keys and elements can be represented in escape sequences similar to those used for character and string literals (see sections 3.3 and 3.10.6 of \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e). The differences from the character escape sequences and Unicode escapes used for characters and strings are: \u003cul\u003e \u003cli\u003e Octal escapes are not recognized. \u003cli\u003e The character sequence \u003ccode\u003e\\b\u003c/code\u003e does \u003ci\u003enot\u003c/i\u003e represent a backspace character. \u003cli\u003e The method does not treat a backslash character, \u003ccode\u003e\\\u003c/code\u003e, before a non-valid escape character as an error; the backslash is silently dropped.  For example, in a Java string the sequence \u003ccode\u003e\"\\z\"\u003c/code\u003e would cause a compile time error.  In contrast, this method silently drops the backslash.  Therefore, this method treats the two character sequence \u003ccode\u003e\"\\b\"\u003c/code\u003e as equivalent to the single character \u003ccode\u003e\u0027b\u0027\u003c/code\u003e. \u003cli\u003e Escapes are not necessary for single and double quotes; however, by the rule above, single and double quote characters preceded by a backslash still yield single and double quote characters, respectively. \u003cli\u003e Only a single \u0027u\u0027 character is allowed in a Uniocde escape sequence. \u003c/ul\u003e \u003cp\u003e The specified stream remains open after this method returns.\n * @param reader   the input character stream.\n * @throws IOException  if an error occurred when reading from theinput stream.\n * @throws IllegalArgumentException if a malformed Unicode escapeappears in the input.\n * @since   1.6\n */\n","tf":{"freq":{"appear":3,"yield":1,"singl":7,"tab":1,"languag":1,"zero":1,"specifi":4,"theinput":1,"open":1,"time":1,"becom":1,"kiwi":2,"sequenc":12,"unescap":1,"recogn":1,"right":1,"quot":5,"element":14,"escapeappear":1,"ignor":3,"form":1,"charact":37,"hold":2,"remov":1,"mango":2,"describ":2,"number":2,"third":1,"non":5,"cite":2,"unicodeescap":1,"encod":2,"start":2,"discuss":1,"will":2,"suffici":1,"load":2,"comment":6,"uniocd":1,"compil":1,"silent":2,"stream":6,"pair":3,"cantaloup":2,"data":1,"line":41,"use":3,"therefor":1,"anoth":1,"discard":1,"space":13,"across":2,"consid":2,"kind":1,"indic":1,"associ":4,"truth":4,"left":1,"note":3,"end":2,"similar":1,"addit":1,"may":3,"blank":2,"assum":1,"repres":2,"contigu":2,"empti":2,"process":4,"differ":1,"banana":2,"preced":3,"either":2,"remaind":1,"decid":1,"remain":3,"string":6,"unicod":2,"exampl":5,"method":4,"part":1,"pars":1,"respect":1,"backspac":1,"pear":2,"simpl":1,"drop":2,"lead":1,"natur":8,"perform":1,"skip":2,"necessari":1,"must":2,"contrast":1,"equival":1,"three":2,"howev":1,"everi":1,"examin":1,"key":18,"follow":3,"argument":1,"adjac":1,"except":2,"liter":1,"comma":1,"fruit":2,"chees":2,"white":10,"format":2,"logic":3,"continu":2,"appl":2,"inform":1,"malform":1,"input":5,"reader":1,"contain":2,"even":1,"mere":1,"properti":3,"odd":1,"treat":2,"raw":1,"valid":1,"result":1,"defin":1,"allow":1,"trade":1,"constitut":2,"one":1,"identifi":1,"affect":1,"escap":15,"backslash":10,"elsewher":1,"reach":1,"rule":1,"name":1,"read":3,"beauti":4,"feed":1,"valu":2,"includ":3,"error":3,"still":1,"list":1,"illeg":1,"section":1,"sever":2,"two":3,"specif":1,"termin":14,"caus":1,"octal":1,"orient":1,"term":1,"pre":8,"replac":1,"java":2,"manner":1,"watermelon":2,"spread":2,"first":4,"also":2,"occur":1},"maxFreq":41,"totalTerms":484},"loc":3}