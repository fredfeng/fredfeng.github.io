{"id":21560,"className":"java.util.Calendar","methodName":"compareTo","signature":"\u003cjava.util.Calendar: int compareTo(java.util.Calendar)\u003e","javadoc":"/** \n * Compares the time values (millisecond offsets from the \u003ca href\u003d\"#Epoch\"\u003eEpoch\u003c/a\u003e) represented by two \u003ccode\u003eCalendar\u003c/code\u003e objects.\n * @param anotherCalendar the \u003ccode\u003eCalendar\u003c/code\u003e to be compared.\n * @return the value \u003ccode\u003e0\u003c/code\u003e if the time represented by the argumentis equal to the time represented by this \u003ccode\u003eCalendar\u003c/code\u003e; a value less than \u003ccode\u003e0\u003c/code\u003e if the time of this \u003ccode\u003eCalendar\u003c/code\u003e is before the time represented by the argument; and a value greater than \u003ccode\u003e0\u003c/code\u003e if the time of this \u003ccode\u003eCalendar\u003c/code\u003e is after the time represented by the argument.\n * @exception NullPointerException if the specified \u003ccode\u003eCalendar\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if the time value of thespecified \u003ccode\u003eCalendar\u003c/code\u003e object can\u0027t be obtained due to any invalid calendar values.\n * @since   1.5\n */\n","tf":{"freq":{"argument":3,"except":4,"greater":1,"repres":5,"epoch":2,"argumenti":1,"equal":1,"object":2,"anoth":1,"illeg":1,"specifi":1,"two":1,"obtain":1,"time":8,"invalid":1,"millisecond":1,"due":1,"thespecifi":1,"pointer":1,"valu":6,"offset":1,"compar":3,"href":1,"less":1,"calendar":9},"maxFreq":9,"totalTerms":58},"loc":3}