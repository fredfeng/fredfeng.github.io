{"id":23473,"className":"java.util.concurrent.atomic.AtomicIntegerFieldUpdater","methodName":"weakCompareAndSet","signature":"\u003cjava.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean weakCompareAndSet(T,int,int)\u003e","javadoc":"/** \n * Atomically sets the field of the given object managed by this updater to the given updated value if the current value  {@code \u003d\u003d} theexpected value. This method is guaranteed to be atomic with respect to other calls to  {@code compareAndSet} and {@code set}, but not necessarily with respect to other changes in the field. \u003cp\u003eMay \u003ca href\u003d\"package-summary.html#Spurious\"\u003efail spuriously\u003c/a\u003e and does not provide ordering guarantees, so is only rarely an appropriate alternative to  {@code compareAndSet}.\n * @param obj An object whose field to conditionally set\n * @param expect the expected value\n * @param update the new value\n * @return true if successful\n * @throws ClassCastException if {@code obj} is not an instanceof the class possessing the field established in the constructor\n */\n","tf":{"freq":{"atom":2,"call":1,"object":2,"expect":2,"altern":1,"order":1,"given":2,"fail":1,"rare":1,"theexpect":1,"possess":1,"current":1,"valu":5,"href":1,"constructor":1,"condit":1,"except":1,"may":1,"spurious":2,"whose":1,"manag":1,"guarante":2,"establish":1,"true":1,"provid":1,"field":4,"summari":1,"cast":1,"updat":3,"appropri":1,"obj":2,"method":1,"weak":1,"html":1,"chang":1,"necessarili":1,"success":1,"compar":3,"respect":2},"maxFreq":5,"totalTerms":58},"loc":0}