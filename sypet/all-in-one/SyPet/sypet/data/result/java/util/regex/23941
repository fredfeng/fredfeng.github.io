{"id":23941,"className":"java.util.regex.Pattern","methodName":"split","signature":"\u003cjava.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)\u003e","javadoc":"/** \n * Splits the given input sequence around matches of this pattern. \u003cp\u003e The array returned by this method contains each substring of the input sequence that is terminated by another subsequence that matches this pattern or is terminated by the end of the input sequence.  The substrings in the array are in the order in which they occur in the input.  If this pattern does not match any subsequence of the input then the resulting array has just one element, namely the input sequence in string form. \u003cp\u003e The \u003ctt\u003elimit\u003c/tt\u003e parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.  If the limit \u003ci\u003en\u003c/i\u003e is greater than zero then the pattern will be applied at most \u003ci\u003en\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be no greater than \u003ci\u003en\u003c/i\u003e, and the array\u0027s last entry will contain all input beyond the last matched delimiter.  If \u003ci\u003en\u003c/i\u003e is non-positive then the pattern will be applied as many times as possible and the array can have any length.  If \u003ci\u003en\u003c/i\u003e is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. \u003cp\u003e The input \u003ctt\u003e\"boo:and:foo\"\u003c/tt\u003e, for example, yields the following results with these parameters: \u003cblockquote\u003e\u003ctable cellpadding\u003d1 cellspacing\u003d0 summary\u003d\"Split examples showing regex, limit, and result\"\u003e \u003ctr\u003e\u003cth\u003e\u003cP align\u003d\"left\"\u003e\u003ci\u003eRegex\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/i\u003e\u003c/th\u003e \u003cth\u003e\u003cP align\u003d\"left\"\u003e\u003ci\u003eLimit\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/i\u003e\u003c/th\u003e \u003cth\u003e\u003cP align\u003d\"left\"\u003e\u003ci\u003eResult\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/i\u003e\u003c/th\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e \u003ctd align\u003dcenter\u003e2\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and:foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e \u003ctd align\u003dcenter\u003e5\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and\", \"foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e \u003ctd align\u003dcenter\u003e-2\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and\", \"foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e \u003ctd align\u003dcenter\u003e5\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\", \"\", \"\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e \u003ctd align\u003dcenter\u003e-2\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\", \"\", \"\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e \u003ctd align\u003dcenter\u003e0\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e\u003c/blockquote\u003e\n * @param input The character sequence to be split\n * @param limit The result threshold, as described above\n * @return  The array of strings computed by splitting the inputaround matches of this pattern\n */\n","tf":{"freq":{"greater":2,"last":2,"yield":1,"possibl":2,"show":1,"foo":4,"zero":2,"beyond":1,"center":12,"time":4,"given":1,"blockquot":2,"sequenc":5,"trail":1,"substr":2,"follow":1,"nbsp":14,"limit":5,"element":1,"control":1,"delimit":1,"mani":2,"form":1,"charact":1,"regex":2,"align":15,"describ":1,"number":1,"non":1,"input":9,"appli":4,"summari":1,"cellpad":1,"inputaround":1,"contain":2,"will":6,"comput":1,"split":5,"match":5,"posit":1,"array":9,"result":6,"one":1,"anoth":1,"therefor":1,"discard":1,"affect":1,"order":1,"name":1,"length":4,"cellspac":1,"left":3,"subsequ":2,"end":1,"just":1,"entri":1,"paramet":2,"threshold":1,"around":1,"empti":1,"termin":2,"boo":4,"pattern":8,"tabl":2,"string":3,"exampl":2,"method":1,"occur":1},"maxFreq":15,"totalTerms":188},"loc":36}