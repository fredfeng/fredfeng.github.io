{"id":21997,"className":"java.util.Collections","methodName":"checkedCollection","signature":"\u003cjava.util.Collections: java.util.Collection\u003cE\u003e checkedCollection(java.util.Collection,java.lang.Class)\u003e","javadoc":"/** \n * Returns a dynamically typesafe view of the specified collection. Any attempt to insert an element of the wrong type will result in an immediate  {@link ClassCastException}.  Assuming a collection contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the collection takes place through the view, it is \u003ci\u003eguaranteed\u003c/i\u003e that the collection cannot contain an incorrectly typed element. \u003cp\u003eThe generics mechanism in the language provides compile-time (static) type checking, but it is possible to defeat this mechanism with unchecked casts.  Usually this is not a problem, as the compiler issues warnings on all such unchecked operations.  There are, however, times when static type checking alone is not sufficient.  For example, suppose a collection is passed to a third-party library and it is imperative that the library code not corrupt the collection by inserting an element of the wrong type. \u003cp\u003eAnother use of dynamically typesafe views is debugging.  Suppose a program fails with a  {@code ClassCastException}, indicating that an incorrectly typed element was put into a parameterized collection. Unfortunately, the exception can occur at any time after the erroneous element is inserted, so it typically provides little or no information as to the real source of the problem.  If the problem is reproducible, one can quickly determine its source by temporarily modifying the program to wrap the collection with a dynamically typesafe view. For example, this declaration: \u003cpre\u003e  {@code Collection\u003cString\u003e c \u003d new HashSet\u003cString\u003e();}\u003c/pre\u003e may be replaced temporarily by this one: \u003cpre\u003e  {@code Collection\u003cString\u003e c \u003d Collections.checkedCollection( new HashSet\u003cString\u003e(), String.class);}\u003c/pre\u003e Running the program again will cause it to fail at the point where an incorrectly typed element is inserted into the collection, clearly identifying the source of the problem.  Once the problem is fixed, the modified declaration may be reverted back to the original. \u003cp\u003eThe returned collection does \u003ci\u003enot\u003c/i\u003e pass the hashCode and equals operations through to the backing collection, but relies on {@code Object}\u0027s  {@code equals} and {@code hashCode} methods.  Thisis necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. \u003cp\u003eThe returned collection will be serializable if the specified collection is serializable. \u003cp\u003eSince  {@code null} is considered to be a value of any referencetype, the returned collection permits insertion of null elements whenever the backing collection does.\n * @param c the collection for which a dynamically typesafe view is to bereturned\n * @param type the type of element that {@code c} is permitted to hold\n * @return a dynamically typesafe view of the specified collection\n * @since 1.5\n */\n","tf":{"freq":{"languag":1,"corrupt":1,"specifi":3,"time":4,"fail":2,"oper":3,"place":1,"imper":1,"element":9,"temporarili":2,"hold":1,"third":1,"provid":2,"will":3,"suffici":1,"sourc":3,"view":7,"compil":2,"parti":1,"littl":1,"put":1,"link":1,"typic":1,"use":1,"anoth":1,"debug":1,"run":1,"issu":1,"consid":1,"clear":1,"indic":1,"revert":1,"typesaf":6,"usual":1,"whenev":1,"may":2,"assum":1,"suppos":2,"librari":2,"back":4,"access":1,"point":1,"mechan":2,"string":5,"exampl":2,"alon":1,"method":1,"insert":5,"permit":2,"uncheck":2,"possibl":1,"type":10,"necessari":1,"prior":1,"reli":1,"bereturn":1,"howev":1,"incorrect":4,"dynam":6,"wrap":1,"except":3,"unfortun":1,"contract":1,"hash":4,"preserv":1,"inform":1,"cast":3,"program":3,"contain":2,"determin":1,"collect":23,"warn":1,"generic":1,"attempt":1,"defeat":1,"result":1,"serializ":2,"one":2,"quick":1,"identifi":1,"reproduc":1,"object":1,"thisi":1,"real":1,"parameter":1,"declar":2,"fix":1,"valu":1,"immedi":1,"subsequ":1,"check":4,"guarante":1,"erron":1,"origin":1,"list":1,"problem":5,"equal":2,"pass":2,"referencetyp":1,"caus":1,"take":1,"pre":4,"generat":1,"replac":1,"modifi":2,"wrong":2,"occur":1},"maxFreq":23,"totalTerms":225},"loc":3}