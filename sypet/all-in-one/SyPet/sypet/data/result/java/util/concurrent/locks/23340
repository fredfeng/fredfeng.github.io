{"id":23340,"className":"java.util.concurrent.locks.Condition","methodName":"awaitUntil","signature":"\u003cjava.util.concurrent.locks.Condition: boolean awaitUntil(java.util.Date)\u003e","javadoc":"/** \n * Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses. \u003cp\u003eThe lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until \u003cem\u003eone\u003c/em\u003e of five things happens: \u003cul\u003e \u003cli\u003eSome other thread invokes the  {@link #signal} method for this{@code Condition} and the current thread happens to be chosen as thethread to be awakened; or \u003cli\u003eSome other thread invokes the  {@link #signalAll} method for this{@code Condition}; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts} thecurrent thread, and interruption of thread suspension is supported; or \u003cli\u003eThe specified deadline elapses; or \u003cli\u003eA \u0026quot;\u003cem\u003espurious wakeup\u003c/em\u003e\u0026quot; occurs. \u003c/ul\u003e \u003cp\u003eIn all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is \u003cem\u003eguaranteed\u003c/em\u003e to hold this lock. \u003cp\u003eIf the current thread: \u003cul\u003e \u003cli\u003ehas its interrupted status set on entry to this method; or \u003cli\u003eis  {@linkplain Thread#interrupt interrupted} while waitingand interruption of thread suspension is supported, \u003c/ul\u003e then  {@link InterruptedException} is thrown and the current thread\u0027sinterrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. \u003cp\u003eThe return value indicates whether the deadline has elapsed, which can be used as follows: \u003cpre\u003e  {@code}boolean aMethod(Date deadline)  boolean stillWaiting \u003d true; lock.lock(); try { while (!conditionBeingWaitedFor()) { if (!stillWaiting) return false; stillWaiting \u003d theCondition.awaitUntil(deadline); } // ... } finally { lock.unlock(); } }}\u003c/pre\u003e \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e \u003cp\u003eThe current thread is assumed to hold the lock associated with this {@code Condition} when this method is called.It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as  {@link IllegalMonitorStateException}) and the implementation must document that fact. \u003cp\u003eAn implementation can favor responding to an interrupt over normal method return in response to a signal, or over indicating the passing of the specified deadline. In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.\n * @param deadline the absolute time to wait until\n * @return {@code false} if the deadline has elapsed upon return, else{@code true}\n * @throws InterruptedException if the current thread is interrupted(and interruption of thread suspension is supported)\n */\n","tf":{"freq":{"fals":2,"acquir":1,"atom":1,"test":1,"normal":1,"wait":7,"whether":2,"must":3,"specifi":4,"elaps":4,"time":1,"deadlin":8,"becom":1,"respond":2,"thread":20,"wakeup":1,"purpos":1,"happen":2,"sinterrupt":1,"quot":2,"follow":1,"awaken":1,"unlock":1,"except":4,"thrown":2,"monitor":1,"support":3,"spurious":1,"respons":1,"status":2,"invok":2,"hold":2,"absolut":1,"els":1,"disabl":1,"await":2,"determin":1,"will":1,"thecurr":1,"favor":1,"upon":1,"thing":1,"call":1,"linkplain":2,"waitingand":1,"one":2,"link":4,"state":1,"typic":1,"use":1,"schedul":1,"signal":5,"anoth":1,"chosen":1,"date":1,"ensur":1,"clear":1,"document":1,"indic":2,"releas":2,"associ":3,"consider":1,"current":8,"redirect":1,"valu":1,"condit":7,"assum":1,"five":1,"guarante":1,"entri":1,"lock":8,"true":2,"still":3,"illeg":1,"interrupt":14,"pass":1,"thethread":1,"suspens":3,"either":1,"fact":1,"caus":1,"pre":2,"method":7,"first":1,"lie":1,"dormant":1,"occur":2},"maxFreq":20,"totalTerms":201},"loc":0}