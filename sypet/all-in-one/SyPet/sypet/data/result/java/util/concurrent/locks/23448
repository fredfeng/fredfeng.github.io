{"id":23448,"className":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject","methodName":"await","signature":"\u003cjava.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject: void await()\u003e","javadoc":"/** \n * Implements interruptible condition wait. \u003col\u003e \u003cli\u003e If current thread is interrupted, throw InterruptedException. \u003cli\u003e Save lock state returned by  {@link #getState}. \u003cli\u003e Invoke  {@link #release} withsaved state as argument, throwing IllegalMonitorStateException if it fails. \u003cli\u003e Block until signalled or interrupted. \u003cli\u003e Reacquire by invoking specialized version of {@link #acquire} with saved state as argument.\u003cli\u003e If interrupted while blocked in step 4, throw InterruptedException. \u003c/ol\u003e\n */\n","tf":{"freq":{"acquir":1,"argument":2,"condit":1,"except":3,"monitor":1,"save":2,"withsav":1,"invok":2,"link":3,"lock":1,"state":5,"block":2,"signal":1,"wait":1,"reacquir":1,"illeg":1,"interrupt":6,"version":1,"fail":1,"releas":1,"await":1,"thread":1,"current":1,"special":1,"step":1},"maxFreq":6,"totalTerms":42},"loc":18}