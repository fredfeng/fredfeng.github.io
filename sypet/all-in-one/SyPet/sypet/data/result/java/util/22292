{"id":22292,"className":"java.util.AbstractList","methodName":"subList","signature":"\u003cjava.util.AbstractList: java.util.List\u003cE\u003e subList(int,int)\u003e","javadoc":"/** \n * {@inheritDoc}\u003cp\u003eThis implementation returns a list that subclasses {@code AbstractList}.  The subclass stores, in private fields, the offset of the subList within the backing list, the size of the subList (which can change over its lifetime), and the expected {@code modCount} value of the backing list.  There are two variantsof the subclass, one of which implements  {@code RandomAccess}. If this list implements  {@code RandomAccess} the returned list willbe an instance of the subclass that implements  {@code RandomAccess}. \u003cp\u003eThe subclass\u0027s  {@code set(int, E)},  {@code get(int)}, {@code add(int, E)},  {@code remove(int)},  {@code addAll(int,Collection)} and {@code removeRange(int, int)} methods alldelegate to the corresponding methods on the backing abstract list, after bounds-checking the index and adjusting for the offset.  The {@code addAll(Collection c)} method merely returns {@code addAll(size,c)}. \u003cp\u003eThe  {@code listIterator(int)} method returns a \"wrapper object\"over a list iterator on the backing list, which is created with the corresponding method on the backing list.  The  {@code iterator} methodmerely returns  {@code listIterator()}, and the  {@code size} methodmerely returns the subclass\u0027s  {@code size} field.\u003cp\u003eAll methods first check to see if the actual  {@code modCount} ofthe backing list is equal to its expected value, and throw a {@code ConcurrentModificationException} if it is not.\n * @throws IndexOutOfBoundsException if an endpoint index value is out of range{@code (fromIndex \u003c 0 || toIndex \u003e size)}\n * @throws IllegalArgumentException if the endpoint indices are out of order{@code (fromIndex \u003e toIndex)}\n */\n","tf":{"freq":{"lifetim":1,"methodmer":2,"count":2,"store":1,"willb":1,"expect":2,"wrapper":1,"rang":2,"argument":1,"index":7,"except":3,"creat":1,"mod":2,"remov":2,"random":3,"endpoint":2,"instanc":1,"size":5,"subclass":6,"alldeleg":1,"mere":1,"collect":2,"sub":3,"correspond":2,"concurr":1,"one":1,"object":1,"add":4,"variantsof":1,"order":1,"indic":1,"ofth":1,"adjust":1,"valu":3,"offset":2,"check":2,"back":6,"list":16,"equal":1,"access":3,"illeg":1,"field":2,"two":1,"actual":1,"method":6,"within":1,"chang":1,"iter":4,"first":1,"bound":2,"modif":1},"maxFreq":16,"totalTerms":120},"loc":5}