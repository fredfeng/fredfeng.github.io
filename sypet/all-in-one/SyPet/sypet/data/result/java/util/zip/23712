{"id":23712,"className":"java.util.zip.ZipFile","methodName":"ZipFile","signature":"\u003cjava.util.zip.ZipFile: void ZipFile(java.io.File,int)\u003e","javadoc":"/** \n * Opens a new \u003ccode\u003eZipFile\u003c/code\u003e to read from the specified \u003ccode\u003eFile\u003c/code\u003e object in the specified mode.  The mode argument must be either \u003ctt\u003eOPEN_READ\u003c/tt\u003e or \u003ctt\u003eOPEN_READ | OPEN_DELETE\u003c/tt\u003e. \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckRead\u003c/code\u003e method is called with the \u003ccode\u003ename\u003c/code\u003e argument as its argument to ensure the read is allowed. \u003cp\u003eThe UTF-8  {@link java.nio.charset.Charset charset} is used todecode the entry names and comments\n * @param file the ZIP file to be opened for reading\n * @param mode the mode in which the file is to be opened\n * @throws ZipException if a ZIP format error has occurred\n * @throws IOException if an I/O error has occurred\n * @throws SecurityException if a security manager exists andits \u003ccode\u003echeckRead\u003c/code\u003e method doesn\u0027t allow read access to the file, or its \u003ccode\u003echeckDelete\u003c/code\u003e method doesn\u0027t allow deleting the file when the \u003ctt\u003eOPEN_DELETE\u003c/tt\u003e flag is set.\n * @throws IllegalArgumentException if the \u003ctt\u003emode\u003c/tt\u003e argument is invalid\n * @see SecurityManager#checkRead(java.lang.String)\n * @since 1.3\n */\n","tf":{"freq":{"call":1,"allow":3,"delet":2,"link":1,"use":1,"object":1,"andit":1,"lang":1,"must":1,"mode":5,"specifi":2,"ensur":1,"open":3,"invalid":1,"file":8,"name":2,"read":7,"exist":1,"argument":5,"zip":3,"except":4,"error":2,"check":4,"entri":1,"manag":3,"charset":3,"format":1,"access":1,"illeg":1,"either":1,"flag":1,"secur":4,"string":1,"todecod":1,"method":3,"java":2,"nio":1,"comment":1,"first":1,"occur":2},"maxFreq":8,"totalTerms":88},"loc":3}