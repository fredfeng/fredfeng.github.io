{"id":24223,"className":"java.util.prefs.Preferences","methodName":"flush","signature":"\u003cjava.util.prefs.Preferences: void flush()\u003e","javadoc":"/** \n * Forces any changes in the contents of this preference node and its descendants to the persistent store.  Once this method returns successfully, it is safe to assume that all changes made in the subtree rooted at this node prior to the method invocation have become permanent. \u003cp\u003eImplementations are free to flush changes into the persistent store at any time.  They do not need to wait for this method to be called. \u003cp\u003eWhen a flush occurs on a newly created node, it is made persistent, as are any ancestors (and descendants) that have yet to be made persistent.  Note however that any preference value changes in ancestors are \u003ci\u003enot\u003c/i\u003e guaranteed to be made persistent. \u003cp\u003e If this method is invoked on a node that has been removed with the  {@link #removeNode()} method, flushSpi() is invoked on this node,but not on others.\n * @throws BackingStoreException if this operation cannot be completeddue to a failure in the backing store, or inability to communicate with it.\n * @see #sync()\n */\n","tf":{"freq":{"need":1,"call":1,"store":4,"completeddu":1,"root":1,"link":1,"made":4,"persist":5,"wait":1,"prior":1,"free":1,"time":1,"becom":1,"sync":1,"oper":1,"spi":1,"valu":1,"subtre":1,"howev":1,"ancestor":2,"forc":1,"note":1,"inabl":1,"safe":1,"except":1,"assum":1,"failur":1,"creat":1,"invok":2,"guarante":1,"remov":2,"back":2,"invoc":1,"content":1,"newli":1,"node":6,"flush":4,"communic":1,"method":5,"descend":2,"chang":4,"prefer":2,"success":1,"yet":1,"occur":1,"perman":1},"maxFreq":6,"totalTerms":77},"loc":0}