{"id":22932,"className":"java.util.concurrent.ForkJoinTask","methodName":"cancel","signature":"\u003cjava.util.concurrent.ForkJoinTask: boolean cancel(boolean)\u003e","javadoc":"/** \n * Attempts to cancel execution of this task. This attempt will fail if the task has already completed or could not be cancelled for some other reason. If successful, and this task has not started when  {@code cancel} is called, execution ofthis task is suppressed. After this method returns successfully, unless there is an intervening call to  {@link #reinitialize}, subsequent calls to  {@link #isCancelled}, {@link #isDone}, and  {@code cancel} will return {@code true}and calls to  {@link #join} and related methods will result in{@code CancellationException}. \u003cp\u003eThis method may be overridden in subclasses, but if so, must still ensure that these properties hold. In particular, the {@code cancel} method itself must not throw exceptions.\u003cp\u003eThis method is designed to be invoked by \u003cem\u003eother\u003c/em\u003e tasks. To terminate the current task, you can just return or throw an unchecked exception from its computation method, or invoke  {@link #completeExceptionally}.\n * @param mayInterruptIfRunning this value has no effect in thedefault implementation because interrupts are not used to control cancellation.\n * @return {@code true} if this task is now cancelled\n */\n","tf":{"freq":{"reason":1,"overridden":1,"particular":1,"uncheck":1,"cancel":10,"must":2,"fail":1,"relat":1,"control":1,"except":4,"invok":2,"done":1,"hold":1,"now":1,"start":1,"will":3,"subclass":1,"comput":1,"properti":1,"execut":2,"thedefault":1,"attempt":2,"call":4,"result":1,"link":5,"use":1,"run":1,"ensur":1,"unless":1,"current":1,"interven":1,"valu":1,"subsequ":1,"complet":2,"just":1,"may":2,"task":7,"true":2,"still":1,"join":1,"reiniti":1,"interrupt":2,"ofthi":1,"termin":1,"effect":1,"method":6,"alreadi":1,"success":2,"suppress":1,"design":1},"maxFreq":10,"totalTerms":91},"loc":3}