{"id":24257,"className":"java.util.prefs.AbstractPreferences","methodName":"nodeExists","signature":"\u003cjava.util.prefs.AbstractPreferences: boolean nodeExists(java.lang.String)\u003e","javadoc":"/** \n * Implements the \u003ctt\u003enodeExists\u003c/tt\u003e method as per the specification in {@link Preferences#nodeExists(String)}. \u003cp\u003eThis implementation is very similar to  {@link #node(String)}, except that  {@link #getChild(String)} is used instead of {@link #childSpi(String)}.\n * @param path the path name of the node whose existence is to be checked.\n * @return true if the specified node exists.\n * @throws BackingStoreException if this operation cannot be completeddue to a failure in the backing store, or inability to communicate with it.\n * @throws IllegalArgumentException if the path name is invalid (i.e.,it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long).\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method and\u003ctt\u003epathname\u003c/tt\u003e is not the empty string (\u003ctt\u003e\"\"\u003c/tt\u003e).\n */\n","tf":{"freq":{"store":2,"completeddu":1,"one":1,"link":5,"state":1,"use":1,"specifi":1,"child":2,"invalid":1,"oper":1,"spi":1,"name":2,"path":3,"ancestor":1,"exist":5,"end":1,"similar":1,"argument":1,"inabl":1,"pathnam":1,"except":4,"slash":2,"multipl":1,"check":1,"charact":3,"failur":1,"whose":1,"remov":1,"beenremov":1,"true":1,"back":2,"illeg":2,"empti":1,"consecut":1,"specif":1,"node":8,"communic":1,"per":1,"contain":1,"string":5,"instead":1,"method":2,"prefer":1},"maxFreq":8,"totalTerms":76},"loc":16}