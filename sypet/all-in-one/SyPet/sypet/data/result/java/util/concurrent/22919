{"id":22919,"className":"java.util.concurrent.ForkJoinPool","methodName":"isTerminating","signature":"\u003cjava.util.concurrent.ForkJoinPool: boolean isTerminating()\u003e","javadoc":"/** \n * Returns  {@code true} if the process of termination hascommenced but not yet completed.  This method may be useful for debugging. A return of  {@code true} reported a sufficientperiod after shutdown may indicate that submitted tasks have ignored or suppressed interruption, or are waiting for IO, causing this executor not to properly terminate. (See the advisory notes for class  {@link ForkJoinTask} stating thattasks should not normally entail blocking operations.  But if they do, they must abort them on interrupt.)\n * @return {@code true} if terminating but not yet terminated\n */\n","tf":{"freq":{"advisori":1,"normal":1,"link":1,"state":1,"block":1,"use":1,"debug":1,"wait":1,"must":1,"thattask":1,"sufficientperiod":1,"indic":1,"oper":1,"report":1,"hascommenc":1,"proper":1,"note":1,"complet":1,"shutdown":1,"fork":1,"may":2,"ignor":1,"submit":1,"task":2,"executor":1,"entail":1,"true":3,"join":1,"interrupt":2,"process":1,"termin":5,"caus":1,"method":1,"suppress":1,"abort":1,"yet":2},"maxFreq":5,"totalTerms":46},"loc":5}