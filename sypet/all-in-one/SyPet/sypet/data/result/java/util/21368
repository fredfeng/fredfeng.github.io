{"id":21368,"className":"java.util.NavigableMap","methodName":"subMap","signature":"\u003cjava.util.NavigableMap: java.util.NavigableMap\u003cK,V\u003e subMap(K,boolean,K,boolean)\u003e","javadoc":"/** \n * Returns a view of the portion of this map whose keys range from {@code fromKey} to {@code toKey}.  If  {@code fromKey} and{@code toKey} are equal, the returned map is empty unless{@code fromInclusive} and {@code toInclusive} are both true.  Thereturned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa.  The returned map supports all optional map operations that this map supports. \u003cp\u003eThe returned map will throw an  {@code IllegalArgumentException}on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.\n * @param fromKey low endpoint of the keys in the returned map\n * @param fromInclusive {@code true} if the low endpointis to be included in the returned view\n * @param toKey high endpoint of the keys in the returned map\n * @param toInclusive {@code true} if the high endpointis to be included in the returned view\n * @return a view of the portion of this map whose keys range from{@code fromKey} to {@code toKey}\n * @throws ClassCastException if {@code fromKey} and {@code toKey}cannot be compared to one another using this map\u0027s comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if  {@code fromKey} or {@code toKey}cannot be compared to keys currently in the map.\n * @throws NullPointerException if {@code fromKey} or {@code toKey}is null and this map does not permit null keys\n * @throws IllegalArgumentException if {@code fromKey} is greater than{@code toKey}; or if this map itself has a restricted range, and  {@code fromKey} or {@code toKey} liesoutside the bounds of the range\n */\n","tf":{"freq":{"greater":1,"permit":1,"natur":1,"requir":1,"oper":1,"rang":6,"option":1,"key":25,"argument":2,"versa":1,"except":5,"support":2,"whose":3,"liesoutsid":1,"submap":1,"restrict":1,"endpoint":3,"cast":1,"outsid":2,"will":1,"pointer":1,"view":4,"low":2,"compar":4,"attempt":1,"sub":1,"vice":1,"one":1,"use":2,"anoth":1,"inclus":4,"unless":1,"order":1,"map":19,"current":1,"portion":2,"thereturn":1,"may":1,"includ":2,"back":1,"true":3,"equal":1,"illeg":2,"endpointi":2,"empti":1,"either":1,"chang":1,"construct":1,"high":2,"insert":1,"bound":1,"reflect":1,"lie":1},"maxFreq":25,"totalTerms":129},"loc":0}