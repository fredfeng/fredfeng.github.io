{"id":20285,"className":"java.util.Arrays","methodName":"copyOfRange","signature":"\u003cjava.util.Arrays: float[] copyOfRange(float[],int,int)\u003e","javadoc":"/** \n * Copies the specified range of the specified array into a new array. The initial index of the range (\u003ctt\u003efrom\u003c/tt\u003e) must lie between zero and \u003ctt\u003eoriginal.length\u003c/tt\u003e, inclusive.  The value at \u003ctt\u003eoriginal[from]\u003c/tt\u003e is placed into the initial element of the copy (unless \u003ctt\u003efrom \u003d\u003d original.length\u003c/tt\u003e or \u003ctt\u003efrom \u003d\u003d to\u003c/tt\u003e). Values from subsequent elements in the original array are placed into subsequent elements in the copy.  The final index of the range (\u003ctt\u003eto\u003c/tt\u003e), which must be greater than or equal to \u003ctt\u003efrom\u003c/tt\u003e, may be greater than \u003ctt\u003eoriginal.length\u003c/tt\u003e, in which case \u003ctt\u003e0f\u003c/tt\u003e is placed in all elements of the copy whose index is greater than or equal to \u003ctt\u003eoriginal.length - from\u003c/tt\u003e.  The length of the returned array will be \u003ctt\u003eto - from\u003c/tt\u003e.\n * @param original the array from which a range is to be copied\n * @param from the initial index of the range to be copied, inclusive\n * @param to the final index of the range to be copied, exclusive.(This index may lie outside the array.)\n * @return a new array containing the specified range from the original array,truncated or padded with zeros to obtain the required length\n * @throws ArrayIndexOutOfBoundsException if {@code from \u003c 0}or  {@code from \u003e original.length}\n * @throws IllegalArgumentException if \u003ctt\u003efrom \u0026gt; to\u003c/tt\u003e\n * @throws NullPointerException if \u003ctt\u003eoriginal\u003c/tt\u003e is null\n * @since 1.6\n */\n","tf":{"freq":{"greater":3,"truncat":1,"zero":2,"must":2,"copi":8,"specifi":3,"inclus":2,"requir":1,"unless":1,"rang":8,"length":7,"valu":2,"initi":3,"exclus":1,"place":3,"subsequ":2,"argument":1,"pad":1,"element":4,"except":3,"index":7,"may":2,"whose":1,"origin":10,"equal":2,"illeg":1,"obtain":1,"outsid":1,"contain":1,"will":1,"pointer":1,"bound":1,"lie":2,"array":9},"maxFreq":10,"totalTerms":98},"loc":9}