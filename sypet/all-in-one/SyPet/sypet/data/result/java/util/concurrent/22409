{"id":22409,"className":"java.util.concurrent.ConcurrentSkipListMap","methodName":"values","signature":"\u003cjava.util.concurrent.ConcurrentSkipListMap: java.util.Collection\u003cV\u003e values()\u003e","javadoc":"/** \n * Returns a  {@link Collection} view of the values contained in this map.The collection\u0027s iterator returns the values in ascending order of the corresponding keys. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa.  The collection supports element removal, which removes the corresponding mapping from the map, via the \u003ctt\u003eIterator.remove\u003c/tt\u003e, \u003ctt\u003eCollection.remove\u003c/tt\u003e, \u003ctt\u003eremoveAll\u003c/tt\u003e, \u003ctt\u003eretainAll\u003c/tt\u003e and \u003ctt\u003eclear\u003c/tt\u003e operations.  It does not support the \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e operations. \u003cp\u003eThe view\u0027s \u003ctt\u003eiterator\u003c/tt\u003e is a \"weakly consistent\" iterator that will never throw  {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.\n */\n","tf":{"freq":{"via":1,"vice":1,"concurr":1,"correspond":2,"link":2,"add":2,"clear":1,"order":1,"oper":2,"map":5,"valu":3,"subsequ":1,"exist":1,"key":1,"travers":1,"versa":1,"element":2,"may":1,"except":1,"support":2,"consist":1,"guarante":2,"remov":5,"back":1,"never":1,"contain":1,"will":1,"retain":1,"weak":1,"construct":2,"view":2,"chang":1,"ascend":1,"iter":5,"modif":2,"reflect":2,"upon":1,"collect":6},"maxFreq":6,"totalTerms":68},"loc":4}