{"id":22894,"className":"java.util.concurrent.ForkJoinPool","methodName":"invoke","signature":"\u003cjava.util.concurrent.ForkJoinPool: T invoke(java.util.concurrent.ForkJoinTask)\u003e","javadoc":"/** \n * Performs the given task, returning its result upon completion. If the computation encounters an unchecked Exception or Error, it is rethrown as the outcome of this invocation.  Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using  {@code ex.printStackTrace()}) of both the current thread as well as the thread actually encountering the exception; minimally only the latter.\n * @param task the task\n * @return the task\u0027s result\n * @throws NullPointerException if the task is null\n * @throws RejectedExecutionException if the task cannot bescheduled for execution\n */\n","tf":{"freq":{"result":2,"reject":1,"behav":1,"use":1,"uncheck":1,"way":1,"possibl":1,"beschedul":1,"perform":1,"well":1,"outcom":1,"minim":1,"latter":1,"given":1,"thread":2,"current":1,"complet":1,"except":6,"error":1,"regular":1,"task":6,"invok":1,"trace":2,"rethrown":2,"display":1,"print":1,"invoc":1,"encount":2,"contain":1,"exampl":1,"pointer":1,"actual":1,"comput":1,"execut":2,"stack":2,"upon":1},"maxFreq":6,"totalTerms":53},"loc":14}