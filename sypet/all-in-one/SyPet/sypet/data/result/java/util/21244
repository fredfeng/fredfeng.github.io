{"id":21244,"className":"java.util.Collection","methodName":"equals","signature":"\u003cjava.util.Collection: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Compares the specified object with this collection for equality. \u003cp\u003e While the \u003ctt\u003eCollection\u003c/tt\u003e interface adds no stipulations to the general contract for the \u003ctt\u003eObject.equals\u003c/tt\u003e, programmers who implement the \u003ctt\u003eCollection\u003c/tt\u003e interface \"directly\" (in other words, create a class that is a \u003ctt\u003eCollection\u003c/tt\u003e but is not a \u003ctt\u003eSet\u003c/tt\u003e or a \u003ctt\u003eList\u003c/tt\u003e) must exercise care if they choose to override the \u003ctt\u003eObject.equals\u003c/tt\u003e.  It is not necessary to do so, and the simplest course of action is to rely on \u003ctt\u003eObject\u003c/tt\u003e\u0027s implementation, but the implementor may wish to implement a \"value comparison\" in place of the default \"reference comparison.\"  (The \u003ctt\u003eList\u003c/tt\u003e and \u003ctt\u003eSet\u003c/tt\u003e interfaces mandate such value comparisons.)\u003cp\u003e The general contract for the \u003ctt\u003eObject.equals\u003c/tt\u003e method states that equals must be symmetric (in other words, \u003ctt\u003ea.equals(b)\u003c/tt\u003e if and only if \u003ctt\u003eb.equals(a)\u003c/tt\u003e).  The contracts for \u003ctt\u003eList.equals\u003c/tt\u003e and \u003ctt\u003eSet.equals\u003c/tt\u003e state that lists are only equal to other lists, and sets to other sets.  Thus, a custom \u003ctt\u003eequals\u003c/tt\u003e method for a collection class that implements neither the \u003ctt\u003eList\u003c/tt\u003e nor \u003ctt\u003eSet\u003c/tt\u003e interface must return \u003ctt\u003efalse\u003c/tt\u003e when this collection is compared to any list or set.  (By the same logic, it is not possible to write a class that correctly implements both the \u003ctt\u003eSet\u003c/tt\u003e and \u003ctt\u003eList\u003c/tt\u003e interfaces.)\n * @param o object to be compared for equality with this collection\n * @return \u003ctt\u003etrue\u003c/tt\u003e if the specified object is equal to thiscollection\n * @see Object#equals(Object)\n * @see Set#equals(Object)\n * @see List#equals(Object)\n */\n","tf":{"freq":{"fals":1,"wish":1,"stipul":1,"symmetr":1,"state":2,"simplest":1,"cours":1,"possibl":1,"object":11,"mandat":1,"add":1,"necessari":1,"must":3,"specifi":2,"reli":1,"correct":1,"refer":1,"thiscollect":1,"write":1,"care":1,"action":1,"exercis":1,"choos":1,"valu":2,"place":1,"custom":1,"implementor":1,"direct":1,"may":1,"thus":1,"contract":3,"creat":1,"programm":1,"true":1,"equal":17,"list":9,"logic":1,"comparison":3,"general":2,"neither":1,"method":2,"word":2,"compar":3,"collect":7},"maxFreq":17,"totalTerms":98},"loc":0}