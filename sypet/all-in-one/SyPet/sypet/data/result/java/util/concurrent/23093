{"id":23093,"className":"java.util.concurrent.Semaphore","methodName":"release","signature":"\u003cjava.util.concurrent.Semaphore: void release(int)\u003e","javadoc":"/** \n * Releases the given number of permits, returning them to the semaphore. \u003cp\u003eReleases the given number of permits, increasing the number of available permits by that amount. If any threads are trying to acquire permits, then one is selected and given the permits that were just released. If the number of available permits satisfies that thread\u0027s request then that thread is (re)enabled for thread scheduling purposes; otherwise the thread will wait until sufficient permits are available. If there are still permits available after this thread\u0027s request has been satisfied, then those permits are assigned in turn to other threads trying to acquire permits. \u003cp\u003eThere is no requirement that a thread that releases a permit must have acquired that permit by calling  {@link Semaphore#acquire acquire}. Correct usage of a semaphore is established by programming convention in the application.\n * @param permits the number of permits to release\n * @throws IllegalArgumentException if {@code permits} is negative\n */\n","tf":{"freq":{"acquir":5,"increas":1,"otherwis":1,"call":1,"assign":1,"convent":1,"link":1,"one":1,"permit":15,"schedul":1,"wait":1,"applic":1,"must":1,"amount":1,"requir":1,"correct":1,"given":3,"releas":6,"thread":8,"request":2,"purpos":1,"argument":1,"just":1,"turn":1,"except":1,"semaphor":3,"select":1,"enabl":1,"establish":1,"avail":4,"number":5,"still":1,"illeg":1,"program":1,"satisfi":2,"will":1,"suffici":1,"negat":1,"usag":1},"maxFreq":15,"totalTerms":82},"loc":4}