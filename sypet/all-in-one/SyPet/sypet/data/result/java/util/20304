{"id":20304,"className":"java.util.Arrays","methodName":"hashCode","signature":"\u003cjava.util.Arrays: int hashCode(java.lang.Object[])\u003e","javadoc":"/** \n * Returns a hash code based on the contents of the specified array.  If the array contains other arrays as elements, the hash code is based on their identities rather than their contents.  It is therefore acceptable to invoke this method on an array that contains itself as an element,  either directly or indirectly through one or more levels of arrays. \u003cp\u003eFor any two arrays \u003ctt\u003ea\u003c/tt\u003e and \u003ctt\u003eb\u003c/tt\u003e such that \u003ctt\u003eArrays.equals(a, b)\u003c/tt\u003e, it is also the case that \u003ctt\u003eArrays.hashCode(a) \u003d\u003d Arrays.hashCode(b)\u003c/tt\u003e. \u003cp\u003eThe value returned by this method is equal to the value that would be returned by \u003ctt\u003eArrays.asList(a).hashCode()\u003c/tt\u003e, unless \u003ctt\u003ea\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, in which case \u003ctt\u003e0\u003c/tt\u003e is returned.\n * @param a the array whose content-based hash code to compute\n * @return a content-based hash code for \u003ctt\u003ea\u003c/tt\u003e\n * @see #deepHashCode(Object[])\n * @since 1.5\n */\n","tf":{"freq":{"accept":1,"one":1,"object":1,"therefor":1,"specifi":1,"indirect":1,"level":1,"ident":1,"unless":1,"rather":1,"valu":2,"deep":1,"direct":1,"element":2,"whose":1,"hash":9,"invok":1,"equal":2,"list":1,"content":4,"two":1,"either":1,"contain":2,"base":4,"comput":1,"method":2,"also":1,"array":11},"maxFreq":11,"totalTerms":57},"loc":11}