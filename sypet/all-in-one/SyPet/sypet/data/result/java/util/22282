{"id":22282,"className":"java.util.AbstractList","methodName":"listIterator","signature":"\u003cjava.util.AbstractList: java.util.ListIterator\u003cE\u003e listIterator(int)\u003e","javadoc":"/** \n * {@inheritDoc}\u003cp\u003eThis implementation returns a straightforward implementation of the {@code ListIterator} interface that extends the implementation of the{@code Iterator} interface returned by the {@code iterator()} method.The  {@code ListIterator} implementation relies on the backing list\u0027s{@code get(int)},  {@code set(int, E)},  {@code add(int, E)}and  {@code remove(int)} methods.\u003cp\u003eNote that the list iterator returned by this implementation will throw an  {@link UnsupportedOperationException} in response to its{@code remove},  {@code set} and {@code add} methods unless thelist\u0027s  {@code remove(int)},  {@code set(int, E)}, and {@code add(int, E)} methods are overridden.\u003cp\u003eThis implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected)  {@link #modCount} field.\n * @throws IndexOutOfBoundsException {@inheritDoc}\n */\n","tf":{"freq":{"face":1,"unsupport":1,"count":1,"overridden":1,"concurr":1,"link":2,"made":1,"add":3,"reli":1,"unless":1,"thelist":1,"oper":1,"note":1,"index":1,"except":3,"respons":1,"mod":1,"runtim":1,"remov":3,"back":1,"describ":1,"list":5,"field":1,"specif":1,"will":1,"method":4,"iter":6,"bound":1,"straightforward":1,"modif":1},"maxFreq":6,"totalTerms":49},"loc":5}