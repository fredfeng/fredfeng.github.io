{"id":21464,"className":"java.util.Properties","methodName":"store","signature":"\u003cjava.util.Properties: void store(java.io.Writer,java.lang.String)\u003e","javadoc":"/** \n * Writes this property list (key and element pairs) in this \u003ccode\u003eProperties\u003c/code\u003e table to the output character stream in a format suitable for using the  {@link #load(java.io.Reader) load(Reader)}method. \u003cp\u003e Properties from the defaults table of this \u003ccode\u003eProperties\u003c/code\u003e table (if any) are \u003ci\u003enot\u003c/i\u003e written out by this method. \u003cp\u003e If the comments argument is not null, then an ASCII \u003ccode\u003e#\u003c/code\u003e character, the comments string, and a line separator are first written to the output stream. Thus, the \u003ccode\u003ecomments\u003c/code\u003e can serve as an identifying comment. Any one of a line feed (\u0027\\n\u0027), a carriage return (\u0027\\r\u0027), or a carriage return followed immediately by a line feed in comments is replaced by a line separator generated by the \u003ccode\u003eWriter\u003c/code\u003e and if the next character in comments is not character \u003ccode\u003e#\u003c/code\u003e or character \u003ccode\u003e!\u003c/code\u003e then an ASCII \u003ccode\u003e#\u003c/code\u003e is written out after that line separator. \u003cp\u003e Next, a comment line is always written, consisting of an ASCII \u003ccode\u003e#\u003c/code\u003e character, the current date and time (as if produced by the \u003ccode\u003etoString\u003c/code\u003e method of \u003ccode\u003eDate\u003c/code\u003e for the current time), and a line separator as generated by the \u003ccode\u003eWriter\u003c/code\u003e. \u003cp\u003e Then every entry in this \u003ccode\u003eProperties\u003c/code\u003e table is written out, one per line. For each entry the key string is written, then an ASCII \u003ccode\u003e\u003d\u003c/code\u003e, then the associated element string. For the key, all space characters are written with a preceding \u003ccode\u003e\\\u003c/code\u003e character.  For the element, leading space characters, but not embedded or trailing space characters, are written with a preceding \u003ccode\u003e\\\u003c/code\u003e character. The key and element characters \u003ccode\u003e#\u003c/code\u003e, \u003ccode\u003e!\u003c/code\u003e, \u003ccode\u003e\u003d\u003c/code\u003e, and \u003ccode\u003e:\u003c/code\u003e are written with a preceding backslash to ensure that they are properly loaded. \u003cp\u003e After the entries have been written, the output stream is flushed. The output stream remains open after this method returns. \u003cp\u003e\n * @param writer      an output character stream writer.\n * @param comments   a description of the property list.\n * @exception IOException if writing this property list to the specifiedoutput stream throws an \u003ctt\u003eIOException\u003c/tt\u003e.\n * @exception ClassCastException  if this \u003ccode\u003eProperties\u003c/code\u003e objectcontains any keys or values that are not \u003ccode\u003eStrings\u003c/code\u003e.\n * @exception NullPointerException  if \u003ccode\u003ewriter\u003c/code\u003e is null.\n * @since 1.6\n */\n","tf":{"freq":{"store":1,"suitabl":1,"lead":1,"open":1,"time":2,"trail":1,"carriag":2,"proper":1,"writer":5,"everi":1,"key":5,"follow":1,"argument":1,"element":4,"except":7,"specifiedoutput":1,"charact":13,"consist":1,"alway":1,"descript":1,"format":1,"embed":1,"reader":2,"cast":1,"separ":4,"pointer":1,"load":3,"properti":8,"comment":8,"output":5,"stream":6,"pair":1,"link":1,"one":2,"next":2,"line":8,"use":1,"identifi":1,"space":3,"date":2,"objectcontain":1,"ensur":1,"backslash":1,"associ":1,"written":10,"write":2,"current":2,"valu":1,"serv":1,"feed":2,"immedi":1,"thus":1,"entri":3,"list":3,"produc":1,"preced":3,"flush":1,"remain":1,"per":1,"tabl":4,"string":5,"replac":1,"generat":2,"method":4,"java":1,"first":1},"maxFreq":13,"totalTerms":167},"loc":6}