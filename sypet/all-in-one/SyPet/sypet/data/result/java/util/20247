{"id":20247,"className":"java.util.Arrays","methodName":"equals","signature":"\u003cjava.util.Arrays: boolean equals(double[],double[])\u003e","javadoc":"/** \n * Returns \u003ctt\u003etrue\u003c/tt\u003e if the two specified arrays of doubles are \u003ci\u003eequal\u003c/i\u003e to one another.  Two arrays are considered equal if both arrays contain the same number of elements, and all corresponding pairs of elements in the two arrays are equal.  In other words, two arrays are equal if they contain the same elements in the same order.  Also, two array references are considered equal if both are \u003ctt\u003enull\u003c/tt\u003e.\u003cp\u003e Two doubles \u003ctt\u003ed1\u003c/tt\u003e and \u003ctt\u003ed2\u003c/tt\u003e are considered equal if: \u003cpre\u003e    \u003ctt\u003enew Double(d1).equals(new Double(d2))\u003c/tt\u003e\u003c/pre\u003e (Unlike the \u003ctt\u003e\u003d\u003d\u003c/tt\u003e operator, this method considers \u003ctt\u003eNaN\u003c/tt\u003e equals to itself, and 0.0d unequal to -0.0d.)\n * @param a one array to be tested for equality\n * @param a2 the other array to be tested for equality\n * @return \u003ctt\u003etrue\u003c/tt\u003e if the two arrays are equal\n * @see Double#equals(Object)\n */\n","tf":{"freq":{"element":3,"test":2,"pair":1,"correspond":1,"one":2,"true":2,"equal":13,"number":1,"object":1,"anoth":1,"consid":4,"specifi":1,"two":7,"order":1,"oper":1,"refer":1,"pre":2,"contain":2,"unlik":1,"unequ":1,"method":1,"word":1,"also":1,"array":9},"maxFreq":13,"totalTerms":60},"loc":16}