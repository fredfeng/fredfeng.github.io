{"id":24206,"className":"java.util.prefs.Preferences","methodName":"getBoolean","signature":"\u003cjava.util.prefs.Preferences: boolean getBoolean(java.lang.String,boolean)\u003e","javadoc":"/** \n * Returns the boolean value represented by the string associated with the specified key in this preference node.  Valid strings are \u003ctt\u003e\"true\"\u003c/tt\u003e, which represents true, and \u003ctt\u003e\"false\"\u003c/tt\u003e, which represents false.  Case is ignored, so, for example, \u003ctt\u003e\"TRUE\"\u003c/tt\u003e and \u003ctt\u003e\"False\"\u003c/tt\u003e are also valid.  This method is intended for use in conjunction with  {@link #putBoolean}. \u003cp\u003eReturns the specified default if there is no value associated with the key, the backing store is inaccessible, or if the associated value is something other than \u003ctt\u003e\"true\"\u003c/tt\u003e or \u003ctt\u003e\"false\"\u003c/tt\u003e, ignoring case. \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and such a default exists and is accessible, it is used in preference to the specified default, unless the stored default is something other than \u003ctt\u003e\"true\"\u003c/tt\u003e or \u003ctt\u003e\"false\"\u003c/tt\u003e, ignoring case, in which case the specified default is used.\n * @param key key whose associated value is to be returned as a boolean.\n * @param def the value to be returned in the event that thispreference node has no value associated with \u003ctt\u003ekey\u003c/tt\u003e or the associated value cannot be interpreted as a boolean, or the backing store is inaccessible.\n * @return the boolean value represented by the string associated with\u003ctt\u003ekey\u003c/tt\u003e in this preference node, or \u003ctt\u003edef\u003c/tt\u003e if the associated value does not exist or cannot be interpreted as a boolean.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n * @throws NullPointerException if \u003ctt\u003ekey\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e.\n * @see #get(String,String)\n * @see #putBoolean(String,boolean)\n */\n","tf":{"freq":{"fals":5,"valid":2,"inaccess":2,"put":2,"store":4,"link":2,"state":1,"interpret":2,"use":3,"someth":2,"specifi":4,"def":2,"unless":1,"associ":8,"event":1,"valu":9,"ancestor":1,"exist":2,"key":7,"except":2,"thisprefer":1,"ignor":3,"support":1,"whose":1,"repres":4,"remov":1,"beenremov":1,"true":4,"back":2,"access":1,"illeg":1,"conjunct":1,"node":5,"string":6,"exampl":1,"pointer":1,"method":2,"prefer":3,"intend":1,"also":1},"maxFreq":9,"totalTerms":103},"loc":0}