{"id":23711,"className":"java.util.zip.ZipFile","methodName":"ZipFile","signature":"\u003cjava.util.zip.ZipFile: void ZipFile(java.lang.String)\u003e","javadoc":"/** \n * Opens a zip file for reading. \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckRead\u003c/code\u003e method is called with the \u003ccode\u003ename\u003c/code\u003e argument as its argument to ensure the read is allowed. \u003cp\u003eThe UTF-8  {@link java.nio.charset.Charset charset} is used todecode the entry names and comments.\n * @param name the name of the zip file\n * @throws ZipException if a ZIP format error has occurred\n * @throws IOException if an I/O error has occurred\n * @throws SecurityException if a security manager exists and its\u003ccode\u003echeckRead\u003c/code\u003e method doesn\u0027t allow read access to the file.\n * @see SecurityManager#checkRead(java.lang.String)\n */\n","tf":{"freq":{"call":1,"allow":2,"link":1,"use":1,"lang":1,"ensur":1,"open":1,"file":4,"name":4,"read":6,"exist":1,"argument":2,"zip":4,"except":3,"error":2,"check":3,"manag":3,"entri":1,"charset":3,"format":1,"access":1,"secur":4,"string":1,"todecod":1,"method":2,"java":2,"nio":1,"comment":1,"first":1,"occur":2},"maxFreq":6,"totalTerms":61},"loc":3}