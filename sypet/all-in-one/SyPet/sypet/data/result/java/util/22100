{"id":22100,"className":"java.util.Collections","methodName":"emptyListIterator","signature":"\u003cjava.util.Collections: java.util.ListIterator\u003cT\u003e emptyListIterator()\u003e","javadoc":"/** \n * Returns a list iterator that has no elements.  More precisely, \u003cul compact\u003e \u003cli\u003e {@link Iterator#hasNext hasNext} and {@link ListIterator#hasPrevious hasPrevious} always return {@code false}. \u003cli\u003e {@link Iterator#next next} and {@link ListIterator#previous previous} always throw {@link NoSuchElementException}. \u003cli\u003e {@link Iterator#remove remove} and {@link ListIterator#set set} always throw {@link IllegalStateException}. \u003cli\u003e {@link ListIterator#add add} always throws {@link UnsupportedOperationException}. \u003cli\u003e {@link ListIterator#nextIndex nextIndex} always returns{@code 0} .\u003cli\u003e {@link ListIterator#previousIndex previousIndex} alwaysreturns  {@code -1}. \u003c/ul\u003e \u003cp\u003eImplementations of this method are permitted, but not required, to return the same object from multiple invocations.\n * @return an empty list iterator\n * @since 1.7\n */\n","tf":{"freq":{"fals":1,"unsupport":1,"next":6,"link":12,"permit":1,"state":1,"alwaysreturn":1,"object":1,"add":2,"compact":1,"requir":1,"oper":1,"precis":1,"element":2,"except":3,"index":4,"multipl":1,"previous":6,"alway":5,"remov":2,"list":9,"illeg":1,"invoc":1,"empti":2,"method":1,"iter":12},"maxFreq":12,"totalTerms":79},"loc":3}