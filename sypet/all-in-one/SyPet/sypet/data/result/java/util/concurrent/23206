{"id":23206,"className":"java.util.concurrent.BlockingDeque","methodName":"offer","signature":"\u003cjava.util.concurrent.BlockingDeque: boolean offer(E)\u003e","javadoc":"/** \n * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning \u003ctt\u003etrue\u003c/tt\u003e upon success and \u003ctt\u003efalse\u003c/tt\u003e if no space is currently available.  When using a capacity-restricted deque, this method is generally preferable to the  {@link #add} method, which can fail toinsert an element only by throwing an exception. \u003cp\u003eThis method is equivalent to  {@link #offerLast(Object) offerLast}.\n * @param e the element to add\n * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque\n * @throws NullPointerException if the specified element is null\n * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque\n */\n","tf":{"freq":{"fals":1,"queue":1,"last":2,"link":2,"possibl":1,"use":1,"object":1,"add":2,"violat":1,"space":1,"specifi":3,"fail":1,"equival":1,"current":1,"immedi":1,"toinsert":1,"argument":1,"element":4,"except":4,"repres":1,"true":1,"prevent":1,"avail":1,"offer":3,"illeg":1,"without":1,"tail":1,"general":1,"restrict":2,"cast":1,"specifiedel":1,"pointer":1,"ad":2,"dequ":5,"elementprev":1,"word":1,"method":3,"properti":1,"capac":2,"prefer":1,"insert":1,"success":1,"upon":1},"maxFreq":5,"totalTerms":65},"loc":0}