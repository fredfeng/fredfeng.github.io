{"id":22714,"className":"java.util.concurrent.ThreadPoolExecutor","methodName":"allowCoreThreadTimeOut","signature":"\u003cjava.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)\u003e","javadoc":"/** \n * Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive. When false, core threads are never terminated due to lack of incoming tasks. When true, the same keep-alive policy applying to non-core threads applies also to core threads. To avoid continual thread replacement, the keep-alive time must be greater than zero when setting  {@code true}. This method should in general be called before the pool is actively used.\n * @param value {@code true} if should time out, else {@code false}\n * @throws IllegalArgumentException if value is {@code true}and the current keep-alive time is not greater than zero\n * @since 1.6\n */\n","tf":{"freq":{"need":1,"fals":2,"call":1,"greater":2,"govern":1,"allow":1,"use":1,"activ":1,"zero":2,"must":1,"whether":1,"avoid":1,"time":6,"pool":1,"thread":6,"current":1,"valu":2,"argument":1,"except":1,"may":1,"task":3,"true":4,"polici":2,"lack":1,"illeg":1,"els":1,"general":1,"continu":1,"non":1,"termin":2,"never":1,"appli":2,"aliv":4,"replac":2,"due":1,"method":1,"core":5,"within":1,"arriv":2,"also":1,"keep":4,"incom":1},"maxFreq":6,"totalTerms":76},"loc":9}