{"id":22370,"className":"java.util.concurrent.ArrayBlockingQueue","methodName":"ArrayBlockingQueue","signature":"\u003cjava.util.concurrent.ArrayBlockingQueue: void ArrayBlockingQueue(int,boolean,java.util.Collection)\u003e","javadoc":"/** \n * Creates an  {@code ArrayBlockingQueue} with the given (fixed)capacity, the specified access policy and initially containing the elements of the given collection, added in traversal order of the collection\u0027s iterator.\n * @param capacity the capacity of this queue\n * @param fair if {@code true} then queue accesses for threads blockedon insertion or removal, are processed in FIFO order; if  {@code false} the access order is unspecified.\n * @param c the collection of elements to initially contain\n * @throws IllegalArgumentException if {@code capacity} is less than{@code c.size()}, or less than 1.\n * @throws NullPointerException if the specified collection or anyof its elements are null\n */\n","tf":{"freq":{"fals":1,"unspecifi":1,"queue":4,"block":2,"specifi":2,"given":2,"order":3,"fix":1,"thread":1,"initi":2,"less":2,"argument":1,"travers":1,"element":3,"except":2,"creat":1,"remov":1,"true":1,"polici":1,"access":3,"illeg":1,"fair":1,"size":1,"process":1,"contain":2,"blockedon":1,"pointer":1,"ad":1,"anyof":1,"capac":4,"iter":1,"insert":1,"array":2,"collect":4},"maxFreq":4,"totalTerms":57},"loc":21}