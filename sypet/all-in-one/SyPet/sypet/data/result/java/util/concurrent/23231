{"id":23231,"className":"java.util.concurrent.LinkedBlockingQueue","methodName":"remainingCapacity","signature":"\u003cjava.util.concurrent.LinkedBlockingQueue: int remainingCapacity()\u003e","javadoc":"/** \n * Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this queue less the current  {@code size} of this queue.\u003cp\u003eNote that you \u003cem\u003ecannot\u003c/em\u003e always tell if an attempt to insert an element will succeed by inspecting  {@code remainingCapacity}because it may be the case that another thread is about to insert or remove an element.\n */\n","tf":{"freq":{"attempt":1,"queue":3,"memori":1,"accept":1,"constraint":1,"block":1,"anoth":1,"resourc":1,"thread":1,"current":1,"absenc":1,"tell":1,"initi":1,"less":1,"note":1,"element":3,"addit":1,"may":1,"succeed":1,"alway":2,"remov":1,"ideal":1,"number":1,"equal":1,"without":1,"size":1,"remain":2,"will":1,"capac":3,"insert":2,"inspect":1},"maxFreq":3,"totalTerms":40},"loc":3}