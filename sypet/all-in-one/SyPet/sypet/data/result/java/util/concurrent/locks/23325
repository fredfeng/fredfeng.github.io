{"id":23325,"className":"java.util.concurrent.locks.ReentrantLock","methodName":"newCondition","signature":"\u003cjava.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()\u003e","javadoc":"/** \n * Returns a  {@link Condition} instance for use with this{@link Lock} instance.\u003cp\u003eThe returned  {@link Condition} instance supports the sameusages as do the  {@link Object} monitor methods ({@link Object#wait() wait},  {@link Object#notify notify}, and  {@link Object#notifyAll notifyAll}) when used with the built-in monitor lock. \u003cul\u003e \u003cli\u003eIf this lock is not held when any of the  {@link Condition}{@linkplain Condition#await() waiting} or {@linkplain Condition#signal signalling} methods are called, then an {@link IllegalMonitorStateException} is thrown.\u003cli\u003eWhen the condition  {@linkplain Condition#await() waiting}methods are called the lock is released and, before they return, the lock is reacquired and the lock hold count restored to what it was when the method was called. \u003cli\u003eIf a thread is  {@linkplain Thread#interrupt interrupted}while waiting then the wait will terminate, an  {@link InterruptedException} will be thrown, and the thread\u0027sinterrupted status will be cleared. \u003cli\u003e Waiting threads are signalled in FIFO order. \u003cli\u003eThe ordering of lock reacquisition for threads returning from waiting methods is the same as for threads initially acquiring the lock, which is in the default case not specified, but for \u003cem\u003efair\u003c/em\u003e locks favors those threads that have been waiting the longest. \u003c/ul\u003e\n * @return the Condition object\n */\n","tf":{"freq":{"acquir":1,"linkplain":4,"call":3,"count":1,"link":10,"state":1,"use":2,"signal":3,"wait":9,"object":5,"longest":1,"specifi":1,"clear":1,"order":2,"releas":1,"thread":7,"initi":1,"sinterrupt":1,"built":1,"notifi":4,"condit":9,"held":1,"except":2,"thrown":2,"monitor":3,"support":1,"status":1,"hold":1,"lock":9,"fair":1,"illeg":1,"reacquir":1,"interrupt":3,"reacquisit":1,"instanc":3,"termin":1,"await":2,"sameusag":1,"will":3,"restor":1,"favor":1,"method":5},"maxFreq":10,"totalTerms":112},"loc":3}