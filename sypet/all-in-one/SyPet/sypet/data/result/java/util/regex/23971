{"id":23971,"className":"java.util.regex.Matcher","methodName":"useTransparentBounds","signature":"\u003cjava.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)\u003e","javadoc":"/** \n * Sets the transparency of region bounds for this matcher. \u003cp\u003e Invoking this method with an argument of \u003ctt\u003etrue\u003c/tt\u003e will set this matcher to use \u003ci\u003etransparent\u003c/i\u003e bounds. If the boolean argument is \u003ctt\u003efalse\u003c/tt\u003e, then \u003ci\u003eopaque\u003c/i\u003e bounds will be used. \u003cp\u003e Using transparent bounds, the boundaries of this matcher\u0027s region are transparent to lookahead, lookbehind, and boundary matching constructs. Those constructs can see beyond the boundaries of the region to see if a match is appropriate. \u003cp\u003e Using opaque bounds, the boundaries of this matcher\u0027s region are opaque to lookahead, lookbehind, and boundary matching constructs that may try to see beyond them. Those constructs cannot look past the boundaries so they will fail to match anything outside of the region. \u003cp\u003e By default, a matcher uses opaque bounds.\n * @param b a boolean indicating whether to use opaque or transparentregions\n * @return this matcher\n * @see java.util.regex.Matcher#hasTransparentBounds\n * @since 1.5\n */\n","tf":{"freq":{"fals":1,"region":5,"anyth":1,"use":7,"lookahead":2,"whether":1,"beyond":2,"opaqu":5,"transpar":6,"matcher":7,"indic":1,"fail":1,"argument":2,"look":1,"may":1,"regex":1,"invok":1,"true":1,"lookbehind":2,"past":1,"transparentregion":1,"outsid":1,"appropri":1,"will":3,"java":1,"method":1,"match":4,"construct":4,"boundari":6,"util":1,"bound":8},"maxFreq":8,"totalTerms":80},"loc":4}