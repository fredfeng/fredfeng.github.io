{"id":21414,"className":"java.util.WeakHashMap","methodName":"remove","signature":"\u003cjava.util.WeakHashMap: V remove(java.lang.Object)\u003e","javadoc":"/** \n * Removes the mapping for a key from this weak hash map if it is present. More formally, if this map contains a mapping from key \u003ctt\u003ek\u003c/tt\u003e to value \u003ctt\u003ev\u003c/tt\u003e such that \u003ccode\u003e(key\u003d\u003dnull ?  k\u003d\u003dnull : key.equals(k))\u003c/code\u003e, that mapping is removed.  (The map can contain at most one such mapping.) \u003cp\u003eReturns the value to which this map previously associated the key, or \u003ctt\u003enull\u003c/tt\u003e if the map contained no mapping for the key.  A return value of \u003ctt\u003enull\u003c/tt\u003e does not \u003ci\u003enecessarily\u003c/i\u003e indicate that the map contained no mapping for the key; it\u0027s also possible that the map explicitly mapped the key to \u003ctt\u003enull\u003c/tt\u003e. \u003cp\u003eThe map will not contain a mapping for the specified key once the call returns.\n * @param key key whose mapping is to be removed from the map\n * @return the previous value associated with \u003ctt\u003ekey\u003c/tt\u003e, or\u003ctt\u003enull\u003c/tt\u003e if there was no mapping for \u003ctt\u003ekey\u003c/tt\u003e\n */\n","tf":{"freq":{"call":1,"previous":2,"whose":1,"hash":1,"one":1,"remov":4,"possibl":1,"equal":1,"specifi":1,"present":1,"formal":1,"indic":1,"explicit":1,"associ":2,"contain":5,"will":1,"map":19,"weak":1,"valu":4,"necessarili":1,"also":1,"key":13},"maxFreq":19,"totalTerms":64},"loc":25}