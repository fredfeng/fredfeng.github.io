{"id":23350,"className":"java.util.concurrent.locks.LockSupport","methodName":"parkUntil","signature":"\u003cjava.util.concurrent.locks.LockSupport: void parkUntil(long)\u003e","javadoc":"/** \n * Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available. \u003cp\u003eIf the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: \u003cul\u003e \u003cli\u003eSome other thread invokes  {@link #unpark unpark} with thecurrent thread as the target; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}the current thread; or \u003cli\u003eThe specified deadline passes; or \u003cli\u003eThe call spuriously (that is, for no reason) returns. \u003c/ul\u003e \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the current time upon return.\n * @param deadline the absolute time, in milliseconds from the Epoch,to wait until\n */\n","tf":{"freq":{"reason":1,"permit":2,"wait":1,"specifi":2,"deadlin":3,"time":2,"becom":1,"thread":11,"report":1,"purpos":2,"happen":1,"place":1,"spurious":1,"status":1,"invok":1,"avail":2,"absolut":1,"disabl":2,"determin":1,"thecurr":1,"thing":1,"upon":1,"otherwis":1,"caller":2,"call":2,"linkplain":1,"link":1,"one":1,"schedul":2,"consum":1,"unless":1,"millisecond":1,"unpark":2,"current":4,"immedi":1,"four":1,"condit":1,"may":1,"park":2,"check":1,"epoch":1,"interrupt":3,"pass":1,"caus":2,"target":1,"exampl":1,"method":2,"first":1,"also":1,"lie":1,"dormant":1},"maxFreq":11,"totalTerms":81},"loc":3}