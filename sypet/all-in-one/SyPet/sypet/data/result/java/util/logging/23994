{"id":23994,"className":"java.util.logging.StreamHandler","methodName":"publish","signature":"\u003cjava.util.logging.StreamHandler: void publish(java.util.logging.LogRecord)\u003e","javadoc":"/** \n * Format and publish a \u003ctt\u003eLogRecord\u003c/tt\u003e. \u003cp\u003e The \u003ctt\u003eStreamHandler\u003c/tt\u003e first checks if there is an \u003ctt\u003eOutputStream\u003c/tt\u003e and if the given \u003ctt\u003eLogRecord\u003c/tt\u003e has at least the required log level. If not it silently returns.  If so, it calls any associated \u003ctt\u003eFilter\u003c/tt\u003e to check if the record should be published.  If so, it calls its \u003ctt\u003eFormatter\u003c/tt\u003e to format the record and then writes the result to the current output stream. \u003cp\u003e If this is the first \u003ctt\u003eLogRecord\u003c/tt\u003e to be written to a given \u003ctt\u003eOutputStream\u003c/tt\u003e, the \u003ctt\u003eFormatter\u003c/tt\u003e\u0027s \"head\" string is written to the stream before the \u003ctt\u003eLogRecord\u003c/tt\u003e is written.\n * @param record  description of the log event. A null record issilently ignored and is not published\n */\n","tf":{"freq":{"silent":1,"call":2,"result":1,"stream":5,"least":1,"formatt":2,"requir":1,"level":1,"given":2,"associ":1,"issil":1,"event":1,"written":3,"write":1,"current":1,"publish":4,"head":1,"ignor":1,"check":2,"descript":1,"format":2,"log":6,"record":8,"string":1,"output":3,"first":2,"filter":1,"handler":1},"maxFreq":8,"totalTerms":57},"loc":26}