{"id":23940,"className":"java.util.regex.Pattern","methodName":"matches","signature":"\u003cjava.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)\u003e","javadoc":"/** \n * Compiles the given regular expression and attempts to match the given input against it. \u003cp\u003e An invocation of this convenience method of the form \u003cblockquote\u003e\u003cpre\u003e Pattern.matches(regex, input);\u003c/pre\u003e\u003c/blockquote\u003e behaves in exactly the same way as the expression \u003cblockquote\u003e\u003cpre\u003e Pattern.compile(regex).matcher(input).matches()\u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e If a pattern is to be used multiple times, compiling it once and reusing it will be more efficient than invoking this method each time.  \u003c/p\u003e\n * @param regex The expression to be compiled\n * @param input The character sequence to be matched\n * @throws PatternSyntaxException If the expression\u0027s syntax is invalid\n */\n","tf":{"freq":{"attempt":1,"behav":1,"way":1,"use":1,"express":4,"reus":1,"time":2,"matcher":1,"invalid":1,"given":2,"sequenc":1,"blockquot":4,"exact":1,"effici":1,"conveni":1,"except":1,"form":1,"multipl":1,"charact":1,"regular":1,"invok":1,"regex":3,"invoc":1,"syntax":2,"input":4,"pattern":4,"pre":4,"will":1,"method":2,"match":5,"compil":4},"maxFreq":5,"totalTerms":59},"loc":5}