{"id":23966,"className":"java.util.regex.Matcher","methodName":"replaceFirst","signature":"\u003cjava.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)\u003e","javadoc":"/** \n * Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string. \u003cp\u003e This method first resets this matcher.  It then scans the input sequence looking for a match of the pattern.  Characters that are not part of the match are appended directly to the result string; the match is replaced in the result by the replacement string.  The replacement string may contain references to captured subsequences as in the  {@link #appendReplacement appendReplacement} method.\u003cp\u003eNote that backslashes (\u003ctt\u003e\\\u003c/tt\u003e) and dollar signs (\u003ctt\u003e$\u003c/tt\u003e) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string. Dollar signs may be treated as references to captured subsequences as described above, and backslashes are used to escape literal characters in the replacement string. \u003cp\u003e Given the regular expression \u003ctt\u003edog\u003c/tt\u003e, the input \u003ctt\u003e\"zzzdogzzzdogzzz\"\u003c/tt\u003e, and the replacement string \u003ctt\u003e\"cat\"\u003c/tt\u003e, an invocation of this method on a matcher for that expression would yield the string \u003ctt\u003e\"zzzcatzzzdogzzz\"\u003c/tt\u003e.  \u003c/p\u003e \u003cp\u003e Invoking this method changes this matcher\u0027s state.  If the matcher is to be used in further matching operations then it should first be reset.  \u003c/p\u003e\n * @param replacement The replacement string\n * @return  The string constructed by replacing the first matchingsubsequence by the replacement string, substituting captured subsequences as needed\n */\n","tf":{"freq":{"need":1,"yield":1,"substitut":1,"matcher":4,"given":2,"refer":2,"oper":1,"sequenc":2,"reset":2,"captur":3,"append":3,"liter":2,"charact":2,"invok":1,"describ":1,"invoc":1,"zzzdogzzzdogzzz":1,"sign":2,"input":3,"contain":1,"match":5,"treat":2,"result":3,"cat":1,"zzzcatzzzdogzzz":1,"matchingsubsequ":1,"link":1,"state":1,"use":2,"express":2,"escap":1,"backslash":2,"dollar":2,"subsequ":4,"note":1,"direct":1,"look":1,"may":3,"regular":1,"differ":1,"caus":1,"pattern":2,"replac":16,"string":12,"scan":1,"method":4,"chang":1,"construct":1,"part":1,"dog":1,"first":5},"maxFreq":16,"totalTerms":117},"loc":11}