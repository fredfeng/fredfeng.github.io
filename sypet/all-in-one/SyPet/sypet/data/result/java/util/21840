{"id":21840,"className":"java.util.Collections","methodName":"max","signature":"\u003cjava.util.Collections: T max(java.util.Collection)\u003e","javadoc":"/** \n * Returns the maximum element of the given collection, according to the \u003ci\u003enatural ordering\u003c/i\u003e of its elements.  All elements in the collection must implement the \u003ctt\u003eComparable\u003c/tt\u003e interface. Furthermore, all elements in the collection must be \u003ci\u003emutually comparable\u003c/i\u003e (that is, \u003ctt\u003ee1.compareTo(e2)\u003c/tt\u003e must not throw a \u003ctt\u003eClassCastException\u003c/tt\u003e for any elements \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e in the collection).\u003cp\u003e This method iterates over the entire collection, hence it requires time proportional to the size of the collection.\n * @param coll the collection whose maximum element is to be determined.\n * @return the maximum element of the given collection, accordingto the \u003ci\u003enatural ordering\u003c/i\u003e of its elements.\n * @throws ClassCastException if the collection contains elements that arenot \u003ci\u003emutually comparable\u003c/i\u003e (for example, strings and integers).\n * @throws NoSuchElementException if the collection is empty.\n * @see Comparable\n */\n","tf":{"freq":{"furthermor":1,"proport":1,"natur":2,"must":3,"time":1,"requir":1,"order":2,"given":2,"coll":1,"element":10,"except":3,"henc":1,"max":1,"whose":1,"accordingto":1,"accord":1,"empti":1,"size":1,"mutual":2,"cast":2,"maximum":3,"string":1,"contain":1,"determin":1,"exampl":1,"method":1,"arenot":1,"iter":1,"integ":1,"compar":5,"entir":1,"collect":10},"maxFreq":10,"totalTerms":65},"loc":11}