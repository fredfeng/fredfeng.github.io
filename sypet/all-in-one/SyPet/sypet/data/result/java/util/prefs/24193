{"id":24193,"className":"java.util.prefs.Preferences","methodName":"userNodeForPackage","signature":"\u003cjava.util.prefs.Preferences: java.util.prefs.Preferences userNodeForPackage(java.lang.Class)\u003e","javadoc":"/** \n * Returns the preference node from the calling user\u0027s preference tree that is associated (by convention) with the specified class\u0027s package. The convention is as follows: the absolute path name of the node is the fully qualified package name, preceded by a slash (\u003ctt\u003e\u0027/\u0027\u003c/tt\u003e), and with each period (\u003ctt\u003e\u0027.\u0027\u003c/tt\u003e) replaced by a slash.  For example the absolute path name of the node associated with the class \u003ctt\u003ecom.acme.widget.Foo\u003c/tt\u003e is \u003ctt\u003e/com/acme/widget\u003c/tt\u003e. \u003cp\u003eThis convention does not apply to the unnamed package, whose associated preference node is \u003ctt\u003e\u0026lt;unnamed\u0026gt;\u003c/tt\u003e.  This node is not intended for long term use, but for convenience in the early development of programs that do not yet belong to a package, and for \"throwaway\" programs.  \u003ci\u003eValuable data should not be stored at this node as it is shared by all programs that use it.\u003c/i\u003e \u003cp\u003eA class \u003ctt\u003eFoo\u003c/tt\u003e wishing to access preferences pertaining to its package can obtain a preference node as follows: \u003cpre\u003e static Preferences prefs \u003d Preferences.userNodeForPackage(Foo.class); \u003c/pre\u003e This idiom obviates the need for using a string to describe the preferences node and decreases the likelihood of a run-time failure. (If the class name is misspelled, it will typically result in a compile-time error.) \u003cp\u003eInvoking this method will result in the creation of the returned node and its ancestors if they do not already exist.  If the returned node did not exist prior to this call, this node and any ancestors that were created by this call are not guaranteed to become permanent until the \u003ctt\u003eflush\u003c/tt\u003e method is called on the returned node (or one of its ancestors or descendants).\n * @param c the class for whose package a user preference node is desired.\n * @return the user preference node associated with the package of which\u003ctt\u003ec\u003c/tt\u003e is a member.\n * @throws NullPointerException if \u003ctt\u003ec\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e.\n * @throws SecurityException if a security manager is present andit denies \u003ctt\u003eRuntimePermission(\"preferences\")\u003c/tt\u003e.\n * @see RuntimePermission\n */\n","tf":{"freq":{"need":1,"com":2,"decreas":1,"belong":1,"store":1,"wish":1,"valuabl":1,"idiom":1,"foo":3,"unnam":2,"andit":1,"desir":1,"earli":1,"prior":1,"specifi":1,"time":2,"becom":1,"tree":1,"permiss":2,"deni":1,"follow":2,"except":2,"creat":1,"whose":2,"invok":1,"runtim":2,"describ":1,"absolut":2,"period":1,"present":1,"appli":1,"node":16,"obtain":1,"program":3,"will":2,"pointer":1,"prefer":11,"obviat":1,"pref":1,"compil":1,"creation":1,"result":2,"call":4,"convent":3,"one":1,"typic":1,"data":1,"use":3,"pertain":1,"run":1,"likelihood":1,"share":1,"associ":4,"name":4,"path":2,"develop":1,"exist":2,"ancestor":3,"widget":2,"conveni":1,"member":1,"slash":2,"error":1,"misspel":1,"acm":2,"failur":1,"manag":1,"guarante":1,"fulli":1,"access":1,"preced":1,"secur":2,"flush":1,"term":1,"pre":2,"string":1,"replac":1,"exampl":1,"alreadi":1,"method":2,"descend":1,"intend":1,"throwaway":1,"user":5,"qualifi":1,"perman":1,"yet":1},"maxFreq":16,"totalTerms":154},"loc":3}