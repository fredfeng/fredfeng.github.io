{"id":24217,"className":"java.util.prefs.Preferences","methodName":"nodeExists","signature":"\u003cjava.util.prefs.Preferences: boolean nodeExists(java.lang.String)\u003e","javadoc":"/** \n * Returns true if the named preference node exists in the same tree as this node.  Relative path names (which do not begin with the slash character \u003ctt\u003e(\u0027/\u0027)\u003c/tt\u003e) are interpreted relative to this preference node. \u003cp\u003eIf this node (or an ancestor) has already been removed with the {@link #removeNode()} method, it \u003ci\u003eis\u003c/i\u003e legal to invoke this method,but only with the path name \u003ctt\u003e\"\"\u003c/tt\u003e; the invocation will return \u003ctt\u003efalse\u003c/tt\u003e.  Thus, the idiom \u003ctt\u003ep.nodeExists(\"\")\u003c/tt\u003e may be used to test whether \u003ctt\u003ep\u003c/tt\u003e has been removed.\n * @param pathName the path name of the node whose existenceis to be checked.\n * @return true if the specified node exists.\n * @throws BackingStoreException if this operation cannot be completeddue to a failure in the backing store, or inability to communicate with it.\n * @throws IllegalArgumentException if the path name is invalid (i.e.,it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long).\n * @throws NullPointerException if path name is \u003ctt\u003enull\u003c/tt\u003e.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method and\u003ctt\u003epathName\u003c/tt\u003e is not the empty string (\u003ctt\u003e\"\"\u003c/tt\u003e).\n */\n","tf":{"freq":{"fals":1,"store":2,"test":1,"idiom":1,"whether":1,"specifi":1,"tree":1,"invalid":1,"oper":1,"relat":2,"argument":1,"except":4,"multipl":1,"charact":4,"whose":1,"invok":1,"beenremov":1,"remov":4,"invoc":1,"consecut":1,"node":11,"contain":1,"will":1,"pointer":1,"prefer":2,"legal":1,"completeddu":1,"link":2,"one":1,"state":1,"interpret":1,"use":1,"name":8,"path":7,"ancestor":2,"exist":4,"existencei":1,"end":1,"inabl":1,"may":1,"slash":3,"check":1,"thus":1,"failur":1,"true":2,"back":2,"illeg":2,"empti":1,"begin":1,"communic":1,"string":1,"method":3,"alreadi":1},"maxFreq":11,"totalTerms":100},"loc":0}