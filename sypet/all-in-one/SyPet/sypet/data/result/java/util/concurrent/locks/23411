{"id":23411,"className":"java.util.concurrent.locks.AbstractQueuedSynchronizer","methodName":"hasWaiters","signature":"\u003cjava.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\u003e","javadoc":"/** \n * Queries whether any threads are waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, a \u003ctt\u003etrue\u003c/tt\u003e return does not guarantee that a future \u003ctt\u003esignal\u003c/tt\u003e will awaken any threads.  This method is designed primarily for use in monitoring of the system state.\n * @param condition the condition\n * @return \u003ctt\u003etrue\u003c/tt\u003e if there are any waiting threads\n * @throws IllegalMonitorStateException if exclusive synchronizationis not held\n * @throws IllegalArgumentException if the given condition isnot associated with this synchronizer\n * @throws NullPointerException if the condition is null\n */\n","tf":{"freq":{"synchronizationi":1,"state":2,"use":1,"signal":1,"wait":2,"whether":1,"primarili":1,"time":1,"isnot":1,"given":2,"associ":2,"thread":3,"exclus":1,"waiter":1,"note":1,"argument":1,"condit":5,"awaken":1,"held":1,"except":3,"may":1,"monitor":2,"futur":1,"guarante":1,"true":2,"illeg":2,"interrupt":1,"queri":1,"system":1,"will":1,"pointer":1,"method":1,"timeout":1,"design":1,"occur":1},"maxFreq":5,"totalTerms":50},"loc":5}