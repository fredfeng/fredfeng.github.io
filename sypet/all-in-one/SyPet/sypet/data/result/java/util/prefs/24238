{"id":24238,"className":"java.util.prefs.AbstractPreferences","methodName":"get","signature":"\u003cjava.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Implements the \u003ctt\u003eget\u003c/tt\u003e method as per the specification in {@link Preferences#get(String,String)}. \u003cp\u003eThis implementation first checks to see if \u003ctt\u003ekey\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e throwing a \u003ctt\u003eNullPointerException\u003c/tt\u003e if this is the case.  Then it obtains this preference node\u0027s lock, checks that the node has not been removed, invokes  {@link #getSpi(String)}, and returns the result, unless the \u003ctt\u003egetSpi\u003c/tt\u003e invocation returns \u003ctt\u003enull\u003c/tt\u003e or throws an exception, in which case this invocation returns \u003ctt\u003edef\u003c/tt\u003e.\n * @param key key whose associated value is to be returned.\n * @param def the value to be returned in the event that thispreference node has no value associated with \u003ctt\u003ekey\u003c/tt\u003e.\n * @return the value associated with \u003ctt\u003ekey\u003c/tt\u003e, or \u003ctt\u003edef\u003c/tt\u003eif no value is associated with \u003ctt\u003ekey\u003c/tt\u003e.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n * @throws NullPointerException if key is \u003ctt\u003enull\u003c/tt\u003e.  (A\u003ctt\u003enull\u003c/tt\u003e default \u003ci\u003eis\u003c/i\u003e permitted.)\n */\n","tf":{"freq":{"result":1,"permit":1,"link":3,"state":1,"unless":1,"def":3,"associ":4,"event":1,"spi":2,"valu":5,"ancestor":1,"key":7,"thisprefer":1,"except":4,"check":2,"whose":1,"invok":1,"beenremov":1,"lock":1,"remov":2,"illeg":1,"invoc":2,"obtain":1,"specif":1,"node":5,"per":1,"string":3,"pointer":2,"method":2,"prefer":2,"first":1},"maxFreq":7,"totalTerms":64},"loc":16}