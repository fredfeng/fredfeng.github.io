{"id":24224,"className":"java.util.prefs.Preferences","methodName":"sync","signature":"\u003cjava.util.prefs.Preferences: void sync()\u003e","javadoc":"/** \n * Ensures that future reads from this preference node and its descendants reflect any changes that were committed to the persistent store (from any VM) prior to the \u003ctt\u003esync\u003c/tt\u003e invocation.  As a side-effect, forces any changes in the contents of this preference node and its descendants to the persistent store, as if the \u003ctt\u003eflush\u003c/tt\u003e method had been invoked on this node.\n * @throws BackingStoreException if this operation cannot be completeddue to a failure in the backing store, or inability to communicate with it.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n * @see #flush()\n */\n","tf":{"freq":{"store":4,"completeddu":1,"link":1,"state":1,"persist":2,"ensur":1,"prior":1,"commit":1,"sync":2,"side":1,"oper":1,"read":1,"ancestor":1,"forc":1,"inabl":1,"except":2,"futur":1,"failur":1,"invok":1,"remov":1,"beenremov":1,"back":2,"illeg":1,"invoc":1,"content":1,"node":5,"flush":2,"communic":1,"effect":1,"method":2,"chang":2,"descend":2,"prefer":2,"reflect":1},"maxFreq":5,"totalTerms":50},"loc":0}