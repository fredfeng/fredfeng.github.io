{"id":21732,"className":"java.util.Map","methodName":"put","signature":"\u003cjava.util.Map: V put(K,V)\u003e","javadoc":"/** \n * Associates the specified value with the specified key in this map (optional operation).  If the map previously contained a mapping for the key, the old value is replaced by the specified value.  (A map \u003ctt\u003em\u003c/tt\u003e is said to contain a mapping for a key \u003ctt\u003ek\u003c/tt\u003e if and only if  {@link #containsKey(Object) m.containsKey(k)} would return\u003ctt\u003etrue\u003c/tt\u003e.)\n * @param key key with which the specified value is to be associated\n * @param value value to be associated with the specified key\n * @return the previous value associated with \u003ctt\u003ekey\u003c/tt\u003e, or\u003ctt\u003enull\u003c/tt\u003e if there was no mapping for \u003ctt\u003ekey\u003c/tt\u003e. (A \u003ctt\u003enull\u003c/tt\u003e return can also indicate that the map previously associated \u003ctt\u003enull\u003c/tt\u003e with \u003ctt\u003ekey\u003c/tt\u003e, if the implementation supports \u003ctt\u003enull\u003c/tt\u003e values.)\n * @throws UnsupportedOperationException if the \u003ctt\u003eput\u003c/tt\u003e operationis not supported by this map\n * @throws ClassCastException if the class of the specified key or valueprevents it from being stored in this map\n * @throws NullPointerException if the specified key or value is nulland this map does not permit null keys or values\n * @throws IllegalArgumentException if some property of the specified keyor value prevents it from being stored in this map\n */\n","tf":{"freq":{"old":1,"unsupport":1,"put":2,"said":1,"store":2,"permit":1,"link":1,"nulland":1,"object":1,"specifi":8,"indic":1,"oper":2,"associ":5,"map":11,"valu":11,"option":1,"key":14,"argument":1,"except":4,"support":2,"keyor":1,"previous":3,"true":1,"prevent":1,"valueprev":1,"illeg":1,"cast":1,"operationi":1,"replac":1,"contain":4,"pointer":1,"properti":1,"also":1},"maxFreq":14,"totalTerms":89},"loc":0}