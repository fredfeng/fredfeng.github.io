{"id":22200,"className":"java.util.Collections","methodName":"asLifoQueue","signature":"\u003cjava.util.Collections: java.util.Queue\u003cT\u003e asLifoQueue(java.util.Deque)\u003e","javadoc":"/** \n * Returns a view of a  {@link Deque} as a Last-in-first-out (Lifo){@link Queue}. Method \u003ctt\u003eadd\u003c/tt\u003e is mapped to \u003ctt\u003epush\u003c/tt\u003e, \u003ctt\u003eremove\u003c/tt\u003e is mapped to \u003ctt\u003epop\u003c/tt\u003e and so on. This view can be useful when you would like to use a method requiring a \u003ctt\u003eQueue\u003c/tt\u003e but you need Lifo ordering. \u003cp\u003eEach method invocation on the queue returned by this method results in exactly one method invocation on the backing deque, with one exception.  The  {@link Queue#addAll addAll} method isimplemented as a sequence of  {@link Deque#addFirst addFirst}invocations on the backing deque.\n * @param deque the deque\n * @return the queue\n * @since  1.6\n */\n","tf":{"freq":{"need":1,"queue":6,"result":1,"last":1,"link":4,"one":2,"use":2,"pop":1,"add":5,"push":1,"requir":1,"order":1,"sequenc":1,"exact":1,"map":2,"except":1,"isimpl":1,"remov":1,"back":2,"like":1,"invoc":3,"lifo":3,"dequ":6,"method":6,"view":2,"first":3},"maxFreq":6,"totalTerms":59},"loc":3}