{"id":20641,"className":"java.util.IdentityHashMap","methodName":"hashCode","signature":"\u003cjava.util.IdentityHashMap: int hashCode()\u003e","javadoc":"/** \n * Returns the hash code value for this map.  The hash code of a map is defined to be the sum of the hash codes of each entry in the map\u0027s \u003ctt\u003eentrySet()\u003c/tt\u003e view.  This ensures that \u003ctt\u003em1.equals(m2)\u003c/tt\u003e implies that \u003ctt\u003em1.hashCode()\u003d\u003dm2.hashCode()\u003c/tt\u003e for any two \u003ctt\u003eIdentityHashMap\u003c/tt\u003e instances \u003ctt\u003em1\u003c/tt\u003e and \u003ctt\u003em2\u003c/tt\u003e, as required by the general contract of  {@link Object#hashCode}. \u003cp\u003e\u003cb\u003eOwing to the reference-equality-based semantics of the \u003ctt\u003eMap.Entry\u003c/tt\u003e instances in the set returned by this map\u0027s \u003ctt\u003eentrySet\u003c/tt\u003e method, it is possible that the contractual requirement of \u003ctt\u003eObject.hashCode\u003c/tt\u003e mentioned in the previous paragraph will be violated if one of the two objects being compared is an \u003ctt\u003eIdentityHashMap\u003c/tt\u003e instance and the other is a normal map.\u003c/b\u003e\n * @return the hash code value for this map\n * @see Object#equals(Object)\n * @see #equals(Object)\n */\n","tf":{"freq":{"defin":1,"paragraph":1,"normal":1,"one":1,"link":1,"sum":1,"possibl":1,"object":6,"violat":1,"ensur":1,"owe":1,"requir":2,"ident":2,"refer":1,"semant":1,"contractu":1,"impli":1,"map":9,"mention":1,"valu":2,"previous":1,"hash":11,"contract":1,"entri":4,"equal":4,"general":1,"instanc":3,"two":2,"will":1,"base":1,"method":1,"view":1,"compar":1},"maxFreq":11,"totalTerms":68},"loc":13}