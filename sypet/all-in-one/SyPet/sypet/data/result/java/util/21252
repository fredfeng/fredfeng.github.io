{"id":21252,"className":"java.util.Random","methodName":"nextLong","signature":"\u003cjava.util.Random: long nextLong()\u003e","javadoc":"/** \n * Returns the next pseudorandom, uniformly distributed  {@code long}value from this random number generator\u0027s sequence. The general contract of  {@code nextLong} is that one {@code long} value ispseudorandomly generated and returned. \u003cp\u003eThe method  {@code nextLong} is implemented by class {@code Random}as if by: \u003cpre\u003e  {@code}public long nextLong()  return ((long)next(32) \u003c\u003c 32) + next(32); }}\u003c/pre\u003e Because class  {@code Random} uses a seed with only 48 bits,this algorithm will not return all possible  {@code long} values.\n * @return the next pseudorandom, uniformly distributed {@code long}value from this random number generator\u0027s sequence\n */\n","tf":{"freq":{"uniform":2,"contract":1,"seed":1,"next":8,"one":1,"distribut":2,"random":4,"possibl":1,"use":1,"number":2,"general":1,"algorithm":1,"bit":1,"pre":2,"ispseudorandom":1,"sequenc":2,"generat":3,"will":1,"method":1,"valu":4,"pseudorandom":2},"maxFreq":8,"totalTerms":42},"loc":4}