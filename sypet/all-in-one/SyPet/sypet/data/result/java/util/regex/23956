{"id":23956,"className":"java.util.regex.Matcher","methodName":"group","signature":"\u003cjava.util.regex.Matcher: java.lang.String group(java.lang.String)\u003e","javadoc":"/** \n * Returns the input subsequence captured by the given \u003ca href\u003d\"Pattern.html#groupname\"\u003enamed-capturing group\u003c/a\u003e during the previous match operation. \u003cp\u003e If the match was successful but the group specified failed to match any part of the input sequence, then \u003ctt\u003enull\u003c/tt\u003e is returned. Note that some groups, for example \u003ctt\u003e(a*)\u003c/tt\u003e, match the empty string. This method will return the empty string when such a group successfully matches the empty string in the input.  \u003c/p\u003e\n * @param name The name of a named-capturing group in this matcher\u0027s pattern\n * @return  The (possibly empty) subsequence captured by the named groupduring the previous match, or \u003ctt\u003enull\u003c/tt\u003e if the group failed to match part of the input\n * @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed\n * @throws IllegalArgumentException If there is no capturing group in the pattern with the given name\n */\n","tf":{"freq":{"attempt":1,"state":1,"possibl":1,"specifi":1,"matcher":1,"given":2,"fail":3,"oper":2,"sequenc":1,"name":6,"captur":5,"subsequ":2,"href":1,"note":1,"argument":1,"except":2,"previous":3,"illeg":2,"empti":4,"input":4,"pattern":3,"string":3,"exampl":1,"will":1,"groupdur":1,"groupnam":1,"html":1,"method":1,"match":9,"group":8,"part":2,"success":2,"yet":1},"maxFreq":9,"totalTerms":78},"loc":12}