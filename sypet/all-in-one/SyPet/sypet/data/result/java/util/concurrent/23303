{"id":23303,"className":"java.util.concurrent.Phaser","methodName":"arriveAndAwaitAdvance","signature":"\u003cjava.util.concurrent.Phaser: int arriveAndAwaitAdvance()\u003e","javadoc":"/** \n * Arrives at this phaser and awaits others. Equivalent in effect to  {@code awaitAdvance(arrive())}.  If you need to await with interruption or timeout, you can arrange this with an analogous construction using one of the other forms of the  {@code awaitAdvance} method.  If instead you need to deregister uponarrival, use  {@code awaitAdvance(arriveAndDeregister())}. \u003cp\u003eIt is a usage error for an unregistered party to invoke this method.  However, this error may result in an  {@code IllegalStateException} only upon some subsequent operation onthis phaser, if ever.\n * @return the arrival phase number, or the (negative){@linkplain #getPhase() current phase} if terminated\n * @throws IllegalStateException if not terminated and the numberof unarrived parties would become negative\n */\n","tf":{"freq":{"need":2,"linkplain":1,"result":1,"one":1,"state":2,"uponarriv":1,"use":2,"analog":1,"numberof":1,"becom":1,"oper":1,"equival":1,"deregist":2,"current":1,"subsequ":1,"howev":1,"unarriv":1,"except":2,"may":1,"form":1,"error":2,"invok":1,"number":1,"onthi":1,"illeg":2,"arrang":1,"interrupt":1,"termin":2,"effect":1,"await":6,"advanc":4,"phaser":2,"instead":1,"negat":2,"method":2,"construct":1,"arriv":5,"usag":1,"unregist":1,"phase":3,"ever":1,"timeout":1,"upon":1,"parti":2},"maxFreq":6,"totalTerms":70},"loc":37}