{"id":22625,"className":"java.util.concurrent.ConcurrentHashMap","methodName":"entrySet","signature":"\u003cjava.util.concurrent.ConcurrentHashMap: java.util.Set\u003cjava.util.Map.Entry\u003cK,V\u003e\u003e entrySet()\u003e","javadoc":"/** \n * Returns a  {@link Set} view of the mappings contained in this map.The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  The set supports element removal, which removes the corresponding mapping from the map, via the \u003ctt\u003eIterator.remove\u003c/tt\u003e, \u003ctt\u003eSet.remove\u003c/tt\u003e, \u003ctt\u003eremoveAll\u003c/tt\u003e, \u003ctt\u003eretainAll\u003c/tt\u003e, and \u003ctt\u003eclear\u003c/tt\u003e operations.  It does not support the \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e operations. \u003cp\u003eThe view\u0027s \u003ctt\u003eiterator\u003c/tt\u003e is a \"weakly consistent\" iterator that will never throw  {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.\n */\n","tf":{"freq":{"via":1,"vice":1,"concurr":1,"correspond":1,"link":2,"add":2,"clear":1,"oper":2,"map":6,"subsequ":1,"exist":1,"travers":1,"versa":1,"element":2,"may":1,"except":1,"support":2,"consist":1,"guarante":2,"entri":1,"remov":5,"back":1,"never":1,"contain":1,"will":1,"retain":1,"weak":1,"construct":2,"chang":1,"view":2,"iter":4,"modif":2,"reflect":2,"upon":1},"maxFreq":6,"totalTerms":56},"loc":4}