{"id":23442,"className":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","methodName":"getWaitQueueLength","signature":"\u003cjava.util.concurrent.locks.AbstractQueuedLongSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject)\u003e","javadoc":"/** \n * Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters.  This method is designed for use in monitoring of the system state, not for synchronization control.\n * @param condition the condition\n * @return the estimated number of waiting threads\n * @throws IllegalMonitorStateException if exclusive synchronizationis not held\n * @throws IllegalArgumentException if the given condition isnot associated with this synchronizer\n * @throws NullPointerException if the condition is null\n */\n","tf":{"freq":{"queue":1,"synchronizationi":1,"state":2,"use":1,"wait":3,"upper":1,"estim":3,"time":1,"isnot":1,"given":2,"associ":2,"thread":2,"length":1,"serv":1,"exclus":1,"waiter":1,"note":1,"argument":1,"condit":5,"held":1,"control":1,"except":3,"may":1,"monitor":2,"number":3,"illeg":2,"interrupt":1,"system":1,"pointer":1,"actual":1,"method":1,"timeout":1,"bound":1,"design":1,"occur":1},"maxFreq":5,"totalTerms":53},"loc":5}