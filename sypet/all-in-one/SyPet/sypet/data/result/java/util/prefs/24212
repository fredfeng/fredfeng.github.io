{"id":24212,"className":"java.util.prefs.Preferences","methodName":"getByteArray","signature":"\u003cjava.util.prefs.Preferences: byte[] getByteArray(java.lang.String,byte[])\u003e","javadoc":"/** \n * Returns the byte array value represented by the string associated with the specified key in this preference node.  Valid strings are \u003ci\u003eBase64\u003c/i\u003e encoded binary data, as defined in \u003ca href\u003dhttp://www.ietf.org/rfc/rfc2045.txt\u003eRFC 2045\u003c/a\u003e, Section 6.8, with one minor change: the string must consist solely of characters from the \u003ci\u003eBase64 Alphabet\u003c/i\u003e; no newline characters or extraneous characters are permitted.  This method is intended for use in conjunction with  {@link #putByteArray}. \u003cp\u003eReturns the specified default if there is no value associated with the key, the backing store is inaccessible, or if the associated value is not a valid Base64 encoded byte array (as defined above). \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and such a default exists and is accessible, it is used in preference to the specified default, unless the stored default is not a valid Base64 encoded byte array (as defined above), in which case the specified default is used.\n * @param key key whose associated value is to be returned as a byte array.\n * @param def the value to be returned in the event that thispreference node has no value associated with \u003ctt\u003ekey\u003c/tt\u003e or the associated value cannot be interpreted as a byte array, or the backing store is inaccessible.\n * @return the byte array value represented by the string associated with\u003ctt\u003ekey\u003c/tt\u003e in this preference node, or \u003ctt\u003edef\u003c/tt\u003e if the associated value does not exist or cannot be interpreted as a byte array.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n * @throws NullPointerException if \u003ctt\u003ekey\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e.  (A\u003ctt\u003enull\u003c/tt\u003e value for \u003ctt\u003edef\u003c/tt\u003e \u003ci\u003eis\u003c/i\u003e permitted.)\n * @see #get(String,String)\n * @see #putByteArray(String,byte[])\n */\n","tf":{"freq":{"inaccess":2,"store":4,"minor":1,"permit":2,"must":1,"specifi":4,"extran":1,"event":1,"href":1,"key":7,"sole":1,"except":2,"support":1,"consist":1,"charact":3,"whose":1,"remov":1,"beenremov":1,"conjunct":1,"node":5,"encod":3,"http":1,"pointer":1,"alphabet":1,"prefer":3,"array":10,"defin":3,"valid":3,"binari":1,"put":2,"one":1,"link":2,"state":1,"interpret":2,"www":1,"data":1,"use":3,"newlin":1,"org":1,"txt":1,"rfc":2,"def":3,"unless":1,"associ":8,"valu":10,"ancestor":1,"exist":2,"thisprefer":1,"repres":2,"back":2,"access":1,"illeg":1,"section":1,"ietf":1,"string":7,"base":4,"method":2,"chang":1,"intend":1},"maxFreq":10,"totalTerms":134},"loc":0}