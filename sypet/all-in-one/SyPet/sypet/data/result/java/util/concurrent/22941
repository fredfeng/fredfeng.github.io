{"id":22941,"className":"java.util.concurrent.ForkJoinTask","methodName":"get","signature":"\u003cjava.util.concurrent.ForkJoinTask: V get(long,java.util.concurrent.TimeUnit)\u003e","javadoc":"/** \n * Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.\n * @param timeout the maximum time to wait\n * @param unit the time unit of the timeout argument\n * @return the computed result\n * @throws CancellationException if the computation was cancelled\n * @throws ExecutionException if the computation threw anexception\n * @throws InterruptedException if the current thread is not amember of a ForkJoinPool and was interrupted while waiting\n * @throws TimeoutException if the wait timed out\n */\n","tf":{"freq":{"result":2,"cancel":2,"wait":4,"necessari":1,"time":4,"given":1,"pool":1,"thread":1,"current":1,"amemb":1,"complet":1,"argument":1,"except":4,"fork":1,"avail":1,"join":1,"interrupt":2,"unit":2,"threw":1,"anexcept":1,"maximum":1,"retriev":1,"comput":4,"execut":1,"timeout":3},"maxFreq":4,"totalTerms":43},"loc":37}