{"id":24083,"className":"java.util.logging.Logger","methodName":"getLogger","signature":"\u003cjava.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Find or create a logger for a named subsystem.  If a logger has already been created with the given name it is returned.  Otherwise a new logger is created. \u003cp\u003e If a new logger is created its log level will be configured based on the LogManager and it will configured to also send logging output to its parent\u0027s Handlers.  It will be registered in the LogManager global namespace. \u003cp\u003e Note: The LogManager may only retain a weak reference to the newly created Logger. It is important to understand that a previously created Logger with the given name may be garbage collected at any time if there is no strong reference to the Logger. In particular, this means that two back-to-back calls like {@code getLogger(\"MyLogger\", ...).log(...)} may use different Loggerobjects named \"MyLogger\" if there is no strong reference to the Logger named \"MyLogger\" elsewhere in the program. \u003cp\u003e If the named Logger already exists and does not yet have a localization resource bundle then the given resource bundle name is used.  If the named Logger already exists and has a different resource bundle name then an IllegalArgumentException is thrown. \u003cp\u003e\n * @param name    A name for the logger.  This shouldbe a dot-separated name and should normally be based on the package name or class name of the subsystem, such as java.net or javax.swing\n * @param resourceBundleName  name of ResourceBundle to be used for localizingmessages for this logger. May be \u003cCODE\u003enull\u003c/CODE\u003e if none of the messages require localization.\n * @return a suitable Logger\n * @throws MissingResourceException if the resourceBundleName is non-null andno corresponding resource can be found.\n * @throws IllegalArgumentException if the Logger already exists and usesa different resource bundle name.\n * @throws NullPointerException if the name is null.\n */\n","tf":{"freq":{"send":1,"understand":1,"suitabl":1,"normal":1,"particular":1,"garbag":1,"dot":1,"namespac":1,"time":1,"requir":1,"level":1,"given":3,"refer":3,"javax":1,"none":1,"swing":1,"usesa":1,"andno":1,"argument":2,"thrown":1,"except":4,"creat":6,"global":1,"parent":1,"like":1,"log":6,"non":1,"shouldb":1,"newli":1,"configur":2,"separ":1,"strong":2,"program":1,"will":3,"pointer":1,"retain":1,"output":1,"bundl":7,"collect":1,"otherwis":1,"call":1,"correspond":1,"use":3,"net":1,"elsewher":1,"resourc":9,"name":19,"logger":19,"regist":1,"mean":1,"exist":3,"note":1,"find":1,"may":4,"loggerobject":1,"previous":1,"messag":1,"manag":3,"localizingmessag":1,"back":2,"illeg":2,"two":1,"differ":3,"base":2,"subsystem":2,"java":1,"alreadi":4,"weak":1,"local":2,"also":1,"miss":1,"found":1,"handler":1,"yet":1},"maxFreq":19,"totalTerms":165},"loc":12}