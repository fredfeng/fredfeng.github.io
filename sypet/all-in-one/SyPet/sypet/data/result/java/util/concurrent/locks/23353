{"id":23353,"className":"java.util.concurrent.locks.Lock","methodName":"lock","signature":"\u003cjava.util.concurrent.locks.Lock: void lock()\u003e","javadoc":"/** \n * Acquires the lock. \u003cp\u003eIf the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired. \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e \u003cp\u003eA  {@code Lock} implementation may be able to detect erroneous useof the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances.  The circumstances and the exception type must be documented by that {@code Lock} implementation.\n */\n","tf":{"freq":{"acquir":2,"schedul":1,"uncheck":1,"abl":1,"type":1,"must":1,"document":1,"becom":1,"consider":1,"thread":2,"current":1,"purpos":1,"deadlock":1,"detect":1,"may":2,"except":2,"lock":7,"erron":1,"avail":1,"useof":1,"circumst":2,"invoc":1,"caus":1,"disabl":1,"lie":1,"dormant":1},"maxFreq":7,"totalTerms":37},"loc":0}