{"id":23981,"className":"java.util.regex.MatchResult","methodName":"group","signature":"\u003cjava.util.regex.MatchResult: java.lang.String group()\u003e","javadoc":"/** \n * Returns the input subsequence matched by the previous match. \u003cp\u003e For a matcher \u003ci\u003em\u003c/i\u003e with input sequence \u003ci\u003es\u003c/i\u003e, the expressions \u003ci\u003em.\u003c/i\u003e\u003ctt\u003egroup()\u003c/tt\u003e and \u003ci\u003es.\u003c/i\u003e\u003ctt\u003esubstring(\u003c/tt\u003e\u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart(),\u003c/tt\u003e\u0026nbsp;\u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend())\u003c/tt\u003e are equivalent.  \u003c/p\u003e \u003cp\u003e Note that some patterns, for example \u003ctt\u003ea*\u003c/tt\u003e, match the empty string.  This method will return the empty string when the pattern successfully matches the empty string in the input.  \u003c/p\u003e\n * @return The (possibly empty) subsequence matched by the previous match,in string form\n * @throws IllegalStateException If no match has yet been attempted, or if the previous match operation failed\n */\n","tf":{"freq":{"attempt":1,"state":1,"possibl":1,"express":1,"matcher":1,"fail":1,"oper":1,"equival":1,"sequenc":1,"subsequ":2,"substr":1,"end":1,"note":1,"nbsp":1,"except":1,"previous":3,"form":1,"illeg":1,"empti":4,"input":3,"pattern":2,"start":1,"string":4,"exampl":1,"will":1,"method":1,"match":8,"group":2,"success":1,"yet":1},"maxFreq":8,"totalTerms":50},"loc":0}