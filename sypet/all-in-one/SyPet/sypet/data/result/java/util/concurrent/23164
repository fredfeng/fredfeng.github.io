{"id":23164,"className":"java.util.concurrent.ConcurrentMap","methodName":"putIfAbsent","signature":"\u003cjava.util.concurrent.ConcurrentMap: V putIfAbsent(K,V)\u003e","javadoc":"/** \n * If the specified key is not already associated with a value, associate it with the given value. This is equivalent to \u003cpre\u003e if (!map.containsKey(key)) return map.put(key, value); else return map.get(key);\u003c/pre\u003e except that the action is performed atomically.\n * @param key key with which the specified value is to be associated\n * @param value value to be associated with the specified key\n * @return the previous value associated with the specified key, or\u003ctt\u003enull\u003c/tt\u003e if there was no mapping for the key. (A \u003ctt\u003enull\u003c/tt\u003e return can also indicate that the map previously associated \u003ctt\u003enull\u003c/tt\u003e with the key, if the implementation supports null values.)\n * @throws UnsupportedOperationException if the \u003ctt\u003eput\u003c/tt\u003e operationis not supported by this map\n * @throws ClassCastException if the class of the specified key or valueprevents it from being stored in this map\n * @throws NullPointerException if the specified key or value is null,and this map does not permit null keys or values\n * @throws IllegalArgumentException if some property of the specified keyor value prevents it from being stored in this map\n */\n","tf":{"freq":{"atom":1,"unsupport":1,"put":3,"store":2,"permit":1,"absent":1,"perform":1,"specifi":7,"given":1,"indic":1,"equival":1,"associ":6,"oper":1,"map":9,"action":1,"valu":11,"key":14,"argument":1,"except":5,"support":2,"keyor":1,"previous":2,"prevent":1,"valueprev":1,"illeg":1,"els":1,"cast":1,"operationi":1,"pre":2,"contain":1,"pointer":1,"alreadi":1,"properti":1,"also":1},"maxFreq":14,"totalTerms":86},"loc":0}