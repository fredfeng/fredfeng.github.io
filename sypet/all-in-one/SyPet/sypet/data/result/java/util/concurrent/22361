{"id":22361,"className":"java.util.concurrent.ExecutorService","methodName":"submit","signature":"\u003cjava.util.concurrent.ExecutorService: java.util.concurrent.Future\u003cT\u003e submit(java.util.concurrent.Callable)\u003e","javadoc":"/** \n * Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future\u0027s \u003ctt\u003eget\u003c/tt\u003e method will return the task\u0027s result upon successful completion. \u003cp\u003e If you would like to immediately block waiting for a task, you can use constructions of the form \u003ctt\u003eresult \u003d exec.submit(aCallable).get();\u003c/tt\u003e \u003cp\u003e Note: The  {@link Executors} class includes a set of methodsthat can convert some other common closure-like objects, for example,  {@link java.security.PrivilegedAction} to{@link Callable} form so they can be submitted.\n * @param task the task to submit\n * @return a Future representing pending completion of the task\n * @throws RejectedExecutionException if the task cannot bescheduled for execution\n * @throws NullPointerException if the task is null\n */\n","tf":{"freq":{"result":3,"reject":1,"methodsthat":1,"common":1,"link":3,"convert":1,"block":1,"use":1,"beschedul":1,"object":1,"wait":1,"callabl":2,"action":1,"valu":1,"immedi":1,"privileg":1,"note":1,"pend":2,"complet":2,"except":2,"includ":1,"futur":3,"submit":5,"form":2,"repres":2,"task":9,"executor":1,"like":2,"secur":1,"exampl":1,"closur":1,"will":1,"pointer":1,"java":1,"method":1,"exec":1,"construct":1,"execut":3,"success":1,"upon":1},"maxFreq":9,"totalTerms":67},"loc":0}