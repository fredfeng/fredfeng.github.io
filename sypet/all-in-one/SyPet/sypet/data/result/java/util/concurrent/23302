{"id":23302,"className":"java.util.concurrent.Phaser","methodName":"arriveAndDeregister","signature":"\u003cjava.util.concurrent.Phaser: int arriveAndDeregister()\u003e","javadoc":"/** \n * Arrives at this phaser and deregisters from it without waiting for others to arrive. Deregistration reduces the number of parties required to advance in future phases.  If this phaser has a parent, and deregistration causes this phaser to have zero parties, this phaser is also deregistered from its parent. \u003cp\u003eIt is a usage error for an unregistered party to invoke this method.  However, this error may result in an  {@code IllegalStateException} only upon some subsequent operation onthis phaser, if ever.\n * @return the arrival phase number, or a negative value if terminated\n * @throws IllegalStateException if not terminated and the numberof registered or unarrived parties would become negative\n */\n","tf":{"freq":{"result":1,"state":2,"wait":1,"zero":1,"numberof":1,"becom":1,"requir":1,"oper":1,"deregist":3,"regist":1,"valu":1,"subsequ":1,"howev":1,"unarriv":1,"except":2,"may":1,"futur":1,"error":2,"invok":1,"parent":2,"onthi":1,"number":2,"illeg":2,"without":1,"termin":2,"caus":1,"advanc":1,"deregistr":2,"phaser":5,"negat":2,"method":1,"reduc":1,"arriv":4,"usag":1,"unregist":1,"phase":2,"also":1,"ever":1,"upon":1,"parti":4},"maxFreq":5,"totalTerms":62},"loc":3}