{"id":20472,"className":"java.util.BitSet","methodName":"previousSetBit","signature":"\u003cjava.util.BitSet: int previousSetBit(int)\u003e","javadoc":"/** \n * Returns the index of the nearest bit that is set to  {@code true}that occurs on or before the specified starting index. If no such bit exists, or if  {@code -1} is given as thestarting index, then  {@code -1} is returned.\u003cp\u003eTo iterate over the  {@code true} bits in a {@code BitSet}, use the following loop: \u003cpre\u003e  {@code}for (int i \u003d bs.length(); (i \u003d bs.previousSetBit(i-1)) \u003e\u003d 0; )  // operate on index i here }}\u003c/pre\u003e\n * @param fromIndex the index to start checking from (inclusive)\n * @return the index of the previous set bit, or {@code -1} if thereis no such bit\n * @throws IndexOutOfBoundsException if the specified index is lessthan  {@code -1}\n * @since  1.7\n */\n","tf":{"freq":{"thestart":1,"except":1,"index":9,"check":1,"previous":3,"use":1,"true":2,"nearest":1,"specifi":2,"inclus":1,"bit":8,"given":1,"oper":1,"start":2,"lessthan":1,"pre":2,"length":1,"loop":1,"therei":1,"iter":1,"exist":1,"bound":1,"follow":1,"occur":1},"maxFreq":9,"totalTerms":45},"loc":24}