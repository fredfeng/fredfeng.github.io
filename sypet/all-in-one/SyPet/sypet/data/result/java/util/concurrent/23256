{"id":23256,"className":"java.util.concurrent.CountDownLatch","methodName":"await","signature":"\u003cjava.util.concurrent.CountDownLatch: void await()\u003e","javadoc":"/** \n * Causes the current thread to wait until the latch has counted down to zero, unless the thread is  {@linkplain Thread#interrupt interrupted}. \u003cp\u003eIf the current count is zero then this method returns immediately. \u003cp\u003eIf the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen: \u003cul\u003e \u003cli\u003eThe count reaches zero due to invocations of the {@link #countDown} method; or\u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}the current thread. \u003c/ul\u003e \u003cp\u003eIf the current thread: \u003cul\u003e \u003cli\u003ehas its interrupted status set on entry to this method; or \u003cli\u003eis  {@linkplain Thread#interrupt interrupted} while waiting,\u003c/ul\u003e then  {@link InterruptedException} is thrown and the current thread\u0027sinterrupted status is cleared.\n * @throws InterruptedException if the current thread is interruptedwhile waiting\n */\n","tf":{"freq":{"linkplain":3,"greater":1,"count":5,"link":2,"one":1,"schedul":1,"wait":3,"zero":4,"clear":1,"interruptedwhil":1,"reach":1,"becom":1,"unless":1,"thread":12,"current":8,"purpos":1,"immedi":1,"happen":1,"sinterrupt":1,"thrown":1,"except":2,"latch":1,"status":2,"entri":1,"invoc":1,"interrupt":9,"two":1,"caus":1,"await":1,"disabl":1,"due":1,"method":3,"lie":1,"dormant":1,"thing":1},"maxFreq":12,"totalTerms":77},"loc":3}