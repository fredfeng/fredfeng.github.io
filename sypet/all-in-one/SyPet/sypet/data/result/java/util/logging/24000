{"id":24000,"className":"java.util.logging.MemoryHandler","methodName":"publish","signature":"\u003cjava.util.logging.MemoryHandler: void publish(java.util.logging.LogRecord)\u003e","javadoc":"/** \n * Store a \u003ctt\u003eLogRecord\u003c/tt\u003e in an internal buffer. \u003cp\u003e If there is a \u003ctt\u003eFilter\u003c/tt\u003e, its \u003ctt\u003eisLoggable\u003c/tt\u003e method is called to check if the given log record is loggable. If not we return.  Otherwise the given record is copied into an internal circular buffer.  Then the record\u0027s level property is compared with the \u003ctt\u003epushLevel\u003c/tt\u003e. If the given level is greater than or equal to the \u003ctt\u003epushLevel\u003c/tt\u003e then \u003ctt\u003epush\u003c/tt\u003e is called to write all buffered records to the target output \u003ctt\u003eHandler\u003c/tt\u003e.\n * @param record  description of the log event. A null record issilently ignored and is not published\n */\n","tf":{"freq":{"otherwis":1,"call":2,"greater":1,"store":1,"copi":1,"push":3,"buffer":3,"loggabl":2,"circular":1,"level":4,"given":3,"issil":1,"event":1,"write":1,"publish":2,"ignor":1,"check":1,"descript":1,"equal":1,"log":3,"record":7,"intern":2,"target":1,"method":1,"properti":1,"output":1,"compar":1,"filter":1,"handler":1},"maxFreq":7,"totalTerms":50},"loc":16}