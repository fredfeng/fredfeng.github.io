{"id":24252,"className":"java.util.prefs.AbstractPreferences","methodName":"getByteArray","signature":"\u003cjava.util.prefs.AbstractPreferences: byte[] getByteArray(java.lang.String,byte[])\u003e","javadoc":"/** \n * Implements the \u003ctt\u003egetByteArray\u003c/tt\u003e method as per the specification in {@link Preferences#getByteArray(String,byte[])}.\n * @param key key whose associated value is to be returned as a byte array.\n * @param def the value to be returned in the event that thispreference node has no value associated with \u003ctt\u003ekey\u003c/tt\u003e or the associated value cannot be interpreted as a byte array.\n * @return the byte array value represented by the string associated with\u003ctt\u003ekey\u003c/tt\u003e in this preference node, or \u003ctt\u003edef\u003c/tt\u003e if the associated value does not exist or cannot be interpreted as a byte array.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n * @throws NullPointerException if \u003ctt\u003ekey\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e.  (A\u003ctt\u003enull\u003c/tt\u003e value for \u003ctt\u003edef\u003c/tt\u003e \u003ci\u003eis\u003c/i\u003e permitted.)\n */\n","tf":{"freq":{"permit":1,"link":2,"interpret":2,"state":1,"def":3,"associ":5,"event":1,"valu":7,"exist":1,"ancestor":1,"key":5,"thisprefer":1,"except":2,"whose":1,"repres":1,"beenremov":1,"remov":1,"illeg":1,"specif":1,"node":4,"per":1,"string":2,"pointer":1,"method":2,"prefer":2,"array":7},"maxFreq":7,"totalTerms":57},"loc":13}