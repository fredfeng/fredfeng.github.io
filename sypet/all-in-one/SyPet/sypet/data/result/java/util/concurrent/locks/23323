{"id":23323,"className":"java.util.concurrent.locks.ReentrantLock","methodName":"tryLock","signature":"\u003cjava.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)\u003e","javadoc":"/** \n * Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}. \u003cp\u003eAcquires the lock if it is not held by another thread and returns immediately with the value  {@code true}, setting the lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock \u003cem\u003ewill not\u003c/em\u003e be acquired if any other threads are waiting for the lock. This is in contrast to the  {@link #tryLock()}method. If you want a timed  {@code tryLock} that does permit barging ona fair lock then combine the timed and un-timed forms together: \u003cpre\u003eif (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } \u003c/pre\u003e \u003cp\u003eIf the current thread already holds this lock then the hold count is incremented by one and the method returns  {@code true}. \u003cp\u003eIf the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: \u003cul\u003e \u003cli\u003eThe lock is acquired by the current thread; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}the current thread; or \u003cli\u003eThe specified waiting time elapses \u003c/ul\u003e \u003cp\u003eIf the lock is acquired then the value  {@code true} is returned andthe lock hold count is set to one. \u003cp\u003eIf the current thread: \u003cul\u003e \u003cli\u003ehas its interrupted status set on entry to this method; or \u003cli\u003eis  {@linkplain Thread#interrupt interrupted} whileacquiring the lock, \u003c/ul\u003e then  {@link InterruptedException} is thrown and the current thread\u0027sinterrupted status is cleared. \u003cp\u003eIf the specified waiting time elapses then the value  {@code false}is returned.  If the time is less than or equal to zero, the method will not wait at all. \u003cp\u003eIn this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.\n * @param timeout the time to wait for the lock\n * @param unit the time unit of the timeout argument\n * @return {@code true} if the lock was free and was acquired by thecurrent thread, or the lock was already held by the current thread; and  {@code false} if the waiting time elapsed beforethe lock could be acquired\n * @throws InterruptedException if the current thread is interrupted\n * @throws NullPointerException if the time unit is null\n */\n","tf":{"freq":{"fals":2,"acquir":7,"count":3,"normal":1,"permit":1,"wait":8,"zero":1,"reentrant":1,"specifi":2,"contrast":1,"elaps":4,"free":1,"time":12,"becom":1,"given":2,"respond":1,"thread":19,"report":1,"combin":1,"three":1,"purpos":1,"barg":1,"happen":1,"sinterrupt":1,"argument":1,"increment":1,"thrown":1,"except":3,"form":1,"status":2,"hold":4,"avail":1,"polici":1,"togeth":1,"fair":2,"disabl":1,"explicit":1,"thecurr":1,"will":2,"pointer":1,"prefer":1,"thing":1,"linkplain":3,"ona":1,"one":4,"link":2,"acquisit":1,"use":1,"schedul":1,"anoth":3,"clear":1,"order":1,"current":9,"valu":3,"immedi":1,"less":1,"want":1,"held":4,"entri":1,"lock":25,"true":4,"equal":1,"whileacquir":1,"beforeth":1,"interrupt":12,"point":1,"unit":4,"pre":2,"method":5,"alreadi":2,"within":1,"andth":1,"timeout":3,"lie":1,"dormant":1},"maxFreq":25,"totalTerms":203},"loc":3}