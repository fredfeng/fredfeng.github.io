{"id":23358,"className":"java.util.concurrent.locks.Lock","methodName":"newCondition","signature":"\u003cjava.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()\u003e","javadoc":"/** \n * Returns a new  {@link Condition} instance that is bound to this{@code Lock} instance.\u003cp\u003eBefore waiting on the condition the lock must be held by the current thread. A call to  {@link Condition#await()} will atomically release the lockbefore waiting and re-acquire the lock before the wait returns. \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e \u003cp\u003eThe exact operation of the  {@link Condition} instance depends onthe  {@code Lock} implementation and must be documented by thatimplementation.\n * @return A new {@link Condition} instance for this {@code Lock} instance\n * @throws UnsupportedOperationException if this {@code Lock}implementation does not support conditions\n */\n","tf":{"freq":{"acquir":1,"call":1,"atom":1,"unsupport":1,"link":4,"wait":3,"must":2,"document":1,"releas":1,"oper":2,"consider":1,"thread":1,"exact":1,"current":1,"condit":7,"held":1,"except":1,"lockbefor":1,"support":1,"thatimplement":1,"depend":1,"lock":6,"onth":1,"instanc":5,"await":1,"will":1,"bound":1},"maxFreq":7,"totalTerms":49},"loc":0}