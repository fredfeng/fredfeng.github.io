{"id":23960,"className":"java.util.regex.Matcher","methodName":"find","signature":"\u003cjava.util.regex.Matcher: boolean find(int)\u003e","javadoc":"/** \n * Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index. \u003cp\u003e If the match succeeds then more information can be obtained via the \u003ctt\u003estart\u003c/tt\u003e, \u003ctt\u003eend\u003c/tt\u003e, and \u003ctt\u003egroup\u003c/tt\u003e methods, and subsequent invocations of the  {@link #find()} method will start at the firstcharacter not matched by this match.  \u003c/p\u003e\n * @throws IndexOutOfBoundsException If start is less than zero or if start is greater than the length of the input sequence.\n * @return  \u003ctt\u003etrue\u003c/tt\u003e if, and only if, a subsequence of the inputsequence starting at the given index matches this matcher\u0027s pattern\n */\n","tf":{"freq":{"attempt":1,"greater":1,"via":1,"firstcharact":1,"next":1,"link":1,"inputsequ":1,"zero":1,"specifi":1,"matcher":2,"given":1,"sequenc":2,"length":1,"reset":1,"subsequ":3,"less":1,"find":3,"end":1,"except":1,"index":3,"succeed":1,"true":1,"invoc":1,"inform":1,"input":2,"obtain":1,"pattern":2,"start":6,"will":1,"method":2,"match":5,"group":1,"bound":1},"maxFreq":6,"totalTerms":53},"loc":7}