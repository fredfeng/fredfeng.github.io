{"id":21151,"className":"java.util.LinkedList","methodName":"listIterator","signature":"\u003cjava.util.LinkedList: java.util.ListIterator\u003cE\u003e listIterator(int)\u003e","javadoc":"/** \n * Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list. Obeys the general contract of  {@code List.listIterator(int)}.\u003cp\u003e The list-iterator is \u003ci\u003efail-fast\u003c/i\u003e: if the list is structurally modified at any time after the Iterator is created, in any way except through the list-iterator\u0027s own  {@code remove} or {@code add}methods, the list-iterator will throw a {@code ConcurrentModificationException}.  Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.\n * @param index index of the first element to be returned from thelist-iterator (by a call to  {@code next})\n * @return a ListIterator of the elements in this list (in propersequence), starting at the specified position in the list\n * @throws IndexOutOfBoundsException {@inheritDoc}\n * @see List#listIterator(int)\n */\n","tf":{"freq":{"call":1,"face":1,"structur":1,"behavior":1,"concurr":2,"next":1,"quick":1,"way":1,"add":1,"specifi":2,"risk":1,"arbitrari":1,"time":2,"thelist":1,"clean":1,"fail":2,"determinist":1,"sequenc":1,"undetermin":1,"rather":1,"proper":1,"element":3,"index":3,"except":3,"futur":1,"thus":1,"contract":1,"creat":1,"remov":1,"list":15,"general":1,"non":1,"obey":1,"start":2,"modifi":1,"will":1,"method":1,"iter":11,"fast":1,"propersequ":1,"first":1,"posit":2,"bound":1,"modif":2},"maxFreq":15,"totalTerms":81},"loc":4}