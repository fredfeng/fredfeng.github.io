{"id":22657,"className":"java.util.concurrent.TransferQueue","methodName":"transfer","signature":"\u003cjava.util.concurrent.TransferQueue: void transfer(E)\u003e","javadoc":"/** \n * Transfers the element to a consumer, waiting if necessary to do so. \u003cp\u003eMore precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in {@link #take} or timed {@link #poll(long,TimeUnit) poll}), else waits until the element is received by a consumer.\n * @param e the element to transfer\n * @throws InterruptedException if interrupted while waiting,in which case the element is not left enqueued\n * @throws ClassCastException if the class of the specified elementprevents it from being added to this queue\n * @throws NullPointerException if the specified element is null\n * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this queue\n */\n","tf":{"freq":{"queue":2,"link":2,"enqueu":1,"wait":4,"necessari":1,"specifi":3,"consum":3,"time":2,"poll":2,"precis":1,"immedi":1,"left":1,"exist":1,"argument":1,"element":6,"transfer":4,"except":4,"prevent":1,"receiv":2,"illeg":1,"els":1,"interrupt":2,"unit":1,"cast":1,"specifiedel":1,"take":1,"pointer":1,"ad":2,"alreadi":1,"elementprev":1,"properti":1},"maxFreq":6,"totalTerms":56},"loc":0}