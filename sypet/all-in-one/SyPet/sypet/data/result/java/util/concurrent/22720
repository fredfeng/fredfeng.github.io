{"id":22720,"className":"java.util.concurrent.ThreadPoolExecutor","methodName":"remove","signature":"\u003cjava.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)\u003e","javadoc":"/** \n * Removes this task from the executor\u0027s internal queue if it is present, thus causing it not to be run if it has not already started. \u003cp\u003e This method may be useful as one part of a cancellation scheme.  It may fail to remove tasks that have been converted into other forms before being placed on the internal queue. For example, a task entered using  {@code submit} might beconverted into a form that maintains  {@code Future} status.However, in such cases, method  {@link #purge} may be used toremove those Futures that have been cancelled.\n * @param task the task to remove\n * @return true if the task was removed\n */\n","tf":{"freq":{"might":1,"queue":2,"link":1,"maintain":1,"one":1,"use":3,"convert":1,"cancel":2,"run":1,"scheme":1,"fail":1,"howev":1,"place":1,"may":3,"futur":2,"submit":1,"form":2,"status":1,"thus":1,"task":6,"executor":1,"remov":5,"true":1,"enter":1,"toremov":1,"present":1,"purg":1,"caus":1,"start":1,"intern":2,"exampl":1,"beconvert":1,"method":2,"alreadi":1,"part":1},"maxFreq":6,"totalTerms":54},"loc":5}