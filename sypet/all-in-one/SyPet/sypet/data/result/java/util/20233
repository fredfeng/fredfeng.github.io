{"id":20233,"className":"java.util.Arrays","methodName":"binarySearch","signature":"\u003cjava.util.Arrays: int binarySearch(double[],double)\u003e","javadoc":"/** \n * Searches the specified array of doubles for the specified value using the binary search algorithm.  The array must be sorted (as by the  {@link #sort(double[])} method) prior to making this call.If it is not sorted, the results are undefined.  If the array contains multiple elements with the specified value, there is no guarantee which one will be found.  This method considers all NaN values to be equivalent and equal.\n * @param a the array to be searched\n * @param key the value to be searched for\n * @return index of the search key, if it is contained in the array;otherwise, \u003ctt\u003e(-(\u003ci\u003einsertion point\u003c/i\u003e) - 1)\u003c/tt\u003e.  The \u003ci\u003einsertion point\u003c/i\u003e is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or \u003ctt\u003ea.length\u003c/tt\u003e if all elements in the array are less than the specified key.  Note that this guarantees that the return value will be \u0026gt;\u003d 0 if and only if the key is found.\n */\n","tf":{"freq":{"otherwis":1,"defin":1,"call":1,"result":1,"binari":2,"greater":1,"sort":3,"link":1,"one":1,"use":1,"must":1,"consid":1,"prior":1,"algorithm":1,"specifi":4,"equival":1,"search":6,"length":1,"valu":5,"undefin":1,"note":1,"less":1,"key":6,"element":3,"index":2,"multipl":1,"guarante":2,"equal":1,"point":3,"contain":2,"will":2,"method":2,"insert":3,"first":1,"make":1,"array":7,"found":2},"maxFreq":7,"totalTerms":75},"loc":3}