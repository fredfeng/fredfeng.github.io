{"id":21256,"className":"java.util.Random","methodName":"nextGaussian","signature":"\u003cjava.util.Random: double nextGaussian()\u003e","javadoc":"/** \n * Returns the next pseudorandom, Gaussian (\"normally\") distributed {@code double} value with mean {@code 0.0} and standarddeviation  {@code 1.0} from this random number generator\u0027s sequence.\u003cp\u003e The general contract of  {@code nextGaussian} is that one{@code double} value, chosen from (approximately) the usualnormal distribution with mean  {@code 0.0} and standard deviation{@code 1.0}, is pseudorandomly generated and returned. \u003cp\u003eThe method  {@code nextGaussian} is implemented by class{@code Random} as if by a threadsafe version of the following:\u003cpre\u003e  {@code private double nextNextGaussian; private boolean haveNextNextGaussian \u003d false;}public double nextGaussian()  if (haveNextNextGaussian) { haveNextNextGaussian \u003d false; return nextNextGaussian; } else { double v1, v2, s; do { v1 \u003d 2 * nextDouble() - 1;   // between -1.0 and 1.0 v2 \u003d 2 * nextDouble() - 1;   // between -1.0 and 1.0 s \u003d v1 * v1 + v2 * v2; } while (s \u003e\u003d 1 || s \u003d\u003d 0); double multiplier \u003d StrictMath.sqrt(-2 * StrictMath.log(s)/s); nextNextGaussian \u003d v2 * multiplier; haveNextNextGaussian \u003d true; return v1 * multiplier; } }}\u003c/pre\u003e This uses the \u003ci\u003epolar method\u003c/i\u003e of G. E. P. Box, M. E. Muller, and G. Marsaglia, as described by Donald E. Knuth in \u003ci\u003eThe Art of Computer Programming\u003c/i\u003e, Volume 3: \u003ci\u003eSeminumerical Algorithms\u003c/i\u003e, section 3.4.1, subsection C, algorithm P. Note that it generates two independent values at the cost of only one call to  {@code StrictMath.log}and one call to  {@code StrictMath.sqrt}.\n * @return the next pseudorandom, Gaussian (\"normally\") distributed{@code double} value with mean {@code 0.0} andstandard deviation  {@code 1.0} from this random numbergenerator\u0027s sequence\n */\n","tf":{"freq":{"fals":2,"usualnorm":1,"normal":2,"distribut":3,"knuth":1,"approxim":1,"marsaglia":1,"deviat":2,"independ":1,"sequenc":2,"numbergener":1,"follow":1,"contract":1,"art":1,"random":3,"describ":1,"number":1,"cost":1,"log":2,"els":1,"andstandard":1,"program":1,"comput":1,"volum":1,"strict":4,"call":2,"standarddevi":1,"subsect":1,"one":3,"next":22,"use":1,"chosen":1,"version":1,"algorithm":2,"muller":1,"seminumer":1,"gaussian":13,"mean":3,"multipli":3,"valu":4,"note":1,"polar":1,"threadsaf":1,"standard":1,"sqrt":2,"true":1,"general":1,"section":1,"math":4,"two":1,"donald":1,"pre":2,"generat":3,"method":2,"box":1,"pseudorandom":3},"maxFreq":22,"totalTerms":122},"loc":18}