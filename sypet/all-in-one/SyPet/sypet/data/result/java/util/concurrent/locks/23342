{"id":23342,"className":"java.util.concurrent.locks.Condition","methodName":"signalAll","signature":"\u003cjava.util.concurrent.locks.Condition: void signalAll()\u003e","javadoc":"/** \n * Wakes up all waiting threads. \u003cp\u003eIf any threads are waiting on this condition then they are all woken up. Each thread must re-acquire the lock before it can return from  {@code await}. \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e \u003cp\u003eAn implementation may (and typically does) require that the current thread hold the lock associated with this  {@code Condition} when this method is called. Implementations mustdocument this precondition and any actions taken if the lock is not held. Typically, an exception such as  {@link IllegalMonitorStateException} will be thrown.\n */\n","tf":{"freq":{"acquir":1,"call":1,"link":1,"state":1,"typic":2,"precondit":1,"signal":1,"wait":2,"must":1,"requir":1,"associ":1,"consider":1,"wake":1,"thread":4,"woken":1,"current":1,"action":1,"taken":1,"mustdocu":1,"condit":2,"held":1,"thrown":1,"except":2,"may":1,"monitor":1,"hold":1,"lock":3,"illeg":1,"await":1,"will":1,"method":1},"maxFreq":4,"totalTerms":40},"loc":0}