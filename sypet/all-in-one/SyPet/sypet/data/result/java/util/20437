{"id":20437,"className":"java.util.GregorianCalendar","methodName":"roll","signature":"\u003cjava.util.GregorianCalendar: void roll(int,int)\u003e","javadoc":"/** \n * Adds a signed amount to the specified calendar field without changing larger fields. A negative roll amount means to subtract from field without changing larger fields. If the specified amount is 0, this method performs nothing. \u003cp\u003eThis method calls  {@link #complete()} before adding theamount so that all the calendar fields are normalized. If there is any calendar field having an out-of-range value in non-lenient mode, then an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown. \u003cp\u003e \u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e originally set to August 31, 1999. Calling \u003ccode\u003eroll(Calendar.MONTH, 8)\u003c/code\u003e sets the calendar to April 30, \u003cstrong\u003e1999\u003c/strong\u003e. Using a \u003ccode\u003eGregorianCalendar\u003c/code\u003e, the \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e field cannot be 31 in the month April. \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e is set to the closest possible value, 30. The \u003ccode\u003eYEAR\u003c/code\u003e field maintains the value of 1999 because it is a larger field than \u003ccode\u003eMONTH\u003c/code\u003e. \u003cp\u003e \u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e originally set to Sunday June 6, 1999. Calling \u003ccode\u003eroll(Calendar.WEEK_OF_MONTH, -1)\u003c/code\u003e sets the calendar to Tuesday June 1, 1999, whereas calling \u003ccode\u003eadd(Calendar.WEEK_OF_MONTH, -1)\u003c/code\u003e sets the calendar to Sunday May 30, 1999. This is because the roll rule imposes an additional constraint: The \u003ccode\u003eMONTH\u003c/code\u003e must not change when the \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e is rolled. Taken together with add rule 1, the resultant date must be between Tuesday June 1 and Saturday June 5. According to add rule 2, the \u003ccode\u003eDAY_OF_WEEK\u003c/code\u003e, an invariant when changing the \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e, is set to Tuesday, the closest possible value to Sunday (where Sunday is the first day of the week).\u003c/p\u003e\n * @param field the calendar field.\n * @param amount the signed amount to add to \u003ccode\u003efield\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003efield\u003c/code\u003e is\u003ccode\u003eZONE_OFFSET\u003c/code\u003e, \u003ccode\u003eDST_OFFSET\u003c/code\u003e, or unknown, or if any calendar fields have out-of-range values in non-lenient mode.\n * @see #roll(int,boolean)\n * @see #add(int,int)\n * @see #set(int,int)\n * @since 1.2\n */\n","tf":{"freq":{"normal":1,"maintain":1,"possibl":2,"perform":1,"lenient":2,"must":2,"specifi":2,"amount":5,"roll":7,"rang":2,"closest":2,"saturday":1,"taken":1,"argument":2,"except":3,"thrown":1,"wherea":1,"togeth":1,"without":2,"invari":1,"non":2,"sign":2,"strong":2,"theamount":1,"sunday":4,"month":1,"negat":1,"day":1,"result":1,"call":4,"june":4,"link":1,"constraint":1,"use":1,"date":1,"add":6,"consid":2,"mode":2,"rule":3,"noth":1,"mean":1,"august":1,"valu":5,"tuesday":3,"complet":1,"calendar":14,"addit":1,"may":1,"april":2,"larger":3,"origin":2,"unknown":1,"accord":1,"illeg":2,"impos":1,"field":14,"subtract":1,"exampl":2,"ad":1,"method":2,"chang":4,"gregorian":3,"first":1,"week":1},"maxFreq":14,"totalTerms":149},"loc":336}