{"id":23333,"className":"java.util.concurrent.locks.ReentrantLock","methodName":"hasWaiters","signature":"\u003cjava.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)\u003e","javadoc":"/** \n * Queries whether any threads are waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, a  {@code true} return doesnot guarantee that a future  {@code signal} will awaken anythreads.  This method is designed primarily for use in monitoring of the system state.\n * @param condition the condition\n * @return {@code true} if there are any waiting threads\n * @throws IllegalMonitorStateException if this lock is not held\n * @throws IllegalArgumentException if the given condition isnot associated with this lock\n * @throws NullPointerException if the condition is null\n */\n","tf":{"freq":{"state":2,"use":1,"signal":1,"wait":2,"primarili":1,"whether":1,"time":1,"isnot":1,"given":2,"associ":2,"thread":2,"doesnot":1,"waiter":1,"note":1,"argument":1,"condit":5,"awaken":1,"held":1,"except":3,"may":1,"monitor":2,"futur":1,"anythread":1,"guarante":1,"lock":3,"true":2,"illeg":2,"interrupt":1,"queri":1,"system":1,"will":1,"pointer":1,"method":1,"design":1,"timeout":1,"occur":1},"maxFreq":5,"totalTerms":52},"loc":7}