{"id":21534,"className":"java.util.SortedSet","methodName":"tailSet","signature":"\u003cjava.util.SortedSet: java.util.SortedSet\u003cE\u003e tailSet(E)\u003e","javadoc":"/** \n * Returns a view of the portion of this set whose elements are greater than or equal to \u003ctt\u003efromElement\u003c/tt\u003e.  The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa.  The returned set supports all optional set operations that this set supports. \u003cp\u003eThe returned set will throw an \u003ctt\u003eIllegalArgumentException\u003c/tt\u003e on an attempt to insert an element outside its range.\n * @param fromElement low endpoint (inclusive) of the returned set\n * @return a view of the portion of this set whose elements are greaterthan or equal to \u003ctt\u003efromElement\u003c/tt\u003e\n * @throws ClassCastException if \u003ctt\u003efromElement\u003c/tt\u003e is not compatiblewith this set\u0027s comparator (or, if the set has no comparator, if \u003ctt\u003efromElement\u003c/tt\u003e does not implement  {@link Comparable}). Implementations may, but are not required to, throw this exception if \u003ctt\u003efromElement\u003c/tt\u003e cannot be compared to elements currently in the set.\n * @throws NullPointerException if \u003ctt\u003efromElement\u003c/tt\u003e is nulland this set does not permit null elements\n * @throws IllegalArgumentException if this set itself has arestricted range, and \u003ctt\u003efromElement\u003c/tt\u003e lies outside the bounds of the range\n */\n","tf":{"freq":{"attempt":1,"greater":1,"vice":1,"permit":1,"link":1,"nulland":1,"inclus":1,"requir":1,"compatiblewith":1,"oper":1,"rang":3,"current":1,"option":1,"portion":2,"versa":1,"argument":2,"element":13,"may":1,"except":5,"support":2,"whose":2,"arestrict":1,"back":1,"equal":2,"tail":1,"illeg":2,"greaterthan":1,"endpoint":1,"cast":1,"outsid":2,"will":1,"pointer":1,"chang":1,"view":2,"insert":1,"low":1,"compar":4,"bound":1,"lie":1,"reflect":1},"maxFreq":13,"totalTerms":69},"loc":0}