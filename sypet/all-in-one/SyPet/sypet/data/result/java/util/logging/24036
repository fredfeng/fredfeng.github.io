{"id":24036,"className":"java.util.logging.Level","methodName":"parse","signature":"\u003cjava.util.logging.Level: java.util.logging.Level parse(java.lang.String)\u003e","javadoc":"/** \n * Parse a level name string into a Level. \u003cp\u003e The argument string may consist of either a level name or an integer value. \u003cp\u003e For example: \u003cul\u003e \u003cli\u003e     \"SEVERE\" \u003cli\u003e     \"1000\" \u003c/ul\u003e\n * @param name   string to be parsed\n * @throws NullPointerException if the name is null\n * @throws IllegalArgumentException if the value is not valid.Valid values are integers between \u003cCODE\u003eInteger.MIN_VALUE\u003c/CODE\u003e and \u003cCODE\u003eInteger.MAX_VALUE\u003c/CODE\u003e, and all known level names. Known names are the levels defined by this class (e.g., \u003cCODE\u003eFINE\u003c/CODE\u003e, \u003cCODE\u003eFINER\u003c/CODE\u003e, \u003cCODE\u003eFINEST\u003c/CODE\u003e), or created by this class with appropriate package access, or new levels defined or created by subclasses.\n * @return The parsed value. Passing an integer that corresponds to a known name(e.g., 700) will return the associated name (e.g., \u003cCODE\u003eCONFIG\u003c/CODE\u003e). Passing an integer that does not (e.g., 1) will return a new level name initialized to that value.\n */\n","tf":{"freq":{"valid":2,"defin":2,"correspond":1,"level":7,"associ":1,"name":9,"valu":5,"initi":1,"argument":2,"may":1,"except":2,"consist":1,"creat":2,"access":1,"illeg":1,"pass":2,"either":1,"appropri":1,"string":3,"exampl":1,"subclass":1,"will":2,"pointer":1,"known":3,"integ":6,"pars":4},"maxFreq":9,"totalTerms":63},"loc":43}