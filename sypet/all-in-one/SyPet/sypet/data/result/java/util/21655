{"id":21655,"className":"java.util.Formatter","methodName":"Formatter","signature":"\u003cjava.util.Formatter: void Formatter(java.io.File,java.lang.String,java.util.Locale)\u003e","javadoc":"/** \n * Constructs a new formatter with the specified file, charset, and locale.\n * @param file The file to use as the destination of this formatter.  If the file exists then it will be truncated to zero size; otherwise, a new file will be created.  The output will be written to the file and is buffered.\n * @param csn The name of a supported  {@linkplain java.nio.charset.Charset charset}\n * @param l The  {@linkplain java.util.Locale locale} to apply duringformatting.  If  {@code l} is {@code null} then no localizationis applied.\n * @throws FileNotFoundException If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file\n * @throws SecurityException If a security manager is present and  {@link SecurityManager#checkWrite checkWrite(file.getPath())} denieswrite access to the file\n * @throws UnsupportedEncodingException If the named charset is not supported\n */\n","tf":{"freq":{"unsupport":1,"zero":1,"formatt":3,"specifi":1,"buffer":1,"open":1,"given":1,"file":13,"except":3,"support":2,"localizationi":1,"creat":3,"charset":5,"writabl":1,"size":1,"present":1,"encod":1,"appli":2,"will":3,"output":1,"util":1,"otherwis":1,"linkplain":2,"link":1,"denot":1,"use":1,"truncat":1,"object":1,"name":3,"written":1,"write":2,"path":1,"exist":2,"duringformat":1,"error":1,"check":2,"regular":2,"manag":2,"access":1,"secur":3,"nio":1,"java":2,"denieswrit":1,"csn":1,"construct":1,"local":3,"destin":1,"found":1,"occur":1},"maxFreq":13,"totalTerms":88},"loc":3}