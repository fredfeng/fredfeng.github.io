{"id":24254,"className":"java.util.prefs.AbstractPreferences","methodName":"childrenNames","signature":"\u003cjava.util.prefs.AbstractPreferences: java.lang.String[] childrenNames()\u003e","javadoc":"/** \n * Implements the \u003ctt\u003echildren\u003c/tt\u003e method as per the specification in {@link Preferences#childrenNames()}. \u003cp\u003eThis implementation obtains this preference node\u0027s lock, checks that the node has not been removed, constructs a \u003ctt\u003eTreeSet\u003c/tt\u003e initialized to the names of children already cached (the children in this node\u0027s \"child-cache\"), invokes  {@link #childrenNamesSpi()}, and adds all of the returned child-names into the set.  The elements of the tree set are dumped into a \u003ctt\u003eString\u003c/tt\u003e array using the \u003ctt\u003etoArray\u003c/tt\u003e method, and this array is returned.\n * @return the names of the children of this preference node.\n * @throws BackingStoreException if this operation cannot be completeddue to a failure in the backing store, or inability to communicate with it.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n * @see #cachedChildren()\n */\n","tf":{"freq":{"dump":1,"store":2,"completeddu":1,"link":3,"state":1,"use":1,"children":8,"add":1,"child":2,"tree":2,"oper":1,"name":6,"spi":1,"initi":1,"ancestor":1,"inabl":1,"element":1,"except":2,"check":1,"failur":1,"invok":1,"beenremov":1,"remov":2,"lock":1,"back":2,"cach":3,"illeg":1,"node":6,"obtain":1,"specif":1,"communic":1,"per":1,"string":1,"method":3,"alreadi":1,"construct":1,"prefer":3,"array":3},"maxFreq":8,"totalTerms":71},"loc":11}