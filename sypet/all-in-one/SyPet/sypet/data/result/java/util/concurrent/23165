{"id":23165,"className":"java.util.concurrent.ConcurrentMap","methodName":"remove","signature":"\u003cjava.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)\u003e","javadoc":"/** \n * Removes the entry for a key only if currently mapped to a given value. This is equivalent to \u003cpre\u003e if (map.containsKey(key) \u0026amp;\u0026amp; map.get(key).equals(value)) { map.remove(key); return true; } else return false;\u003c/pre\u003e except that the action is performed atomically.\n * @param key key with which the specified value is associated\n * @param value value expected to be associated with the specified key\n * @return \u003ctt\u003etrue\u003c/tt\u003e if the value was removed\n * @throws UnsupportedOperationException if the \u003ctt\u003eremove\u003c/tt\u003e operationis not supported by this map\n * @throws ClassCastException if the key or value is of an inappropriatetype for this map (\u003ca href\u003d\"../Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n * @throws NullPointerException if the specified key or value is null,and this map does not permit null keys or values (\u003ca href\u003d\"../Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n */\n","tf":{"freq":{"fals":1,"atom":1,"unsupport":1,"permit":1,"perform":1,"inappropriatetyp":1,"specifi":3,"expect":1,"given":1,"equival":1,"associ":2,"oper":1,"map":7,"current":1,"action":1,"valu":9,"href":2,"option":4,"key":11,"except":4,"support":1,"entri":1,"remov":5,"true":2,"equal":1,"restrict":2,"els":1,"cast":1,"operationi":1,"pre":2,"contain":1,"pointer":1,"html":2,"amp":2,"collect":2},"maxFreq":11,"totalTerms":79},"loc":0}