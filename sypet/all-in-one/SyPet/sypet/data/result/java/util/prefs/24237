{"id":24237,"className":"java.util.prefs.AbstractPreferences","methodName":"put","signature":"\u003cjava.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Implements the \u003ctt\u003eput\u003c/tt\u003e method as per the specification in {@link Preferences#put(String,String)}. \u003cp\u003eThis implementation checks that the key and value are legal, obtains this preference node\u0027s lock, checks that the node has not been removed, invokes  {@link #putSpi(String,String)}, and if there are any preference change listeners, enqueues a notification event for processing by the event dispatch thread.\n * @param key key with which the specified value is to be associated.\n * @param value value to be associated with the specified key.\n * @throws NullPointerException if key or value is \u003ctt\u003enull\u003c/tt\u003e.\n * @throws IllegalArgumentException if \u003ctt\u003ekey.length()\u003c/tt\u003e exceeds\u003ctt\u003eMAX_KEY_LENGTH\u003c/tt\u003e or if \u003ctt\u003evalue.length\u003c/tt\u003e exceeds \u003ctt\u003eMAX_VALUE_LENGTH\u003c/tt\u003e.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n */\n","tf":{"freq":{"legal":1,"put":4,"link":3,"state":1,"enqueu":1,"specifi":2,"notif":1,"associ":2,"event":2,"thread":1,"spi":1,"length":2,"valu":6,"dispatch":1,"ancestor":1,"listen":1,"key":6,"argument":1,"except":3,"check":2,"invok":1,"beenremov":1,"exceed":2,"lock":1,"remov":2,"illeg":2,"process":1,"obtain":1,"specif":1,"node":4,"per":1,"string":4,"pointer":1,"method":2,"chang":1,"prefer":3},"maxFreq":6,"totalTerms":70},"loc":16}