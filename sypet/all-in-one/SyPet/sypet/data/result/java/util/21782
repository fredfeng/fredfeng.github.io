{"id":21782,"className":"java.util.Scanner","methodName":"findInLine","signature":"\u003cjava.util.Scanner: java.lang.String findInLine(java.util.regex.Pattern)\u003e","javadoc":"/** \n * Attempts to find the next occurrence of the specified pattern ignoring delimiters. If the pattern is found before the next line separator, the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected in the input up to the next line separator, then \u003ccode\u003enull\u003c/code\u003e is returned and the scanner\u0027s position is unchanged. This method may block waiting for input that matches the pattern. \u003cp\u003eSince this method continues to search through the input looking for the specified pattern, it may buffer all of the input searching for the desired token if no line separators are present.\n * @param pattern the pattern to scan for\n * @return the text that matched the specified pattern\n * @throws IllegalStateException if this scanner is closed\n */\n","tf":{"freq":{"attempt":1,"next":3,"state":1,"line":4,"block":1,"wait":1,"desir":1,"close":1,"specifi":3,"occurr":1,"buffer":1,"token":1,"search":2,"scanner":3,"find":2,"look":1,"delimit":1,"detect":1,"except":1,"text":1,"ignor":1,"may":2,"unchang":1,"past":1,"illeg":1,"continu":1,"present":1,"input":5,"pattern":9,"separ":3,"advanc":1,"string":1,"scan":1,"method":2,"match":4,"posit":1,"found":1},"maxFreq":9,"totalTerms":67},"loc":31}