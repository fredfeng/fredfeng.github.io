{"id":24199,"className":"java.util.prefs.Preferences","methodName":"remove","signature":"\u003cjava.util.prefs.Preferences: void remove(java.lang.String)\u003e","javadoc":"/** \n * Removes the value associated with the specified key in this preference node, if any. \u003cp\u003eIf this implementation supports \u003ci\u003estored defaults\u003c/i\u003e, and there is such a default for the specified preference, the stored default will be \"exposed\" by this call, in the sense that it will be returned by a succeeding call to \u003ctt\u003eget\u003c/tt\u003e.\n * @param key key whose mapping is to be removed from the preference node.\n * @throws NullPointerException if \u003ctt\u003ekey\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n */\n","tf":{"freq":{"call":2,"except":2,"succeed":1,"support":1,"store":2,"whose":1,"link":1,"beenremov":1,"state":1,"remov":4,"illeg":1,"specifi":2,"node":4,"associ":1,"map":1,"will":2,"pointer":1,"method":1,"valu":1,"expos":1,"prefer":3,"ancestor":1,"sens":1,"key":4},"maxFreq":4,"totalTerms":40},"loc":0}