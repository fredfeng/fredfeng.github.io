{"id":21974,"className":"java.util.Collections","methodName":"synchronizedMap","signature":"\u003cjava.util.Collections: java.util.Map\u003cK,V\u003e synchronizedMap(java.util.Map)\u003e","javadoc":"/** \n * Returns a synchronized (thread-safe) map backed by the specified map.  In order to guarantee serial access, it is critical that \u003cstrong\u003eall\u003c/strong\u003e access to the backing map is accomplished through the returned map.\u003cp\u003e It is imperative that the user manually synchronize on the returned map when iterating over any of its collection views: \u003cpre\u003e Map m \u003d Collections.synchronizedMap(new HashMap()); ... Set s \u003d m.keySet();  // Needn\u0027t be in synchronized block ... synchronized (m) {  // Synchronizing on m, not s! Iterator i \u003d s.iterator(); // Must be in synchronized block while (i.hasNext()) foo(i.next()); } \u003c/pre\u003e Failure to follow this advice may result in non-deterministic behavior. \u003cp\u003eThe returned map will be serializable if the specified map is serializable.\n * @param m the map to be \"wrapped\" in a synchronized map.\n * @return a synchronized view of the specified map.\n */\n","tf":{"freq":{"result":1,"accomplish":1,"behavior":1,"serializ":2,"next":2,"block":2,"foo":1,"must":1,"specifi":3,"order":1,"determinist":1,"thread":1,"map":14,"imper":1,"advic":1,"key":1,"follow":1,"wrap":1,"safe":1,"may":1,"needn":1,"failur":1,"hash":1,"guarante":1,"back":2,"access":2,"non":1,"manual":1,"strong":2,"pre":2,"will":1,"view":2,"iter":3,"serial":1,"user":1,"critic":1,"collect":2},"maxFreq":14,"totalTerms":63},"loc":3}