{"id":21587,"className":"java.util.TimerTask","methodName":"scheduledExecutionTime","signature":"\u003cjava.util.TimerTask: long scheduledExecutionTime()\u003e","javadoc":"/** \n * Returns the \u003ci\u003escheduled\u003c/i\u003e execution time of the most recent \u003ci\u003eactual\u003c/i\u003e execution of this task.  (If this method is invoked while task execution is in progress, the return value is the scheduled execution time of the ongoing task execution.) \u003cp\u003eThis method is typically invoked from within a task\u0027s run method, to determine whether the current execution of the task is sufficiently timely to warrant performing the scheduled activity: \u003cpre\u003e public void run() { if (System.currentTimeMillis() - scheduledExecutionTime() \u003e\u003d MAX_TARDINESS) return;  // Too late; skip this execution. // Perform the task } \u003c/pre\u003e This method is typically \u003ci\u003enot\u003c/i\u003e used in conjunction with \u003ci\u003efixed-delay execution\u003c/i\u003e repeating tasks, as their scheduled execution times are allowed to drift over time, and so are not terribly significant.\n * @return the time at which the most recent execution of this task wasscheduled to occur, in the format returned by Date.getTime(). The return value is undefined if the task has yet to commence its first execution.\n * @see Date#getTime()\n */\n","tf":{"freq":{"progress":1,"warrant":1,"wasschedul":1,"allow":1,"terribl":1,"typic":2,"use":1,"schedul":6,"milli":1,"perform":2,"drift":1,"repeat":1,"date":2,"skip":1,"run":2,"activ":1,"recent":2,"whether":1,"time":11,"fix":1,"current":2,"valu":2,"undefin":1,"invok":2,"task":9,"signific":1,"format":1,"commenc":1,"conjunct":1,"system":1,"pre":2,"late":1,"determin":1,"ongo":1,"actual":1,"suffici":1,"method":4,"delay":1,"within":1,"execut":13,"first":1,"yet":1,"occur":1},"maxFreq":13,"totalTerms":90},"loc":6}