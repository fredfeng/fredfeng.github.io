{"id":21265,"className":"java.util.AbstractCollection","methodName":"toArray","signature":"\u003cjava.util.AbstractCollection: java.lang.Object[] toArray()\u003e","javadoc":"/** \n * {@inheritDoc}\u003cp\u003eThis implementation returns an array containing all the elements returned by this collection\u0027s iterator, in the same order, stored in consecutive elements of the array, starting with index  {@code 0}. The length of the returned array is equal to the number of elements returned by the iterator, even if the size of this collection changes during iteration, as might happen if the collection permits concurrent modification during iteration.  The  {@code size} method iscalled only as an optimization hint; the correct result is returned even if the iterator returns a different number of elements. \u003cp\u003eThis method is equivalent to: \u003cpre\u003e  {@code List\u003cE\u003e list \u003d new ArrayList\u003cE\u003e(size()); for (E e : this) list.add(e); return list.toArray();}\u003c/pre\u003e\n */\n","tf":{"freq":{"result":1,"might":1,"store":1,"concurr":1,"permit":1,"add":1,"correct":1,"order":1,"equival":1,"length":1,"iscal":1,"happen":1,"element":4,"index":1,"optim":1,"list":5,"hint":1,"equal":1,"number":2,"consecut":1,"size":3,"differ":1,"start":1,"pre":2,"contain":1,"even":2,"method":2,"chang":1,"iter":5,"modif":1,"collect":3,"array":6},"maxFreq":6,"totalTerms":56},"loc":11}