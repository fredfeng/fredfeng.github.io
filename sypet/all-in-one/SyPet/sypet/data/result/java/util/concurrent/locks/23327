{"id":23327,"className":"java.util.concurrent.locks.ReentrantLock","methodName":"isHeldByCurrentThread","signature":"\u003cjava.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()\u003e","javadoc":"/** \n * Queries if this lock is held by the current thread. \u003cp\u003eAnalogous to the  {@link Thread#holdsLock} method for built-inmonitor locks, this method is typically used for debugging and testing. For example, a method that should only be called while a lock is held can assert that this is the case: \u003cpre\u003e class X { ReentrantLock lock \u003d new ReentrantLock(); // ... public void m() { assert lock.isHeldByCurrentThread(); // ... method body } } \u003c/pre\u003e \u003cp\u003eIt can also be used to ensure that a reentrant lock is used in a non-reentrant manner, for example: \u003cpre\u003e class X { ReentrantLock lock \u003d new ReentrantLock(); // ... public void m() { assert !lock.isHeldByCurrentThread(); lock.lock(); try { // ... method body } finally { lock.unlock(); } } } \u003c/pre\u003e\n * @return {@code true} if current thread holds this lock and{@code false} otherwise\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"call":1,"test":1,"link":1,"typic":1,"use":3,"analog":1,"debug":1,"inmonitor":1,"reentrant":6,"ensur":1,"thread":6,"current":5,"built":1,"held":5,"unlock":1,"hold":2,"lock":17,"true":1,"non":1,"queri":1,"bodi":2,"pre":4,"exampl":2,"method":5,"manner":1,"also":1},"maxFreq":17,"totalTerms":74},"loc":3}