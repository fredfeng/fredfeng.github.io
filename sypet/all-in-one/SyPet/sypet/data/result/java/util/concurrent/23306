{"id":23306,"className":"java.util.concurrent.Phaser","methodName":"awaitAdvanceInterruptibly","signature":"\u003cjava.util.concurrent.Phaser: int awaitAdvanceInterruptibly(int,long,java.util.concurrent.TimeUnit)\u003e","javadoc":"/** \n * Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing  {@code InterruptedException} if interrupted while waiting, orreturning immediately if the current phase is not equal to the given phase value or this phaser is terminated.\n * @param phase an arrival phase number, or negative value ifterminated; this argument is normally the value returned by a previous call to  {@code arrive} or {@code arriveAndDeregister}.\n * @param timeout how long to wait before giving up, in units of{@code unit}\n * @param unit a {@code TimeUnit} determining how to interpret the{@code timeout} parameter\n * @return the next arrival phase number, or the argument if it isnegative, or the (negative)  {@linkplain #getPhase() current phase}if terminated\n * @throws InterruptedException if thread interrupted while waiting\n * @throws TimeoutException if timed out while waiting\n */\n","tf":{"freq":{"linkplain":1,"call":1,"give":1,"next":1,"normal":1,"interpret":1,"wait":4,"isneg":1,"elaps":1,"time":2,"given":3,"deregist":1,"thread":1,"current":2,"valu":4,"immedi":1,"argument":2,"except":3,"previous":1,"orreturn":1,"paramet":1,"equal":1,"number":2,"interrupt":5,"iftermin":1,"unit":4,"termin":2,"await":2,"advanc":2,"determin":1,"phaser":2,"negat":2,"arriv":4,"phase":9,"timeout":4},"maxFreq":9,"totalTerms":75},"loc":17}