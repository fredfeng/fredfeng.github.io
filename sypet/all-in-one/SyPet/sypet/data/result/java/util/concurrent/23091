{"id":23091,"className":"java.util.concurrent.Semaphore","methodName":"tryAcquire","signature":"\u003cjava.util.concurrent.Semaphore: boolean tryAcquire(int)\u003e","javadoc":"/** \n * Acquires the given number of permits from this semaphore, only if all are available at the time of invocation. \u003cp\u003eAcquires the given number of permits, if they are available, and returns immediately, with the value  {@code true}, reducing the number of available permits by the given amount. \u003cp\u003eIf insufficient permits are available then this method will return immediately with the value  {@code false} and the number of availablepermits is unchanged. \u003cp\u003eEven when this semaphore has been set to use a fair ordering policy, a call to  {@code tryAcquire} \u003cem\u003ewill\u003c/em\u003eimmediately acquire a permit if one is available, whether or not other threads are currently waiting.  This \u0026quot;barging\u0026quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting, then use  {@link #tryAcquire(int,long,TimeUnit) tryAcquire(permits, 0, TimeUnit.SECONDS) }which is almost equivalent (it also detects interruption).\n * @param permits the number of permits to acquire\n * @return {@code true} if the permits were acquired and{@code false} otherwise\n * @throws IllegalArgumentException if {@code permits} is negative\n */\n","tf":{"freq":{"fals":2,"acquir":9,"availablepermit":1,"permit":10,"wait":1,"whether":1,"though":1,"amount":1,"almost":1,"time":3,"given":3,"equival":1,"thread":1,"barg":1,"quot":2,"argument":1,"except":1,"unchang":1,"honor":1,"number":5,"avail":5,"circumst":1,"polici":1,"fair":3,"invoc":1,"insuffici":1,"will":2,"negat":1,"even":2,"otherwis":1,"call":1,"behavior":1,"one":1,"link":1,"use":3,"order":1,"current":1,"immedi":3,"valu":2,"want":1,"detect":1,"semaphor":2,"true":2,"illeg":1,"interrupt":1,"unit":2,"method":1,"reduc":1,"certain":1,"also":1},"maxFreq":10,"totalTerms":93},"loc":4}