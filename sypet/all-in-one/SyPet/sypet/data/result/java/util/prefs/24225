{"id":24225,"className":"java.util.prefs.Preferences","methodName":"addPreferenceChangeListener","signature":"\u003cjava.util.prefs.Preferences: void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)\u003e","javadoc":"/** \n * Registers the specified listener to receive \u003ci\u003epreference change events\u003c/i\u003e for this preference node.  A preference change event is generated when a preference is added to this node, removed from this node, or when the value associated with a preference is changed. (Preference change events are \u003ci\u003enot\u003c/i\u003e generated by the  {@link #removeNode()} method, which generates a \u003ci\u003enode change event\u003c/i\u003e.Preference change events \u003ci\u003eare\u003c/i\u003e generated by the \u003ctt\u003eclear\u003c/tt\u003e method.) \u003cp\u003eEvents are only guaranteed for changes made within the same JVM as the registered listener, though some implementations may generate events for changes made outside this JVM.  Events may be generated before the changes have been made persistent.  Events are not generated when preferences are modified in descendants of this node; a caller desiring such events must register with each descendant.\n * @param pcl The preference change listener to add.\n * @throws NullPointerException if \u003ctt\u003epcl\u003c/tt\u003e is null.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n * @see #removePreferenceChangeListener(PreferenceChangeListener)\n * @see #addNodeChangeListener(NodeChangeListener)\n */\n","tf":{"freq":{"caller":1,"link":2,"state":1,"made":3,"persist":1,"desir":1,"add":3,"must":1,"though":1,"specifi":1,"clear":1,"associ":1,"event":10,"regist":3,"valu":1,"ancestor":1,"listen":8,"except":2,"may":2,"guarante":1,"beenremov":1,"remov":4,"receiv":1,"illeg":1,"pcl":2,"node":10,"outsid":1,"generat":7,"modifi":1,"pointer":1,"ad":1,"method":3,"descend":2,"chang":15,"within":1,"prefer":12},"maxFreq":15,"totalTerms":108},"loc":0}