{"id":24010,"className":"java.util.logging.LoggingMXBean","methodName":"setLoggerLevel","signature":"\u003cjava.util.logging.LoggingMXBean: void setLoggerLevel(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Sets the specified logger to the specified new level. If the \u003ctt\u003elevelName\u003c/tt\u003e is not \u003ctt\u003enull\u003c/tt\u003e, the level of the specified logger is set to the parsed \u003ctt\u003eLevel\u003c/tt\u003e matching the \u003ctt\u003elevelName\u003c/tt\u003e. If the \u003ctt\u003elevelName\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, the level of the specified logger is set to \u003ctt\u003enull\u003c/tt\u003e and the effective level of the logger is inherited from its nearest ancestor with a specific (non-null) level value.\n * @param loggerName The name of the \u003ctt\u003eLogger\u003c/tt\u003e to be set.Must be non-null.\n * @param levelName The name of the level to set on the specified logger,or \u003ctt\u003enull\u003c/tt\u003e if setting the level to inherit from its nearest ancestor.\n * @throws IllegalArgumentException if the specified loggerdoes not exist, or \u003ctt\u003elevelName\u003c/tt\u003e is not a valid level name.\n * @throws SecurityException if a security manager exists and ifthe caller does not have LoggingPermission(\"control\").\n * @see Logger#setLevel\n */\n","tf":{"freq":{"caller":1,"valid":1,"loggerdo":1,"must":1,"specifi":6,"level":16,"name":9,"permiss":1,"logger":9,"valu":1,"ancestor":2,"exist":2,"argument":1,"control":1,"except":2,"ifth":1,"manag":1,"nearest":2,"illeg":1,"log":1,"non":2,"specif":1,"secur":2,"effect":1,"match":1,"pars":1},"maxFreq":16,"totalTerms":68},"loc":0}