{"id":22182,"className":"java.util.Collections","methodName":"disjoint","signature":"\u003cjava.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)\u003e","javadoc":"/** \n * Returns  {@code true} if the two specified collections have noelements in common. \u003cp\u003eCare must be exercised if this method is used on collections that do not comply with the general contract for  {@code Collection}. Implementations may elect to iterate over either collection and test for containment in the other collection (or to perform any equivalent computation).  If either collection uses a nonstandard equality test (as does a  {@link SortedSet} whose ordering is not \u003cem\u003ecompatible withequals\u003c/em\u003e, or the key set of an  {@link IdentityHashMap}), both collections must use the same nonstandard equality test, or the result of this method is undefined. \u003cp\u003eCare must also be exercised when using collections that have restrictions on the elements that they may contain. Collection implementations are allowed to throw exceptions for any operation involving elements they deem ineligible. For absolute safety the specified collections should contain only elements which are eligible elements for both collections. \u003cp\u003eNote that it is permissible to pass the same collection in both parameters, in which case the method will return  {@code true} if andonly if the collection is empty.\n * @param c1 a collection\n * @param c2 a collection\n * @return {@code true} if the two specified collections have noelements in common.\n * @throws NullPointerException if either collection is {@code null}.\n * @throws NullPointerException if one collection contains a {@code null}element and  {@code null} is not an eligible element for the other collection.(\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n * @throws ClassCastException if one collection contains an element that isof a type which is ineligible for the other collection. (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)\n * @since 1.5\n */\n","tf":{"freq":{"test":3,"perform":1,"compli":1,"type":1,"withequ":1,"elig":2,"must":3,"specifi":3,"nonstandard":2,"equival":1,"oper":1,"permiss":1,"care":2,"deem":1,"undefin":1,"href":2,"option":4,"key":1,"element":7,"elect":1,"except":4,"contract":1,"whose":1,"hash":1,"disjoint":1,"involv":1,"absolut":1,"restrict":3,"andon":1,"cast":1,"contain":5,"will":1,"pointer":2,"comput":1,"collect":23,"compat":1,"result":1,"sort":1,"allow":1,"common":2,"one":2,"link":2,"use":4,"noelement":2,"order":1,"ident":1,"map":1,"exercis":2,"isof":1,"note":1,"safeti":1,"may":2,"inelig":2,"paramet":1,"true":3,"equal":2,"general":1,"empti":1,"pass":1,"two":2,"either":3,"html":2,"method":3,"iter":1,"also":1},"maxFreq":23,"totalTerms":135},"loc":51}