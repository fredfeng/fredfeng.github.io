{"id":22599,"className":"java.util.concurrent.Future","methodName":"cancel","signature":"\u003cjava.util.concurrent.Future: boolean cancel(boolean)\u003e","javadoc":"/** \n * Attempts to cancel execution of this task.  This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when \u003ctt\u003ecancel\u003c/tt\u003e is called, this task should never run.  If the task has already started, then the \u003ctt\u003emayInterruptIfRunning\u003c/tt\u003e parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task. \u003cp\u003eAfter this method returns, subsequent calls to  {@link #isDone} willalways return \u003ctt\u003etrue\u003c/tt\u003e.  Subsequent calls to  {@link #isCancelled}will always return \u003ctt\u003etrue\u003c/tt\u003e if this method returned \u003ctt\u003etrue\u003c/tt\u003e.\n * @param mayInterruptIfRunning \u003ctt\u003etrue\u003c/tt\u003e if the thread executing thistask should be interrupted; otherwise, in-progress tasks are allowed to complete\n * @return \u003ctt\u003efalse\u003c/tt\u003e if the task could not be cancelled,typically because it has already completed normally; \u003ctt\u003etrue\u003c/tt\u003e otherwise\n */\n","tf":{"freq":{"fals":1,"progress":1,"otherwis":2,"attempt":3,"call":3,"stop":1,"allow":1,"reason":1,"normal":1,"link":2,"typic":1,"cancel":7,"run":3,"thistask":1,"whether":1,"fail":1,"thread":2,"subsequ":2,"complet":3,"may":2,"alway":1,"task":9,"done":1,"paramet":1,"true":5,"interrupt":4,"never":1,"start":2,"determin":1,"will":2,"willalway":1,"alreadi":4,"method":2,"execut":3,"success":1},"maxFreq":9,"totalTerms":77},"loc":0}