{"id":21741,"className":"java.util.Map$Entry","methodName":"setValue","signature":"\u003cjava.util.Map$Entry: V setValue(V)\u003e","javadoc":"/** \n * Replaces the value corresponding to this entry with the specified value (optional operation).  (Writes through to the map.)  The behavior of this call is undefined if the mapping has already been removed from the map (by the iterator\u0027s \u003ctt\u003eremove\u003c/tt\u003e operation).\n * @param value new value to be stored in this entry\n * @return old value corresponding to the entry\n * @throws UnsupportedOperationException if the \u003ctt\u003eput\u003c/tt\u003e operationis not supported by the backing map\n * @throws ClassCastException if the class of the specified valueprevents it from being stored in the backing map\n * @throws NullPointerException if the backing map does not permitnull values, and the specified value is null\n * @throws IllegalArgumentException if some property of this valueprevents it from being stored in the backing map\n * @throws IllegalStateException implementations may, but are notrequired to, throw this exception if the entry has been removed from the backing map.\n */\n","tf":{"freq":{"call":1,"old":1,"unsupport":1,"put":1,"store":3,"behavior":1,"correspond":2,"state":1,"specifi":3,"oper":3,"map":8,"write":1,"valu":8,"permitnul":1,"undefin":1,"option":1,"argument":1,"may":1,"except":6,"support":1,"entri":4,"remov":3,"back":5,"valueprev":2,"illeg":2,"notrequir":1,"cast":1,"operationi":1,"replac":1,"pointer":1,"alreadi":1,"properti":1,"iter":1},"maxFreq":8,"totalTerms":70},"loc":0}