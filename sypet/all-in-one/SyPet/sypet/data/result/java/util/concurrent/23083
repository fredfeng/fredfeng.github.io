{"id":23083,"className":"java.util.concurrent.Semaphore","methodName":"Semaphore","signature":"\u003cjava.util.concurrent.Semaphore: void Semaphore(int,boolean)\u003e","javadoc":"/** \n * Creates a  {@code Semaphore} with the given number ofpermits and the given fairness setting.\n * @param permits the initial number of permits available.This value may be negative, in which case releases must occur before any acquires will be granted.\n * @param fair {@code true} if this semaphore will guaranteefirst-in first-out granting of permits under contention, else  {@code false}\n */\n","tf":{"freq":{"fals":1,"acquir":1,"may":1,"semaphor":3,"grant":2,"creat":1,"permit":3,"true":1,"number":2,"avail":1,"ofpermit":1,"fair":2,"els":1,"must":1,"content":1,"releas":1,"given":2,"will":2,"guaranteefirst":1,"valu":1,"negat":1,"initi":1,"first":1,"occur":1},"maxFreq":3,"totalTerms":33},"loc":3}