{"id":20215,"className":"java.util.Arrays","methodName":"sort","signature":"\u003cjava.util.Arrays: void sort(float[])\u003e","javadoc":"/** \n * Sorts the specified array into ascending numerical order. \u003cp\u003eThe  {@code \u003c} relation does not provide a total order on all floatvalues:  {@code -0.0f \u003d\u003d 0.0f} is {@code true} and a {@code Float.NaN}value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method {@link Float#compareTo}:  {@code -0.0f} is treated as less than value{@code 0.0f} and {@code Float.NaN} is considered greater than anyother value and all  {@code Float.NaN} values are considered equal.\u003cp\u003eImplementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.\n * @param a the array to be sorted\n */\n","tf":{"freq":{"yaroslavskiy":1,"total":2,"sort":4,"greater":2,"floatvalu":1,"one":1,"link":1,"typic":1,"data":1,"use":1,"perform":2,"joshua":1,"bloch":1,"consid":2,"algorithm":2,"specifi":1,"dual":1,"pivot":2,"faster":1,"order":3,"relat":1,"quadrat":1,"jon":1,"valu":5,"bentley":1,"note":1,"less":2,"mani":1,"vladimir":1,"numer":1,"true":1,"equal":2,"offer":1,"log":1,"anyoth":1,"provid":1,"tradit":1,"impos":1,"neither":1,"caus":1,"degrad":1,"even":1,"method":2,"ascend":1,"quicksort":3,"compar":2,"array":2,"treat":1},"maxFreq":5,"totalTerms":70},"loc":3}