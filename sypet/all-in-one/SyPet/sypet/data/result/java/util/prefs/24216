{"id":24216,"className":"java.util.prefs.Preferences","methodName":"node","signature":"\u003cjava.util.prefs.Preferences: java.util.prefs.Preferences node(java.lang.String)\u003e","javadoc":"/** \n * Returns the named preference node in the same tree as this node, creating it and any of its ancestors if they do not already exist. Accepts a relative or absolute path name.  Relative path names (which do not begin with the slash character \u003ctt\u003e(\u0027/\u0027)\u003c/tt\u003e) are interpreted relative to this preference node. \u003cp\u003eIf the returned node did not exist prior to this call, this node and any ancestors that were created by this call are not guaranteed to become permanent until the \u003ctt\u003eflush\u003c/tt\u003e method is called on the returned node (or one of its ancestors or descendants).\n * @param pathName the path name of the preference node to return.\n * @return the specified preference node.\n * @throws IllegalArgumentException if the path name is invalid (i.e.,it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long).\n * @throws NullPointerException if path name is \u003ctt\u003enull\u003c/tt\u003e.\n * @throws IllegalStateException if this node (or an ancestor) has beenremoved with the  {@link #removeNode()} method.\n * @see #flush()\n */\n","tf":{"freq":{"call":3,"accept":1,"link":1,"one":2,"state":1,"interpret":1,"specifi":1,"prior":1,"becom":1,"invalid":1,"tree":1,"name":7,"path":6,"relat":3,"exist":2,"ancestor":4,"end":1,"argument":1,"except":3,"slash":3,"multipl":1,"creat":2,"charact":4,"guarante":1,"remov":1,"beenremov":1,"absolut":1,"illeg":2,"consecut":1,"begin":1,"node":11,"flush":2,"contain":1,"pointer":1,"alreadi":1,"method":2,"descend":1,"prefer":4,"perman":1},"maxFreq":11,"totalTerms":83},"loc":0}