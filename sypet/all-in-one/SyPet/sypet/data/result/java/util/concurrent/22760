{"id":22760,"className":"java.util.concurrent.CyclicBarrier","methodName":"await","signature":"\u003cjava.util.concurrent.CyclicBarrier: int await()\u003e","javadoc":"/** \n * Waits until all  {@linkplain #getParties parties} have invoked\u003ctt\u003eawait\u003c/tt\u003e on this barrier. \u003cp\u003eIf the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: \u003cul\u003e \u003cli\u003eThe last thread arrives; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}the current thread; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}one of the other waiting threads; or \u003cli\u003eSome other thread times out while waiting for barrier; or \u003cli\u003eSome other thread invokes  {@link #reset} on this barrier.\u003c/ul\u003e \u003cp\u003eIf the current thread: \u003cul\u003e \u003cli\u003ehas its interrupted status set on entry to this method; or \u003cli\u003eis  {@linkplain Thread#interrupt interrupted} while waiting\u003c/ul\u003e then  {@link InterruptedException} is thrown and the current thread\u0027sinterrupted status is cleared. \u003cp\u003eIf the barrier is  {@link #reset} while any thread is waiting,or if the barrier  {@linkplain #isBroken is broken} when\u003ctt\u003eawait\u003c/tt\u003e is invoked, or while any thread is waiting, then {@link BrokenBarrierException} is thrown.\u003cp\u003eIf any thread is  {@linkplain Thread#interrupt interrupted} while waiting,then all other waiting threads will throw {@link BrokenBarrierException} and the barrier is placed in the brokenstate. \u003cp\u003eIf the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state.\n * @return the arrival index of the current thread, where index\u003ctt\u003e {@link #getParties()} - 1\u003c/tt\u003e indicates the firstto arrive and zero indicates the last to arrive\n * @throws InterruptedException if the current thread was interruptedwhile waiting\n * @throws BrokenBarrierException if \u003cem\u003eanother\u003c/em\u003e thread wasinterrupted or timed out while the current thread was waiting, or the barrier was reset, or the barrier was broken when  {@code await} was called, or the barrieraction (if present) failed due an exception.\n */\n","tf":{"freq":{"last":4,"wait":10,"zero":1,"time":2,"barrier":14,"fail":1,"firstto":1,"thread":28,"action":3,"propag":1,"reset":3,"purpos":1,"brokenst":1,"happen":1,"place":2,"sinterrupt":1,"follow":1,"except":8,"thrown":2,"index":2,"status":2,"invok":3,"continu":1,"non":1,"present":1,"await":4,"disabl":1,"will":2,"due":1,"wasinterrupt":1,"arriv":6,"thing":1,"parti":3,"call":1,"linkplain":6,"barrieract":1,"allow":1,"link":6,"one":2,"state":1,"schedul":1,"anoth":1,"run":1,"clear":1,"interruptedwhil":1,"indic":2,"current":10,"constructor":1,"entri":1,"suppli":1,"interrupt":11,"broken":7,"method":1,"lie":1,"dormant":1,"occur":1},"maxFreq":28,"totalTerms":174},"loc":7}