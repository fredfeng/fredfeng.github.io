{"id":24084,"className":"java.util.logging.Logger","methodName":"getAnonymousLogger","signature":"\u003cjava.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()\u003e","javadoc":"/** \n * Create an anonymous Logger.  The newly created Logger is not registered in the LogManager namespace.  There will be no access checks on updates to the logger. \u003cp\u003e This factory method is primarily intended for use from applets. Because the resulting Logger is anonymous it can be kept private by the creating class.  This removes the need for normal security checks, which in turn allows untrusted applet code to update the control state of the Logger.  For example an applet can do a setLevel or an addHandler on an anonymous Logger. \u003cp\u003e Even although the new logger is anonymous, it is configured to have the root logger (\"\") as its parent.  This means that by default it inherits its effective level and handlers from the root logger. \u003cp\u003e\n * @return a newly created private Logger\n */\n","tf":{"freq":{"need":1,"result":1,"allow":1,"root":2,"normal":1,"state":1,"use":1,"add":1,"primarili":1,"although":1,"namespac":1,"level":2,"factori":1,"logger":11,"mean":1,"regist":1,"applet":3,"kept":1,"control":1,"turn":1,"check":2,"anonym":5,"creat":4,"manag":1,"remov":1,"parent":1,"access":1,"log":1,"newli":2,"configur":1,"secur":1,"effect":1,"updat":2,"exampl":1,"will":1,"even":1,"method":1,"intend":1,"untrust":1,"handler":2},"maxFreq":11,"totalTerms":65},"loc":3}