{"id":21796,"className":"java.util.Scanner","methodName":"nextShort","signature":"\u003cjava.util.Scanner: short nextShort(int)\u003e","javadoc":"/** \n * Scans the next token of the input as a \u003ctt\u003eshort\u003c/tt\u003e. This method will throw \u003ccode\u003eInputMismatchException\u003c/code\u003e if the next token cannot be translated into a valid short value as described below. If the translation is successful, the scanner advances past the input that matched. \u003cp\u003e If the next token matches the \u003ca href\u003d\"#Integer-regex\"\u003e\u003ci\u003eInteger\u003c/i\u003e\u003c/a\u003e regular expression defined above then the token is converted into a \u003ctt\u003eshort\u003c/tt\u003e value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via  {@link Character#digit Character.digit}, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to {@link Short#parseShort(String,int) Short.parseShort} with thespecified radix.\n * @param radix the radix used to interpret the token as a short value\n * @return the \u003ctt\u003eshort\u003c/tt\u003e scanned from the input\n * @throws InputMismatchException if the next token does not match the \u003ci\u003eInteger\u003c/i\u003e regular expression, or is out of range\n * @throws NoSuchElementException if input is exhausted\n * @throws IllegalStateException if this scanner is closed\n */\n","tf":{"freq":{"via":1,"close":1,"rang":1,"thespecifi":1,"href":1,"scanner":2,"element":1,"except":4,"charact":2,"regex":1,"remov":1,"describ":1,"non":1,"digit":4,"sign":1,"present":1,"input":6,"advanc":1,"separ":1,"prefix":2,"will":1,"negat":2,"match":3,"defin":1,"valid":1,"result":1,"next":5,"link":2,"state":1,"interpret":1,"convert":1,"use":1,"express":2,"token":6,"map":1,"valu":3,"regular":2,"prepend":1,"past":1,"translat":2,"illeg":1,"suffix":2,"pass":1,"specif":3,"radix":3,"string":2,"exhaust":1,"scan":2,"method":1,"local":3,"mismatch":2,"group":1,"integ":3,"success":1,"pars":2},"maxFreq":6,"totalTerms":100},"loc":21}