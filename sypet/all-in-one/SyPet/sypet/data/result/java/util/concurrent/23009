{"id":23009,"className":"java.util.concurrent.BlockingQueue","methodName":"remainingCapacity","signature":"\u003cjava.util.concurrent.BlockingQueue: int remainingCapacity()\u003e","javadoc":"/** \n * Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or \u003ctt\u003eInteger.MAX_VALUE\u003c/tt\u003e if there is no intrinsic limit. \u003cp\u003eNote that you \u003cem\u003ecannot\u003c/em\u003e always tell if an attempt to insert an element will succeed by inspecting \u003ctt\u003eremainingCapacity\u003c/tt\u003e because it may be the case that another thread is about to insert or remove an element.\n * @return the remaining capacity\n */\n","tf":{"freq":{"attempt":1,"queue":1,"memori":1,"accept":1,"constraint":1,"block":1,"anoth":1,"intrins":1,"resourc":1,"thread":1,"absenc":1,"tell":1,"note":1,"limit":1,"element":3,"addit":1,"may":1,"succeed":1,"alway":1,"remov":1,"ideal":1,"number":1,"without":1,"remain":3,"will":1,"capac":3,"insert":2,"integ":1,"inspect":1},"maxFreq":3,"totalTerms":36},"loc":0}