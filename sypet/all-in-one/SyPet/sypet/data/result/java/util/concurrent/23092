{"id":23092,"className":"java.util.concurrent.Semaphore","methodName":"tryAcquire","signature":"\u003cjava.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)\u003e","javadoc":"/** \n * Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been  {@linkplain Thread#interrupt interrupted}. \u003cp\u003eAcquires the given number of permits, if they are available and returns immediately, with the value  {@code true}, reducing the number of available permits by the given amount. \u003cp\u003eIf insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: \u003cul\u003e \u003cli\u003eSome other thread invokes one of the  {@link #release() release}methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts}the current thread; or \u003cli\u003eThe specified waiting time elapses. \u003c/ul\u003e \u003cp\u003eIf the permits are acquired then the value  {@code true} is returned.\u003cp\u003eIf the current thread: \u003cul\u003e \u003cli\u003ehas its interrupted status set on entry to this method; or \u003cli\u003eis  {@linkplain Thread#interrupt interrupted} while waitingto acquire the permits, \u003c/ul\u003e then  {@link InterruptedException} is thrown and the current thread\u0027sinterrupted status is cleared. Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to  {@link #release()}. \u003cp\u003eIf the specified waiting time elapses then the value  {@code false}is returned.  If the time is less than or equal to zero, the method will not wait at all.  Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to {@link #release()}.\n * @param permits the number of permits to acquire\n * @param timeout the maximum time to wait for the permits\n * @param unit the time unit of the {@code timeout} argument\n * @return {@code true} if all permits were acquired and {@code false}if the waiting time elapsed before all permits were acquired\n * @throws InterruptedException if the current thread is interrupted\n * @throws IllegalArgumentException if {@code permits} is negative\n */\n","tf":{"freq":{"fals":2,"acquir":10,"assign":5,"waitingto":1,"permit":20,"wait":6,"zero":1,"specifi":2,"amount":1,"elaps":3,"time":7,"becom":2,"given":4,"thread":17,"request":1,"three":1,"purpos":1,"happen":1,"sinterrupt":1,"argument":2,"except":3,"thrown":1,"status":2,"invok":1,"number":5,"avail":7,"insuffici":1,"disabl":1,"maximum":1,"will":1,"negat":1,"thing":1,"call":2,"linkplain":3,"one":2,"link":4,"next":1,"made":2,"schedul":1,"clear":1,"releas":4,"current":7,"valu":3,"immedi":1,"less":1,"semaphor":2,"entri":1,"true":3,"equal":1,"illeg":1,"interrupt":10,"unit":2,"satisfi":1,"instead":2,"method":3,"reduc":1,"within":1,"timeout":2,"lie":1,"dormant":1},"maxFreq":20,"totalTerms":177},"loc":4}