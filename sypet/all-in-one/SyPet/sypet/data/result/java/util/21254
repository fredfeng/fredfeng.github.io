{"id":21254,"className":"java.util.Random","methodName":"nextFloat","signature":"\u003cjava.util.Random: float nextFloat()\u003e","javadoc":"/** \n * Returns the next pseudorandom, uniformly distributed  {@code float}value between  {@code 0.0} and {@code 1.0} from this randomnumber generator\u0027s sequence. \u003cp\u003eThe general contract of  {@code nextFloat} is that one{@code float} value, chosen (approximately) uniformly from therange  {@code 0.0f} (inclusive) to {@code 1.0f} (exclusive), ispseudorandomly generated and returned. All 2\u003cfont size\u003d\"-1\"\u003e\u003csup\u003e24\u003c/sup\u003e\u003c/font\u003e possible  {@code float} valuesof the form \u003ci\u003em\u0026nbsp;x\u0026nbsp\u003c/i\u003e2\u003cfont size\u003d\"-1\"\u003e\u003csup\u003e-24\u003c/sup\u003e\u003c/font\u003e, where \u003ci\u003em\u003c/i\u003e is a positive integer less than 2\u003cfont size\u003d\"-1\"\u003e\u003csup\u003e24\u003c/sup\u003e \u003c/font\u003e, are produced with (approximately) equal probability. \u003cp\u003eThe method  {@code nextFloat} is implemented by class {@code Random}as if by: \u003cpre\u003e  {@code}public float nextFloat()  return next(24) / ((float)(1 \u003c\u003c 24)); }}\u003c/pre\u003e \u003cp\u003eThe hedge \"approximately\" is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose  {@code float}values from the stated range with perfect uniformity.\u003cp\u003e [In early versions of Java, the result was incorrectly calculated as: \u003cpre\u003e  {@code return next(30) / ((float)(1 \u003c\u003c 30));}\u003c/pre\u003e This might seem to be equivalent, if not better, but in fact it introduced a slight nonuniformity because of the bias in the rounding of floating-point numbers: it was slightly more likely that the low-order bit of the significand would be 0 than that it would be 1.]\n * @return the next pseudorandom, uniformly distributed {@code float}value between  {@code 0.0} and {@code 1.0} from thisrandom number generator\u0027s sequence\n */\n","tf":{"freq":{"unbias":1,"hedg":1,"distribut":2,"possibl":1,"round":1,"approxim":4,"earli":1,"independ":1,"slight":2,"probabl":1,"equival":1,"sequenc":2,"rang":1,"bias":1,"incorrect":1,"nbsp":2,"form":1,"contract":1,"font":6,"calcul":1,"random":2,"descript":1,"valuesof":1,"shown":1,"number":2,"like":1,"size":3,"bit":3,"better":1,"sourc":2,"low":1,"randomnumb":1,"posit":1,"might":1,"result":1,"significand":1,"next":9,"one":1,"state":1,"use":1,"therang":1,"chosen":3,"sup":6,"introduc":1,"version":1,"algorithm":1,"inclus":1,"order":1,"ispseudorandom":1,"nonuniform":1,"choos":1,"valu":4,"exclus":1,"perfect":2,"less":1,"uniform":4,"produc":1,"equal":1,"seem":1,"general":1,"thisrandom":1,"point":1,"fact":1,"forego":1,"pre":4,"generat":3,"java":1,"method":2,"integ":1,"pseudorandom":2},"maxFreq":9,"totalTerms":118},"loc":3}