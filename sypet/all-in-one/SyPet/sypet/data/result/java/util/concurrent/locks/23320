{"id":23320,"className":"java.util.concurrent.locks.ReentrantLock","methodName":"lock","signature":"\u003cjava.util.concurrent.locks.ReentrantLock: void lock()\u003e","javadoc":"/** \n * Acquires the lock. \u003cp\u003eAcquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. \u003cp\u003eIf the current thread already holds the lock then the hold count is incremented by one and the method returns immediately. \u003cp\u003eIf the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired, at which time the lock hold count is set to one.\n */\n","tf":{"freq":{"acquir":3,"held":2,"increment":1,"count":3,"hold":4,"one":3,"lock":8,"schedul":1,"anoth":2,"time":1,"becom":1,"disabl":1,"thread":5,"current":2,"purpos":1,"method":1,"immedi":2,"alreadi":1,"lie":1,"dormant":1},"maxFreq":8,"totalTerms":44},"loc":3}