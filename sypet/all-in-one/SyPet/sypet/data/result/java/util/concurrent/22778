{"id":22778,"className":"java.util.concurrent.ScheduledThreadPoolExecutor","methodName":"execute","signature":"\u003cjava.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)\u003e","javadoc":"/** \n * Executes  {@code command} with zero required delay.This has effect equivalent to {@link #schedule(Runnable,long,TimeUnit) schedule(command, 0, anyUnit)}. Note that inspections of the queue and of the list returned by {@code shutdownNow} will access the zero-delayed{@link ScheduledFuture}, not the  {@code command} itself.\u003cp\u003eA consequence of the use of  {@code ScheduledFuture} objects isthat  {@link ThreadPoolExecutor#afterExecute afterExecute} is alwayscalled with a null second  {@code Throwable} argument, even if the{@code command} terminated abruptly.  Instead, the {@code Throwable}thrown by such a task can be obtained via  {@link Future#get}.\n * @throws RejectedExecutionException at discretion of{@code RejectedExecutionHandler}, if the task cannot be accepted for execution because the executor has been shut down\n * @throws NullPointerException {@inheritDoc}\n */\n","tf":{"freq":{"discret":1,"queue":1,"reject":2,"via":1,"second":1,"accept":1,"link":4,"consequ":1,"schedul":4,"use":1,"object":1,"zero":2,"abrupt":1,"time":1,"requir":1,"shut":1,"pool":1,"equival":1,"thread":1,"command":4,"runnabl":1,"note":1,"shutdown":1,"argument":1,"except":2,"thrown":1,"futur":3,"task":2,"executor":2,"isthat":1,"list":1,"access":1,"unit":2,"obtain":1,"termin":1,"effect":1,"now":1,"alwayscal":1,"instead":1,"will":1,"pointer":1,"even":1,"throwabl":2,"delay":2,"execut":7,"inspect":1,"handler":1},"maxFreq":7,"totalTerms":72},"loc":3}