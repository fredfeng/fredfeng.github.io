{"id":21830,"className":"java.util.Collections","methodName":"binarySearch","signature":"\u003cjava.util.Collections: int binarySearch(java.util.List,T)\u003e","javadoc":"/** \n * Searches the specified list for the specified object using the binary search algorithm.  The list must be sorted into ascending order according to the  {@linkplain Comparable natural ordering} of itselements (as by the  {@link #sort(List)} method) prior to making thiscall.  If it is not sorted, the results are undefined.  If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found. \u003cp\u003eThis method runs in log(n) time for a \"random access\" list (which provides near-constant-time positional access).  If the specified list does not implement the  {@link RandomAccess} interface and is large,this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) element comparisons.\n * @param list the list to be searched.\n * @param key the key to be searched for.\n * @return the index of the search key, if it is contained in the list;otherwise, \u003ctt\u003e(-(\u003ci\u003einsertion point\u003c/i\u003e) - 1)\u003c/tt\u003e.  The \u003ci\u003einsertion point\u003c/i\u003e is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or \u003ctt\u003elist.size()\u003c/tt\u003e if all elements in the list are less than the specified key.  Note that this guarantees that the return value will be \u0026gt;\u003d 0 if and only if the key is found.\n * @throws ClassCastException if the list contains elements that are not\u003ci\u003emutually comparable\u003c/i\u003e (for example, strings and integers), or the search key is not mutually comparable with the elements of the list.\n */\n","tf":{"freq":{"greater":1,"natur":1,"perform":1,"must":1,"prior":1,"specifi":5,"time":2,"search":8,"undefin":1,"key":8,"element":6,"except":1,"index":2,"multipl":1,"random":2,"log":2,"provid":1,"comparison":1,"size":1,"cast":1,"near":1,"contain":3,"itsel":1,"will":3,"ascend":1,"make":1,"compar":3,"posit":1,"otherwis":1,"defin":1,"result":1,"linkplain":1,"binari":3,"sort":3,"link":3,"one":1,"use":1,"object":2,"thiscal":1,"run":1,"algorithm":1,"order":2,"valu":1,"note":1,"less":1,"travers":1,"constant":1,"guarante":2,"list":14,"equal":1,"accord":1,"access":3,"point":3,"mutual":2,"larg":1,"string":1,"exampl":1,"base":1,"method":3,"insert":3,"iter":1,"integ":1,"first":1,"found":2},"maxFreq":14,"totalTerms":129},"loc":6}