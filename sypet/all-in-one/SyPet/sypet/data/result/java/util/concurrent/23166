{"id":23166,"className":"java.util.concurrent.ConcurrentMap","methodName":"replace","signature":"\u003cjava.util.concurrent.ConcurrentMap: boolean replace(K,V,V)\u003e","javadoc":"/** \n * Replaces the entry for a key only if currently mapped to a given value. This is equivalent to \u003cpre\u003e if (map.containsKey(key) \u0026amp;\u0026amp; map.get(key).equals(oldValue)) { map.put(key, newValue); return true; } else return false;\u003c/pre\u003e except that the action is performed atomically.\n * @param key key with which the specified value is associated\n * @param oldValue value expected to be associated with the specified key\n * @param newValue value to be associated with the specified key\n * @return \u003ctt\u003etrue\u003c/tt\u003e if the value was replaced\n * @throws UnsupportedOperationException if the \u003ctt\u003eput\u003c/tt\u003e operationis not supported by this map\n * @throws ClassCastException if the class of a specified key or valueprevents it from being stored in this map\n * @throws NullPointerException if a specified key or value is null,and this map does not permit null keys or values\n * @throws IllegalArgumentException if some property of a specified keyor value prevents it from being stored in this map\n */\n","tf":{"freq":{"fals":1,"atom":1,"unsupport":1,"old":2,"put":2,"store":2,"permit":1,"perform":1,"specifi":6,"expect":1,"given":1,"oper":1,"equival":1,"associ":3,"map":8,"current":1,"action":1,"valu":12,"key":12,"argument":1,"except":5,"support":1,"keyor":1,"entri":1,"true":2,"prevent":1,"equal":1,"valueprev":1,"illeg":1,"els":1,"cast":1,"operationi":1,"pre":2,"contain":1,"replac":3,"pointer":1,"properti":1,"amp":2},"maxFreq":12,"totalTerms":86},"loc":0}