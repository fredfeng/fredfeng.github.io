{"id":20376,"className":"java.util.ResourceBundle$Control","methodName":"needsReload","signature":"\u003cjava.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)\u003e","javadoc":"/** \n * Determines if the expired \u003ccode\u003ebundle\u003c/code\u003e in the cache needs to be reloaded based on the loading time given by \u003ccode\u003eloadTime\u003c/code\u003e or some other criteria. The method returns \u003ccode\u003etrue\u003c/code\u003e if reloading is required; \u003ccode\u003efalse\u003c/code\u003e otherwise. \u003ccode\u003eloadTime\u003c/code\u003e is a millisecond offset since the \u003ca href\u003d\"Calendar.html#Epoch\"\u003e \u003ccode\u003eCalendar\u003c/code\u003e Epoch\u003c/a\u003e. The calling \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e factory method calls this method on the \u003ccode\u003eResourceBundle.Control\u003c/code\u003e instance used for its current invocation, not on the instance used in the invocation that originally loaded the resource bundle. \u003cp\u003eThe default implementation compares \u003ccode\u003eloadTime\u003c/code\u003e and the last modified time of the source data of the resource bundle. If it\u0027s determined that the source data has been modified since \u003ccode\u003eloadTime\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e is returned. Otherwise, \u003ccode\u003efalse\u003c/code\u003e is returned. This implementation assumes that the given \u003ccode\u003eformat\u003c/code\u003e is the same string as its file suffix if it\u0027s not one of the default formats, \u003ccode\u003e\"java.class\"\u003c/code\u003e or \u003ccode\u003e\"java.properties\"\u003c/code\u003e.\n * @param baseName the base bundle name of the resource bundle, a fully qualified class name\n * @param locale the locale for which the resource bundle should be instantiated\n * @param format the resource bundle format to be loaded\n * @param loader the \u003ccode\u003eClassLoader\u003c/code\u003e to use to load the bundle\n * @param bundle the resource bundle instance that has been expired in the cache\n * @param loadTime the time when \u003ccode\u003ebundle\u003c/code\u003e was loaded and put in the cache\n * @return \u003ccode\u003etrue\u003c/code\u003e if the expired bundle needs to bereloaded; \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @exception NullPointerException if \u003ccode\u003ebaseName\u003c/code\u003e, \u003ccode\u003elocale\u003c/code\u003e, \u003ccode\u003eformat\u003c/code\u003e, \u003ccode\u003eloader\u003c/code\u003e, or \u003ccode\u003ebundle\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"need":3,"fals":3,"otherwis":3,"call":2,"put":1,"last":1,"instanti":1,"one":1,"data":2,"use":3,"expir":3,"time":8,"resourc":8,"requir":1,"given":2,"file":1,"factori":1,"millisecond":1,"name":4,"current":1,"offset":1,"href":1,"calendar":2,"bereload":1,"control":1,"except":2,"assum":1,"criteria":1,"loader":3,"epoch":2,"origin":1,"true":3,"fulli":1,"format":5,"cach":3,"suffix":1,"invoc":2,"instanc":3,"string":1,"determin":2,"modifi":2,"base":4,"pointer":1,"java":2,"sourc":2,"method":3,"load":10,"html":1,"local":3,"properti":1,"compar":1,"reload":3,"qualifi":1,"bundl":16},"maxFreq":16,"totalTerms":137},"loc":38}