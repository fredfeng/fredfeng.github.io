{"id":22367,"className":"java.util.concurrent.ExecutorService","methodName":"invokeAny","signature":"\u003cjava.util.concurrent.ExecutorService: T invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)\u003e","javadoc":"/** \n * Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.\n * @param tasks the collection of tasks\n * @param timeout the maximum time to wait\n * @param unit the time unit of the timeout argument\n * @return the result returned by one of the tasks.\n * @throws InterruptedException if interrupted while waiting\n * @throws NullPointerException if tasks, or unit, or any elementtask subject to execution is \u003ctt\u003enull\u003c/tt\u003e\n * @throws TimeoutException if the given timeout elapses beforeany task successfully completes\n * @throws ExecutionException if no task successfully completes\n * @throws RejectedExecutionException if tasks cannot be scheduledfor execution\n */\n","tf":{"freq":{"progress":1,"result":3,"reject":1,"elementtask":1,"subject":1,"one":2,"normal":1,"cancel":1,"wait":2,"beforeani":1,"elaps":2,"time":2,"given":4,"oper":1,"undefin":1,"complet":4,"argument":1,"except":7,"task":9,"invok":1,"scheduledfor":1,"without":1,"interrupt":2,"unit":3,"maximum":1,"modifi":1,"pointer":1,"method":1,"execut":5,"success":3,"timeout":5,"upon":1,"collect":2},"maxFreq":9,"totalTerms":73},"loc":0}