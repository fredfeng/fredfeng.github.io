{"id":23086,"className":"java.util.concurrent.Semaphore","methodName":"tryAcquire","signature":"\u003cjava.util.concurrent.Semaphore: boolean tryAcquire()\u003e","javadoc":"/** \n * Acquires a permit from this semaphore, only if one is available at the time of invocation. \u003cp\u003eAcquires a permit, if one is available and returns immediately, with the value  {@code true}, reducing the number of available permits by one. \u003cp\u003eIf no permit is available then this method will return immediately with the value  {@code false}. \u003cp\u003eEven when this semaphore has been set to use a fair ordering policy, a call to  {@code tryAcquire()} \u003cem\u003ewill\u003c/em\u003eimmediately acquire a permit if one is available, whether or not other threads are currently waiting. This \u0026quot;barging\u0026quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting, then use {@link #tryAcquire(long,TimeUnit) tryAcquire(0, TimeUnit.SECONDS) }which is almost equivalent (it also detects interruption).\n * @return {@code true} if a permit was acquired and {@code false}otherwise\n */\n","tf":{"freq":{"otherwis":1,"acquir":8,"fals":2,"call":1,"behavior":1,"link":1,"one":4,"permit":6,"use":3,"wait":1,"though":1,"whether":1,"almost":1,"time":3,"order":1,"equival":1,"thread":1,"current":1,"valu":2,"immedi":3,"barg":1,"quot":2,"want":1,"detect":1,"semaphor":2,"honor":1,"true":2,"circumst":1,"number":1,"avail":5,"polici":1,"fair":3,"interrupt":1,"invoc":1,"unit":2,"will":2,"method":1,"even":2,"certain":1,"reduc":1,"also":1},"maxFreq":8,"totalTerms":76},"loc":3}