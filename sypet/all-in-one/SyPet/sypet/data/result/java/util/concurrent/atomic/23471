{"id":23471,"className":"java.util.concurrent.atomic.AtomicIntegerFieldUpdater","methodName":"newUpdater","signature":"\u003cjava.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater\u003cU\u003e newUpdater(java.lang.Class,java.lang.String)\u003e","javadoc":"/** \n * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.\n * @param tclass the class of the objects holding the field\n * @param fieldName the name of the field to be updated\n * @return the updater\n * @throws IllegalArgumentException if the field is not avolatile integer type\n * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type\n */\n","tf":{"freq":{"argument":2,"need":1,"generic":1,"except":2,"check":1,"creat":1,"nest":1,"runtim":1,"hold":2,"object":2,"tclass":1,"type":4,"illeg":1,"field":6,"avolatil":1,"updat":4,"given":1,"name":2,"wrong":1,"match":1,"basedexcept":1,"integ":1,"reflect":2},"maxFreq":6,"totalTerms":40},"loc":3}