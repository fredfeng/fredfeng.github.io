{"id":23090,"className":"java.util.concurrent.Semaphore","methodName":"acquireUninterruptibly","signature":"\u003cjava.util.concurrent.Semaphore: void acquireUninterruptibly(int)\u003e","javadoc":"/** \n * Acquires the given number of permits from this semaphore, blocking until all are available. \u003cp\u003eAcquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. \u003cp\u003eIf insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes one of the  {@link #release() release}methods for this semaphore, the current thread is next to be assigned permits and the number of available permits satisfies this request. \u003cp\u003eIf the current thread is  {@linkplain Thread#interrupt interrupted}while waiting for permits then it will continue to wait and its position in the queue is not affected.  When the thread does return from this method its interrupt status will be set.\n * @param permits the number of permits to acquire\n * @throws IllegalArgumentException if {@code permits} is negative\n */\n","tf":{"freq":{"acquir":4,"queue":1,"linkplain":1,"assign":1,"next":1,"permit":10,"one":1,"link":1,"block":1,"schedul":1,"wait":2,"affect":1,"amount":1,"becom":1,"given":3,"releas":2,"request":1,"thread":7,"current":3,"purpos":1,"immedi":1,"uninterrupt":1,"argument":1,"except":1,"semaphor":2,"status":1,"invok":1,"avail":5,"number":5,"illeg":1,"continu":1,"interrupt":3,"insuffici":1,"disabl":1,"satisfi":1,"will":2,"negat":1,"method":2,"reduc":1,"posit":1,"lie":1,"dormant":1},"maxFreq":10,"totalTerms":79},"loc":4}