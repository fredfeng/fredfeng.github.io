{"id":23288,"className":"java.util.concurrent.FutureTask","methodName":"FutureTask","signature":"\u003cjava.util.concurrent.FutureTask: void FutureTask(java.lang.Runnable,V)\u003e","javadoc":"/** \n * Creates a \u003ctt\u003eFutureTask\u003c/tt\u003e that will, upon running, execute the given \u003ctt\u003eRunnable\u003c/tt\u003e, and arrange that \u003ctt\u003eget\u003c/tt\u003e will return the given result on successful completion.\n * @param runnable the runnable task\n * @param result the result to return on successful completion. Ifyou don\u0027t need a particular result, consider using constructions of the form: {@code Future\u003c?\u003e f \u003d new FutureTask\u003cVoid\u003e(runnable, null)}\n * @throws NullPointerException if runnable is null\n */\n","tf":{"freq":{"need":1,"result":4,"except":1,"futur":4,"form":1,"creat":1,"task":4,"use":1,"particular":1,"run":1,"consid":1,"arrang":1,"given":2,"will":2,"pointer":1,"ifyou":1,"construct":1,"execut":1,"runnabl":5,"success":2,"complet":2,"upon":1},"maxFreq":5,"totalTerms":39},"loc":3}