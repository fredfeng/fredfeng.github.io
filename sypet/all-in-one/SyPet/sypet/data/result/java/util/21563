{"id":21563,"className":"java.util.Calendar","methodName":"roll","signature":"\u003cjava.util.Calendar: void roll(int,int)\u003e","javadoc":"/** \n * Adds the specified (signed) amount to the specified calendar field without changing larger fields.  A negative amount means to roll down. \u003cp\u003eNOTE:  This default implementation on \u003ccode\u003eCalendar\u003c/code\u003e just repeatedly calls the version of  {@link #roll(int,boolean) roll()} that rolls by one unit.  This may notalways do the right thing.  For example, if the \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e field is 31, rolling through February will leave it set to 28.  The \u003ccode\u003eGregorianCalendar\u003c/code\u003e version of this function takes care of this problem.  Other subclasses should also provide overrides of this function that do the right thing.\n * @param field the calendar field.\n * @param amount the signed amount to add to the calendar \u003ccode\u003efield\u003c/code\u003e.\n * @since 1.2\n * @see #roll(int,boolean)\n * @see #add(int,int)\n * @see #set(int,int)\n */\n","tf":{"freq":{"call":1,"februari":1,"link":1,"one":1,"repeat":1,"add":3,"function":2,"specifi":2,"version":2,"amount":4,"roll":7,"care":1,"mean":1,"right":2,"calendar":5,"just":1,"may":1,"larger":1,"problem":1,"provid":1,"without":1,"field":6,"sign":2,"unit":1,"notalway":1,"take":1,"subclass":1,"leav":1,"will":1,"exampl":1,"negat":1,"chang":1,"gregorian":1,"also":1,"thing":2},"maxFreq":7,"totalTerms":61},"loc":10}