{"id":21248,"className":"java.util.Random","methodName":"setSeed","signature":"\u003cjava.util.Random: void setSeed(long)\u003e","javadoc":"/** \n * Sets the seed of this random number generator using a single {@code long} seed. The general contract of {@code setSeed} isthat it alters the state of this random number generator object so as to be in exactly the same state as if it had just been created with the argument  {@code seed} as a seed. The method{@code setSeed} is implemented by class {@code Random} byatomically updating the seed to \u003cpre\u003e {@code (seed ^ 0x5DEECE66DL) \u0026 ((1L \u003c\u003c 48) - 1)}\u003c/pre\u003e and clearing the  {@code haveNextNextGaussian} flag used by {@link #nextGaussian}. \u003cp\u003eThe implementation of  {@code setSeed} by class {@code Random}happens to use only 48 bits of the given seed. In general, however, an overriding method may use all 64 bits of the  {@code long}argument as a seed value.\n * @param seed the initial seed\n */\n","tf":{"freq":{"singl":1,"link":1,"next":3,"state":2,"use":4,"object":1,"clear":1,"given":1,"gaussian":2,"exact":1,"byatom":1,"valu":1,"initi":1,"howev":1,"happen":1,"just":1,"argument":2,"may":1,"contract":1,"creat":1,"seed":14,"isthat":1,"random":4,"number":2,"alter":1,"general":2,"bit":2,"flag":1,"updat":1,"pre":2,"generat":2,"method":2},"maxFreq":14,"totalTerms":62},"loc":4}