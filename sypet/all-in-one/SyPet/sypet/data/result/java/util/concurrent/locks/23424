{"id":23424,"className":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","methodName":"tryAcquireNanos","signature":"\u003cjava.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquireNanos(long,long)\u003e","javadoc":"/** \n * Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses.  Implemented by first checking interrupt status, then invoking at least once  {@link #tryAcquire}, returning on success.  Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking {@link #tryAcquire} until success or the thread is interruptedor the timeout elapses.  This method can be used to implement method  {@link Lock#tryLock(long,TimeUnit)}.\n * @param arg the acquire argument.  This value is conveyed to{@link #tryAcquire} but is otherwise uninterpreted andcan represent anything you like.\n * @param nanosTimeout the maximum number of nanoseconds to wait\n * @return {@code true} if acquired; {@code false} if timed out\n * @throws InterruptedException if the current thread is interrupted\n */\n","tf":{"freq":{"fals":1,"attempt":1,"acquir":7,"otherwis":2,"anyth":1,"unblock":1,"least":1,"link":4,"use":1,"possibl":1,"block":1,"wait":1,"nanosecond":1,"repeat":1,"mode":1,"uninterpret":1,"convey":1,"arg":1,"elaps":2,"time":2,"given":1,"fail":1,"thread":3,"current":1,"valu":1,"interruptedor":1,"exclus":1,"argument":1,"except":1,"check":1,"repres":1,"status":1,"invok":2,"lock":2,"queu":1,"true":1,"number":1,"nano":2,"like":1,"interrupt":4,"unit":1,"maximum":1,"method":2,"first":1,"success":2,"andcan":1,"timeout":3,"abort":1},"maxFreq":7,"totalTerms":72},"loc":6}