{"id":23354,"className":"java.util.concurrent.locks.Lock","methodName":"lockInterruptibly","signature":"\u003cjava.util.concurrent.locks.Lock: void lockInterruptibly()\u003e","javadoc":"/** \n * Acquires the lock unless the current thread is {@linkplain Thread#interrupt interrupted}. \u003cp\u003eAcquires the lock if it is available and returns immediately. \u003cp\u003eIf the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: \u003cul\u003e \u003cli\u003eThe lock is acquired by the current thread; or \u003cli\u003eSome other thread  {@linkplain Thread#interrupt interrupts} thecurrent thread, and interruption of lock acquisition is supported. \u003c/ul\u003e \u003cp\u003eIf the current thread: \u003cul\u003e \u003cli\u003ehas its interrupted status set on entry to this method; or \u003cli\u003eis  {@linkplain Thread#interrupt interrupted} while acquiring thelock, and interruption of lock acquisition is supported, \u003c/ul\u003e then  {@link InterruptedException} is thrown and the current thread\u0027sinterrupted status is cleared. \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e \u003cp\u003eThe ability to interrupt a lock acquisition in some implementations may not be possible, and if possible may be an expensive operation.  The programmer should be aware that this may be the case. An implementation should document when this is the case. \u003cp\u003eAn implementation can favor responding to an interrupt over normal method return. \u003cp\u003eA  {@code Lock} implementation may be able to detecterroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances.  The circumstances and the exception type must be documented by that  {@code Lock} implementation.\n * @throws InterruptedException if the current thread isinterrupted while acquiring the lock (and interruption of lock acquisition is supported).\n */\n","tf":{"freq":{"acquir":5,"detecterron":1,"normal":1,"uncheck":1,"possibl":2,"abl":1,"type":1,"abil":1,"must":1,"becom":1,"oper":1,"respond":1,"thread":12,"purpos":1,"happen":1,"sinterrupt":1,"except":4,"thrown":1,"support":3,"status":2,"programm":1,"circumst":2,"avail":2,"invoc":1,"disabl":1,"thecurr":1,"favor":1,"thing":1,"linkplain":3,"one":1,"link":1,"acquisit":4,"schedul":1,"use":1,"clear":1,"document":2,"unless":1,"consider":1,"isinterrupt":1,"current":6,"immedi":1,"deadlock":1,"may":5,"entri":1,"lock":13,"interrupt":15,"two":1,"caus":1,"thelock":1,"expens":1,"awar":1,"method":2,"lie":1,"dormant":1},"maxFreq":15,"totalTerms":120},"loc":0}