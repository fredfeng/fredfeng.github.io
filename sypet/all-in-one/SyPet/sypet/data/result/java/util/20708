{"id":20708,"className":"java.util.List","methodName":"toArray","signature":"\u003cjava.util.List: T[] toArray(T[])\u003e","javadoc":"/** \n * Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.  If the list fits in the specified array, it is returned therein.  Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. \u003cp\u003eIf the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is set to \u003ctt\u003enull\u003c/tt\u003e. (This is useful in determining the length of the list \u003ci\u003eonly\u003c/i\u003e if the caller knows that the list does not contain any null elements.) \u003cp\u003eLike the  {@link #toArray()} method, this method acts as bridge betweenarray-based and collection-based APIs.  Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. \u003cp\u003eSuppose \u003ctt\u003ex\u003c/tt\u003e is a list known to contain only strings. The following code can be used to dump the list into a newly allocated array of \u003ctt\u003eString\u003c/tt\u003e: \u003cpre\u003e String[] y \u003d x.toArray(new String[0]);\u003c/pre\u003e Note that \u003ctt\u003etoArray(new Object[0])\u003c/tt\u003e is identical in function to \u003ctt\u003etoArray()\u003c/tt\u003e.\n * @param a the array into which the elements of this list are tobe stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose.\n * @return an array containing the elements of this list\n * @throws ArrayStoreException if the runtime type of the specified arrayis not a supertype of the runtime type of every element in this list\n * @throws NullPointerException if the specified array is null\n */\n","tf":{"freq":{"store":2,"last":1,"save":1,"enough":1,"type":6,"function":1,"specifi":6,"sequenc":1,"precis":1,"purpos":1,"tobe":1,"proper":1,"everi":1,"follow":2,"therein":1,"element":8,"control":1,"except":2,"spare":1,"runtim":6,"circumst":1,"like":1,"cost":1,"size":1,"newli":1,"determin":1,"contain":4,"pointer":1,"known":1,"big":1,"output":1,"room":1,"alloc":4,"array":21,"collect":1,"otherwis":2,"caller":1,"dump":1,"allow":1,"link":1,"use":3,"object":1,"fit":2,"ident":1,"length":1,"immedi":1,"bridg":1,"note":1,"end":1,"may":1,"supertyp":1,"suppos":1,"list":13,"know":1,"arrayi":1,"pre":2,"string":4,"base":2,"method":3,"certain":1,"act":1,"first":1,"betweenarray":1},"maxFreq":21,"totalTerms":137},"loc":0}