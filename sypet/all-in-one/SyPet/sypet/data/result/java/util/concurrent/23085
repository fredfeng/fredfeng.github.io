{"id":23085,"className":"java.util.concurrent.Semaphore","methodName":"acquireUninterruptibly","signature":"\u003cjava.util.concurrent.Semaphore: void acquireUninterruptibly()\u003e","javadoc":"/** \n * Acquires a permit from this semaphore, blocking until one is available. \u003cp\u003eAcquires a permit, if one is available and returns immediately, reducing the number of available permits by one. \u003cp\u003eIf no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes the  {@link #release} method for thissemaphore and the current thread is next to be assigned a permit. \u003cp\u003eIf the current thread is  {@linkplain Thread#interrupt interrupted}while waiting for a permit then it will continue to wait, but the time at which the thread is assigned a permit may change compared to the time it would have received the permit had no interruption occurred.  When the thread does return from this method its interrupt status will be set.\n */\n","tf":{"freq":{"acquir":3,"linkplain":1,"assign":2,"one":3,"permit":8,"link":1,"next":1,"block":1,"schedul":1,"wait":2,"time":2,"becom":1,"releas":1,"thread":8,"current":3,"purpos":1,"immedi":1,"uninterrupt":1,"may":1,"semaphor":1,"status":1,"invok":1,"receiv":1,"number":1,"avail":4,"continu":1,"interrupt":4,"disabl":1,"will":2,"method":2,"chang":1,"reduc":1,"compar":1,"lie":1,"thissemaphor":1,"occur":1,"dormant":1},"maxFreq":8,"totalTerms":68},"loc":3}