{"id":21950,"className":"java.util.Collections","methodName":"synchronizedSet","signature":"\u003cjava.util.Collections: java.util.Set\u003cT\u003e synchronizedSet(java.util.Set)\u003e","javadoc":"/** \n * Returns a synchronized (thread-safe) set backed by the specified set.  In order to guarantee serial access, it is critical that \u003cstrong\u003eall\u003c/strong\u003e access to the backing set is accomplished through the returned set.\u003cp\u003e It is imperative that the user manually synchronize on the returned set when iterating over it: \u003cpre\u003e Set s \u003d Collections.synchronizedSet(new HashSet()); ... synchronized (s) { Iterator i \u003d s.iterator(); // Must be in the synchronized block while (i.hasNext()) foo(i.next()); } \u003c/pre\u003e Failure to follow this advice may result in non-deterministic behavior. \u003cp\u003eThe returned set will be serializable if the specified set is serializable.\n * @param s the set to be \"wrapped\" in a synchronized set.\n * @return a synchronized view of the specified set.\n */\n","tf":{"freq":{"result":1,"accomplish":1,"behavior":1,"serializ":2,"next":2,"block":1,"foo":1,"must":1,"specifi":3,"order":1,"determinist":1,"thread":1,"imper":1,"advic":1,"follow":1,"wrap":1,"safe":1,"may":1,"hash":1,"failur":1,"guarante":1,"back":2,"access":2,"non":1,"manual":1,"strong":2,"pre":2,"will":1,"view":1,"iter":3,"serial":1,"user":1,"critic":1,"collect":1},"maxFreq":3,"totalTerms":44},"loc":3}