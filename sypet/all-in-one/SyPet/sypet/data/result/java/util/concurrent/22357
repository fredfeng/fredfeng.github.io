{"id":22357,"className":"java.util.concurrent.ExecutorService","methodName":"shutdownNow","signature":"\u003cjava.util.concurrent.ExecutorService: java.util.List\u003cjava.lang.Runnable\u003e shutdownNow()\u003e","javadoc":"/** \n * Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. \u003cp\u003eThis method does not wait for actively executing tasks to terminate.  Use  {@link #awaitTermination awaitTermination} todo that. \u003cp\u003eThere are no guarantees beyond best-effort attempts to stop processing actively executing tasks.  For example, typical implementations will cancel via  {@link Thread#interrupt}, so any task that fails to respond to interrupts may never terminate.\n * @return list of tasks that never commenced execution\n * @throws SecurityException if a security manager exists andshutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold  {@link java.lang.RuntimePermission}\u003ctt\u003e(\"modifyThread\")\u003c/tt\u003e, or the security manager\u0027s \u003ctt\u003echeckAccess\u003c/tt\u003e method denies access.\n */\n","tf":{"freq":{"manipul":1,"via":1,"servic":1,"permit":1,"cancel":1,"wait":2,"beyond":1,"fail":1,"respond":1,"thread":3,"permiss":1,"deni":1,"except":1,"andshut":1,"hold":1,"runtim":1,"effort":1,"commenc":1,"await":3,"now":1,"will":1,"execut":5,"attempt":2,"caller":1,"stop":2,"todo":1,"link":3,"typic":1,"use":1,"activ":3,"lang":1,"best":1,"exist":1,"shutdown":1,"may":2,"check":1,"guarante":1,"task":7,"manag":2,"executor":1,"list":2,"access":2,"interrupt":2,"process":2,"termin":4,"never":2,"secur":3,"exampl":1,"modifi":2,"method":2,"java":1,"halt":1},"maxFreq":7,"totalTerms":87},"loc":0}