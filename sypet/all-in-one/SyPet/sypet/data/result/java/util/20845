{"id":20845,"className":"java.util.AbstractMap$SimpleImmutableEntry","methodName":"hashCode","signature":"\u003cjava.util.AbstractMap$SimpleImmutableEntry: int hashCode()\u003e","javadoc":"/** \n * Returns the hash code value for this map entry.  The hash code of a map entry  {@code e} is defined to be: \u003cpre\u003e(e.getKey()\u003d\u003dnull   ? 0 : e.getKey().hashCode()) ^ (e.getValue()\u003d\u003dnull ? 0 : e.getValue().hashCode())\u003c/pre\u003e This ensures that  {@code e1.equals(e2)} implies that{@code e1.hashCode()\u003d\u003de2.hashCode()} for any two Entries{@code e1} and {@code e2}, as required by the general contract of  {@link Object#hashCode}.\n * @return the hash code value for this map entry\n * @see #equals\n */\n","tf":{"freq":{"defin":1,"contract":1,"hash":9,"entri":4,"link":1,"equal":2,"object":1,"general":1,"ensur":1,"two":1,"requir":1,"pre":2,"map":3,"impli":1,"valu":4,"key":2},"maxFreq":9,"totalTerms":35},"loc":4}