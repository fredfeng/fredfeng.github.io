{"id":21255,"className":"java.util.Random","methodName":"nextDouble","signature":"\u003cjava.util.Random: double nextDouble()\u003e","javadoc":"/** \n * Returns the next pseudorandom, uniformly distributed {@code double} value between {@code 0.0} and{@code 1.0} from this random number generator\u0027s sequence.\u003cp\u003eThe general contract of  {@code nextDouble} is that one{@code double} value, chosen (approximately) uniformly from therange  {@code 0.0d} (inclusive) to {@code 1.0d} (exclusive), ispseudorandomly generated and returned. \u003cp\u003eThe method  {@code nextDouble} is implemented by class {@code Random}as if by: \u003cpre\u003e  {@code}public double nextDouble()  return (((long)next(26) \u003c\u003c 27) + next(27)) / (double)(1L \u003c\u003c 53); }}\u003c/pre\u003e \u003cp\u003eThe hedge \"approximately\" is used in the foregoing description only because the  {@code next} method is only approximately an unbiasedsource of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose {@code double} values from the stated range with perfect uniformity.\u003cp\u003e[In early versions of Java, the result was incorrectly calculated as: \u003cpre\u003e  {@code return (((long)next(27) \u003c\u003c 27) + next(27)) / (double)(1L \u003c\u003c 54);}\u003c/pre\u003e This might seem to be equivalent, if not better, but in fact it introduced a large nonuniformity because of the bias in the rounding of floating-point numbers: it was three times as likely that the low-order bit of the significand would be 0 than that it would be 1! This nonuniformity probably doesn\u0027t matter much in practice, but we strive for perfection.]\n * @return the next pseudorandom, uniformly distributed {@code double}value between  {@code 0.0} and {@code 1.0} from thisrandom number generator\u0027s sequence\n * @see Math#random\n */\n","tf":{"freq":{"hedg":1,"distribut":2,"round":1,"approxim":3,"earli":1,"time":1,"independ":1,"probabl":1,"equival":1,"sequenc":2,"rang":1,"three":1,"bias":1,"incorrect":1,"contract":1,"calcul":1,"descript":1,"random":4,"shown":1,"number":3,"like":1,"much":1,"bit":3,"better":1,"sourc":1,"low":1,"unbiasedsourc":1,"result":1,"might":1,"significand":1,"next":11,"one":1,"state":1,"use":1,"therang":1,"chosen":3,"algorithm":1,"version":1,"introduc":1,"inclus":1,"order":1,"ispseudorandom":1,"practic":1,"choos":1,"nonuniform":2,"valu":4,"exclus":1,"perfect":3,"matter":1,"uniform":4,"seem":1,"general":1,"thisrandom":1,"math":1,"point":1,"strive":1,"fact":1,"forego":1,"pre":4,"larg":1,"generat":3,"method":2,"java":1,"pseudorandom":2},"maxFreq":11,"totalTerms":103},"loc":4}