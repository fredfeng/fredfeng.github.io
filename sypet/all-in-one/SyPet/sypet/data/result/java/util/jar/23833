{"id":23833,"className":"java.util.jar.Pack200","methodName":"newUnpacker","signature":"\u003cjava.util.jar.Pack200: java.util.jar.Pack200$Unpacker newUnpacker()\u003e","javadoc":"/** \n * Obtain new instance of a class that implements Unpacker. \u003cli\u003e\u003cp\u003eIf the system property \u003ctt\u003ejava.util.jar.Pack200.Unpacker\u003c/tt\u003e is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker. The class is loaded and instantiated.  If this process fails then an unspecified error is thrown.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eIf an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.\u003c/p\u003e\u003c/li\u003e \u003cp\u003eNote:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple unpacker engines, or else serialize use of one engine with a lock.\n * @return  A newly allocated Unpacker engine.\n */\n","tf":{"freq":{"unpack":6,"result":1,"defin":1,"unspecifi":1,"instanti":2,"one":1,"engin":3,"use":2,"object":1,"pack":1,"applic":1,"must":1,"specifi":1,"time":1,"correct":1,"fail":1,"oper":1,"jar":1,"thread":2,"name":1,"concret":1,"taken":1,"valu":1,"note":1,"thrown":1,"multipl":2,"error":1,"guarante":1,"lock":1,"fulli":1,"els":1,"instanc":1,"process":1,"newli":1,"either":1,"system":3,"obtain":1,"multi":1,"java":1,"load":1,"properti":2,"serial":1,"util":1,"qualifi":1,"alloc":2},"maxFreq":6,"totalTerms":60},"loc":3}