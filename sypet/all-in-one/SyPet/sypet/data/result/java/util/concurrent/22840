{"id":22840,"className":"java.util.concurrent.Executors","methodName":"newFixedThreadPool","signature":"\u003cjava.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)\u003e","javadoc":"/** \n * Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.  At any point, at most \u003ctt\u003enThreads\u003c/tt\u003e threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.  The threads in the pool will exist until it is explicitly  {@link ExecutorService#shutdown shutdown}.\n * @param nThreads the number of threads in the pool\n * @return the newly created thread pool\n * @throws IllegalArgumentException if {@code nThreads \u003c\u003d 0}\n */\n","tf":{"freq":{"need":1,"queue":2,"servic":1,"link":1,"one":1,"wait":1,"activ":2,"reus":1,"prior":1,"unbound":1,"share":1,"oper":1,"pool":5,"fix":2,"thread":13,"subsequ":1,"place":1,"exist":1,"shutdown":3,"argument":1,"addit":1,"except":1,"submit":1,"creat":2,"failur":1,"task":3,"executor":1,"number":2,"avail":1,"illeg":1,"process":1,"newli":1,"point":1,"termin":1,"explicit":1,"take":1,"will":4,"due":1,"execut":2},"maxFreq":13,"totalTerms":68},"loc":5}