{"id":20497,"className":"java.util.NavigableSet","methodName":"headSet","signature":"\u003cjava.util.NavigableSet: java.util.NavigableSet\u003cE\u003e headSet(E,boolean)\u003e","javadoc":"/** \n * Returns a view of the portion of this set whose elements are less than (or equal to, if  {@code inclusive} is true) {@code toElement}.  The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa.  The returned set supports all optional set operations that this set supports. \u003cp\u003eThe returned set will throw an  {@code IllegalArgumentException}on an attempt to insert an element outside its range.\n * @param toElement high endpoint of the returned set\n * @param inclusive {@code true} if the high endpointis to be included in the returned view\n * @return a view of the portion of this set whose elements are less than(or equal to, if  {@code inclusive} is true) {@code toElement}\n * @throws ClassCastException if {@code toElement} is not compatiblewith this set\u0027s comparator (or, if the set has no comparator, if  {@code toElement} does not implement {@link Comparable}). Implementations may, but are not required to, throw this exception if  {@code toElement} cannot be compared to elementscurrently in the set.\n * @throws NullPointerException if {@code toElement} is null andthis set does not permit null elements\n * @throws IllegalArgumentException if this set itself has arestricted range, and  {@code toElement} lies outside thebounds of the range\n */\n","tf":{"freq":{"attempt":1,"andthi":1,"vice":1,"permit":1,"link":1,"inclus":3,"requir":1,"compatiblewith":1,"oper":1,"rang":3,"head":1,"less":2,"option":1,"portion":2,"versa":1,"argument":2,"element":12,"may":1,"except":5,"includ":1,"support":2,"whose":2,"arestrict":1,"elementscurr":1,"back":1,"true":3,"equal":2,"thebound":1,"endpointi":1,"illeg":2,"endpoint":1,"cast":1,"outsid":2,"will":1,"pointer":1,"high":2,"chang":1,"view":3,"insert":1,"compar":4,"lie":1,"reflect":1},"maxFreq":12,"totalTerms":77},"loc":0}