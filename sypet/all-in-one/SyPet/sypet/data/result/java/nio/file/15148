{"id":15148,"className":"java.nio.file.Files","methodName":"probeContentType","signature":"\u003cjava.nio.file.Files: java.lang.String probeContentType(java.nio.file.Path)\u003e","javadoc":"/** \n * Probes the content type of a file. \u003cp\u003e This method uses the installed  {@link FileTypeDetector} implementationsto probe the given file to determine its content type. Each file type detector\u0027s  {@link FileTypeDetector#probeContentType probeContentType} isinvoked, in turn, to probe the file type. If the file is recognized then the content type is returned. If the file is not recognized by any of the installed file type detectors then a system-default file type detector is invoked to guess the content type. \u003cp\u003e A given invocation of the Java virtual machine maintains a system-wide list of file type detectors. Installed file type detectors are loaded using the service-provider loading facility defined by the  {@link ServiceLoader}class. Installed file type detectors are loaded using the system class loader. If the system class loader cannot be found then the extension class loader is used; If the extension class loader cannot be found then the bootstrap class loader is used. File type detectors are typically installed by placing them in a JAR file on the application class path or in the extension directory, the JAR file contains a provider-configuration file named  {@code java.nio.file.spi.FileTypeDetector} in the resource directory{@code META-INF/services}, and the file lists one or more fully-qualified names of concrete subclass of  {@code FileTypeDetector } that have a zeroargument constructor. If the process of locating or instantiating the installed file type detectors fails then an unspecified error is thrown. The ordering that installed providers are located is implementation specific. \u003cp\u003e The return value of this method is the string form of the value of a Multipurpose Internet Mail Extension (MIME) content type as defined by \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2045.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2045: Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\u003c/i\u003e\u003c/a\u003e. The string is guaranteed to be parsable according to the grammar in the RFC.\n * @param path the path to the file to probe\n * @return  The content type of the file, or {@code null} if the contenttype cannot be determined\n * @throws IOException if an I/O error occurs\n * @throws SecurityException If a security manager is installed and it denies an unspecified permission required by a file type detector implementation.\n */\n","tf":{"freq":{"contenttyp":1,"instanti":1,"maintain":1,"servic":3,"type":23,"parsabl":1,"requir":1,"fail":1,"given":2,"file":25,"spi":1,"permiss":1,"place":1,"href":1,"recogn":2,"deni":1,"nbsp":1,"facil":1,"turn":1,"except":2,"thrown":1,"form":1,"invok":1,"loader":6,"format":1,"wide":1,"provid":3,"invoc":1,"multipurpos":2,"content":9,"bodi":1,"machin":1,"system":4,"configur":1,"http":1,"determin":2,"contain":1,"subclass":1,"load":3,"implementationsto":1,"internet":3,"virtual":1,"unspecifi":2,"defin":2,"bootstrap":1,"directori":2,"link":3,"one":2,"www":1,"typic":1,"use":5,"org":1,"txt":1,"rfc":2,"detector":13,"applic":1,"probe":7,"resourc":1,"order":1,"extens":5,"name":2,"concret":1,"path":3,"valu":2,"constructor":1,"mail":2,"locat":2,"error":2,"manag":1,"guarante":1,"messag":1,"isinvok":1,"instal":8,"list":2,"fulli":1,"accord":1,"grammar":1,"ietf":1,"process":1,"zeroargu":1,"specif":1,"secur":2,"guess":1,"string":2,"java":2,"method":2,"nio":1,"part":1,"qualifi":1,"occur":1,"found":2},"maxFreq":25,"totalTerms":219},"loc":11}