{"id":15173,"className":"java.nio.file.Files","methodName":"copy","signature":"\u003cjava.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])\u003e","javadoc":"/** \n * Copies all bytes from an input stream to a file. On return, the input stream will be at end of stream. \u003cp\u003e By default, the copy fails if the target file already exists or is a symbolic link. If the  {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} option is specified, and the target file already exists,then it is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link is replaced. In this release, the  {@code REPLACE_EXISTING} option is the only optionrequired to be supported by this method. Additional options may be supported in future releases. \u003cp\u003e  If an I/O error occurs reading from the input stream or writing to the file, then it may do so after the target file has been created and after some bytes have been read or written. Consequently the input stream may not be at end of stream and may be in an inconsistent state. It is strongly recommended that the input stream be promptly closed if an I/O error occurs. \u003cp\u003e This method may block indefinitely reading from the input stream (or writing to the file). The behavior for the case that the input stream is \u003ci\u003easynchronously closed\u003c/i\u003e or the thread interrupted during the copy is highly input stream and file system provider specific and therefore not specified. \u003cp\u003e \u003cb\u003eUsage example\u003c/b\u003e: Suppose we want to capture a web page and save it to a file: \u003cpre\u003e Path path \u003d ... URI u \u003d URI.create(\"http://java.sun.com/\"); try (InputStream in \u003d u.toURL().openStream()) { Files.copy(in, path); } \u003c/pre\u003e\n * @param in the input stream to read from\n * @param target the path to the file\n * @param options options specifying how the copy should be done\n * @return  the number of bytes read or written\n * @throws IOException if an I/O error occurs when reading or writing\n * @throws FileAlreadyExistsException if the target file exists but cannot be replaced because the {@code REPLACE_EXISTING} option is not specified \u003ci\u003e(optionalspecific exception)\u003c/i\u003e\n * @throws DirectoryNotEmptyException the  {@code REPLACE_EXISTING} option is specified but the filecannot be replaced because it is a non-empty directory \u003ci\u003e(optional specific exception)\u003c/i\u003e     \n * @throws UnsupportedOperationException if  {@code options} contains a copy option that is not supported\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to the file. Where the {@code REPLACE_EXISTING} option is specified, the securitymanager\u0027s  {@link SecurityManager#checkDelete(String) checkDelete}method is invoked to check that an existing file can be deleted.\n */\n","tf":{"freq":{"unsupport":1,"com":1,"save":1,"filecannot":1,"consequ":1,"copi":8,"specifi":6,"close":2,"open":1,"fail":1,"oper":1,"page":1,"file":15,"thread":1,"captur":1,"option":12,"except":7,"support":3,"symbol":3,"creat":2,"invok":2,"done":1,"number":1,"provid":2,"non":2,"optionrequir":1,"input":10,"system":1,"http":1,"strong":1,"contain":1,"will":1,"inconsist":1,"asynchron":1,"stream":13,"delet":3,"directori":3,"behavior":1,"link":6,"state":1,"block":1,"therefor":1,"recommend":1,"sun":1,"releas":2,"written":2,"path":4,"write":6,"read":6,"securitymanag":1,"exist":6,"want":1,"end":2,"addit":1,"may":5,"futur":1,"check":6,"standard":1,"error":3,"manag":3,"instal":1,"suppos":1,"web":1,"access":1,"interrupt":1,"optionalspecif":1,"empti":3,"specif":2,"secur":4,"pre":2,"string":2,"replac":4,"exampl":1,"target":6,"java":1,"method":4,"alreadi":3,"indefinit":1,"usag":1,"prompt":1,"high":1,"occur":3},"maxFreq":15,"totalTerms":221},"loc":48}