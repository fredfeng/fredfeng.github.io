{"id":15108,"className":"java.nio.file.Paths","methodName":"get","signature":"\u003cjava.nio.file.Paths: java.nio.file.Path get(java.net.URI)\u003e","javadoc":"/** \n * Converts the given URI to a  {@link Path} object.\u003cp\u003e This method iterates over the  {@link FileSystemProvider#installedProviders() installed} providers to locate the provider that is identified by theURI  {@link URI#getScheme scheme} of the given URI. URI schemes arecompared without regard to case. If the provider is found then its  {@link FileSystemProvider#getPath getPath} method is invoked to convert theURI. \u003cp\u003e In the case of the default provider, identified by the URI scheme \"file\", the given URI has a non-empty path component, and undefined query and fragment components. Whether the authority component may be present is platform specific. The returned  {@code Path} is associated with the{@link FileSystems#getDefault default} file system.\u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee to the  {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e itis guaranteed that \u003cblockquote\u003e\u003ctt\u003e Paths.get(\u003c/tt\u003e\u003ci\u003ep\u003c/i\u003e\u003ctt\u003e. {@link Path#toUri() toUri}()).equals(\u003c/tt\u003e \u003ci\u003ep\u003c/i\u003e\u003ctt\u003e. {@link Path#toAbsolutePath() toAbsolutePath}())\u003c/tt\u003e \u003c/blockquote\u003e so long as the original  {@code Path}, the  {@code URI}, and the new  {@code Path} are all created in (possibly different invocations of) the sameJava virtual machine. Whether other providers make any guarantees is provider specific and therefore unspecified.\n * @param uri the URI to convert\n * @return  the resulting {@code Path}\n * @throws IllegalArgumentException if preconditions on the  {@code uri} parameter do not hold. Theformat of the URI is provider specific.\n * @throws FileSystemNotFoundException The file system, identified by the URI, does not exist and cannot be created automatically, or the provider identified by the URI\u0027s scheme component is not installed\n * @throws SecurityException if a security manager is installed and it denies an unspecified permission to access the file system\n */\n","tf":{"freq":{"precondit":1,"arecompar":1,"possibl":1,"round":1,"whether":2,"scheme":5,"given":4,"file":9,"blockquot":2,"permiss":1,"undefin":1,"deni":1,"argument":1,"platform":1,"except":3,"creat":2,"invok":1,"hold":1,"regard":1,"absolut":2,"without":1,"provid":13,"uri":4,"invoc":1,"non":1,"queri":1,"present":1,"machin":1,"system":7,"make":1,"iti":1,"virtual":1,"result":1,"unspecifi":2,"theformat":1,"link":8,"convert":3,"identifi":4,"therefor":1,"object":1,"automat":1,"author":1,"associ":1,"path":14,"trip":1,"exist":1,"fragment":1,"similar":1,"locat":1,"may":1,"manag":1,"guarante":3,"instal":4,"paramet":1,"origin":1,"equal":1,"access":1,"illeg":1,"empti":1,"differ":1,"specif":3,"secur":2,"compon":4,"method":2,"java":2,"iter":1,"found":2},"maxFreq":14,"totalTerms":149},"loc":18}