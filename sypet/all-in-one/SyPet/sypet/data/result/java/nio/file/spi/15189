{"id":15189,"className":"java.nio.file.spi.FileSystemProvider","methodName":"getFileSystem","signature":"\u003cjava.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem getFileSystem(java.net.URI)\u003e","javadoc":"/** \n * Returns an existing  {@code FileSystem} created by this provider.\u003cp\u003e This method returns a reference to a  {@code FileSystem} that wascreated by invoking the  {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)}method. File systems created the  {@link #newFileSystem(Path,Map) newFileSystem(Path,Map)} method are not returned by this method.The file system is identified by its  {@code URI}. Its exact form is highly provider dependent. In the case of the default provider the URI\u0027s path component is  {@code \"/\"} and the authority, query and fragment componentsare undefined (Undefined components are represented by  {@code null}). \u003cp\u003e Once a file system created by this provider is  {@link java.nio.file.FileSystem#close closed} it is provider-dependent if thismethod returns a reference to the closed file system or throws  {@link FileSystemNotFoundException}. If the provider allows a new file system to be created with the same URI as a file system it previously created then this method throws the exception if invoked after the file system is closed (and before a new instance is created by the  {@link #newFileSystem newFileSystem} method).\u003cp\u003e If a security manager is installed then a provider implementation may require to check a permission before returning a reference to an existing file system. In the case of the  {@link FileSystems#getDefault default} file system, no permission check is required.\n * @param uri URI reference\n * @return  The file system\n * @throws IllegalArgumentException If the pre-conditions for the  {@code uri} parameter aren\u0027t met\n * @throws FileSystemNotFoundException If the file system does not exist\n * @throws SecurityException If a security manager is installed and it denies an unspecified permission.\n */\n","tf":{"freq":{"unspecifi":1,"allow":1,"link":6,"componentsar":1,"identifi":1,"close":4,"met":1,"author":1,"requir":2,"thismethod":1,"refer":4,"file":25,"exact":1,"permiss":3,"path":3,"map":4,"undefin":2,"exist":3,"fragment":1,"deni":1,"condit":1,"argument":1,"may":1,"except":5,"check":2,"previous":1,"form":1,"creat":6,"repres":1,"manag":2,"invok":2,"depend":2,"instal":2,"paramet":1,"wascreat":1,"illeg":1,"uri":2,"provid":7,"instanc":1,"queri":1,"system":24,"secur":3,"compon":2,"pre":1,"nio":1,"java":1,"method":6,"high":1,"found":2},"maxFreq":25,"totalTerms":148},"loc":0}