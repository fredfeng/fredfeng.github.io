{"id":15129,"className":"java.nio.file.Files","methodName":"newDirectoryStream","signature":"\u003cjava.nio.file.Files: java.nio.file.DirectoryStream\u003cjava.nio.file.Path\u003e newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)\u003e","javadoc":"/** \n * Opens a directory, returning a  {@link DirectoryStream} to iterate overthe entries in the directory. The elements returned by the directory stream\u0027s  {@link DirectoryStream#iterator iterator} are of type {@code Path}, each one representing an entry in the directory. The  {@code Path}objects are obtained as if by  {@link Path#resolve(Path) resolving} thename of the directory entry against  {@code dir}. The entries returned by the iterator are filtered by the given  {@link DirectoryStream.Filter filter}. \u003cp\u003e When not using the try-with-resources construct, then directory stream\u0027s  {@code close} method should be invoked after iteration iscompleted so as to free any resources held for the open directory. \u003cp\u003e Where the filter terminates due to an uncaught error or runtime exception then it is propagated to the  {@link Iterator#hasNext() hasNext} or {@link Iterator#next() next} method. Where an {@code IOException} is thrown, it results in the {@code hasNext} or {@code next} method throwing a {@link DirectoryIteratorException} with the{@code IOException} as the cause.\u003cp\u003e When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a  {@link SecureDirectoryStream}. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we want to iterate over the files in a directory that are larger than 8K. \u003cpre\u003e DirectoryStream.Filter\u0026lt;Path\u0026gt; filter \u003d new DirectoryStream.Filter\u0026lt;Path\u0026gt;() { public boolean accept(Path file) throws IOException { return (Files.size(file) \u003e 8192L); } }; Path dir \u003d ... try (DirectoryStream\u0026lt;Path\u0026gt; stream \u003d Files.newDirectoryStream(dir, filter)) { : } \u003c/pre\u003e\n * @param dir the path to the directory\n * @param filter the directory stream filter\n * @return  a new and open {@code DirectoryStream} object\n * @throws NotDirectoryException if the file could not otherwise be opened because it is not a directory \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the directory.\n */\n","tf":{"freq":{"accept":1,"thenam":1,"type":1,"race":1,"close":1,"open":4,"free":2,"given":1,"oper":1,"file":6,"propag":1,"iscomplet":1,"option":1,"element":1,"except":9,"thrown":1,"support":1,"invok":2,"runtim":1,"resolv":2,"provid":1,"size":1,"obtain":1,"due":1,"execut":1,"filter":10,"otherwis":1,"result":1,"stream":15,"directori":26,"link":9,"one":1,"next":6,"use":1,"object":2,"resourc":2,"dir":4,"path":10,"read":3,"want":1,"overth":1,"held":1,"check":3,"error":2,"repres":1,"manag":2,"entri":5,"instal":1,"larger":1,"suppos":1,"uncaught":1,"access":1,"specif":1,"termin":1,"caus":1,"secur":4,"pre":2,"string":1,"exampl":1,"method":4,"manner":1,"construct":1,"usag":1,"iter":9,"occur":1},"maxFreq":26,"totalTerms":184},"loc":3}