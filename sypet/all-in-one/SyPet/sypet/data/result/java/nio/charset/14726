{"id":14726,"className":"java.nio.charset.Charset","methodName":"encode","signature":"\u003cjava.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)\u003e","javadoc":"/** \n * Convenience method that encodes Unicode characters into bytes in this charset. \u003cp\u003e An invocation of this method upon a charset \u003ctt\u003ecs\u003c/tt\u003e returns the same result as the expression \u003cpre\u003e cs.newEncoder() .onMalformedInput(CodingErrorAction.REPLACE) .onUnmappableCharacter(CodingErrorAction.REPLACE) .encode(bb); \u003c/pre\u003e except that it is potentially more efficient because it can cache encoders between successive invocations. \u003cp\u003e This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string.  In order to detect such sequences, use the  {@link CharsetEncoder#encode(java.nio.CharBuffer)} method directly.  \u003c/p\u003e\n * @param cb  The char buffer to be encoded\n * @return  A byte buffer containing the encoded characters\n */\n","tf":{"freq":{"result":1,"link":1,"use":1,"express":1,"buffer":3,"order":1,"sequenc":2,"action":2,"effici":1,"conveni":1,"direct":1,"detect":1,"except":1,"error":2,"charact":4,"alway":1,"charset":4,"cach":1,"invoc":2,"potenti":1,"malform":2,"encod":9,"input":2,"pre":2,"contain":1,"string":1,"replac":2,"unicod":1,"nio":1,"java":1,"method":4,"unmapp":2,"success":1,"upon":1},"maxFreq":9,"totalTerms":62},"loc":10}