{"id":15143,"className":"java.nio.file.Files","methodName":"readSymbolicLink","signature":"\u003cjava.nio.file.Files: java.nio.file.Path readSymbolicLink(java.nio.file.Path)\u003e","javadoc":"/** \n * Reads the target of a symbolic link \u003ci\u003e(optional operation)\u003c/i\u003e. \u003cp\u003e If the file system supports \u003ca href\u003d\"package-summary.html#links\"\u003esymbolic links\u003c/a\u003e then this method is used to read the target of the link, failing if the file is not a symbolic link. The target of the link need not exist. The returned  {@code Path} object will be associated with the same filesystem as  {@code link}.\n * @param link the path to the symbolic link\n * @return  a {@code Path} object representing the target of the link\n * @throws UnsupportedOperationException if the implementation does not support symbolic links\n * @throws NotLinkException if the target could otherwise not be read because the file is not a symbolic link \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, it checks that  {@code FilePermission} has beengranted with the \" {@code readlink}\" action to read the link.\n */\n","tf":{"freq":{"otherwis":1,"need":1,"unsupport":1,"link":15,"use":1,"object":2,"fail":1,"oper":2,"associ":1,"file":4,"action":1,"permiss":1,"path":3,"read":5,"href":1,"exist":1,"option":2,"except":5,"support":2,"check":1,"error":1,"symbol":7,"repres":1,"manag":1,"instal":1,"beengrant":1,"provid":1,"specif":1,"system":1,"secur":2,"summari":1,"target":5,"will":1,"html":1,"method":1,"filesystem":1,"readlink":1,"occur":1},"maxFreq":15,"totalTerms":80},"loc":3}