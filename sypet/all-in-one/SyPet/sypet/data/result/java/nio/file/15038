{"id":15038,"className":"java.nio.file.FileSystem","methodName":"getPath","signature":"\u003cjava.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])\u003e","javadoc":"/** \n * Converts a path string, or a sequence of strings that when joined form a path string, to a  {@code Path}. If  {@code more} does not specify anyelements then the value of the  {@code first} parameter is the path stringto convert. If  {@code more} specifies one or more elements then eachnon-empty string, including  {@code first}, is considered to be a sequence of name elements (see  {@link Path}) and is joined to form a path string. The details as to how the Strings are joined is provider specific but typically they will be joined using the  {@link #getSeparator name-separator} as the separator. For example, if the name separator is\" {@code /}\" and  {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then thepath string  {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A  {@code Path} representing an empty path is returned if {@code first}is the empty string and  {@code more} does not contain any non-emptystrings. \u003cp\u003e The parsing and conversion to a path object is inherently implementation dependent. In the simplest case, the path string is rejected, and  {@link InvalidPathException} thrown, if the path string containscharacters that cannot be converted to characters that are \u003cem\u003elegal\u003c/em\u003e to the file store. For example, on UNIX systems, the NUL (\u0026#92;u0000) character is not allowed to be present in a path. An implementation may choose to reject path strings that contain names that are longer than those allowed by any file store, and where an implementation supports a complex path syntax, it may choose to reject path strings that are \u003cem\u003ebadly formed\u003c/em\u003e. \u003cp\u003e In the case of the default provider, path strings are parsed based on the definition of paths at the platform or virtual file system level. For example, an operating system may not allow specific characters to be present in a file name, but a specific underlying file store may impose different or additional restrictions on the set of legal characters. \u003cp\u003e This method throws  {@link InvalidPathException} when the path stringcannot be converted to a path. Where possible, and where applicable, the exception is created with an  {@link InvalidPathException#getIndex index} value indicating the first position in the {@code path} parameterthat caused the path string to be rejected.\n * @param first the path string or initial part of the path string\n * @param more additional strings to be joined to form the path string\n * @return  the resulting {@code Path}\n * @throws InvalidPathException If the path string cannot be converted\n */\n","tf":{"freq":{"detail":1,"store":3,"stringcannot":1,"simplest":1,"possibl":1,"foo":2,"thepath":1,"specifi":2,"anyel":1,"level":1,"invalid":4,"oper":1,"file":5,"sequenc":2,"longer":1,"platform":1,"element":2,"index":2,"except":5,"thrown":1,"support":1,"form":4,"creat":1,"charact":4,"invok":1,"bad":1,"provid":2,"restrict":1,"non":1,"present":2,"syntax":1,"system":3,"eachnon":1,"separ":4,"definit":1,"contain":2,"emptystr":1,"parameterthat":1,"will":1,"bar":2,"posit":1,"virtual":1,"legal":2,"result":1,"complex":1,"reject":4,"allow":3,"stringto":1,"link":5,"one":1,"typic":1,"convers":1,"convert":6,"use":1,"object":1,"applic":1,"consid":1,"indic":1,"name":5,"path":33,"choos":2,"valu":2,"initi":1,"addit":2,"may":4,"includ":1,"repres":1,"depend":1,"paramet":1,"join":5,"gus":2,"impos":1,"empti":3,"inher":1,"differ":1,"specif":3,"caus":1,"string":19,"base":1,"exampl":3,"method":1,"part":1,"first":5,"pars":2,"containscharact":1},"maxFreq":33,"totalTerms":209},"loc":0}