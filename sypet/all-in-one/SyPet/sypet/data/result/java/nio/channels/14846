{"id":14846,"className":"java.nio.channels.AsynchronousFileChannel","methodName":"lock","signature":"\u003cjava.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future\u003cjava.nio.channels.FileLock\u003e lock()\u003e","javadoc":"/** \n * Acquires an exclusive lock on this channel\u0027s file. \u003cp\u003e This method initiates an operation to acquire an exclusive lock on this channel\u0027s file. The method returns a  {@code Future} representing thepending result of the operation. The  {@code Future}\u0027s  {@link Future#get() get} method returns the {@link FileLock} on successful completion.\u003cp\u003e An invocation of this method behaves in exactly the same way as the invocation \u003cpre\u003e ch. {@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false) \u003c/pre\u003e\n * @return  a {@code Future} object representing the pending result\n * @throws OverlappingFileLockException If a lock is already held by this Java virtual machine, or there is already a pending attempt to lock a region\n * @throws NonWritableChannelException If this channel was not opened for writing\n */\n","tf":{"freq":{"region":1,"attempt":1,"virtual":1,"acquir":2,"fals":1,"result":2,"behav":1,"link":3,"thepend":1,"way":1,"object":1,"open":1,"oper":2,"file":4,"exact":1,"write":1,"initi":1,"exclus":2,"complet":1,"pend":2,"held":1,"except":2,"futur":4,"overlap":1,"repres":2,"lock":9,"writabl":1,"invoc":2,"non":1,"machin":1,"pre":2,"java":1,"alreadi":2,"method":4,"channel":4,"success":1},"maxFreq":9,"totalTerms":68},"loc":3}