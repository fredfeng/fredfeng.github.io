{"id":15090,"className":"java.nio.file.Path","methodName":"resolveSibling","signature":"\u003cjava.nio.file.Path: java.nio.file.Path resolveSibling(java.nio.file.Path)\u003e","javadoc":"/** \n * Resolves the given path against this path\u0027s  {@link #getParent parent}path. This is useful where a file name needs to be \u003ci\u003ereplaced\u003c/i\u003e with another file name. For example, suppose that the name separator is \" {@code /}\" and a path represents \" {@code dir1/dir2/foo}\", then invoking this method with the  {@code Path} \"{@code bar}\" will result in the  {@code Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path, or  {@code other} is {@link #isAbsolute() absolute}, then this method returns  {@code other}. If  {@code other} is an empty path then this methodreturns this path\u0027s parent, or where this path doesn\u0027t have a parent, the empty path.\n * @param other the path to resolve against this path\u0027s parent\n * @return  the resulting path\n * @see #resolve(Path)\n */\n","tf":{"freq":{"need":1,"result":2,"methodreturn":1,"repres":1,"sibl":1,"invok":1,"link":2,"suppos":1,"resolv":4,"parent":6,"use":1,"foo":1,"absolut":2,"anoth":1,"empti":2,"given":1,"dir":4,"separ":1,"file":2,"name":3,"replac":1,"will":1,"exampl":1,"path":16,"method":2,"bar":2},"maxFreq":16,"totalTerms":61},"loc":0}