{"id":14889,"className":"java.nio.channels.AsynchronousSocketChannel","methodName":"connect","signature":"\u003cjava.nio.channels.AsynchronousSocketChannel: java.util.concurrent.Future\u003cjava.lang.Void\u003e connect(java.net.SocketAddress)\u003e","javadoc":"/** \n * Connects this channel. \u003cp\u003e This method initiates an operation to connect this channel. This method behaves in exactly the same manner as the  {@link #connect(SocketAddress,Object,CompletionHandler)} method except thatinstead of specifying a completion handler, this method returns a  {@code Future} representing the pending result. The {@code Future}\u0027s  {@link Future#get() get} method returns {@code null} on successful completion.\n * @param remote The remote address to which this channel is to be connected\n * @return  A {@code Future} object representing the pending result\n * @throws UnresolvedAddressException If the given remote address is not fully resolved\n * @throws UnsupportedAddressTypeException If the type of the given remote address is not supported\n * @throws AlreadyConnectedException If this channel is already connected\n * @throws ConnectionPendingException If a connection operation is already in progress on this channel\n * @throws SecurityException If a security manager has been installed and it does not permit access to the given remote endpoint\n */\n","tf":{"freq":{"progress":1,"result":2,"unsupport":1,"connect":9,"behav":1,"permit":1,"link":2,"object":2,"type":2,"unresolv":1,"specifi":1,"given":3,"oper":2,"exact":1,"socket":1,"initi":1,"complet":3,"pend":3,"except":6,"support":1,"futur":4,"repres":2,"manag":1,"instal":1,"resolv":1,"fulli":1,"access":1,"endpoint":1,"thatinstead":1,"secur":2,"address":6,"remot":5,"alreadi":3,"manner":1,"method":5,"channel":5,"success":1,"handler":2},"maxFreq":9,"totalTerms":87},"loc":0}