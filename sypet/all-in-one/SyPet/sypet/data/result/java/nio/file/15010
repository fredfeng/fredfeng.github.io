{"id":15010,"className":"java.nio.file.SecureDirectoryStream","methodName":"newByteChannel","signature":"\u003cjava.nio.file.SecureDirectoryStream: java.nio.channels.SeekableByteChannel newByteChannel(T,java.util.Set,java.nio.file.attribute.FileAttribute\u003c?\u003e[])\u003e","javadoc":"/** \n * Opens or creates a file in this directory, returning a seekable byte channel to access the file. \u003cp\u003e This method works in exactly the manner specified by the  {@link Files#newByteChannel Files.newByteChannel} method for thecase that the  {@code path} parameter is an {@link Path#isAbsolute absolute}path. When the parameter is a relative path then the file to open or create is relative to this open directory. In addition to the options defined by the  {@code Files.newByteChannel} method, the {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used toensure that this method fails if the file is a symbolic link. \u003cp\u003e The channel, once created, is not dependent upon the directory stream used to create it. Closing this directory stream has no effect upon the channel.\n * @param path the path of the file to open open or create\n * @param options options specifying how the file is opened\n * @param attrs an optional list of attributes to set atomically when creating the file\n * @throws ClosedDirectoryStreamException if the directory stream is closed\n * @throws IllegalArgumentException if the set contains an invalid combination of options\n * @throws UnsupportedOperationException if an unsupported open option is specified or the array contains attributes that cannot be set atomically when creating the file\n * @throws FileAlreadyExistsException if a file of that name already exists and the  {@link StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified\u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the path if the file is opened for reading. The  {@link SecurityManager#checkWrite(String) checkWrite} method is invoked to check write access to the pathif the file is opened for writing.\n */\n","tf":{"freq":{"atom":2,"unsupport":2,"specifi":4,"close":3,"open":10,"seekabl":1,"fail":1,"invalid":1,"oper":1,"file":15,"exact":1,"relat":2,"combin":1,"option":11,"work":1,"argument":1,"except":7,"symbol":1,"creat":7,"invok":2,"attr":1,"absolut":2,"pathif":1,"provid":1,"contain":2,"toensur":1,"upon":2,"array":1,"defin":1,"stream":4,"directori":6,"link":8,"use":2,"attribut":2,"name":1,"write":4,"path":7,"read":4,"thecas":1,"exist":2,"addit":1,"may":1,"check":6,"error":1,"standard":1,"manag":3,"depend":1,"instal":1,"paramet":2,"list":1,"access":3,"illeg":1,"specif":1,"secur":4,"effect":1,"string":2,"method":6,"manner":1,"alreadi":2,"channel":7,"occur":1},"maxFreq":15,"totalTerms":174},"loc":0}