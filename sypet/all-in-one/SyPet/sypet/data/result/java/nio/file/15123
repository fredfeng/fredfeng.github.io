{"id":15123,"className":"java.nio.file.Files","methodName":"newByteChannel","signature":"\u003cjava.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute\u003c?\u003e[])\u003e","javadoc":"/** \n * Opens or creates a file, returning a seekable byte channel to access the file. \u003cp\u003e The  {@code options} parameter determines how the file is opened.The  {@link StandardOpenOption#READ READ} and {@link StandardOpenOption#WRITE WRITE} options determine if the file should beopened for reading and/or writing. If neither option (or the  {@link StandardOpenOption#APPEND APPEND} option) is present then the file isopened for reading. By default reading or writing commence at the beginning of the file. \u003cp\u003e In the addition to  {@code READ} and {@code WRITE}, the following options may be present: \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"\"\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardOpenOption#APPEND APPEND} \u003c/td\u003e\u003ctd\u003e If this option is present then the file is opened for writing and each invocation of the channel\u0027s  {@code write} method first advancesthe position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. This option may not be used in conjunction with the  {@code READ} or {@code TRUNCATE_EXISTING} options. \u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} \u003c/td\u003e\u003ctd\u003e If this option is present then the existing file is truncated to a size of 0 bytes. This option is ignored when the file is opened only for reading. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardOpenOption#CREATE_NEW CREATE_NEW} \u003c/td\u003e\u003ctd\u003e If this option is present then a new file is created, failing if the file already exists or is a symbolic link. When creating a file the check for the existence of the file and the creation of the file if it does not exist is atomic with respect to other file system operations. This option is ignored when the file is opened only for reading. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd \u003e  {@link StandardOpenOption#CREATE CREATE} \u003c/td\u003e\u003ctd\u003e If this option is present then an existing file is opened if it exists, otherwise a new file is created. This option is ignored if the {@code CREATE_NEW} option is also present or the file is opened onlyfor reading. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd \u003e  {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} \u003c/td\u003e\u003ctd\u003e When this option is present then the implementation makes a \u003cem\u003ebest effort\u003c/em\u003e attempt to delete the file when closed by the {@link SeekableByteChannel#close close} method. If the {@code close}method is not invoked then a \u003cem\u003ebest effort\u003c/em\u003e attempt is made to delete the file when the Java virtual machine terminates. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e {@link StandardOpenOption#SPARSE SPARSE} \u003c/td\u003e\u003ctd\u003e When creating a new file this option is a \u003cem\u003ehint\u003c/em\u003e that the new file will be sparse. This option is ignored when not creating a new file. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardOpenOption#SYNC SYNC} \u003c/td\u003e\u003ctd\u003e Requires that every update to the file\u0027s content or metadata be written synchronously to the underlying storage device. (see \u003ca href\u003d\"package-summary.html#integrity\"\u003e Synchronized I/O file integrity\u003c/a\u003e). \u003c/td\u003e \u003ctr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardOpenOption#DSYNC DSYNC} \u003c/td\u003e\u003ctd\u003e Requires that every update to the file\u0027s content be written synchronously to the underlying storage device. (see \u003ca href\u003d\"package-summary.html#integrity\"\u003e Synchronized I/O file integrity\u003c/a\u003e). \u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e \u003cp\u003e An implementation may also support additional implementation specific options. \u003cp\u003e The  {@code attrs} parameter is optional {@link FileAttribute file-attributes} to set atomically when a new file is created.\u003cp\u003e In the case of the default provider, the returned seekable byte channel is a  {@link java.nio.channels.FileChannel}. \u003cp\u003e \u003cb\u003eUsage Examples:\u003c/b\u003e \u003cpre\u003e Path path \u003d ... // open file for reading ReadableByteChannel rbc \u003d Files.newByteChannel(path, EnumSet.of(READ))); // open file for writing to the end of an existing file, creating // the file if it doesn\u0027t already exist WritableByteChannel wbc \u003d Files.newByteChannel(path, EnumSet.of(CREATE,APPEND)); // create file with initial permissions, opening it for both reading and writing {@code FileAttribute\u003c\u003cSetPosixFilePermission\u003e\u003e perms \u003d ...}SeekableByteChannel sbc \u003d Files.newByteChannel(path, EnumSet.of(CREATE_NEW,READ,WRITE), perms); \u003c/pre\u003e\n * @param path the path to the file to open or create\n * @param options options specifying how the file is opened\n * @param attrs an optional list of file attributes to set atomically when creating the file\n * @return  a new seekable byte channel\n * @throws IllegalArgumentException if the set contains an invalid combination of options\n * @throws UnsupportedOperationException if an unsupported open option is specified or the array contains attributes that cannot be set atomically when creating the file\n * @throws FileAlreadyExistsException if a file of that name already exists and the  {@link StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified\u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the path if the file is opened for reading. The  {@link SecurityManager#checkWrite(String) checkWrite} method is invoked to check write access to the pathif the file is opened for writing. The  {@link SecurityManager#checkDelete(String) checkDelete} method isinvoked to check delete access if the file is opened with the {@code DELETE_ON_CLOSE} option.\n * @see java.nio.channels.FileChannel#open(Path,Set,FileAttribute[])\n */\n","tf":{"freq":{"singl":1,"whether":1,"specifi":3,"open":29,"seekabl":5,"fail":1,"oper":3,"file":55,"border":1,"href":2,"option":41,"ignor":4,"support":1,"sbc":1,"invok":3,"done":1,"writabl":1,"attr":2,"commenc":1,"pathif":1,"provid":2,"invoc":1,"content":2,"conjunct":1,"present":8,"system":2,"summari":3,"advanc":1,"onlyfor":1,"will":1,"posit":2,"array":1,"virtual":1,"creation":1,"delet":5,"link":19,"data":2,"made":1,"use":1,"truncat":1,"therefor":1,"perm":2,"attribut":6,"written":2,"write":12,"best":2,"initi":1,"end":2,"isopen":1,"addit":2,"may":3,"access":4,"advancesth":1,"tabl":2,"string":3,"exampl":1,"method":6,"alreadi":4,"usag":1,"respect":1,"atom":5,"unsupport":2,"integr":4,"close":4,"requir":2,"invalid":1,"spars":1,"request":1,"combin":1,"permiss":2,"everi":2,"follow":1,"metadata":1,"argument":1,"except":6,"symbol":1,"creat":12,"descript":1,"effort":2,"size":1,"machin":1,"cellpad":1,"updat":2,"contain":2,"determin":2,"make":1,"otherwis":1,"attempt":2,"unspecifi":1,"readabl":1,"posix":1,"name":1,"path":9,"read":12,"rbc":1,"exist":10,"beopen":1,"wbc":1,"error":1,"standard":12,"check":10,"isinvok":1,"manag":4,"depend":1,"instal":1,"paramet":2,"list":1,"hint":1,"storag":2,"illeg":1,"begin":1,"neither":1,"termin":1,"specif":2,"secur":5,"pre":2,"java":3,"html":2,"nio":2,"devic":2,"first":1,"channel":16,"also":2,"occur":1},"maxFreq":55,"totalTerms":449},"loc":3}