{"id":15141,"className":"java.nio.file.Files","methodName":"copy","signature":"\u003cjava.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])\u003e","javadoc":"/** \n * Copy a file to a target file. \u003cp\u003e This method copies a file to the target file with the  {@code options} parameter specifying how the copy is performed. By default, thecopy fails if the target file already exists or is a symbolic link, except if the source and target are the  {@link #isSameFile same} file, inwhich case the method completes without copying the file. File attributes are not required to be copied to the target file. If symbolic links are supported, and the file is a symbolic link, then the final target of the link is copied. If the file is a directory then it creates an empty directory in the target location (entries in the directory are not copied). This method can be used with the  {@link #walkFileTree walkFileTree} method to copy a directory and all entries in the directory,or an entire \u003ci\u003efile-tree\u003c/i\u003e where required. \u003cp\u003e The  {@code options} parameter may include any of the following:\u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"\"\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} \u003c/td\u003e\u003ctd\u003e If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardCopyOption#COPY_ATTRIBUTES COPY_ATTRIBUTES} \u003c/td\u003e\u003ctd\u003e Attempts to copy the file attributes associated with this file to the target file. The exact file attributes that are copied is platform and file system dependent and therefore unspecified. Minimally, the {@link BasicFileAttributes#lastModifiedTime last-modified-time} iscopied to the target file if supported by both the source and target file store. Copying of file timestamps may result in precision loss. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} \u003c/td\u003e\u003ctd\u003e Symbolic links are not followed. If the file is a symbolic link, then the symbolic link itself, not the target of the link, is copied. It is implementation specific if file attributes can be copied to the new link. In other words, the  {@code COPY_ATTRIBUTES} option may beignored when copying a symbolic link. \u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e \u003cp\u003e An implementation of this interface may support additional implementation specific options. \u003cp\u003e Copying a file is not an atomic operation. If an  {@link IOException}is thrown then it possible that the target file is incomplete or some of its file attributes have not been copied from the source file. When the {@code REPLACE_EXISTING} option is specified and the target file exists,then the target file is replaced. The check for the existence of the file and the creation of the new file may not be atomic with respect to other file system activities. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we want to copy a file into a directory, giving it the same file name as the source file: \u003cpre\u003e Path source \u003d ... Path newdir \u003d ... Files.copy(source, newdir.resolve(source.getFileName()); \u003c/pre\u003e\n * @param source the path to the file to copy\n * @param target the path to the target file (may be associated with a different provider to the source path)\n * @param options options specifying how the copy should be done\n * @return  the path to the target file\n * @throws UnsupportedOperationException if the array contains a copy option that is not supported\n * @throws FileAlreadyExistsException if the target file exists but cannot be replaced because the {@code REPLACE_EXISTING} option is not specified \u003ci\u003e(optionalspecific exception)\u003c/i\u003e\n * @throws DirectoryNotEmptyException the  {@code REPLACE_EXISTING} option is specified but the filecannot be replaced because it is a non-empty directory \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the source file, the {@link SecurityManager#checkWrite(String) checkWrite} is invokedto check write access to the target file. If a symbolic link is copied the security manager is invoked to check  {@link LinkPermission}{@code (\"symbolic\")}.\n */\n","tf":{"freq":{"incomplet":1,"store":1,"filecannot":1,"copi":25,"specifi":5,"time":2,"tree":3,"fail":1,"oper":2,"file":50,"border":1,"option":15,"platform":1,"support":4,"invok":2,"done":1,"resolv":1,"without":1,"provid":2,"non":2,"system":2,"summari":1,"sourc":10,"entir":1,"array":1,"creation":1,"directori":9,"give":1,"link":26,"use":1,"therefor":1,"newdir":2,"timestamp":1,"attribut":6,"associ":2,"write":3,"want":1,"complet":1,"addit":1,"may":6,"suppos":1,"iscopi":1,"access":2,"empti":4,"optionalspecif":1,"differ":1,"tabl":2,"string":2,"exampl":1,"alreadi":2,"method":5,"usag":1,"respect":1,"atom":2,"unsupport":1,"last":2,"invokedto":1,"possibl":1,"thecopi":1,"perform":1,"requir":2,"basic":1,"exact":1,"permiss":1,"precis":1,"follow":2,"except":9,"thrown":1,"symbol":11,"creat":1,"descript":1,"cellpad":1,"contain":1,"word":1,"walk":2,"attempt":1,"unspecifi":1,"result":1,"beignor":1,"loss":1,"activ":1,"minim":1,"name":2,"path":6,"read":3,"inwhich":1,"exist":7,"locat":1,"includ":1,"standard":2,"check":8,"error":1,"depend":1,"entri":2,"manag":4,"instal":1,"paramet":2,"specif":3,"secur":5,"pre":2,"replac":5,"target":23,"modifi":2,"occur":1},"maxFreq":50,"totalTerms":357},"loc":11}