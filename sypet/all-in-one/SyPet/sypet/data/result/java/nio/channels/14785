{"id":14785,"className":"java.nio.channels.SocketChannel","methodName":"open","signature":"\u003cjava.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)\u003e","javadoc":"/** \n * Opens a socket channel and connects it to a remote address. \u003cp\u003e This convenience method works as if by invoking the  {@link #open()}method, invoking the  {@link #connect(SocketAddress) connect} method uponthe resulting socket channel, passing it \u003ctt\u003eremote\u003c/tt\u003e, and then returning that channel.  \u003c/p\u003e\n * @param remote The remote address to which the new channel is to be connected\n * @throws AsynchronousCloseException If another thread closes this channel while the connect operation is in progress\n * @throws ClosedByInterruptException If another thread interrupts the current thread while the connect operation is in progress, thereby closing the channel and setting the current thread\u0027s interrupt status\n * @throws UnresolvedAddressException If the given remote address is not fully resolved\n * @throws UnsupportedAddressTypeException If the type of the given remote address is not supported\n * @throws SecurityException If a security manager has been installed and it does not permit access to the given remote endpoint\n * @throws IOException If some other I/O error occurs\n */\n","tf":{"freq":{"progress":2,"result":1,"asynchron":1,"unsupport":1,"uponth":1,"connect":6,"permit":1,"link":2,"therebi":1,"anoth":2,"type":2,"unresolv":1,"close":4,"open":3,"given":3,"oper":2,"thread":4,"current":2,"socket":3,"conveni":1,"work":1,"except":6,"support":1,"error":1,"status":1,"manag":1,"invok":2,"instal":1,"resolv":1,"fulli":1,"access":1,"endpoint":1,"interrupt":3,"pass":1,"secur":2,"address":7,"remot":7,"method":3,"channel":6,"occur":1},"maxFreq":7,"totalTerms":91},"loc":15}