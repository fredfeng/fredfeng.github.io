{"id":14998,"className":"java.nio.file.FileSystems","methodName":"getDefault","signature":"\u003cjava.nio.file.FileSystems: java.nio.file.FileSystem getDefault()\u003e","javadoc":"/** \n * Returns the default  {@code FileSystem}. The default file system creates objects that provide access to the file systems accessible to the Java virtual machine. The \u003cem\u003eworking directory\u003c/em\u003e of the file system is the current user directory, named by the system property  {@code user.dir}. This allows for interoperability with the  {@link java.io.File java.io.File}class. \u003cp\u003e The first invocation of any of the methods defined by this class locates the default  {@link FileSystemProvider provider} object. Where thesystem property  {@code java.nio.file.spi.DefaultFileSystemProvider} isnot defined then the default provider is a system-default provider that is invoked to create the default file system. \u003cp\u003e If the system property  {@code java.nio.file.spi.DefaultFileSystemProvider}is defined then it is taken to be a list of one or more fully-qualified names of concrete provider classes identified by the URI scheme {@code \"file\"}. Where the property is a list of more than one name then the names are separated by a comma. Each class is loaded, using the system class loader, and instantiated by invoking a one argument constructor whose formal parameter type is  {@code FileSystemProvider}. The providers are loaded and instantiated in the order they are listed in the property. If this process fails or a provider\u0027s scheme is not equal to  {@code \"file\"}then an unspecified error is thrown. URI schemes are normally compared without regard to case but for the default provider, the scheme is required to be  {@code \"file\"}. The first provider class is instantiated by invoking it with a reference to the system-default provider. The second provider class is instantiated by invoking it with a reference to the first provider instance. The third provider class is instantiated by invoking it with a reference to the second instance, and so on. The last provider to be instantiated becomes the default provider; its  {@code getFileSystem} method is invoked with the URI {@code \"file:///\"} toget a reference to the default file system. \u003cp\u003e Subsequent invocations of this method return the file system that was returned by the first invocation.\n * @return  the default file system\n */\n","tf":{"freq":{"thesystem":1,"last":1,"second":2,"instanti":6,"normal":1,"type":1,"becom":1,"requir":1,"fail":1,"scheme":4,"refer":4,"file":21,"spi":2,"taken":1,"interoper":1,"work":1,"argument":1,"thrown":1,"comma":1,"creat":2,"whose":1,"invok":6,"loader":1,"regard":1,"third":1,"without":1,"provid":19,"invoc":3,"instanc":2,"system":18,"machin":1,"formal":1,"separ":1,"load":2,"properti":5,"compar":1,"toget":1,"virtual":1,"unspecifi":1,"defin":3,"allow":1,"directori":2,"link":2,"one":3,"use":1,"identifi":1,"object":2,"order":1,"isnot":1,"dir":1,"name":4,"current":1,"concret":1,"subsequ":1,"constructor":1,"locat":1,"error":1,"paramet":1,"equal":1,"list":3,"fulli":1,"access":2,"process":1,"method":3,"java":5,"nio":2,"first":4,"user":2,"qualifi":1},"maxFreq":21,"totalTerms":175},"loc":3}