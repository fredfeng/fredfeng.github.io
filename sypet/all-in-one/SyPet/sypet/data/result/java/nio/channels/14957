{"id":14957,"className":"java.nio.channels.ScatteringByteChannel","methodName":"read","signature":"\u003cjava.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[],int,int)\u003e","javadoc":"/** \n * Reads a sequence of bytes from this channel into a subsequence of the given buffers. \u003cp\u003e An invocation of this method attempts to read up to \u003ci\u003er\u003c/i\u003e bytes from this channel, where \u003ci\u003er\u003c/i\u003e is the total number of bytes remaining the specified subsequence of the given buffer array, that is, \u003cblockquote\u003e\u003cpre\u003e dsts[offset].remaining() + dsts[offset+1].remaining() + ... + dsts[offset+length-1].remaining()\u003c/pre\u003e\u003c/blockquote\u003e at the moment that this method is invoked. \u003cp\u003e Suppose that a byte sequence of length \u003ci\u003en\u003c/i\u003e is read, where \u003ctt\u003e0\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003er\u003c/i\u003e. Up to the first \u003ctt\u003edsts[offset].remaining()\u003c/tt\u003e bytes of this sequence are transferred into buffer \u003ctt\u003edsts[offset]\u003c/tt\u003e, up to the next \u003ctt\u003edsts[offset+1].remaining()\u003c/tt\u003e bytes are transferred into buffer \u003ctt\u003edsts[offset+1]\u003c/tt\u003e, and so forth, until the entire byte sequence is transferred into the given buffers.  As many bytes as possible are transferred into each buffer, hence the final position of each updated buffer, except the last updated buffer, is guaranteed to be equal to that buffer\u0027s limit. \u003cp\u003e This method may be invoked at any time.  If another thread has already initiated a read operation upon this channel, however, then an invocation of this method will block until the first operation is complete. \u003c/p\u003e\n * @param dsts The buffers into which bytes are to be transferred\n * @param offset The offset within the buffer array of the first buffer into which bytes are to be transferred; must be non-negative and no larger than \u003ctt\u003edsts.length\u003c/tt\u003e\n * @param length The maximum number of buffers to be accessed; must be non-negative and no larger than \u003ctt\u003edsts.length\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;\u003ctt\u003eoffset\u003c/tt\u003e\n * @return The number of bytes read, possibly zero,or \u003ctt\u003e-1\u003c/tt\u003e if the channel has reached end-of-stream\n * @throws IndexOutOfBoundsException If the preconditions on the \u003ctt\u003eoffset\u003c/tt\u003e and \u003ctt\u003elength\u003c/tt\u003e parameters do not hold\n * @throws NonReadableChannelException If this channel was not opened for reading\n * @throws ClosedChannelException If this channel is closed\n * @throws AsynchronousCloseException If another thread closes this channel while the read operation is in progress\n * @throws ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread\u0027s interrupt status\n * @throws IOException If some other I/O error occurs\n */\n","tf":{"freq":{"progress":2,"total":1,"forth":1,"last":1,"precondit":1,"therebi":1,"possibl":2,"zero":1,"must":2,"close":6,"specifi":1,"buffer":13,"open":1,"time":1,"given":3,"oper":4,"blockquot":2,"sequenc":4,"thread":5,"howev":1,"nbsp":6,"limit":1,"mani":1,"index":1,"transfer":6,"henc":1,"except":7,"status":1,"invok":2,"hold":1,"number":3,"invoc":2,"non":3,"updat":2,"maximum":1,"will":1,"negat":2,"entir":1,"posit":1,"array":2,"upon":1,"attempt":1,"asynchron":1,"stream":1,"moment":1,"readabl":1,"dsts":10,"next":1,"block":1,"anoth":3,"reach":1,"current":2,"length":6,"read":9,"initi":1,"offset":11,"subsequ":2,"end":1,"complet":1,"may":1,"error":1,"guarante":1,"larger":2,"paramet":1,"suppos":1,"equal":1,"access":1,"interrupt":3,"remain":6,"pre":2,"method":4,"alreadi":1,"within":1,"first":3,"channel":10,"bound":1,"occur":1},"maxFreq":13,"totalTerms":194},"loc":0}