{"id":15137,"className":"java.nio.file.Files","methodName":"createSymbolicLink","signature":"\u003cjava.nio.file.Files: java.nio.file.Path createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute\u003c?\u003e[])\u003e","javadoc":"/** \n * Creates a symbolic link to a target \u003ci\u003e(optional operation)\u003c/i\u003e. \u003cp\u003e The  {@code target} parameter is the target of the link. It may be an{@link Path#isAbsolute absolute} or relative path and may not exist. Whenthe target is a relative path then file system operations on the resulting link are relative to the path of the link. \u003cp\u003e The  {@code attrs} parameter is optional {@link FileAttribute attributes} to set atomically when creating the link. Each attribute isidentified by its  {@link FileAttribute#name name}. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. \u003cp\u003e Where symbolic links are supported, but the underlying  {@link FileStore}does not support symbolic links, then this may fail with an  {@link IOException}. Additionally, some operating systems may require that the Java virtual machine be started with implementation specific privileges to create symbolic links, in which case this method may throw  {@code IOException}.\n * @param link the path of the symbolic link to create\n * @param target the target of the symbolic link\n * @param attrs the array of attributes to set atomically when creating the symbolic link\n * @return  the path to the symbolic link\n * @throws UnsupportedOperationException if the implementation does not support symbolic links or the array contains an attribute that cannot be set atomically when creating the symbolic link\n * @throws FileAlreadyExistsException if a file with the name already exists \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, it denies  {@link LinkPermission}\u003ctt\u003e(\"symbolic\")\u003c/tt\u003e or its  {@link SecurityManager#checkWrite(String) checkWrite}method denies write access to the path of the symbolic link.\n */\n","tf":{"freq":{"atom":3,"unsupport":1,"whenth":1,"last":1,"store":1,"occurr":1,"requir":1,"fail":1,"oper":4,"file":6,"permiss":1,"relat":3,"deni":2,"option":3,"ignor":1,"except":7,"support":3,"symbol":13,"creat":7,"attr":2,"absolut":2,"provid":1,"system":2,"machin":1,"start":1,"contain":1,"array":3,"virtual":1,"result":1,"one":1,"link":25,"attribut":7,"name":4,"write":3,"path":7,"exist":3,"privileg":1,"addit":1,"may":5,"includ":1,"check":2,"error":1,"manag":2,"instal":1,"paramet":2,"access":1,"specif":2,"secur":3,"isidentifi":1,"string":1,"target":6,"java":1,"method":2,"alreadi":2,"occur":1},"maxFreq":25,"totalTerms":161},"loc":4}