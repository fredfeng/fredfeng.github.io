{"id":14758,"className":"java.nio.channels.AsynchronousByteChannel","methodName":"write","signature":"\u003cjava.nio.channels.AsynchronousByteChannel: void write(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)\u003e","javadoc":"/** \n * Writes a sequence of bytes to this channel from the given buffer. \u003cp\u003e This method initiates an asynchronous write operation to write a sequence of bytes to this channel from the given buffer. The  {@code handler} parameter is a completion handler that is invoked when the writeoperation completes (or fails). The result passed to the completion handler is the number of bytes written. \u003cp\u003e The write operation may write up to \u003ci\u003er\u003c/i\u003e bytes to the channel, where \u003ci\u003er\u003c/i\u003e is the number of bytes remaining in the buffer, that is, {@code src.remaining()} at the time that the write is attempted. Where\u003ci\u003er\u003c/i\u003e is 0, the write operation completes immediately with a result of {@code 0} without initiating an I/O operation.\u003cp\u003e Suppose that a byte sequence of length \u003ci\u003en\u003c/i\u003e is written, where \u003ctt\u003e0\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003er\u003c/i\u003e. This byte sequence will be transferred from the buffer starting at index \u003ci\u003ep\u003c/i\u003e, where \u003ci\u003ep\u003c/i\u003e is the buffer\u0027s position at the moment the write is performed; the index of the last byte written will be \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003ctt\u003e+\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e-\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e. Upon completion the buffer\u0027s position will be equal to \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003ctt\u003e+\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e; its limit will not have changed. \u003cp\u003e Buffers are not safe for use by multiple concurrent threads so care should be taken to not access the buffer until the operation has completed. \u003cp\u003e This method may be invoked at any time. Some channel types may not allow more than one write to be outstanding at any given time. If a thread initiates a write operation before a previous write operation has completed then a  {@link WritePendingException} will be thrown.\n * @param src The buffer from which bytes are to be retrieved\n * @param attachment The object to attach to the I/O operation; can be  {@code null}\n * @param handler The completion handler object\n * @throws WritePendingException If the channel does not allow more than one write to be outstanding and a previous write has not completed\n * @throws ShutdownChannelGroupException If the channel is associated with a  {@link AsynchronousChannelGroup group} that has terminated\n */\n","tf":{"freq":{"last":1,"perform":1,"type":1,"buffer":9,"time":3,"fail":1,"given":3,"oper":8,"sequenc":4,"thread":2,"care":1,"taken":1,"nbsp":10,"limit":1,"thrown":1,"except":3,"transfer":1,"index":2,"multipl":1,"invok":2,"number":2,"without":1,"start":1,"will":5,"posit":2,"upon":1,"attempt":1,"result":2,"asynchron":2,"allow":2,"moment":1,"concurr":1,"link":2,"one":2,"use":1,"object":2,"associ":1,"written":3,"write":16,"length":1,"immedi":1,"src":2,"initi":3,"shutdown":1,"pend":2,"complet":9,"safe":1,"may":3,"outstand":2,"previous":2,"paramet":1,"suppos":1,"equal":1,"access":1,"pass":1,"termin":1,"remain":2,"attach":2,"retriev":1,"writeoper":1,"method":2,"chang":1,"group":3,"channel":8,"handler":5},"maxFreq":16,"totalTerms":162},"loc":0}