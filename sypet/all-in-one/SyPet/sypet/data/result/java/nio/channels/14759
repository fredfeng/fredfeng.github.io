{"id":14759,"className":"java.nio.channels.AsynchronousByteChannel","methodName":"write","signature":"\u003cjava.nio.channels.AsynchronousByteChannel: java.util.concurrent.Future\u003cjava.lang.Integer\u003e write(java.nio.ByteBuffer)\u003e","javadoc":"/** \n * Writes a sequence of bytes to this channel from the given buffer. \u003cp\u003e This method initiates an asynchronous write operation to write a sequence of bytes to this channel from the given buffer. The method behaves in exactly the same manner as the  {@link #write(ByteBuffer,Object,CompletionHandler) write(ByteBuffer,Object,CompletionHandler)} method except that insteadof specifying a completion handler, this method returns a  {@code Future}representing the pending result. The  {@code Future}\u0027s  {@link Future#get() get} method returns the number of bytes written.\n * @param src The buffer from which bytes are to be retrieved\n * @return A Future representing the result of the operation\n * @throws WritePendingException If the channel does not allow more than one write to be outstanding and a previous write has not completed\n */\n","tf":{"freq":{"asynchron":1,"result":2,"allow":1,"behav":1,"one":1,"link":2,"insteadof":1,"object":2,"specifi":1,"buffer":5,"given":2,"oper":2,"sequenc":2,"written":1,"exact":1,"write":9,"src":1,"initi":1,"complet":4,"pend":2,"except":2,"outstand":1,"futur":4,"previous":1,"repres":2,"number":1,"retriev":1,"manner":1,"method":5,"channel":3,"handler":3},"maxFreq":9,"totalTerms":66},"loc":0}