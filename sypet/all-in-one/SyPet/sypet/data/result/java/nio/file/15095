{"id":15095,"className":"java.nio.file.Path","methodName":"toRealPath","signature":"\u003cjava.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])\u003e","javadoc":"/** \n * Returns the \u003cem\u003ereal\u003c/em\u003e path of an existing file. \u003cp\u003e The precise definition of this method is implementation dependent but in general it derives from this path, an  {@link #isAbsolute absolute}path that locates the  {@link Files#isSameFile same} file as this path, butwith name elements that represent the actual name of the directories and the file. For example, where filename comparisons on a file system are case insensitive then the name elements represent the names in their actual case. Additionally, the resulting path has redundant name elements removed. \u003cp\u003e If this path is relative then its absolute path is first obtained, as if by invoking the  {@link #toAbsolutePath toAbsolutePath} method.\u003cp\u003e The  {@code options} array may be used to indicate how symbolic linksare handled. By default, symbolic links are resolved to their final target. If the option  {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} ispresent then this method does not resolve symbolic links. Some implementations allow special names such as \" {@code ..}\" to refer to the parent directory. When deriving the \u003cem\u003ereal path\u003c/em\u003e, and a \" {@code ..}\" (or equivalent) is preceded by a non-\" {@code ..}\" name then an implementation will typically cause both names to be removed. When not resolving symbolic links and the preceding name is a symbolic link then the names are only removed if it guaranteed that the resulting path will locate the same file as this path.\n * @param options options indicating how symbolic links are handled\n * @return  an absolute path represent the \u003cem\u003ereal\u003c/em\u003e path of the filelocated by this object\n * @throws IOException if the file does not exist or an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, its  {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the file, and where this path is not absolute, its  {@link SecurityManager#checkPropertyAccess(String) checkPropertyAccess} method is invoked to check access to thesystem property  {@code user.dir}\n */\n","tf":{"freq":{"thesystem":1,"deriv":2,"linksar":1,"refer":1,"equival":1,"file":9,"precis":1,"relat":1,"option":5,"element":3,"except":2,"symbol":6,"invok":3,"butwith":1,"remov":3,"resolv":3,"parent":1,"absolut":7,"provid":1,"comparison":1,"non":1,"system":1,"obtain":1,"definit":1,"will":2,"properti":3,"ispres":1,"array":1,"result":2,"allow":1,"directori":2,"link":12,"typic":1,"redund":1,"use":1,"object":1,"real":4,"indic":2,"dir":1,"name":10,"path":16,"read":3,"exist":2,"addit":1,"locat":2,"may":1,"check":6,"error":1,"repres":3,"manag":3,"guarante":1,"depend":1,"instal":1,"filenam":1,"fileloc":1,"access":4,"general":1,"handl":2,"preced":2,"insensit":1,"secur":4,"caus":1,"string":2,"exampl":1,"target":1,"actual":2,"method":5,"special":1,"user":1,"first":1,"occur":1},"maxFreq":16,"totalTerms":175},"loc":0}