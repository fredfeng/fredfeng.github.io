{"id":15190,"className":"java.nio.file.spi.FileSystemProvider","methodName":"getPath","signature":"\u003cjava.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)\u003e","javadoc":"/** \n * Return a  {@code Path} object by converting the given {@link URI}. The resulting  {@code Path} is associated with a {@link FileSystem} thatalready exists or is constructed automatically. \u003cp\u003e The exact form of the URI is file system provider dependent. In the case of the default provider, the URI scheme is  {@code \"file\"} and thegiven URI has a non-empty path component, and undefined query, and fragment components. The resulting  {@code Path} is associated with thedefault  {@link FileSystems#getDefault default} {@code FileSystem}. \u003cp\u003e If a security manager is installed then a provider implementation may require to check a permission. In the case of the  {@link FileSystems#getDefault default} file system, no permission check isrequired.\n * @param uri The URI to convert\n * @throws IllegalArgumentException If the URI scheme does not identify this provider or other preconditions on the uri parameter do not hold\n * @throws FileSystemNotFoundException The file system, identified by the URI, does not exist and cannot be created automatically\n * @throws SecurityException If a security manager is installed and it denies an unspecified permission.\n */\n","tf":{"freq":{"unspecifi":1,"result":2,"isrequir":1,"link":4,"precondit":1,"convert":2,"identifi":2,"object":1,"automat":2,"requir":1,"given":1,"scheme":2,"associ":2,"file":9,"exact":1,"permiss":3,"path":5,"thegiven":1,"undefin":1,"fragment":1,"exist":2,"deni":1,"argument":1,"except":3,"may":1,"check":2,"form":1,"creat":1,"manag":2,"depend":1,"hold":1,"instal":2,"paramet":1,"illeg":1,"uri":2,"provid":4,"non":1,"empti":1,"queri":1,"system":8,"secur":3,"thatalreadi":1,"compon":2,"construct":1,"thedefault":1,"found":1},"maxFreq":9,"totalTerms":89},"loc":0}