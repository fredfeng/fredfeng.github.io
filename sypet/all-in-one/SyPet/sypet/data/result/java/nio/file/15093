{"id":15093,"className":"java.nio.file.Path","methodName":"toUri","signature":"\u003cjava.nio.file.Path: java.net.URI toUri()\u003e","javadoc":"/** \n * Returns a URI to represent this path. \u003cp\u003e This method constructs an absolute  {@link URI} with a {@link URI#getScheme() scheme} equal to the URI scheme that identifies theprovider. The exact form of the scheme specific part is highly provider dependent. \u003cp\u003e In the case of the default provider, the URI is hierarchical with a  {@link URI#getPath() path} component that is absolute. The query andfragment components are undefined. Whether the authority component is defined or not is implementation dependent. There is no guarantee that the  {@code URI} may be used to construct a {@link java.io.File java.io.File}. In particular, if this path represents a Universal Naming Convention (UNC) path, then the UNC server name may be encoded in the authority component of the resulting URI. In the case of the default provider, and the file exists, and it can be determined that the file is a directory, then the resulting  {@code URI} will end with a slash.\u003cp\u003e The default provider provides a similar \u003cem\u003eround-trip\u003c/em\u003e guarantee to the  {@link java.io.File} class. For a given {@code Path} \u003ci\u003ep\u003c/i\u003e itis guaranteed that \u003cblockquote\u003e\u003ctt\u003e {@link Paths#get(URI) Paths.get}(\u003c/tt\u003e\u003ci\u003ep\u003c/i\u003e\u003ctt\u003e.toUri()).equals(\u003c/tt\u003e\u003ci\u003ep\u003c/i\u003e \u003ctt\u003e. {@link #toAbsolutePath() toAbsolutePath}())\u003c/tt\u003e \u003c/blockquote\u003e so long as the original  {@code Path}, the  {@code URI}, and the new  {@code Path} are all created in (possibly different invocations of) the sameJava virtual machine. Whether other providers make any guarantees is provider specific and therefore unspecified. \u003cp\u003e When a file system is constructed to access the contents of a file as a file system then it is highly implementation specific if the returned URI represents the given path in the file system or it represents a \u003cem\u003ecompound\u003c/em\u003e URI that encodes the URI of the enclosing file system. A format for compound URIs is not defined in this release; such a scheme may be added in a future release.\n * @return  the URI representing this path\n * @throws java.io.IOError if an I/O error occurs obtaining the absolute path, or where a file system is constructed to access the contents of a file as a file system, and the URI of the enclosing file system cannot be obtained\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link #toAbsolutePath toAbsolutePath} methodthrows a security exception.\n */\n","tf":{"freq":{"compound":2,"possibl":1,"particular":1,"round":1,"whether":2,"andfrag":1,"scheme":5,"given":2,"univers":1,"blockquot":2,"file":14,"exact":1,"undefin":1,"except":2,"form":1,"creat":1,"format":1,"absolut":7,"provid":8,"uri":2,"invoc":1,"content":2,"queri":1,"obtain":2,"system":7,"machin":1,"encod":2,"enclos":2,"determin":1,"will":1,"make":1,"iti":1,"virtual":1,"unspecifi":1,"theprovid":1,"defin":2,"result":2,"convent":1,"directori":1,"link":8,"methodthrow":1,"use":1,"identifi":1,"therefor":1,"author":2,"releas":2,"name":2,"path":17,"trip":1,"exist":1,"end":1,"similar":1,"hierarch":1,"may":3,"futur":1,"slash":1,"error":2,"repres":5,"manag":1,"depend":2,"guarante":4,"instal":1,"origin":1,"equal":2,"access":2,"differ":1,"specif":3,"secur":3,"compon":4,"ad":1,"method":1,"java":5,"server":1,"high":2,"construct":4,"part":1,"occur":1},"maxFreq":17,"totalTerms":179},"loc":0}