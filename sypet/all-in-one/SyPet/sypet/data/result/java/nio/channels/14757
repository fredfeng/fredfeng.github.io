{"id":14757,"className":"java.nio.channels.AsynchronousByteChannel","methodName":"read","signature":"\u003cjava.nio.channels.AsynchronousByteChannel: java.util.concurrent.Future\u003cjava.lang.Integer\u003e read(java.nio.ByteBuffer)\u003e","javadoc":"/** \n * Reads a sequence of bytes from this channel into the given buffer. \u003cp\u003e This method initiates an asynchronous read operation to read a sequence of bytes from this channel into the given buffer. The method behaves in exactly the same manner as the  {@link #read(ByteBuffer,Object,CompletionHandler) read(ByteBuffer,Object,CompletionHandler)} method except that insteadof specifying a completion handler, this method returns a  {@code Future}representing the pending result. The  {@code Future}\u0027s  {@link Future#get() get} method returns the number of bytes read or {@code -1} if no bytescould be read because the channel has reached end-of-stream.\n * @param dst The buffer into which bytes are to be transferred\n * @return  A Future representing the result of the operation\n * @throws IllegalArgumentException If the buffer is read-only\n * @throws ReadPendingException If the channel does not allow more than one read to be outstanding and a previous read has not completed\n */\n","tf":{"freq":{"asynchron":1,"result":2,"stream":1,"allow":1,"behav":1,"one":1,"bytescould":1,"link":2,"insteadof":1,"dst":1,"object":2,"specifi":1,"buffer":6,"reach":1,"given":2,"oper":2,"sequenc":2,"exact":1,"read":12,"initi":1,"end":1,"complet":4,"pend":2,"argument":1,"transfer":1,"except":3,"outstand":1,"futur":4,"previous":1,"repres":2,"number":1,"illeg":1,"manner":1,"method":5,"channel":4,"handler":3},"maxFreq":12,"totalTerms":77},"loc":0}