{"id":15011,"className":"java.nio.file.SecureDirectoryStream","methodName":"deleteFile","signature":"\u003cjava.nio.file.SecureDirectoryStream: void deleteFile(T)\u003e","javadoc":"/** \n * Deletes a file. \u003cp\u003e Unlike the  {@link Files#delete delete()} method, this method doesnot first examine the file to determine if the file is a directory. Whether a directory is deleted by this method is system dependent and therefore not specified. If the file is a symbolic link, then the link itself, not the final target of the link, is deleted. When the parameter is a relative path then the file to delete is relative to this open directory.\n * @param path the path of the file to delete\n * @throws ClosedDirectoryStreamException if the directory stream is closed\n * @throws NoSuchFileException if the file does not exist \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkDelete(String) checkDelete}method is invoked to check delete access to the file\n */\n","tf":{"freq":{"stream":2,"directori":5,"delet":11,"link":5,"therefor":1,"whether":1,"specifi":1,"close":2,"open":1,"file":11,"unlik":1,"relat":2,"path":3,"doesnot":1,"exist":1,"examin":1,"option":1,"except":5,"check":3,"error":1,"symbol":1,"invok":1,"manag":2,"depend":1,"instal":1,"paramet":1,"access":1,"provid":1,"specif":1,"system":1,"secur":3,"string":1,"determin":1,"target":1,"method":4,"first":1,"occur":1},"maxFreq":11,"totalTerms":82},"loc":0}