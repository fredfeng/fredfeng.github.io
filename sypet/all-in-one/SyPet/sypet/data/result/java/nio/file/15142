{"id":15142,"className":"java.nio.file.Files","methodName":"move","signature":"\u003cjava.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])\u003e","javadoc":"/** \n * Move or rename a file to a target file. \u003cp\u003e By default, this method attempts to move the file to the target file, failing if the target file exists except if the source and target are the  {@link #isSameFile same} file, in which case this methodhas no effect. If the file is a symbolic link then the symbolic link itself, not the target of the link, is moved. This method may be invoked to move an empty directory. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. When invoked to move a directory that is not empty then the directory is moved if it does not require moving the entries in the directory.  For example, renaming a directory on the same  {@link FileStore} will usually not require movingthe entries in the directory. When moving a directory requires that its entries be moved then this method fails (by throwing an  {@code IOException}). To move a \u003ci\u003efile tree\u003c/i\u003e may involve copying rather than moving directories and this can be done using the  {@link #copy copy} method in conjunction with the {@link #walkFileTree Files.walkFileTree} utility method.\u003cp\u003e The  {@code options} parameter may include any of the following:\u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"\"\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} \u003c/td\u003e\u003ctd\u003e If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} \u003c/td\u003e\u003ctd\u003e The move is performed as an atomic file system operation and all other options are ignored. If the target file exists then it is implementation specific if the existing file is replaced or this method fails by throwing an  {@link IOException}. If the move cannot be performed as an atomic file system operation then  {@link AtomicMoveNotSupportedException} is thrown. This can arise, forexample, when the target location is on a different  {@code FileStore}and would require that the file be copied, or target location is associated with a different provider to this object. \u003c/td\u003e \u003c/table\u003e \u003cp\u003e An implementation of this interface may support additional implementation specific options. \u003cp\u003e Where the move requires that the file be copied then the  {@link BasicFileAttributes#lastModifiedTime last-modified-time} is copied to thenew file. An implementation may also attempt to copy other file attributes but is not required to fail if the file attributes cannot be copied. When the move is performed as a non-atomic operation, and a  {@code IOException} is thrown, then the state of the files is not defined. Theoriginal file and the target file may both exist, the target file may be incomplete or some of its file attributes may not been copied from the original file. \u003cp\u003e \u003cb\u003eUsage Examples:\u003c/b\u003e Suppose we want to rename a file to \"newname\", keeping the file in the same directory: \u003cpre\u003e Path source \u003d ... Files.move(source, source.resolveSibling(\"newname\")); \u003c/pre\u003e Alternatively, suppose we want to move a file to new directory, keeping the same file name, and replacing any existing file of that name in the directory: \u003cpre\u003e Path source \u003d ... Path newdir \u003d ... Files.move(source, newdir.resolve(source.getFileName()), REPLACE_EXISTING); \u003c/pre\u003e\n * @param source the path to the file to move\n * @param target the path to the target file (may be associated with a different provider to the source path)\n * @param options options specifying how the move should be done\n * @return  the path to the target file\n * @throws UnsupportedOperationException if the array contains a copy option that is not supported\n * @throws FileAlreadyExistsException if the target file exists but cannot be replaced because the {@code REPLACE_EXISTING} option is not specified \u003ci\u003e(optionalspecific exception)\u003c/i\u003e\n * @throws DirectoryNotEmptyException the  {@code REPLACE_EXISTING} option is specified but the filecannot be replaced because it is a non-empty directory \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws AtomicMoveNotSupportedException if the options array contains the  {@code ATOMIC_MOVE} option butthe file cannot be moved as an atomic file system operation.\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to both the source and target file.\n */\n","tf":{"freq":{"incomplet":1,"thenew":1,"store":2,"filecannot":1,"renam":3,"copi":12,"specifi":3,"time":2,"tree":3,"fail":4,"oper":5,"file":50,"border":1,"forexampl":1,"option":14,"move":24,"ignor":1,"support":4,"sibl":1,"invok":3,"done":2,"resolv":2,"involv":1,"provid":3,"non":3,"conjunct":1,"system":3,"summari":1,"will":1,"sourc":10,"array":2,"directori":17,"link":17,"use":1,"newdir":2,"consid":1,"attribut":4,"associ":2,"write":3,"rather":1,"want":2,"aris":1,"usual":1,"addit":1,"may":9,"suppos":2,"access":1,"theorigin":1,"empti":6,"optionalspecif":1,"differ":3,"tabl":2,"string":1,"exampl":2,"method":7,"alreadi":1,"usag":1,"keep":2,"atom":6,"unsupport":1,"last":2,"methodha":1,"perform":3,"requir":6,"butth":1,"altern":1,"basic":1,"follow":1,"except":13,"thrown":2,"symbol":4,"creat":2,"newnam":2,"descript":1,"cellpad":1,"contain":2,"walk":2,"util":1,"attempt":2,"defin":1,"state":1,"object":1,"name":3,"path":7,"exist":10,"locat":2,"includ":1,"movingth":1,"check":3,"error":1,"standard":2,"manag":2,"entri":5,"instal":1,"paramet":1,"origin":1,"specif":3,"secur":3,"effect":1,"pre":4,"replac":6,"target":19,"modifi":2,"special":2,"also":1,"occur":1},"maxFreq":50,"totalTerms":397},"loc":11}