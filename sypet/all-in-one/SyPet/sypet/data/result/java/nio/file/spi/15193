{"id":15193,"className":"java.nio.file.spi.FileSystemProvider","methodName":"newOutputStream","signature":"\u003cjava.nio.file.spi.FileSystemProvider: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])\u003e","javadoc":"/** \n * Opens or creates a file, returning an output stream that may be used to write bytes to the file. This method works in exactly the manner specified by the  {@link Files#newOutputStream} method.\u003cp\u003e The default implementation of this method opens a channel to the file as if by invoking the  {@link #newByteChannel} method and constructs astream that writes bytes to the channel. This method should be overridden where appropriate.\n * @param path the path to the file to open or create\n * @param options options specifying how the file is opened\n * @return  a new output stream\n * @throws IllegalArgumentException if  {@code options} contains an invalid combination of options\n * @throws UnsupportedOperationException if an unsupported option is specified\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to the file. The  {@link SecurityManager#checkDelete(String) checkDelete} method isinvoked to check delete access if the file is opened with the {@code DELETE_ON_CLOSE} option.\n */\n","tf":{"freq":{"unsupport":2,"stream":4,"delet":3,"overridden":1,"link":4,"use":1,"specifi":3,"open":5,"invalid":1,"oper":1,"file":8,"exact":1,"combin":1,"write":5,"path":2,"option":6,"work":1,"argument":1,"except":4,"may":1,"check":6,"error":1,"creat":2,"isinvok":1,"manag":3,"invok":2,"instal":1,"access":2,"provid":1,"illeg":1,"secur":4,"appropri":1,"string":2,"contain":1,"astream":1,"manner":1,"method":7,"construct":1,"output":4,"channel":3,"occur":1},"maxFreq":8,"totalTerms":101},"loc":16}