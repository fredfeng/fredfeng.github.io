{"id":15162,"className":"java.nio.file.Files","methodName":"setLastModifiedTime","signature":"\u003cjava.nio.file.Files: java.nio.file.Path setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)\u003e","javadoc":"/** \n * Updates a file\u0027s last modified time attribute. The file time is converted to the epoch and precision supported by the file system. Converting from finer to coarser granularities result in precision loss. The behavior of this method when attempting to set the last modified time when it is not supported by the file system or is outside the range supported by the underlying file store is not defined. It may or not fail by throwing an {@code IOException}. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we want to set the last modified time to the current time: \u003cpre\u003e Path path \u003d ... FileTime now \u003d FileTime.fromMillis(System.currentTimeMillis()); Files.setLastModifiedTime(path, now); \u003c/pre\u003e\n * @param path the path to the file\n * @param time the new last modified time\n * @return  the file\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, the security manager\u0027s  {@link SecurityManager#checkWrite(String) checkWrite} method is invokedto check write access to file\n * @see BasicFileAttributeView#setTimes\n */\n","tf":{"freq":{"attempt":1,"result":1,"defin":1,"last":6,"loss":1,"store":1,"invokedto":1,"behavior":1,"link":1,"milli":2,"convert":2,"time":13,"attribut":2,"fail":1,"basic":1,"file":12,"rang":1,"write":3,"path":5,"current":2,"precis":2,"coarser":1,"want":1,"except":3,"granular":1,"may":1,"support":3,"check":3,"error":1,"manag":2,"finer":1,"epoch":1,"suppos":1,"access":1,"provid":1,"system":3,"secur":3,"updat":1,"now":2,"outsid":1,"pre":2,"string":1,"exampl":1,"modifi":6,"method":2,"view":1,"usag":1,"occur":1},"maxFreq":13,"totalTerms":106},"loc":5}