{"id":15079,"className":"java.nio.file.Path","methodName":"getParent","signature":"\u003cjava.nio.file.Path: java.nio.file.Path getParent()\u003e","javadoc":"/** \n * Returns the \u003cem\u003eparent path\u003c/em\u003e, or  {@code null} if this path does nothave a parent. \u003cp\u003e The parent of this path object consists of this path\u0027s root component, if any, and each element in the path except for the \u003cem\u003efarthest\u003c/em\u003e from the root in the directory hierarchy. This method does not access the file system; the path or its parent may not exist. Furthermore, this method does not eliminate special names such as \".\" and \"..\" that may be used in some implementations. On UNIX for example, the parent of \" {@code /a/b/c}\" is \" {@code /a/b}\", and the parent of {@code \"x/y/.}\" is \" {@code x/y}\". This method may be used with the  {@link #normalize normalize} method, to eliminate redundant names, for cases where\u003cem\u003eshell-like\u003c/em\u003e navigation is required. \u003cp\u003e If this path has one or more elements, and no root component, then this method is equivalent to evaluating the expression: \u003cblockquote\u003e\u003cpre\u003e subpath(0,\u0026nbsp;getNameCount()-1); \u003c/pre\u003e\u003c/blockquote\u003e\n * @return  a path representing the path\u0027s parent\n */\n","tf":{"freq":{"shell":1,"furthermor":1,"count":1,"directori":1,"root":3,"one":1,"normal":2,"link":1,"redund":1,"use":2,"hierarchi":1,"object":1,"express":1,"navig":1,"requir":1,"equival":1,"blockquot":2,"file":1,"name":3,"path":9,"exist":1,"nbsp":1,"element":2,"except":1,"may":3,"repres":1,"consist":1,"nothav":1,"subpath":1,"parent":8,"evalu":1,"like":1,"access":1,"farthest":1,"elimin":2,"system":1,"compon":2,"pre":2,"exampl":1,"method":5,"special":1},"maxFreq":9,"totalTerms":73},"loc":0}