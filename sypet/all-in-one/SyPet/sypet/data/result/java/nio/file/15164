{"id":15164,"className":"java.nio.file.Files","methodName":"exists","signature":"\u003cjava.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])\u003e","javadoc":"/** \n * Tests whether a file exists. \u003cp\u003e The  {@code options} parameter may be used to indicate how symbolic linksare handled for the case that the file is a symbolic link. By default, symbolic links are followed. If the option  {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is present then symbolic links are not followed.\u003cp\u003e Note that the result of this method is immediately outdated. If this method indicates the file exists then there is no guarantee that a subsequence access will succeed. Care should be taken when using this method in security sensitive applications.\n * @param path the path to the file to test\n * @param options options indicating how symbolic links are handled .\n * @return  {@code true} if the file exists; {@code false} if the file doesnot exist or its existence cannot be determined.\n * @throws SecurityException In the case of the default provider, the  {@link SecurityManager#checkRead(String)} is invoked to checkread access to the file.\n * @see #notExists\n */\n","tf":{"freq":{"fals":1,"result":1,"outdat":1,"test":2,"link":7,"use":2,"linksar":1,"applic":1,"whether":1,"indic":3,"file":7,"path":2,"care":1,"read":1,"doesnot":1,"taken":1,"immedi":1,"subsequ":1,"exist":7,"option":5,"note":1,"follow":2,"except":1,"sensit":1,"may":1,"succeed":1,"check":1,"symbol":5,"invok":1,"manag":1,"guarante":1,"paramet":1,"true":1,"checkread":1,"access":2,"provid":1,"handl":2,"present":1,"secur":3,"string":1,"determin":1,"will":1,"method":3},"maxFreq":7,"totalTerms":81},"loc":17}