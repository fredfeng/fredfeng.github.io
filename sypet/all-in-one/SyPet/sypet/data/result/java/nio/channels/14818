{"id":14818,"className":"java.nio.channels.AsynchronousServerSocketChannel","methodName":"accept","signature":"\u003cjava.nio.channels.AsynchronousServerSocketChannel: java.util.concurrent.Future\u003cjava.nio.channels.AsynchronousSocketChannel\u003e accept()\u003e","javadoc":"/** \n * Accepts a connection. \u003cp\u003e This method initiates an asynchronous operation to accept a connection made to this channel\u0027s socket. The method behaves in exactly the same manner as the  {@link #accept(Object,CompletionHandler)} methodexcept that instead of specifying a completion handler, this method returns a  {@code Future} representing the pending result. The {@code Future}\u0027s  {@link Future#get() get} method returns the {@link AsynchronousSocketChannel} to the new connection on successful completion.\n * @return  a {@code Future} object representing the pending result\n * @throws AcceptPendingException If an accept operation is already in progress on this channel\n * @throws NotYetBoundException If this channel\u0027s socket has not yet been bound\n */\n","tf":{"freq":{"progress":1,"asynchron":2,"result":2,"connect":3,"behav":1,"accept":6,"link":3,"made":1,"object":2,"methodexcept":1,"specifi":1,"oper":2,"exact":1,"socket":3,"initi":1,"complet":3,"pend":3,"except":2,"futur":4,"repres":2,"instead":1,"alreadi":1,"manner":1,"method":4,"channel":4,"success":1,"bound":2,"yet":2,"handler":2},"maxFreq":6,"totalTerms":62},"loc":0}