{"id":15170,"className":"java.nio.file.Files","methodName":"walkFileTree","signature":"\u003cjava.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)\u003e","javadoc":"/** \n * Walks a file tree. \u003cp\u003e This method works as if invoking it were equivalent to evaluating the expression: \u003cblockquote\u003e\u003cpre\u003e walkFileTree(start, EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE, visitor) \u003c/pre\u003e\u003c/blockquote\u003e In other words, it does not follow symbolic links, and visits all levels of the file tree.\n * @param start the starting file\n * @param visitor the file visitor to invoke for each file\n * @return  the starting file\n * @throws SecurityException If the security manager denies access to the starting file. In the case of the default provider, the  {@link SecurityManager#checkRead(String) checkRead} method is invokedto check read access to the directory.\n * @throws IOException if an I/O error is thrown by a visitor method\n */\n","tf":{"freq":{"directori":1,"invokedto":1,"link":2,"visit":2,"express":1,"level":1,"tree":4,"equival":1,"blockquot":2,"file":10,"read":3,"none":1,"deni":1,"option":1,"follow":1,"work":1,"thrown":1,"except":2,"error":1,"check":3,"symbol":1,"manag":2,"invok":2,"evalu":1,"access":2,"provid":1,"visitor":4,"secur":3,"start":5,"pre":2,"string":1,"method":3,"word":1,"walk":3,"integ":1},"maxFreq":10,"totalTerms":72},"loc":6}