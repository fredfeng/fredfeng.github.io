{"id":15092,"className":"java.nio.file.Path","methodName":"relativize","signature":"\u003cjava.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)\u003e","javadoc":"/** \n * Constructs a relative path between this path and a given path. \u003cp\u003e Relativization is the inverse of  {@link #resolve(Path) resolution}. This method attempts to construct a  {@link #isAbsolute relative} paththat when  {@link #resolve(Path) resolved} against this path, yields apath that locates the same file as the given path. For example, on UNIX, if this path is  {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}then the resulting relative path would be  {@code \"c/d\"}. Where this path and the given path do not have a  {@link #getRoot root} component,then a relative path can be constructed. A relative path cannot be constructed if only one of the paths have a root component. Where both paths have a root component then it is implementation dependent if a relative path can be constructed. If this path and the given path are {@link #equals equal} then an \u003ci\u003eempty path\u003c/i\u003e is returned.\u003cp\u003e For any two  {@link #normalize normalized} paths \u003ci\u003ep\u003c/i\u003e and\u003ci\u003eq\u003c/i\u003e, where \u003ci\u003eq\u003c/i\u003e does not have a root component, \u003cblockquote\u003e \u003ci\u003ep\u003c/i\u003e\u003ctt\u003e.relativize(\u003c/tt\u003e\u003ci\u003ep\u003c/i\u003e\u003ctt\u003e.resolve(\u003c/tt\u003e\u003ci\u003eq\u003c/i\u003e\u003ctt\u003e)).equals(\u003c/tt\u003e\u003ci\u003eq\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e \u003c/blockquote\u003e \u003cp\u003e When symbolic links are supported, then whether the resulting path, when resolved against this path, yields a path that can be used to locate the  {@link Files#isSameFile same} file as {@code other} is implementationdependent. For example, if this path is   {@code \"/a/b\"} and the givenpath is  {@code \"/a/x\"} then the resulting relative path may be {@code \"../x\"}. If  {@code \"b\"} is a symbolic link then is implementationdependent if  {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.\n * @param other the path to relativize against this path\n * @return  the resulting relative path, or an empty path if both paths areequal\n * @throws IllegalArgumentException if  {@code other} is not a {@code Path} that can be relativizedagainst this path\n */\n","tf":{"freq":{"attempt":1,"result":4,"yield":2,"root":5,"normal":2,"link":9,"one":1,"use":1,"apath":1,"whether":1,"resolut":1,"implementationdepend":2,"invers":1,"areequ":1,"given":5,"relativ":4,"blockquot":2,"file":5,"path":33,"relat":8,"argument":1,"except":1,"may":1,"locat":3,"support":1,"symbol":2,"depend":1,"givenpath":1,"resolv":5,"equal":3,"absolut":1,"illeg":1,"empti":2,"two":1,"relativizedagainst":1,"compon":4,"exampl":2,"method":1,"construct":5,"paththat":1},"maxFreq":33,"totalTerms":127},"loc":0}