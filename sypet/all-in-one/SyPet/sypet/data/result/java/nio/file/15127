{"id":15127,"className":"java.nio.file.Files","methodName":"newDirectoryStream","signature":"\u003cjava.nio.file.Files: java.nio.file.DirectoryStream\u003cjava.nio.file.Path\u003e newDirectoryStream(java.nio.file.Path,java.lang.String)\u003e","javadoc":"/** \n * Opens a directory, returning a  {@link DirectoryStream} to iterate overthe entries in the directory. The elements returned by the directory stream\u0027s  {@link DirectoryStream#iterator iterator} are of type {@code Path}, each one representing an entry in the directory. The  {@code Path}objects are obtained as if by  {@link Path#resolve(Path) resolving} thename of the directory entry against  {@code dir}. The entries returned by the iterator are filtered by matching the  {@code String} representationof their file names against the given \u003cem\u003eglobbing\u003c/em\u003e pattern. \u003cp\u003e For example, suppose we want to iterate over the files ending with \".java\" in a directory: \u003cpre\u003e Path dir \u003d ... try (DirectoryStream\u0026lt;Path\u0026gt; stream \u003d Files.newDirectoryStream(dir, \"*.java\")) { : } \u003c/pre\u003e \u003cp\u003e The globbing pattern is specified by the  {@link FileSystem#getPathMatcher getPathMatcher} method.\u003cp\u003e When not using the try-with-resources construct, then directory stream\u0027s  {@code close} method should be invoked after iteration iscompleted so as to free any resources held for the open directory. \u003cp\u003e When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a  {@link SecureDirectoryStream}.\n * @param dir the path to the directory\n * @param glob the glob pattern\n * @return  a new and open {@code DirectoryStream} object\n * @throws java.util.regex.PatternSyntaxException if the pattern is invalid\n * @throws NotDirectoryException if the file could not otherwise be opened because it is not a directory \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the directory.\n */\n","tf":{"freq":{"thenam":1,"type":1,"race":1,"specifi":1,"close":1,"open":4,"free":2,"matcher":2,"invalid":1,"given":1,"oper":1,"file":5,"iscomplet":1,"option":1,"element":1,"except":5,"support":1,"regex":1,"invok":2,"resolv":2,"provid":1,"syntax":1,"obtain":1,"system":1,"representationof":1,"match":1,"execut":1,"util":1,"filter":1,"otherwis":1,"stream":11,"directori":21,"link":6,"one":1,"use":1,"object":2,"resourc":2,"dir":4,"name":1,"path":9,"read":3,"want":1,"end":1,"overth":1,"held":1,"check":3,"error":1,"repres":1,"manag":2,"entri":5,"instal":1,"suppos":1,"access":1,"specif":1,"secur":4,"pattern":5,"pre":2,"string":2,"glob":4,"exampl":1,"manner":1,"java":3,"method":3,"construct":1,"iter":6,"occur":1},"maxFreq":21,"totalTerms":159},"loc":16}