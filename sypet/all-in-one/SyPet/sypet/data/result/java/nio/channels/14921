{"id":14921,"className":"java.nio.channels.FileChannel","methodName":"tryLock","signature":"\u003cjava.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()\u003e","javadoc":"/** \n * Attempts to acquire an exclusive lock on this channel\u0027s file. \u003cp\u003e An invocation of this method of the form \u003ctt\u003efc.tryLock()\u003c/tt\u003e behaves in exactly the same way as the invocation \u003cpre\u003e fc. {@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) \u003c/pre\u003e\n * @return  A lock object representing the newly-acquired lock,or \u003ctt\u003enull\u003c/tt\u003e if the lock could not be acquired because another program holds an overlapping lock\n * @throws ClosedChannelException If this channel is closed\n * @throws OverlappingFileLockException If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region\n * @throws IOException If some other I/O error occurs\n * @see #lock()\n * @see #lock(long,long,boolean)\n * @see #tryLock(long,long,boolean)\n */\n","tf":{"freq":{"virtual":1,"region":2,"acquir":3,"attempt":2,"fals":1,"behav":1,"link":1,"block":1,"way":1,"object":1,"anoth":2,"close":2,"file":2,"thread":1,"request":1,"exact":1,"exclus":1,"held":1,"except":3,"overlap":4,"error":1,"form":1,"repres":1,"hold":1,"lock":15,"invoc":2,"newli":1,"machin":1,"pre":2,"program":1,"java":1,"alreadi":2,"method":2,"channel":3,"occur":1},"maxFreq":15,"totalTerms":67},"loc":3}