{"id":15107,"className":"java.nio.file.Paths","methodName":"get","signature":"\u003cjava.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])\u003e","javadoc":"/** \n * Converts a path string, or a sequence of strings that when joined form a path string, to a  {@code Path}. If  {@code more} does not specify anyelements then the value of the  {@code first} parameter is the path stringto convert. If  {@code more} specifies one or more elements then eachnon-empty string, including  {@code first}, is considered to be a sequence of name elements (see  {@link Path}) and is joined to form a path string. The details as to how the Strings are joined is provider specific but typically they will be joined using the  {@link FileSystem#getSeparator name-separator} as the separator. For example, if the name separator is\" {@code /}\" and  {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then thepath string  {@code \"/foo/bar/gus\"} is converted to a {@code Path}. A  {@code Path} representing an empty path is returned if {@code first}is the empty string and  {@code more} does not contain any non-emptystrings. \u003cp\u003e The  {@code Path} is obtained by invoking the {@link FileSystem#getPath getPath} method of the {@link FileSystems#getDefault default} {@link FileSystem}. \u003cp\u003e Note that while this method is very convenient, using it will imply an assumed reference to the default  {@code FileSystem} and limit theutility of the calling code. Hence it should not be used in library code intended for flexible reuse. A more flexible alternative is to use an existing  {@code Path} instance as an anchor, such as:\u003cpre\u003e Path dir \u003d ... Path path \u003d dir.resolve(\"file\"); \u003c/pre\u003e\n * @param first the path string or initial part of the path string\n * @param more additional strings to be joined to form the path string\n * @return  the resulting {@code Path}\n * @throws InvalidPathException if the path string cannot be converted to a  {@code Path}\n * @see FileSystem#getPath\n */\n","tf":{"freq":{"detail":1,"foo":2,"thepath":1,"reus":1,"anchor":1,"specifi":2,"anyel":1,"invalid":1,"altern":1,"refer":1,"sequenc":2,"file":7,"impli":1,"limit":1,"element":2,"except":1,"henc":1,"theutil":1,"form":3,"invok":2,"resolv":1,"provid":1,"flexibl":2,"instanc":1,"non":1,"system":6,"obtain":1,"eachnon":1,"separ":4,"contain":1,"emptystr":1,"will":2,"bar":2,"result":1,"call":1,"stringto":1,"link":5,"one":1,"typic":1,"convert":4,"use":4,"consid":1,"dir":2,"name":3,"path":25,"valu":1,"initi":1,"exist":1,"note":1,"conveni":1,"addit":1,"includ":1,"assum":1,"repres":1,"paramet":1,"librari":1,"join":5,"gus":2,"empti":3,"specif":1,"pre":2,"string":13,"exampl":1,"method":2,"part":1,"intend":1,"first":4},"maxFreq":25,"totalTerms":152},"loc":3}