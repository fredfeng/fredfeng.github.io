{"id":15132,"className":"java.nio.file.Files","methodName":"createDirectories","signature":"\u003cjava.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute\u003c?\u003e[])\u003e","javadoc":"/** \n * Creates a directory by creating all nonexistent parent directories first. Unlike the  {@link #createDirectory createDirectory} method, an exceptionis not thrown if the directory could not be created because it already exists. \u003cp\u003e The  {@code attrs} parameter is optional {@link FileAttribute file-attributes} to set atomically when creating the nonexistentdirectories. Each file attribute is identified by its  {@link FileAttribute#name name}. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. \u003cp\u003e If this method fails, then it may do so after creating some, but not all, of the parent directories.\n * @param dir the directory to create\n * @param attrs an optional list of file attributes to set atomically when creating the directory\n * @return  the directory\n * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when creating the directory\n * @throws FileAlreadyExistsException if  {@code dir} exists but is not a directory \u003ci\u003e(optional specificexception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException in the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkWrite(String) checkWrite}method is invoked prior to attempting to create a directory and its  {@link SecurityManager#checkRead(String) checkRead} isinvoked for each parent directory that is checked. If  {@code dir} is not an absolute path then its {@link Path#toAbsolutePath toAbsolutePath} may need to be invoked to get its absolute path.This may invoke the security manager\u0027s  {@link SecurityManager#checkPropertyAccess(String) checkPropertyAccess}method to check access to the system property  {@code user.dir}\n */\n","tf":{"freq":{"need":1,"atom":3,"unsupport":1,"last":1,"occurr":1,"prior":1,"fail":1,"oper":1,"file":6,"exceptioni":1,"option":3,"specificexcept":1,"thrown":1,"ignor":1,"except":4,"creat":12,"nonexist":1,"invok":3,"parent":3,"attr":2,"absolut":4,"provid":1,"system":1,"contain":1,"properti":3,"array":2,"attempt":1,"directori":14,"one":1,"link":7,"identifi":1,"attribut":7,"nonexistentdirectori":1,"dir":4,"name":3,"path":5,"unlik":1,"write":2,"read":2,"exist":3,"may":3,"includ":1,"error":1,"check":8,"isinvok":1,"manag":5,"instal":1,"paramet":1,"list":1,"access":3,"secur":6,"string":3,"method":4,"alreadi":2,"user":1,"first":1,"occur":1},"maxFreq":14,"totalTerms":155},"loc":44}