{"id":15035,"className":"java.nio.file.FileSystem","methodName":"getRootDirectories","signature":"\u003cjava.nio.file.FileSystem: java.lang.Iterable\u003cjava.nio.file.Path\u003e getRootDirectories()\u003e","javadoc":"/** \n * Returns an object to iterate over the paths of the root directories. \u003cp\u003e A file system provides access to a file store that may be composed of a number of distinct file hierarchies, each with its own top-level root directory. Unless denied by the security manager, each element in the returned iterator corresponds to the root directory of a distinct file hierarchy. The order of the elements is not defined. The file hierarchies may change during the lifetime of the Java virtual machine. For example, in some implementations, the insertion of removable media may result in the creation of a new file hierarchy with its own top-level directory. \u003cp\u003e When a security manager is installed, it is invoked to check access to the each root directory. If denied, the root directory is not returned by the iterator. In the case of the default provider, the  {@link SecurityManager#checkRead(String)} method is invoked to check read accessto each root directory. It is system dependent if the permission checks are done when the iterator is obtained or during iteration.\n * @return  An object to iterate over the root directories\n */\n","tf":{"freq":{"virtual":1,"lifetim":1,"creation":1,"result":1,"defin":1,"store":1,"directori":9,"root":8,"correspond":1,"link":1,"hierarchi":4,"object":2,"distinct":2,"level":2,"unless":1,"order":1,"file":6,"permiss":1,"path":1,"read":2,"deni":2,"top":2,"element":2,"may":3,"check":4,"depend":1,"accessto":1,"invok":2,"manag":3,"done":1,"instal":1,"remov":1,"compos":1,"number":1,"access":2,"provid":2,"obtain":1,"machin":1,"system":2,"secur":3,"string":1,"exampl":1,"method":1,"java":1,"chang":1,"insert":1,"iter":6,"media":1},"maxFreq":9,"totalTerms":96},"loc":0}