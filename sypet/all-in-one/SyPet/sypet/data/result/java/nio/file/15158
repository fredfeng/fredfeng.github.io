{"id":15158,"className":"java.nio.file.Files","methodName":"isSymbolicLink","signature":"\u003cjava.nio.file.Files: boolean isSymbolicLink(java.nio.file.Path)\u003e","javadoc":"/** \n * Tests whether a file is a symbolic link. \u003cp\u003e Where is it required to distinguish an I/O exception from the case that the file is not a symbolic link then the file attributes can be read with the  {@link #readAttributes(Path,Class,LinkOption[]) readAttributes} method and the file type tested with the {@link BasicFileAttributes#isSymbolicLink} method.\n * @return  {@code true} if the file is a symbolic link; {@code false} ifthe file does not exist, is not a symbolic link, or it cannot be determined if the file is a symbolic link or not.\n * @throws SecurityException In the case of the default provider, and a security manager is installed, its  {@link SecurityManager#checkRead(String) checkRead}method denies read access to the file.\n */\n","tf":{"freq":{"fals":1,"test":2,"link":11,"type":1,"whether":1,"attribut":4,"requir":1,"basic":1,"file":9,"path":1,"read":6,"exist":1,"deni":1,"option":1,"except":2,"check":2,"symbol":7,"ifth":1,"manag":2,"instal":1,"true":1,"access":1,"provid":1,"secur":3,"string":1,"determin":1,"distinguish":1,"method":3},"maxFreq":11,"totalTerms":68},"loc":9}