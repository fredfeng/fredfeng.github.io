{"id":14843,"className":"java.nio.channels.AsynchronousFileChannel","methodName":"lock","signature":"\u003cjava.nio.channels.AsynchronousFileChannel: void lock(long,long,boolean,A,java.nio.channels.CompletionHandler)\u003e","javadoc":"/** \n * Acquires a lock on the given region of this channel\u0027s file. \u003cp\u003e This method initiates an operation to acquire a lock on the given region of this channel\u0027s file. The  {@code handler} parameter is acompletion handler that is invoked when the lock is acquired (or the operation fails). The result passed to the completion handler is the resulting  {@code FileLock}. \u003cp\u003e The region specified by the  {@code position} and {@code size}parameters need not be contained within, or even overlap, the actual underlying file.  Lock regions are fixed in size; if a locked region initially contains the end of the file and the file grows beyond the region then the new portion of the file will not be covered by the lock. If a file is expected to grow in size and a lock on the entire file is required then a region starting at zero, and no smaller than the expected maximum size of the file, should be locked.  The two-argument {@link #lock(Object,CompletionHandler)} method simply locks a regionof size  {@link Long#MAX_VALUE}. If a lock that overlaps the requested region is already held by this Java virtual machine, or this method has been invoked to lock an overlapping region and that operation has not completed, then this method throws  {@link OverlappingFileLockException}. \u003cp\u003e Some operating systems do not support a mechanism to acquire a file lock in an asynchronous manner. Consequently an implementation may acquire the file lock in a background thread or from a task executed by a thread in the associated thread pool. If there are many lock operations outstanding then it may consume threads in the Java virtual machine for indefinite periods. \u003cp\u003e Some operating systems do not support shared locks, in which case a request for a shared lock is automatically converted into a request for an exclusive lock.  Whether the newly-acquired lock is shared or exclusive may be tested by invoking the resulting lock object\u0027s  {@link FileLock#isShared() isShared} method.\u003cp\u003e File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine.\n * @param position The position at which the locked region is to start; must be non-negative\n * @param size The size of the locked region; must be non-negative, and the sum {@code position}\u0026nbsp;+\u0026nbsp; {@code size} must be non-negative\n * @param shared {@code true} to request a shared lock, in which case thischannel must be open for reading (and possibly writing); {@code false} to request an exclusive lock, in which case thischannel must be open for writing (and possibly reading)\n * @param attachment The object to attach to the I/O operation; can be  {@code null}\n * @param handler The handler for consuming the result\n * @throws OverlappingFileLockException If a lock that overlaps the requested region is already held by this Java virtual machine, or there is already a pending attempt to lock an overlapping region\n * @throws IllegalArgumentException If the preconditions on the parameters do not hold\n * @throws NonReadableChannelException If  {@code shared} is true but this channel was not opened for reading\n * @throws NonWritableChannelException If  {@code shared} is false but this channel was not opened for writing\n */\n","tf":{"freq":{"need":1,"test":1,"suitabl":1,"precondit":1,"zero":1,"whether":1,"beyond":1,"specifi":1,"expect":2,"open":4,"cover":1,"given":2,"fail":1,"oper":7,"file":17,"thread":5,"nbsp":2,"mani":1,"support":2,"multipl":1,"invok":3,"hold":1,"writabl":1,"non":5,"newli":1,"system":2,"start":2,"will":1,"regionof":1,"entir":2,"posit":4,"region":13,"virtual":5,"asynchron":1,"simpli":1,"link":4,"associ":1,"write":3,"initi":2,"end":1,"portion":1,"complet":3,"held":3,"may":3,"true":2,"access":1,"mechan":1,"attach":2,"background":1,"alreadi":3,"method":5,"within":2,"thischannel":2,"acquir":6,"behalf":1,"fals":2,"consequ":1,"possibl":2,"acomplet":1,"must":5,"requir":1,"request":6,"argument":2,"control":1,"except":5,"overlap":7,"period":1,"size":8,"machin":5,"maximum":1,"contain":2,"even":1,"negat":3,"execut":1,"attempt":1,"result":4,"readabl":1,"convert":1,"sum":1,"object":3,"automat":1,"smaller":1,"consum":2,"share":9,"fix":1,"pool":1,"read":3,"exclus":3,"pend":1,"outstand":1,"task":1,"paramet":3,"lock":32,"illeg":1,"pass":1,"two":1,"grow":2,"actual":1,"java":4,"manner":1,"indefinit":1,"channel":6,"handler":6},"maxFreq":32,"totalTerms":292},"loc":0}