{"id":15150,"className":"java.nio.file.Files","methodName":"readAttributes","signature":"\u003cjava.nio.file.Files: A readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])\u003e","javadoc":"/** \n * Reads a file\u0027s attributes as a bulk operation. \u003cp\u003e The  {@code type} parameter is the type of the attributes requiredand this method returns an instance of that type if supported. All implementations support a basic set of file attributes and so invoking this method with a   {@code type} parameter of {@code BasicFileAttributes.class} will not throw {@code UnsupportedOperationException}. \u003cp\u003e The  {@code options} array may be used to indicate how symbolic linksare handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option  {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is present then symbolic links are not followed.\u003cp\u003e It is implementation specific if all file attributes are read as an atomic operation with respect to other file system operations. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we want to read a file\u0027s attributes in bulk: \u003cpre\u003e Path path \u003d ... BasicFileAttributes attrs \u003d Files.readAttributes(path, BasicFileAttributes.class); \u003c/pre\u003e Alternatively, suppose we want to read file\u0027s POSIX attributes without following symbolic links: \u003cpre\u003e PosixFileAttributes attrs \u003d Files.readAttributes(path, PosixFileAttributes.class, NOFOLLOW_LINKS); \u003c/pre\u003e\n * @param path the path to the file\n * @param type the  {@code Class} of the file attributes requiredto read\n * @param options options indicating how symbolic links are handled\n * @return  the file attributes\n * @throws UnsupportedOperationException if an attributes of the given type are not supported\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, a security manager is installed, its  {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoke to check for additional permissions.\n */\n","tf":{"freq":{"atom":1,"unsupport":2,"requiredto":1,"linksar":1,"type":6,"altern":1,"given":1,"oper":5,"basic":4,"file":19,"permiss":1,"option":5,"follow":3,"sensit":1,"except":4,"support":3,"symbol":6,"invok":4,"attr":2,"without":1,"provid":1,"instanc":1,"present":1,"system":1,"will":1,"array":1,"link":9,"use":1,"posix":2,"attribut":19,"indic":2,"path":6,"read":13,"want":2,"addit":1,"may":2,"check":4,"error":1,"manag":3,"instal":1,"paramet":2,"suppos":2,"access":1,"bulk":2,"handl":2,"specif":1,"secur":5,"pre":4,"string":1,"requiredand":1,"target":1,"exampl":1,"method":4,"usag":1,"respect":1,"occur":1},"maxFreq":19,"totalTerms":173},"loc":3}