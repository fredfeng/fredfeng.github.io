{"id":15244,"className":"java.nio.file.attribute.BasicFileAttributes","methodName":"fileKey","signature":"\u003cjava.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()\u003e","javadoc":"/** \n * Returns an object that uniquely identifies the given file, or  {@code null} if a file key is not available. On some platforms or file systemsit is possible to use an identifier, or a combination of identifiers to uniquely identify a file. Such identifiers are important for operations such as file tree traversal in file systems that support \u003ca href\u003d\"../package-summary.html#links\"\u003esymbolic links\u003c/a\u003e or file systems that allow a file to be an entry in more than one directory. On UNIX file systems, for example, the \u003cem\u003edevice ID\u003c/em\u003e and \u003cem\u003einode\u003c/em\u003e are commonly used for such purposes. \u003cp\u003e The file key returned by this method can only be guaranteed to be unique if the file system and files remain static. Whether a file system re-uses identifiers after a file is deleted is implementation dependent and therefore unspecified. \u003cp\u003e File keys returned by this method can be compared for equality and are suitable for use in collections. If the file system and files remain static, and two files are the  {@link java.nio.file.Files#isSameFile same} withnon- {@code null} file keys, then their file keys are equal.\n * @see java.nio.file.Files#walkFileTree\n */\n","tf":{"freq":{"unspecifi":1,"allow":1,"delet":1,"common":1,"directori":1,"suitabl":1,"one":1,"link":3,"inod":1,"use":4,"possibl":1,"identifi":6,"therefor":1,"object":1,"whether":1,"uniqu":3,"given":1,"tree":2,"oper":1,"systemsit":1,"file":27,"combin":1,"purpos":1,"href":1,"key":6,"travers":1,"platform":1,"support":1,"symbol":1,"depend":1,"guarante":1,"entri":1,"equal":2,"avail":1,"withnon":1,"two":1,"system":6,"summari":1,"remain":2,"exampl":1,"nio":2,"java":2,"method":2,"html":1,"devic":1,"walk":1,"compar":1,"collect":1},"maxFreq":27,"totalTerms":102},"loc":0}