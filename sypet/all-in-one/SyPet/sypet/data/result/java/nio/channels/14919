{"id":14919,"className":"java.nio.channels.FileChannel","methodName":"lock","signature":"\u003cjava.nio.channels.FileChannel: java.nio.channels.FileLock lock()\u003e","javadoc":"/** \n * Acquires an exclusive lock on this channel\u0027s file. \u003cp\u003e An invocation of this method of the form \u003ctt\u003efc.lock()\u003c/tt\u003e behaves in exactly the same way as the invocation \u003cpre\u003e fc. {@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false) \u003c/pre\u003e\n * @return  A lock object representing the newly-acquired lock\n * @throws ClosedChannelException If this channel is closed\n * @throws AsynchronousCloseException If another thread closes this channel while the invoking thread is blocked in this method\n * @throws FileLockInterruptionException If the invoking thread is interrupted while blocked in this method\n * @throws OverlappingFileLockException If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region of the same file\n * @throws NonWritableChannelException If this channel was not opened for writing\n * @throws IOException If some other I/O error occurs\n * @see #lock(long,long,boolean)\n * @see #tryLock()\n * @see #tryLock(long,long,boolean)\n */\n","tf":{"freq":{"attempt":1,"virtual":1,"region":2,"acquir":2,"fals":1,"asynchron":1,"behav":1,"link":1,"way":1,"block":3,"object":1,"anoth":2,"close":4,"open":1,"file":4,"request":1,"exact":1,"thread":4,"write":1,"exclus":1,"held":1,"except":6,"overlap":3,"error":1,"form":1,"repres":1,"invok":2,"lock":14,"writabl":1,"interrupt":2,"invoc":2,"non":1,"newli":1,"machin":1,"pre":2,"java":1,"alreadi":2,"method":4,"channel":6,"occur":1},"maxFreq":14,"totalTerms":87},"loc":3}