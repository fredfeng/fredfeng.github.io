{"id":15157,"className":"java.nio.file.Files","methodName":"setOwner","signature":"\u003cjava.nio.file.Files: java.nio.file.Path setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)\u003e","javadoc":"/** \n * Updates the file owner. \u003cp\u003e The  {@code path} parameter is associated with a file system thatsupports  {@link FileOwnerAttributeView}. This file attribute view provides access to a file attribute that is the owner of the file. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we want to make \"joe\" the owner of a file: \u003cpre\u003e Path path \u003d ... UserPrincipalLookupService lookupService \u003d provider(path).getUserPrincipalLookupService(); UserPrincipal joe \u003d lookupService.lookupPrincipalByName(\"joe\"); Files.setOwner(path, joe); \u003c/pre\u003e\n * @param path A file reference that locates the file\n * @param owner The new file owner\n * @throws UnsupportedOperationException if the associated file system does not support the  {@code FileOwnerAttributeView}\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, it denies  {@link RuntimePermission}\u003ctt\u003e(\"accessUserInformation\")\u003c/tt\u003e or its  {@link SecurityManager#checkWrite(String) checkWrite}method denies write access to the file.\n * @see FileSystem#getUserPrincipalLookupService\n * @see java.nio.file.attribute.UserPrincipalLookupService\n */\n","tf":{"freq":{"unsupport":1,"link":3,"servic":6,"lookup":7,"attribut":5,"joe":4,"oper":1,"refer":1,"associ":2,"file":16,"name":1,"write":3,"permiss":1,"path":6,"deni":2,"want":1,"except":3,"locat":1,"support":1,"check":2,"error":1,"manag":2,"runtim":1,"instal":1,"paramet":1,"suppos":1,"access":3,"provid":3,"inform":1,"system":3,"secur":3,"updat":1,"pre":2,"string":1,"owner":9,"exampl":1,"nio":1,"java":1,"method":1,"view":3,"usag":1,"make":1,"user":6,"thatsupport":1,"occur":1,"princip":6},"maxFreq":16,"totalTerms":123},"loc":8}