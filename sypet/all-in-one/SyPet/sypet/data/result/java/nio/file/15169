{"id":15169,"className":"java.nio.file.Files","methodName":"walkFileTree","signature":"\u003cjava.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)\u003e","javadoc":"/** \n * Walks a file tree. \u003cp\u003e This method walks a file tree rooted at a given starting file. The file tree traversal is \u003cem\u003edepth-first\u003c/em\u003e with the given  {@link FileVisitor} invoked for each file encountered. File tree traversalcompletes when all accessible files in the tree have been visited, or a visit method returns a result of  {@link FileVisitResult#TERMINATE TERMINATE}. Where a visit method terminates due an  {@code IOException}, an uncaught error, or runtime exception, then the traversal is terminated and the error or exception is propagated to the caller of this method. \u003cp\u003e For each file encountered this method attempts to read its  {@link java.nio.file.attribute.BasicFileAttributes}. If the file is not a directory then the  {@link FileVisitor#visitFile visitFile} method isinvoked with the file attributes. If the file attributes cannot be read, due to an I/O exception, then the  {@link FileVisitor#visitFileFailed visitFileFailed} method is invoked with the I/O exception.\u003cp\u003e Where the file is a directory, and the directory could not be opened, then the  {@code visitFileFailed} method is invoked with the I/O exception,after which, the file tree walk continues, by default, at the next \u003cem\u003esibling\u003c/em\u003e of the directory. \u003cp\u003e Where the directory is opened successfully, then the entries in the directory, and their \u003cem\u003edescendants\u003c/em\u003e are visited. When all entries have been visited, or an I/O error occurs during iteration of the directory, then the directory is closed and the visitor\u0027s  {@link FileVisitor#postVisitDirectory postVisitDirectory} method is invoked.The file tree walk then continues, by default, at the next \u003cem\u003esibling\u003c/em\u003e of the directory. \u003cp\u003e By default, symbolic links are not automatically followed by this method. If the  {@code options} parameter contains the {@link FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then symbolic links arefollowed. When following links, and the attributes of the target cannot be read, then this method attempts to get the  {@code BasicFileAttributes}of the link. If they can be read then the  {@code visitFile} method isinvoked with the attributes of the link (otherwise the  {@code visitFileFailed}method is invoked as specified above). \u003cp\u003e If the  {@code options} parameter contains the {@link FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then this method keepstrack of directories visited so that cycles can be detected. A cycle arises when there is an entry in a directory that is an ancestor of the directory. Cycle detection is done by recording the  {@link java.nio.file.attribute.BasicFileAttributes#fileKey file-key} of directories,or if file keys are not available, by invoking the  {@link #isSameFile isSameFile} method to test if a directory is the same file as anancestor. When a cycle is detected it is treated as an I/O error, and the {@link FileVisitor#visitFileFailed visitFileFailed} method is invoked withan instance of  {@link FileSystemLoopException}. \u003cp\u003e The  {@code maxDepth} parameter is the maximum number of levels ofdirectories to visit. A value of  {@code 0} means that only the startingfile is visited, unless denied by the security manager. A value of {@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that alllevels should be visited. The  {@code visitFile} method is invoked for allfiles, including directories, encountered at  {@code maxDepth}, unless the basic file attributes cannot be read, in which case the  {@code visitFileFailed} method is invoked.\u003cp\u003e If a visitor returns a result of  {@code null} then {@code NullPointerException} is thrown.\u003cp\u003e When a security manager is installed and it denies access to a file (or directory), then it is ignored and the visitor is not invoked for that file (or directory).\n * @param start the starting file\n * @param options options to configure the traversal\n * @param maxDepth the maximum number of directory levels to visit\n * @param visitor the file visitor to invoke for each file\n * @return  the starting file\n * @throws IllegalArgumentException if the  {@code maxDepth} parameter is negative\n * @throws SecurityException If the security manager denies access to the starting file. In the case of the default provider, the  {@link SecurityManager#checkRead(String) checkRead} method is invokedto check read access to the directory.\n * @throws IOException if an I/O error is thrown by a visitor method\n */\n","tf":{"freq":{"test":1,"cycl":4,"visit":26,"specifi":1,"open":2,"fail":7,"given":2,"tree":8,"file":54,"alllevel":1,"propag":1,"withan":1,"option":8,"deni":3,"ignor":1,"sibl":2,"invok":11,"runtim":1,"done":1,"avail":1,"number":2,"provid":1,"instanc":1,"traversalcomplet":1,"record":1,"system":1,"configur":1,"start":5,"pointer":1,"caller":1,"directori":21,"next":2,"link":19,"use":1,"anancestor":1,"attribut":10,"unless":2,"indic":1,"loop":1,"aris":1,"may":1,"post":2,"max":4,"uncaught":1,"access":4,"visitor":11,"arefollow":1,"encount":3,"string":1,"method":20,"iter":1,"root":1,"invokedto":1,"ofdirectori":1,"close":1,"level":2,"basic":4,"startingfil":1,"key":3,"follow":2,"argument":1,"except":11,"thrown":2,"symbol":2,"continu":2,"depth":5,"maximum":2,"contain":2,"due":2,"negat":1,"walk":5,"treat":1,"attempt":2,"otherwis":1,"result":3,"automat":1,"allfil":1,"read":8,"mean":1,"valu":2,"keepstrack":1,"ancestor":1,"travers":3,"detect":3,"includ":1,"check":3,"error":5,"entri":3,"isinvok":2,"manag":4,"instal":1,"paramet":4,"illeg":1,"termin":2,"secur":5,"target":1,"nio":2,"java":2,"descend":1,"success":1,"first":1,"integ":1,"occur":1},"maxFreq":54,"totalTerms":379},"loc":6}