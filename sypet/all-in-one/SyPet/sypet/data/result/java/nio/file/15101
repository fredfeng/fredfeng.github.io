{"id":15101,"className":"java.nio.file.Path","methodName":"equals","signature":"\u003cjava.nio.file.Path: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Tests this path for equality with the given object. \u003cp\u003e If the given object is not a Path, or is a Path associated with a different  {@code FileSystem}, then this method returns  {@code false}. \u003cp\u003e Whether or not two path are equal depends on the file system implementation. In some cases the paths are compared without regard to case, and others are case sensitive. This method does not access the file system and the file is not required to exist. Where required, the {@link Files#isSameFile isSameFile} method may be used to check if twopaths locate the same file. \u003cp\u003e This method satisfies the general contract of the  {@link java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e\n * @param other the object to which this object is to be compared\n * @return  {@code true} if, and only if, the given object is a {@code Path}that is identical to this  {@code Path}\n */\n","tf":{"freq":{"fals":1,"test":1,"link":2,"use":1,"object":8,"lang":1,"whether":1,"requir":2,"ident":1,"given":3,"associ":1,"file":8,"path":7,"exist":1,"locat":1,"sensit":1,"may":1,"check":1,"contract":1,"depend":1,"true":1,"equal":5,"regard":1,"access":1,"without":1,"general":1,"differ":1,"two":1,"system":3,"satisfi":1,"java":1,"method":5,"twopath":1,"compar":2},"maxFreq":8,"totalTerms":69},"loc":0}