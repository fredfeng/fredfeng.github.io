{"id":14795,"className":"java.nio.channels.SocketChannel","methodName":"finishConnect","signature":"\u003cjava.nio.channels.SocketChannel: boolean finishConnect()\u003e","javadoc":"/** \n * Finishes the process of connecting a socket channel. \u003cp\u003e A non-blocking connection operation is initiated by placing a socket channel in non-blocking mode and then invoking its  {@link #connect connect} method.  Once the connection is established, or the attempt hasfailed, the socket channel will become connectable and this method may be invoked to complete the connection sequence.  If the connection operation failed then invoking this method will cause an appropriate {@link java.io.IOException} to be thrown.\u003cp\u003e If this channel is already connected then this method will not block and will immediately return \u003ctt\u003etrue\u003c/tt\u003e.  If this channel is in non-blocking mode then this method will return \u003ctt\u003efalse\u003c/tt\u003e if the connection process is not yet complete.  If this channel is in blocking mode then this method will block until the connection either completes or fails, and will always either return \u003ctt\u003etrue\u003c/tt\u003e or throw a checked exception describing the failure. \u003cp\u003e This method may be invoked at any time.  If a read or write operation upon this channel is invoked while an invocation of this method is in progress then that operation will first block until this invocation is complete.  If a connection attempt fails, that is, if an invocation of this method throws a checked exception, then the channel will be closed.  \u003c/p\u003e\n * @return  \u003ctt\u003etrue\u003c/tt\u003e if, and only if, this channel\u0027s socket is nowconnected\n * @throws NoConnectionPendingException If this channel is not connected and a connection operation has not been initiated\n * @throws ClosedChannelException If this channel is closed\n * @throws AsynchronousCloseException If another thread closes this channel while the connect operation is in progress\n * @throws ClosedByInterruptException If another thread interrupts the current thread while the connect operation is in progress, thereby closing the channel and setting the current thread\u0027s interrupt status\n * @throws IOException If some other I/O error occurs\n */\n","tf":{"freq":{"fals":1,"progress":3,"therebi":1,"close":7,"time":1,"becom":1,"fail":3,"oper":7,"sequenc":1,"thread":4,"socket":4,"place":1,"except":8,"thrown":1,"status":1,"invok":5,"alway":1,"describ":1,"invoc":3,"non":3,"finish":2,"will":9,"upon":1,"attempt":2,"asynchron":1,"connect":18,"link":2,"block":7,"anoth":2,"mode":3,"hasfail":1,"current":2,"write":1,"nowconnect":1,"read":1,"immedi":1,"initi":2,"complet":4,"pend":1,"may":2,"error":1,"check":2,"failur":1,"establish":1,"true":3,"interrupt":3,"process":2,"either":2,"caus":1,"appropri":1,"method":9,"java":1,"alreadi":1,"channel":14,"first":1,"occur":1,"yet":1},"maxFreq":18,"totalTerms":165},"loc":0}