{"id":15000,"className":"java.nio.file.FileSystems","methodName":"newFileSystem","signature":"\u003cjava.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)\u003e","javadoc":"/** \n * Constructs a new file system that is identified by a  {@link URI}\u003cp\u003e This method iterates over the  {@link FileSystemProvider#installedProviders() installed} providers to locate the provider that is identified by the URI{@link URI#getScheme scheme} of the given URI. URI schemes are comparedwithout regard to case. The exact form of the URI is highly provider dependent. If found, the provider\u0027s  {@link FileSystemProvider#newFileSystem(URI,Map) newFileSystem(URI,Map)} method is invoked to construct the new file system.\u003cp\u003e Once a file system is  {@link FileSystem#close closed} it isprovider-dependent if the provider allows a new file system to be created with the same URI as a file system it previously created. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose there is a provider identified by the scheme  {@code \"memory\"}installed: \u003cpre\u003e Map\u0026lt;String,String\u0026gt; env \u003d new HashMap\u0026lt;\u0026gt;(); env.put(\"capacity\", \"16G\"); env.put(\"blockSize\", \"4k\"); FileSystem fs \u003d FileSystems.newFileSystem(URI.create(\"memory:///?name\u003dlogfs\"), env); \u003c/pre\u003e\n * @param uri the URI identifying the file system\n * @param env a map of provider specific properties to configure the file system; may be empty\n * @return  a new file system\n * @throws IllegalArgumentException if the pre-conditions for the  {@code uri} parameter are not met,or the  {@code env} parameter does not contain properties requiredby the provider, or a property value is invalid\n * @throws FileSystemAlreadyExistsException if the file system has already been created\n * @throws ProviderNotFoundException if a provider supporting the URI scheme is not installed\n * @throws IOException if an I/O error occurs creating the file system\n * @throws SecurityException if a security manager is installed and it denies an unspecified permission required by the file system provider implementation\n */\n","tf":{"freq":{"memori":2,"close":2,"requir":1,"invalid":1,"scheme":5,"given":1,"file":21,"exact":1,"permiss":1,"deni":1,"argument":1,"except":5,"support":1,"form":1,"creat":5,"hash":1,"invok":1,"regard":1,"provid":14,"uri":2,"size":1,"system":21,"configur":1,"contain":1,"properti":3,"unspecifi":1,"put":2,"allow":1,"link":5,"comparedwithout":1,"block":1,"identifi":4,"met":1,"name":1,"map":5,"valu":1,"requiredbi":1,"exist":1,"condit":1,"locat":1,"may":1,"error":1,"previous":1,"manag":1,"depend":2,"instal":5,"paramet":2,"logf":1,"suppos":1,"env":6,"illeg":1,"empti":1,"specif":1,"secur":2,"isprovid":1,"pre":3,"string":2,"exampl":1,"alreadi":2,"method":2,"high":1,"construct":2,"usag":1,"capac":1,"iter":1,"occur":1,"found":2},"maxFreq":21,"totalTerms":168},"loc":3}