{"id":15012,"className":"java.nio.file.SecureDirectoryStream","methodName":"deleteDirectory","signature":"\u003cjava.nio.file.SecureDirectoryStream: void deleteDirectory(T)\u003e","javadoc":"/** \n * Deletes a directory. \u003cp\u003e Unlike the  {@link Files#delete delete()} method, this methoddoes not first examine the file to determine if the file is a directory. Whether non-directories are deleted by this method is system dependent and therefore not specified. When the parameter is a relative path then the directory to delete is relative to this open directory.\n * @param path the path of the directory to delete\n * @throws ClosedDirectoryStreamException if the directory stream is closed\n * @throws NoSuchFileException if the directory does not exist \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws DirectoryNotEmptyException if the directory could not otherwise be deleted because it is not empty \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkDelete(String) checkDelete}method is invoked to check delete access to the directory\n */\n","tf":{"freq":{"otherwis":1,"stream":2,"directori":13,"delet":11,"link":2,"therefor":1,"whether":1,"specifi":1,"close":2,"open":1,"file":4,"unlik":1,"relat":2,"path":3,"examin":1,"exist":1,"option":2,"except":7,"check":3,"error":1,"invok":1,"manag":2,"depend":1,"instal":1,"paramet":1,"access":1,"provid":1,"empti":2,"non":1,"specif":2,"system":1,"secur":3,"string":1,"determin":1,"methoddo":1,"method":3,"first":1,"occur":1},"maxFreq":13,"totalTerms":85},"loc":0}