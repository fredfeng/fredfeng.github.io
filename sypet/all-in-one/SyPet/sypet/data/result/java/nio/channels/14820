{"id":14820,"className":"java.nio.channels.AsynchronousChannelGroup","methodName":"withFixedThreadPool","signature":"\u003cjava.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withFixedThreadPool(int,java.util.concurrent.ThreadFactory)\u003e","javadoc":"/** \n * Creates an asynchronous channel group with a fixed thread pool. \u003cp\u003e The resulting asynchronous channel group reuses a fixed number of threads. At any point, at most  {@code nThreads} threads will be activeprocessing tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. \u003cp\u003e The group is created by invoking the  {@link AsynchronousChannelProvider#openAsynchronousChannelGroup(int,ThreadFactory) openAsynchronousChannelGroup(int,ThreadFactory)} method of the system-widedefault  {@link AsynchronousChannelProvider} object.\n * @param nThreads The number of threads in the pool\n * @param threadFactory The factory to use when creating new threads\n * @return  A new asynchronous channel group\n * @throws IllegalArgumentException If  {@code nThreads \u003c\u003d 0}\n * @throws IOException If an I/O error occurs\n */\n","tf":{"freq":{"result":2,"asynchron":8,"link":2,"use":1,"object":1,"reus":1,"activeprocess":1,"open":2,"pool":3,"fix":3,"oper":1,"factori":4,"event":1,"thread":12,"dispatch":1,"initi":1,"complet":1,"argument":1,"except":2,"error":1,"submit":1,"creat":3,"task":1,"invok":1,"number":2,"illeg":1,"provid":2,"handl":1,"point":1,"system":1,"will":1,"widedefault":1,"method":1,"group":7,"channel":8,"occur":1},"maxFreq":12,"totalTerms":82},"loc":4}