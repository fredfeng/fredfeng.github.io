{"id":14844,"className":"java.nio.channels.AsynchronousFileChannel","methodName":"lock","signature":"\u003cjava.nio.channels.AsynchronousFileChannel: void lock(A,java.nio.channels.CompletionHandler)\u003e","javadoc":"/** \n * Acquires an exclusive lock on this channel\u0027s file. \u003cp\u003e This method initiates an operation to acquire a lock on the given region of this channel\u0027s file. The  {@code handler} parameter is acompletion handler that is invoked when the lock is acquired (or the operation fails). The result passed to the completion handler is the resulting  {@code FileLock}. \u003cp\u003e An invocation of this method of the form  {@code ch.lock(att,handler)}behaves in exactly the same way as the invocation \u003cpre\u003e ch. {@link #lock(long,long,boolean,Object,CompletionHandler) lock}(0L, Long.MAX_VALUE, false, att, handler) \u003c/pre\u003e\n * @param attachment The object to attach to the I/O operation; can be  {@code null}\n * @param handler The handler for consuming the result\n * @throws OverlappingFileLockException If a lock is already held by this Java virtual machine, or there is already a pending attempt to lock a region\n * @throws NonWritableChannelException If this channel was not opened for writing\n */\n","tf":{"freq":{"attempt":1,"virtual":1,"fals":1,"region":2,"acquir":3,"result":3,"behav":1,"link":1,"way":1,"acomplet":1,"object":2,"consum":1,"open":1,"given":1,"fail":1,"oper":3,"file":4,"exact":1,"write":1,"initi":1,"exclus":1,"pend":1,"complet":2,"held":1,"except":2,"overlap":1,"form":1,"invok":1,"paramet":1,"lock":11,"att":2,"writabl":1,"invoc":2,"non":1,"pass":1,"machin":1,"attach":2,"pre":2,"java":1,"alreadi":2,"method":2,"channel":4,"handler":8},"maxFreq":11,"totalTerms":82},"loc":3}