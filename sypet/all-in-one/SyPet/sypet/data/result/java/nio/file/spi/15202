{"id":15202,"className":"java.nio.file.spi.FileSystemProvider","methodName":"deleteIfExists","signature":"\u003cjava.nio.file.spi.FileSystemProvider: boolean deleteIfExists(java.nio.file.Path)\u003e","javadoc":"/** \n * Deletes a file if it exists. This method works in exactly the manner specified by the  {@link Files#deleteIfExists} method.\u003cp\u003e The default implementation of this method simply invokes  {@link #delete} ignoring the {@code NoSuchFileException} when the file does notexist. It may be overridden where appropriate.\n * @param path the path to the file to delete\n * @return  {@code true} if the file was deleted by this method; {@code false} if the file could not be deleted because it did notexist\n * @throws DirectoryNotEmptyException if the file is a directory and could not otherwise be deleted because the directory is not empty \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkDelete(String)} methodis invoked to check delete access to the file\n */\n","tf":{"freq":{"fals":1,"otherwis":1,"simpli":1,"notexist":2,"delet":10,"overridden":1,"directori":3,"link":3,"specifi":1,"file":9,"exact":1,"path":2,"methodi":1,"exist":3,"option":1,"work":1,"ignor":1,"except":5,"may":1,"check":2,"error":1,"manag":2,"invok":2,"instal":1,"true":1,"access":1,"provid":1,"empti":2,"specif":1,"secur":3,"appropri":1,"string":1,"manner":1,"method":4,"occur":1},"maxFreq":10,"totalTerms":73},"loc":8}