{"id":15209,"className":"java.nio.file.spi.FileSystemProvider","methodName":"checkAccess","signature":"\u003cjava.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])\u003e","javadoc":"/** \n * Checks the existence, and optionally the accessibility, of a file. \u003cp\u003e This method may be used by the  {@link Files#isReadable isReadable}, {@link Files#isWritable isWritable} and {@link Files#isExecutable isExecutable} methods to check the accessibility of a file.\u003cp\u003e This method checks the existence of a file and that this Java virtual machine has appropriate privileges that would allow it access the file according to all of access modes specified in the  {@code modes} parameteras follows: \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"\"\u003e \u003ctr\u003e \u003cth\u003eValue\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link AccessMode#READ READ} \u003c/td\u003e\u003ctd\u003e Checks that the file exists and that the Java virtual machine has permission to read the file. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link AccessMode#WRITE WRITE} \u003c/td\u003e\u003ctd\u003e Checks that the file exists and that the Java virtual machine has permission to write to the file, \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e  {@link AccessMode#EXECUTE EXECUTE} \u003c/td\u003e\u003ctd\u003e Checks that the file exists and that the Java virtual machine has permission to  {@link Runtime#exec execute} the file. The semanticsmay differ when checking access to a directory. For example, on UNIX systems, checking for  {@code EXECUTE} access checks that the Javavirtual machine has permission to search the directory in order to access file or subdirectories. \u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e \u003cp\u003e If the  {@code modes} parameter is of length zero, then the existenceof the file is checked. \u003cp\u003e This method follows symbolic links if the file referenced by this object is a symbolic link. Depending on the implementation, this method may require to read file permissions, access control lists, or other file attributes in order to check the effective access to the file. To determine the effective access to a file may require access to several attributes and so in some implementations this method may not be atomic with respect to other file system operations.\n * @param path the path to the file to check\n * @param modes The access modes to check; may have zero elements\n * @throws UnsupportedOperationException an implementation is required to support checking for {@code READ},  {@code WRITE}, and  {@code EXECUTE} access. Thisexception is specified to allow for the  {@code Access} enum tobe extended in future releases.\n * @throws NoSuchFileException if a file does not exist \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws AccessDeniedException the requested access would be denied or the access cannot be determined because the Java virtual machine has insufficient privileges or other reasons. \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkRead(String) checkRead}is invoked when checking read access to the file or only the existence of the file, the  {@link SecurityManager#checkWrite(String) checkWrite} is invoked when checking write access to the file,and  {@link SecurityManager#checkExec(String) checkExec} is invokedwhen checking execute access.\n */\n","tf":{"freq":{"atom":1,"unsupport":1,"reason":1,"zero":2,"specifi":2,"referenc":1,"requir":3,"oper":2,"search":1,"file":27,"request":1,"permiss":5,"tobe":1,"border":1,"deni":2,"option":3,"follow":2,"element":1,"control":1,"except":7,"support":1,"symbol":2,"invok":2,"runtim":1,"descript":1,"parametera":1,"writabl":2,"javavirtu":1,"provid":1,"insuffici":1,"machin":6,"system":2,"summari":1,"cellpad":1,"determin":2,"exec":3,"execut":4,"virtual":5,"invokedwhen":1,"allow":2,"directori":2,"link":12,"readabl":2,"use":1,"object":1,"subdirectori":1,"mode":8,"attribut":2,"releas":1,"order":2,"path":2,"write":4,"length":1,"read":5,"valu":1,"exist":7,"privileg":2,"may":5,"futur":1,"error":1,"check":24,"semanticsmay":1,"manag":4,"depend":1,"instal":1,"paramet":1,"existenceof":1,"list":1,"accord":1,"access":24,"sever":1,"differ":1,"specif":2,"secur":5,"effect":2,"thisexcept":1,"tabl":2,"appropri":1,"string":3,"exampl":1,"java":5,"method":6,"respect":1,"occur":1},"maxFreq":27,"totalTerms":257},"loc":0}