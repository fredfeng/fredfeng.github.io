{"id":14917,"className":"java.nio.channels.FileChannel","methodName":"map","signature":"\u003cjava.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)\u003e","javadoc":"/** \n * Maps a region of this channel\u0027s file directly into memory. \u003cp\u003e A region of a file may be mapped into memory in one of three modes: \u003c/p\u003e \u003cul type\u003ddisc\u003e \u003cli\u003e\u003cp\u003e \u003ci\u003eRead-only:\u003c/i\u003e Any attempt to modify the resulting buffer will cause a  {@link java.nio.ReadOnlyBufferException} to be thrown.( {@link MapMode#READ_ONLY MapMode.READ_ONLY}) \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e \u003ci\u003eRead/write:\u003c/i\u003e Changes made to the resulting buffer will eventually be propagated to the file; they may or may not be made visible to other programs that have mapped the same file.  ( {@link MapMode#READ_WRITE MapMode.READ_WRITE}) \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e \u003ci\u003ePrivate:\u003c/i\u003e Changes made to the resulting buffer will not be propagated to the file and will not be visible to other programs that have mapped the same file; instead, they will cause private copies of the modified portions of the buffer to be created.  ( {@link MapMode#PRIVATE MapMode.PRIVATE}) \u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e For a read-only mapping, this channel must have been opened for reading; for a read/write or private mapping, this channel must have been opened for both reading and writing. \u003cp\u003e The  {@link MappedByteBuffer \u003ci\u003emapped byte buffer\u003c/i\u003e}returned by this method will have a position of zero and a limit and capacity of \u003ctt\u003esize\u003c/tt\u003e; its mark will be undefined.  The buffer and the mapping that it represents will remain valid until the buffer itself is garbage-collected. \u003cp\u003e A mapping, once established, is not dependent upon the file channel that was used to create it.  Closing the channel, in particular, has no effect upon the validity of the mapping. \u003cp\u003e Many of the details of memory-mapped files are inherently dependent upon the underlying operating system and are therefore unspecified.  The behavior of this method when the requested region is not completely contained within this channel\u0027s file is unspecified.  Whether changes made to the content or size of the underlying file, by this program or another, are propagated to the buffer is unspecified.  The rate at which changes to the buffer are propagated to the file is unspecified. \u003cp\u003e For most operating systems, mapping a file into memory is more expensive than reading or writing a few tens of kilobytes of data via the usual  {@link #read read} and {@link #write write} methods.  From thestandpoint of performance it is generally only worth mapping relatively large files into memory.  \u003c/p\u003e\n * @param mode One of the constants  {@link MapMode#READ_ONLY READ_ONLY},  {@link MapMode#READ_WRITE READ_WRITE}, or  {@link MapMode#PRIVATE PRIVATE} defined in the {@link MapMode} class, according towhether the file is to be mapped read-only, read/write, or privately (copy-on-write), respectively\n * @param position The position within the file at which the mapped region is to start; must be non-negative\n * @param size The size of the region to be mapped; must be non-negative and no greater than  {@link java.lang.Integer#MAX_VALUE}\n * @return  The mapped byte buffer\n * @throws NonReadableChannelException If the \u003ctt\u003emode\u003c/tt\u003e is  {@link MapMode#READ_ONLY READ_ONLY} butthis channel was not opened for reading\n * @throws NonWritableChannelException If the \u003ctt\u003emode\u003c/tt\u003e is  {@link MapMode#READ_WRITE READ_WRITE} or{@link MapMode#PRIVATE PRIVATE} but this channel was not openedfor both reading and writing\n * @throws IllegalArgumentException If the preconditions on the parameters do not hold\n * @throws IOException If some other I/O error occurs\n * @see java.nio.channels.FileChannel.MapMode\n * @see java.nio.MappedByteBuffer\n */\n","tf":{"freq":{"memori":5,"via":1,"greater":1,"precondit":1,"particular":1,"zero":1,"copi":2,"whether":1,"open":3,"oper":2,"file":16,"propag":4,"relat":1,"undefin":1,"worth":1,"limit":1,"mani":1,"openedfor":1,"hold":1,"writabl":1,"non":4,"content":1,"system":2,"start":1,"will":8,"posit":3,"upon":3,"region":5,"eventu":1,"visibl":2,"behavior":1,"link":15,"made":4,"data":1,"use":1,"therefor":1,"anoth":1,"mode":18,"write":9,"map":34,"portion":1,"complet":1,"direct":1,"usual":1,"may":3,"repres":1,"butthi":1,"establish":1,"inher":1,"remain":1,"larg":1,"method":3,"capac":1,"within":2,"thestandpoint":1,"respect":1,"ten":1,"detail":1,"towheth":1,"perform":1,"garbag":1,"type":1,"must":4,"disc":1,"close":1,"buffer":13,"request":1,"three":1,"argument":1,"except":5,"thrown":1,"creat":2,"mark":1,"size":4,"program":3,"contain":1,"negat":2,"collect":1,"attempt":1,"valid":2,"result":3,"unspecifi":4,"defin":1,"readabl":1,"one":2,"kilobyt":1,"lang":1,"rate":1,"read":14,"constant":1,"error":1,"depend":2,"paramet":1,"accord":1,"illeg":1,"general":1,"caus":2,"effect":1,"instead":1,"modifi":2,"expens":1,"java":4,"nio":3,"chang":4,"channel":12,"integ":1,"occur":1},"maxFreq":34,"totalTerms":301},"loc":0}