{"id":14841,"className":"java.nio.channels.AsynchronousFileChannel","methodName":"truncate","signature":"\u003cjava.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel truncate(long)\u003e","javadoc":"/** \n * Truncates this channel\u0027s file to the given size. \u003cp\u003e If the given size is less than the file\u0027s current size then the file is truncated, discarding any bytes beyond the new end of the file.  If the given size is greater than or equal to the file\u0027s current size then the file is not modified. \u003c/p\u003e\n * @param size The new size, a non-negative byte count\n * @return  This file channel\n * @throws NonWritableChannelException If this channel was not opened for writing\n * @throws ClosedChannelException If this channel is closed\n * @throws IllegalArgumentException If the new size is negative\n * @throws IOException If some other I/O error occurs\n */\n","tf":{"freq":{"argument":1,"except":4,"greater":1,"error":1,"count":1,"truncat":3,"writabl":1,"equal":1,"discard":1,"illeg":1,"close":2,"non":2,"size":8,"beyond":1,"open":1,"given":3,"file":7,"write":1,"modifi":1,"current":2,"negat":2,"channel":6,"less":1,"end":1,"occur":1},"maxFreq":8,"totalTerms":54},"loc":0}