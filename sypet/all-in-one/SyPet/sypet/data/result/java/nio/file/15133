{"id":15133,"className":"java.nio.file.Files","methodName":"createTempFile","signature":"\u003cjava.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute\u003c?\u003e[])\u003e","javadoc":"/** \n * Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name. The resulting {@code Path} is associated with the same {@code FileSystem} as the givendirectory. \u003cp\u003e The details as to how the name of the file is constructed is implementation dependent and therefore not specified. Where possible the  {@code prefix} and {@code suffix} are used to construct candidatenames in the same manner as the  {@link java.io.File#createTempFile(String,String,File)} method.\u003cp\u003e As with the  {@code File.createTempFile} methods, this method is onlypart of a temporary-file facility. Where used as a \u003cem\u003ework files\u003c/em\u003e, the resulting file may be opened using the  {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} option so that thefile is deleted when the appropriate  {@code close} method is invoked.Alternatively, a  {@link Runtime#addShutdownHook shutdown-hook}, or the {@link java.io.File#deleteOnExit} mechanism may be used to delete thefile automatically. \u003cp\u003e The  {@code attrs} parameter is optional {@link FileAttribute file-attributes} to set atomically when creating the file. Each attributeis identified by its  {@link FileAttribute#name name}. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the  {@link java.io.File#createTempFile(String,String,File)}method.\n * @param dir the path to directory in which to create the file\n * @param prefix the prefix string to be used in generating the file\u0027s name; may be  {@code null}\n * @param suffix the suffix string to be used in generating the file\u0027s name; may be  {@code null}, in which case \" {@code .tmp}\" is used\n * @param attrs an optional list of file attributes to set atomically when creating the file\n * @return  the path to the newly created file that did not exist beforethis method was invoked\n * @throws IllegalArgumentException if the prefix or suffix parameters cannot be used to generate a candidate file name\n * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when creating the directory\n * @throws IOException if an I/O error occurs or  {@code dir} does not exist\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to the file.\n */\n","tf":{"freq":{"atom":3,"unsupport":1,"detail":1,"last":1,"possibl":1,"occurr":1,"specifi":3,"close":1,"open":2,"given":1,"altern":1,"oper":1,"file":31,"permiss":1,"tmp":1,"option":4,"argument":1,"facil":1,"work":1,"onlypart":1,"hook":2,"except":4,"ignor":1,"creat":11,"invok":3,"runtim":1,"candid":1,"attr":2,"provid":1,"restrict":1,"exit":1,"newli":1,"system":1,"contain":1,"prefix":5,"temp":4,"array":2,"result":3,"directori":3,"delet":3,"one":1,"link":8,"givendirectori":1,"use":9,"thefil":2,"identifi":1,"therefor":1,"add":1,"automat":1,"attribut":7,"dir":2,"associ":1,"name":8,"write":3,"path":3,"temporari":1,"exist":2,"shutdown":2,"attributei":1,"may":5,"includ":1,"check":3,"error":1,"standard":1,"manag":2,"beforethi":1,"depend":1,"instal":1,"paramet":2,"list":1,"access":2,"illeg":1,"suffix":5,"empti":1,"secur":3,"appropri":1,"mechan":1,"string":8,"generat":4,"manner":1,"java":3,"method":7,"construct":2,"candidatenam":1,"occur":1},"maxFreq":31,"totalTerms":224},"loc":4}