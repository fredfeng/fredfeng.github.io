{"id":14956,"className":"java.nio.channels.MulticastChannel","methodName":"join","signature":"\u003cjava.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)\u003e","javadoc":"/** \n * Joins a multicast group to begin receiving datagrams sent to the group from a given source address. \u003cp\u003e If this channel is currently a member of the group on the given interface to receive datagrams from the given source address then the membership key, representing that membership, is returned. Otherwise this channel joins the group and the resulting new membership key is returned. The resulting membership key is  {@link MembershipKey#sourceAddress source-specific}. \u003cp\u003e Membership is \u003cem\u003ecumulative\u003c/em\u003e and this method may be invoked again with the same group and interface to allow receiving datagrams sent by other source addresses to the group.\n * @param group The multicast address to join\n * @param interf The network interface on which to join the group\n * @param source The source address\n * @return  The membership key\n * @throws IllegalArgumentException If the group parameter is not a  {@link InetAddress#isMulticastAddress multicast} address, thesource parameter is not a unicast address, the group parameter is an address type that is not supported by this channel, or the source parameter is not the same address type as the group\n * @throws IllegalStateException If the channel is currently a member of the group on the given interface to receive all datagrams\n * @throws UnsupportedOperationException If the channel\u0027s socket is not an Internet Protocol socket or source filtering is not supported\n * @throws ClosedChannelException If this channel is closed\n * @throws IOException If an I/O error occurs\n * @throws SecurityException If a security manager is set, and its {@link SecurityManager#checkMulticast(InetAddress) checkMulticast}method denies access to the multiast group\n */\n","tf":{"freq":{"unsupport":1,"multicast":6,"type":2,"close":2,"sent":2,"given":4,"oper":1,"socket":2,"deni":1,"key":5,"argument":1,"except":6,"support":2,"invok":1,"inet":2,"sourc":9,"internet":1,"filter":1,"otherwis":1,"result":2,"allow":1,"membership":7,"link":3,"state":1,"network":1,"current":2,"unicast":1,"member":2,"interf":1,"may":1,"protocol":1,"check":2,"error":1,"repres":1,"manag":2,"paramet":4,"receiv":4,"join":5,"access":1,"illeg":2,"begin":1,"datagram":4,"multiast":1,"cumul":1,"specif":1,"secur":3,"address":13,"thesourc":1,"method":2,"group":13,"channel":7,"occur":1},"maxFreq":13,"totalTerms":143},"loc":0}