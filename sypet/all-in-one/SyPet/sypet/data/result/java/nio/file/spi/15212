{"id":15212,"className":"java.nio.file.spi.FileSystemProvider","methodName":"readAttributes","signature":"\u003cjava.nio.file.spi.FileSystemProvider: java.util.Map\u003cjava.lang.String,java.lang.Object\u003e readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])\u003e","javadoc":"/** \n * Reads a set of file attributes as a bulk operation. This method works in exactly the manner specified by the  {@link Files#readAttributes(Path,String,LinkOption[])} method.\n * @param path the path to the file\n * @param attributes the attributes to read\n * @param options options indicating how symbolic links are handled\n * @return  a map of the attributes returned; may be empty. The map\u0027s keysare the attribute names, its values are the attribute values\n * @throws UnsupportedOperationException if the attribute view is not available\n * @throws IllegalArgumentException if no attributes are specified or an unrecognized attributes is specified\n * @throws IOException If an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, its  {@link SecurityManager#checkRead(String) checkRead}method denies read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoke to check for additional permissions.\n */\n","tf":{"freq":{"unsupport":1,"link":4,"specifi":3,"attribut":12,"indic":1,"oper":2,"file":4,"exact":1,"name":1,"permiss":1,"path":3,"map":2,"read":8,"valu":2,"deni":1,"option":3,"argument":1,"work":1,"addit":1,"sensit":1,"except":4,"may":2,"check":3,"error":1,"symbol":1,"invok":2,"manag":3,"instal":1,"avail":1,"access":1,"unrecogn":1,"provid":1,"illeg":1,"bulk":1,"handl":1,"empti":1,"secur":5,"string":2,"manner":1,"method":4,"view":1,"keysar":1,"occur":1},"maxFreq":12,"totalTerms":93},"loc":0}