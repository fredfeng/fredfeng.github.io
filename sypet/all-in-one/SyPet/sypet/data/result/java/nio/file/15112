{"id":15112,"className":"java.nio.file.Watchable","methodName":"register","signature":"\u003cjava.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind\u003c?\u003e[])\u003e","javadoc":"/** \n * Registers an object with a watch service. \u003cp\u003e An invocation of this method behaves in exactly the same way as the invocation \u003cpre\u003e watchable. {@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]); \u003c/pre\u003e\n * @param watcher the watch service to which this object is to be registered\n * @param events the events for which this object should be registered\n * @return  a key representing the registration of this object with thegiven watch service\n * @throws UnsupportedOperationException if unsupported events are specified\n * @throws IllegalArgumentException if an invalid of combination of events are specified\n * @throws ClosedWatchServiceException if the watch service is closed\n * @throws IOException if an I/O error occurs\n * @throws SecurityException if a security manager is installed and it denies an unspecified permission required to monitor this object. Implementations of this interface should specify the permission checks.\n */\n","tf":{"freq":{"unspecifi":1,"unsupport":2,"watchabl":1,"behav":1,"link":1,"servic":6,"way":1,"object":5,"kind":1,"close":2,"specifi":3,"requir":1,"invalid":1,"oper":1,"event":8,"exact":1,"permiss":2,"combin":1,"regist":6,"thegiven":1,"watcher":2,"deni":1,"key":1,"argument":1,"except":5,"monitor":1,"check":1,"error":1,"repres":1,"manag":1,"watch":9,"instal":1,"registr":1,"illeg":1,"invoc":2,"secur":2,"pre":2,"modifi":2,"method":1,"occur":1},"maxFreq":9,"totalTerms":83},"loc":0}