{"id":15156,"className":"java.nio.file.Files","methodName":"getOwner","signature":"\u003cjava.nio.file.Files: java.nio.file.attribute.UserPrincipal getOwner(java.nio.file.Path,java.nio.file.LinkOption[])\u003e","javadoc":"/** \n * Returns the owner of a file. \u003cp\u003e The  {@code path} parameter is associated with a file system thatsupports  {@link FileOwnerAttributeView}. This file attribute view provides access to a file attribute that is the owner of the file.\n * @param path A file reference that locates the file\n * @param options options indicating how symbolic links are handled\n * @return  A user principal representing the owner of the file\n * @throws UnsupportedOperationException if the associated file system does not support the  {@code FileOwnerAttributeView}\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, it denies  {@link RuntimePermission}\u003ctt\u003e(\"accessUserInformation\")\u003c/tt\u003e or its  {@link SecurityManager#checkRead(String) checkRead} methoddenies read access to the file.\n */\n","tf":{"freq":{"unsupport":1,"link":4,"methoddeni":1,"attribut":4,"indic":1,"associ":2,"refer":1,"oper":1,"file":12,"permiss":1,"path":2,"read":3,"deni":1,"option":2,"locat":1,"except":3,"support":1,"check":2,"error":1,"symbol":1,"repres":1,"manag":2,"runtim":1,"instal":1,"paramet":1,"access":3,"provid":2,"handl":1,"inform":1,"system":2,"secur":3,"string":1,"owner":6,"view":3,"user":2,"thatsupport":1,"occur":1,"princip":1},"maxFreq":12,"totalTerms":78},"loc":7}