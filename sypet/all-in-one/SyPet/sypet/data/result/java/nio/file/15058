{"id":15058,"className":"java.nio.file.FileStore","methodName":"getAttribute","signature":"\u003cjava.nio.file.FileStore: java.lang.Object getAttribute(java.lang.String)\u003e","javadoc":"/** \n * Reads the value of a file store attribute. \u003cp\u003e The  {@code attribute} parameter identifies the attribute to be readand takes the form: \u003cblockquote\u003e \u003ci\u003eview-name\u003c/i\u003e\u003cb\u003e:\u003c/b\u003e\u003ci\u003eattribute-name\u003c/i\u003e \u003c/blockquote\u003e where the character  {@code \u0027:\u0027} stands for itself.\u003cp\u003e \u003ci\u003eview-name\u003c/i\u003e is the  {@link FileStoreAttributeView#name name} ofa  {@link FileStore AttributeView} that identifies a set of file attributes.\u003ci\u003eattribute-name\u003c/i\u003e is the name of the attribute. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we want to know if ZFS compression is enabled (assuming the \"zfs\" view is supported): \u003cpre\u003e boolean compression \u003d (Boolean)fs.getAttribute(\"zfs:compression\"); \u003c/pre\u003e\n * @param attribute the attribute to read\n * @return  the attribute value; {@code null} may be a valid valid for someattributes\n * @throws UnsupportedOperationException if the attribute view is not available or it does not support reading the attribute\n * @throws IOException if an I/O error occurs\n */\n","tf":{"freq":{"valid":2,"unsupport":1,"someattribut":1,"store":3,"link":2,"identifi":2,"attribut":16,"readand":1,"oper":1,"blockquot":2,"file":4,"name":7,"read":3,"zfs":2,"valu":2,"want":1,"except":2,"may":1,"support":2,"assum":1,"error":1,"form":1,"charact":1,"enabl":1,"paramet":1,"suppos":1,"avail":1,"know":1,"compress":3,"stand":1,"pre":2,"take":1,"exampl":1,"view":6,"usag":1,"ofa":1,"occur":1},"maxFreq":16,"totalTerms":81},"loc":0}