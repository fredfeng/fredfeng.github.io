{"id":14849,"className":"java.nio.channels.AsynchronousFileChannel","methodName":"read","signature":"\u003cjava.nio.channels.AsynchronousFileChannel: void read(java.nio.ByteBuffer,long,A,java.nio.channels.CompletionHandler)\u003e","javadoc":"/** \n * Reads a sequence of bytes from this channel into the given buffer, starting at the given file position. \u003cp\u003e This method initiates the reading of a sequence of bytes from this channel into the given buffer, starting at the given file position. The result of the read is the number of bytes read or  {@code -1} if the givenposition is greater than or equal to the file\u0027s size at the time that the read is attempted. \u003cp\u003e This method works in the same manner as the  {@link AsynchronousByteChannel#read(ByteBuffer,Object,CompletionHandler)}method, except that bytes are read starting at the given file position. If the given file position is greater than the file\u0027s size at the time that the read is attempted then no bytes are read.\n * @param dst The buffer into which bytes are to be transferred\n * @param position The file position at which the transfer is to begin; must be non-negative\n * @param attachment The object to attach to the I/O operation; can be  {@code null}\n * @param handler The handler for consuming the result\n * @throws IllegalArgumentException If the position is negative or the buffer is read-only\n * @throws NonReadableChannelException If this channel was not opened for reading\n */\n","tf":{"freq":{"attempt":2,"result":2,"asynchron":1,"greater":2,"readabl":1,"link":1,"dst":1,"object":2,"must":1,"consum":1,"buffer":5,"open":1,"time":2,"given":6,"oper":1,"file":7,"sequenc":2,"read":12,"initi":1,"complet":1,"argument":1,"work":1,"transfer":2,"except":3,"givenposit":1,"number":1,"equal":1,"illeg":1,"non":2,"begin":1,"size":2,"start":3,"attach":2,"negat":2,"method":3,"manner":1,"posit":7,"channel":5,"handler":3},"maxFreq":12,"totalTerms":94},"loc":0}