{"id":15224,"className":"java.nio.file.attribute.UserDefinedFileAttributeView","methodName":"read","signature":"\u003cjava.nio.file.attribute.UserDefinedFileAttributeView: int read(java.lang.String,java.nio.ByteBuffer)\u003e","javadoc":"/** \n * Read the value of a user-defined attribute into a buffer. \u003cp\u003e This method reads the value of the attribute into the given buffer as a sequence of bytes, failing if the number of bytes remaining in the buffer is insufficient to read the complete attribute value. The number of bytes transferred into the buffer is  {@code n}, where  {@code n}is the size of the attribute value. The first byte in the sequence is at index  {@code p} and the last byte is at index {@code p + n - 1}, where {@code p} is the buffer\u0027s position. Upon return the buffer\u0027s positionwill be equal to  {@code p + n}; its limit will not have changed. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we want to read a file\u0027s MIME type that is stored as a user-defined attribute with the name \" {@code user.mimetype}\". \u003cpre\u003e UserDefinedFileAttributeView view \u003d Files.getFileAttributeView(path, UserDefinedFileAttributeView.class); String name \u003d \"user.mimetype\"; ByteBuffer buf \u003d ByteBuffer.allocate(view.size(name)); view.read(name, buf); buf.flip(); String value \u003d Charset.defaultCharset().decode(buf).toString(); \u003c/pre\u003e\n * @param name The attribute name\n * @param dst The destination buffer\n * @return  The number of bytes read, possibly zero\n * @throws IllegalArgumentException If the destination buffer is read-only\n * @throws IOException If an I/O error occurs or there is insufficient space in the destination buffer for the attribute value\n * @throws SecurityException In the case of the default provider, a security manager is installed, and it denies  {@link RuntimePermission}\u003ctt\u003e(\"accessUserDefinedAttributes\")\u003c/tt\u003e or its  {@link SecurityManager#checkRead(String) checkRead} methoddenies read access to the file.\n * @see #size\n */\n","tf":{"freq":{"last":1,"store":1,"possibl":1,"dst":1,"type":1,"zero":1,"buffer":11,"given":1,"fail":1,"sequenc":2,"file":6,"permiss":1,"deni":1,"argument":1,"limit":1,"decod":1,"except":3,"index":2,"transfer":1,"runtim":1,"charset":2,"number":3,"provid":1,"size":3,"insuffici":2,"mimetyp":2,"will":1,"view":6,"posit":1,"upon":1,"alloc":1,"defin":5,"link":2,"space":1,"positionwil":1,"methoddeni":1,"attribut":11,"name":6,"path":1,"read":11,"valu":6,"want":1,"flip":1,"complet":1,"check":2,"error":1,"manag":2,"instal":1,"suppos":1,"equal":1,"access":2,"illeg":1,"secur":3,"remain":1,"pre":2,"string":4,"exampl":1,"method":1,"chang":1,"usag":1,"first":1,"user":7,"buf":4,"occur":1,"destin":3},"maxFreq":11,"totalTerms":151},"loc":0}