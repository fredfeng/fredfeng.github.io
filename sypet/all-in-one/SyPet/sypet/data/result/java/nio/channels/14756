{"id":14756,"className":"java.nio.channels.AsynchronousByteChannel","methodName":"read","signature":"\u003cjava.nio.channels.AsynchronousByteChannel: void read(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)\u003e","javadoc":"/** \n * Reads a sequence of bytes from this channel into the given buffer. \u003cp\u003e This method initiates an asynchronous read operation to read a sequence of bytes from this channel into the given buffer. The  {@code handler} parameter is a completion handler that is invoked when the readoperation completes (or fails). The result passed to the completion handler is the number of bytes read or  {@code -1} if no bytes could beread because the channel has reached end-of-stream. \u003cp\u003e The read operation may read up to \u003ci\u003er\u003c/i\u003e bytes from the channel, where \u003ci\u003er\u003c/i\u003e is the number of bytes remaining in the buffer, that is, {@code dst.remaining()} at the time that the read is attempted. Where\u003ci\u003er\u003c/i\u003e is 0, the read operation completes immediately with a result of {@code 0} without initiating an I/O operation.\u003cp\u003e Suppose that a byte sequence of length \u003ci\u003en\u003c/i\u003e is read, where \u003ctt\u003e0\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003er\u003c/i\u003e. This byte sequence will be transferred into the buffer so that the first byte in the sequence is at index \u003ci\u003ep\u003c/i\u003e and the last byte is at index \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003ctt\u003e+\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e-\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e, where \u003ci\u003ep\u003c/i\u003e is the buffer\u0027s position at the moment the read is performed. Upon completion the buffer\u0027s position will be equal to \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003ctt\u003e+\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e; its limit will not have changed. \u003cp\u003e Buffers are not safe for use by multiple concurrent threads so care should be taken to not access the buffer until the operation has completed. \u003cp\u003e This method may be invoked at any time. Some channel types may not allow more than one read to be outstanding at any given time. If a thread initiates a read operation before a previous read operation has completed then a  {@link ReadPendingException} will be thrown.\n * @param dst The buffer into which bytes are to be transferred\n * @param attachment The object to attach to the I/O operation; can be  {@code null}\n * @param handler The completion handler\n * @throws IllegalArgumentException If the buffer is read-only\n * @throws ReadPendingException If the channel does not allow more than one read to be outstanding and a previous read has not completed\n * @throws ShutdownChannelGroupException If the channel is associated with a  {@link AsynchronousChannelGroup group} that has terminated\n */\n","tf":{"freq":{"readoper":1,"last":1,"perform":1,"dst":2,"type":1,"buffer":10,"time":3,"fail":1,"given":3,"oper":8,"sequenc":5,"thread":2,"care":1,"taken":1,"nbsp":10,"argument":1,"limit":1,"thrown":1,"except":4,"transfer":2,"index":2,"multipl":1,"invok":2,"number":2,"without":1,"will":4,"posit":2,"upon":1,"attempt":1,"result":2,"asynchron":2,"stream":1,"allow":2,"moment":1,"concurr":1,"link":2,"one":2,"use":1,"object":1,"reach":1,"associ":1,"length":1,"read":19,"immedi":1,"initi":3,"end":1,"shutdown":1,"pend":2,"complet":9,"safe":1,"may":3,"outstand":2,"previous":2,"paramet":1,"suppos":1,"beread":1,"equal":1,"access":1,"illeg":1,"pass":1,"termin":1,"remain":2,"attach":2,"method":2,"chang":1,"group":3,"channel":9,"first":1,"handler":5},"maxFreq":19,"totalTerms":170},"loc":0}