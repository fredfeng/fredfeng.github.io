{"id":15139,"className":"java.nio.file.Files","methodName":"delete","signature":"\u003cjava.nio.file.Files: void delete(java.nio.file.Path)\u003e","javadoc":"/** \n * Deletes a file. \u003cp\u003e An implementation may require to examine the file to determine if the file is a directory. Consequently this method may not be atomic with respect to other file system operations.  If the file is a symbolic link then the symbolic link itself, not the final target of the link, is deleted. \u003cp\u003e If the file is a directory then the directory must be empty. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. This method can be used with the  {@link #walkFileTree walkFileTree}method to delete a directory and all entries in the directory, or an entire \u003ci\u003efile-tree\u003c/i\u003e where required. \u003cp\u003e On some operating systems it may not be possible to remove a file when it is open and in use by this Java virtual machine or other programs.\n * @param path the path to the file to delete\n * @throws NoSuchFileException if the file does not exist \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws DirectoryNotEmptyException if the file is a directory and could not otherwise be deleted because the directory is not empty \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkDelete(String)} methodis invoked to check delete access to the file\n */\n","tf":{"freq":{"atom":1,"consequ":1,"possibl":1,"must":1,"open":1,"requir":2,"tree":3,"oper":2,"file":16,"methodi":1,"examin":1,"option":2,"except":6,"symbol":2,"creat":2,"invok":1,"remov":1,"provid":1,"system":2,"machin":1,"program":1,"determin":1,"walk":2,"entir":1,"virtual":1,"otherwis":1,"delet":8,"directori":11,"link":6,"use":2,"consid":1,"path":2,"exist":2,"may":3,"error":1,"check":2,"entri":3,"manag":2,"instal":1,"access":1,"empti":4,"specif":2,"secur":3,"string":1,"target":1,"special":2,"method":3,"java":1,"respect":1,"occur":1},"maxFreq":16,"totalTerms":119},"loc":3}