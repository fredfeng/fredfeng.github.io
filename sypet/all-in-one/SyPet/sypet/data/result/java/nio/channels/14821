{"id":14821,"className":"java.nio.channels.AsynchronousChannelGroup","methodName":"withCachedThreadPool","signature":"\u003cjava.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withCachedThreadPool(java.util.concurrent.ExecutorService,int)\u003e","javadoc":"/** \n * Creates an asynchronous channel group with a given thread pool that creates new threads as needed. \u003cp\u003e The  {@code executor} parameter is an {@code ExecutorService} thatcreates new threads as needed to execute tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. It may reuse previously constructed threads when they are available. \u003cp\u003e The  {@code initialSize} parameter may be used by the implementationas a \u003cem\u003ehint\u003c/em\u003e as to the initial number of tasks it may submit. For example, it may be used to indictae the initial number of threads that wait on I/O events. \u003cp\u003e The executor is intended to be used exclusively by the resulting asynchronous channel group. Termination of the group results in the orderly   {@link ExecutorService#shutdown shutdown} of the executorservice. Shutting down the executor service by other means results in unspecified behavior. \u003cp\u003e The group is created by invoking the  {@link AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService,int) openAsynchronousChannelGroup(ExecutorService,int)} method of the system-widedefault  {@link AsynchronousChannelProvider} object.\n * @param executor The thread pool for the resulting group\n * @param initialSize A value  {@code \u003e\u003d0} or a negative value for implementationspecific default\n * @return  A new asynchronous channel group\n * @throws IOException If an I/O error occurs\n * @see java.util.concurrent.Executors#newCachedThreadPool\n */\n","tf":{"freq":{"need":2,"servic":5,"wait":1,"reus":1,"open":2,"given":1,"oper":1,"event":2,"thread":8,"indicta":1,"except":1,"submit":2,"creat":3,"invok":1,"avail":1,"number":2,"provid":2,"size":2,"system":1,"implementationspecif":1,"widedefault":1,"negat":1,"thatcreat":1,"execut":1,"util":1,"result":5,"asynchron":8,"unspecifi":1,"concurr":1,"behavior":1,"link":3,"use":3,"object":1,"order":1,"pool":4,"shut":1,"executorservic":1,"mean":1,"valu":2,"dispatch":1,"initi":5,"exclus":1,"complet":1,"shutdown":2,"may":4,"error":1,"previous":1,"task":2,"executor":9,"paramet":2,"hint":1,"cach":2,"handl":1,"termin":1,"exampl":1,"java":1,"method":1,"construct":1,"implementationa":1,"group":9,"intend":1,"channel":8,"occur":1},"maxFreq":9,"totalTerms":136},"loc":4}