{"id":14870,"className":"java.nio.channels.DatagramChannel","methodName":"receive","signature":"\u003cjava.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)\u003e","javadoc":"/** \n * Receives a datagram via this channel. \u003cp\u003e If a datagram is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the datagram is copied into the given byte buffer and its source address is returned. If this channel is in non-blocking mode and a datagram is not immediately available then this method immediately returns \u003ctt\u003enull\u003c/tt\u003e. \u003cp\u003e The datagram is transferred into the given byte buffer starting at its current position, as if by a regular  {@link ReadableByteChannel#read(java.nio.ByteBuffer) read} operation.  If thereare fewer bytes remaining in the buffer than are required to hold the datagram then the remainder of the datagram is silently discarded. \u003cp\u003e This method performs exactly the same security checks as the  {@link java.net.DatagramSocket#receive receive} method of the {@link java.net.DatagramSocket} class.  That is, if the socket is not connectedto a specific remote address and a security manager has been installed then for each datagram received this method verifies that the source\u0027s address and port number are permitted by the security manager\u0027s  {@link java.lang.SecurityManager#checkAccept checkAccept} method.  The overheadof this security check can be avoided by first connecting the socket via the  {@link #connect connect} method.\u003cp\u003e This method may be invoked at any time.  If another thread has already initiated a read operation upon this channel, however, then an invocation of this method will block until the first operation is complete. If this channel\u0027s socket is not bound then this method will first cause the socket to be bound to an address that is assigned automatically, as if invoking the  {@link #bind bind} method with aparameter of  {@code null}. \u003c/p\u003e\n * @param dst The buffer into which the datagram is to be transferred\n * @return  The datagram\u0027s source address,or \u003ctt\u003enull\u003c/tt\u003e if this channel is in non-blocking mode and no datagram was immediately available\n * @throws ClosedChannelException If this channel is closed\n * @throws AsynchronousCloseException If another thread closes this channel while the read operation is in progress\n * @throws ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread\u0027s interrupt status\n * @throws SecurityException If a security manager has been installed and it does not permit datagrams to be accepted from the datagram\u0027s sender\n * @throws IOException If some other I/O error occurs\n */\n","tf":{"freq":{"progress":2,"assign":1,"via":2,"accept":3,"permit":2,"therebi":1,"perform":1,"dst":1,"copi":1,"close":6,"sender":1,"buffer":5,"avoid":1,"time":1,"overheadof":1,"becom":1,"requir":1,"given":2,"oper":5,"thread":5,"verifi":1,"exact":1,"socket":6,"howev":1,"except":5,"transfer":2,"status":1,"invok":2,"hold":1,"number":1,"avail":4,"invoc":1,"non":2,"therear":1,"start":1,"connectedto":1,"remot":1,"will":2,"fewer":1,"sourc":3,"posit":1,"upon":1,"port":1,"silent":1,"asynchron":1,"connect":3,"eventu":1,"link":6,"one":1,"readabl":1,"block":4,"anoth":3,"discard":1,"net":2,"aparamet":1,"automat":1,"lang":1,"mode":3,"current":3,"read":5,"immedi":4,"initi":1,"complet":1,"may":1,"error":1,"check":4,"regular":1,"manag":4,"instal":2,"receiv":5,"interrupt":3,"datagram":15,"specif":1,"caus":1,"secur":7,"remain":1,"remaind":1,"address":5,"alreadi":1,"method":10,"java":4,"nio":1,"bind":2,"first":3,"channel":11,"bound":2,"occur":1},"maxFreq":15,"totalTerms":215},"loc":0}