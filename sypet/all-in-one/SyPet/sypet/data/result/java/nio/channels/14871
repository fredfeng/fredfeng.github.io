{"id":14871,"className":"java.nio.channels.DatagramChannel","methodName":"send","signature":"\u003cjava.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)\u003e","javadoc":"/** \n * Sends a datagram via this channel. \u003cp\u003e If this channel is in non-blocking mode and there is sufficient room in the underlying output buffer, or if this channel is in blocking mode and sufficient room becomes available, then the remaining bytes in the given buffer are transmitted as a single datagram to the given target address. \u003cp\u003e The datagram is transferred from the byte buffer as if by a regular {@link WritableByteChannel#write(java.nio.ByteBuffer) write} operation.\u003cp\u003e This method performs exactly the same security checks as the  {@link java.net.DatagramSocket#send send} method of the {@link java.net.DatagramSocket} class.  That is, if the socket is not connectedto a specific remote address and a security manager has been installed then for each datagram sent this method verifies that the target address and port number are permitted by the security manager\u0027s  {@link java.lang.SecurityManager#checkConnect checkConnect} method.  Theoverhead of this security check can be avoided by first connecting the socket via the  {@link #connect connect} method.\u003cp\u003e This method may be invoked at any time.  If another thread has already initiated a write operation upon this channel, however, then an invocation of this method will block until the first operation is complete. If this channel\u0027s socket is not bound then this method will first cause the socket to be bound to an address that is assigned automatically, as if by invoking the  {@link #bind bind} method with aparameter of  {@code null}. \u003c/p\u003e\n * @param src The buffer containing the datagram to be sent\n * @param target The address to which the datagram is to be sent\n * @return   The number of bytes sent, which will be either the numberof bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer\n * @throws ClosedChannelException If this channel is closed\n * @throws AsynchronousCloseException If another thread closes this channel while the read operation is in progress\n * @throws ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread\u0027s interrupt status\n * @throws SecurityException If a security manager has been installed and it does not permit datagrams to be sent to the given address\n * @throws IOException If some other I/O error occurs\n */\n","tf":{"freq":{"progress":2,"assign":1,"send":4,"via":2,"singl":1,"permit":2,"therebi":1,"perform":1,"zero":1,"close":6,"buffer":7,"avoid":1,"time":1,"sent":5,"becom":1,"given":3,"oper":5,"thread":5,"exact":1,"verifi":1,"socket":6,"howev":1,"except":5,"transfer":1,"status":1,"theoverhead":1,"invok":3,"writabl":1,"avail":1,"number":2,"invoc":1,"insuffici":1,"non":2,"connectedto":1,"remot":1,"contain":1,"will":3,"suffici":2,"sourc":1,"output":2,"upon":1,"room":3,"port":1,"asynchron":1,"connect":5,"link":6,"block":4,"anoth":3,"net":2,"aparamet":1,"automat":1,"lang":1,"mode":2,"numberof":1,"current":2,"write":3,"read":2,"src":1,"initi":1,"complet":1,"transmit":1,"may":2,"error":1,"check":4,"regular":1,"manag":4,"instal":2,"interrupt":3,"datagram":10,"either":1,"specif":1,"caus":1,"secur":7,"remain":2,"address":6,"target":3,"alreadi":1,"java":4,"nio":1,"method":10,"bind":2,"first":3,"channel":11,"bound":2,"occur":1},"maxFreq":11,"totalTerms":214},"loc":0}