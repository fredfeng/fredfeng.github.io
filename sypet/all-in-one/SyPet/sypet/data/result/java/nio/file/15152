{"id":15152,"className":"java.nio.file.Files","methodName":"getAttribute","signature":"\u003cjava.nio.file.Files: java.lang.Object getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])\u003e","javadoc":"/** \n * Reads the value of a file attribute. \u003cp\u003e The  {@code attribute} parameter identifies the attribute to be readand takes the form: \u003cblockquote\u003e [\u003ci\u003eview-name\u003c/i\u003e\u003cb\u003e:\u003c/b\u003e]\u003ci\u003eattribute-name\u003c/i\u003e \u003c/blockquote\u003e where square brackets [...] delineate an optional component and the character  {@code \u0027:\u0027} stands for itself.\u003cp\u003e \u003ci\u003eview-name\u003c/i\u003e is the  {@link FileAttributeView#name name} of a {@link FileAttributeView} that identifies a set of file attributes. If notspecified then it defaults to  {@code \"basic\"}, the name of the file attribute view that identifies the basic set of file attributes common to many file systems. \u003ci\u003eattribute-name\u003c/i\u003e is the name of the attribute. \u003cp\u003e The  {@code options} array may be used to indicate how symbolic linksare handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option  {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is present then symbolic links are not followed.\u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we require the user ID of the file owner on a system that supports a \" {@code unix}\" view: \u003cpre\u003e Path path \u003d ... int uid \u003d (Integer)Files.getAttribute(path, \"unix:uid\"); \u003c/pre\u003e\n * @param path the path to the file\n * @param attribute the attribute to read\n * @param options options indicating how symbolic links are handled\n * @return  the attribute value\n * @throws UnsupportedOperationException if the attribute view is not available\n * @throws IllegalArgumentException if the attribute name is not specified or is not recognized\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, its  {@link SecurityManager#checkRead(String) checkRead}method denies read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoked to check for additional permissions.\n */\n","tf":{"freq":{"uid":2,"squar":1,"unsupport":1,"linksar":1,"bracket":1,"specifi":1,"requir":1,"readand":1,"oper":1,"basic":2,"file":13,"blockquot":2,"permiss":1,"recogn":1,"deni":1,"option":6,"follow":2,"argument":1,"mani":1,"sensit":1,"except":4,"support":1,"form":1,"symbol":5,"charact":1,"invok":2,"avail":1,"provid":1,"present":1,"system":2,"owner":1,"view":7,"array":1,"common":1,"link":10,"notspecifi":1,"use":1,"identifi":3,"attribut":20,"indic":2,"name":9,"path":5,"read":7,"valu":2,"addit":1,"may":2,"check":3,"error":1,"manag":3,"instal":1,"paramet":1,"suppos":1,"access":1,"illeg":1,"handl":2,"delin":1,"secur":5,"compon":1,"stand":1,"take":1,"pre":2,"string":1,"target":1,"exampl":1,"method":2,"usag":1,"user":1,"unix":2,"integ":1,"occur":1},"maxFreq":20,"totalTerms":169},"loc":15}