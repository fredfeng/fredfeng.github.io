{"id":15097,"className":"java.nio.file.Path","methodName":"register","signature":"\u003cjava.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind\u003c?\u003e[],java.nio.file.WatchEvent.Modifier[])\u003e","javadoc":"/** \n * Registers the file located by this path with a watch service. \u003cp\u003e In this release, this path locates a directory that exists. The directory is registered with the watch service so that entries in the directory can be watched. The  {@code events} parameter is the events toregister and may contain the following events: \u003cul\u003e \u003cli\u003e {@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -entry created or moved into the directory\u003c/li\u003e \u003cli\u003e {@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -entry deleted or moved out of the directory\u003c/li\u003e \u003cli\u003e {@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -entry in directory was modified\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e The  {@link WatchEvent#context context} for these events is therelative path between the directory located by this path, and the path that locates the directory entry that is created, deleted, or modified. \u003cp\u003e The set of events may include additional implementation specific event that are not defined by the enum  {@link StandardWatchEventKinds}\u003cp\u003e The  {@code modifiers} parameter specifies \u003cem\u003emodifiers\u003c/em\u003e thatqualify how the directory is registered. This release does not define any \u003cem\u003estandard\u003c/em\u003e modifiers. It may contain implementation specific modifiers. \u003cp\u003e Where a file is registered with a watch service by means of a symbolic link then it is implementation specific if the watch continues to depend on the existence of the symbolic link after it is registered.\n * @param watcher the watch service to which this object is to be registered\n * @param events the events for which this object should be registered\n * @param modifiers the modifiers, if any, that modify how the object is registered\n * @return  a key representing the registration of this object with thegiven watch service\n * @throws UnsupportedOperationException if unsupported events or modifiers are specified\n * @throws IllegalArgumentException if an invalid combination of events or modifiers is specified\n * @throws ClosedWatchServiceException if the watch service is closed\n * @throws NotDirectoryException if the file is registered to watch the entries in a directory and the file is not a directory  \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the file.\n */\n","tf":{"freq":{"unsupport":2,"servic":7,"close":2,"specifi":3,"invalid":1,"oper":1,"file":5,"event":15,"combin":1,"thegiven":1,"option":1,"move":2,"key":1,"follow":1,"argument":1,"except":7,"symbol":2,"creat":2,"invok":1,"watch":15,"provid":1,"continu":1,"contain":2,"therel":1,"defin":2,"delet":2,"directori":12,"link":8,"object":4,"kind":4,"releas":2,"path":5,"read":3,"regist":10,"mean":1,"watcher":1,"exist":2,"addit":1,"may":3,"toregist":1,"locat":4,"includ":1,"check":3,"error":1,"standard":5,"repres":1,"manag":2,"entri":6,"thatqualifi":1,"depend":1,"instal":1,"paramet":2,"access":1,"registr":1,"illeg":1,"specif":4,"secur":3,"string":1,"context":2,"modifi":11,"method":1,"occur":1},"maxFreq":15,"totalTerms":191},"loc":0}