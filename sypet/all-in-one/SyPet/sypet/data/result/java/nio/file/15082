{"id":15082,"className":"java.nio.file.Path","methodName":"subpath","signature":"\u003cjava.nio.file.Path: java.nio.file.Path subpath(int,int)\u003e","javadoc":"/** \n * Returns a relative  {@code Path} that is a subsequence of the nameelements of this path. \u003cp\u003e The  {@code beginIndex} and {@code endIndex} parameters specify thesubsequence of name elements. The name that is \u003cem\u003eclosest\u003c/em\u003e to the root in the directory hierarchy has index  {@code 0}. The name that is \u003cem\u003efarthest\u003c/em\u003e from the root has index  {@link #getNameCount count}{@code -1}. The returned  {@code Path} object has the name elementsthat begin at  {@code beginIndex} and extend to the element at index {@code endIndex-1}.\n * @param beginIndex the index of the first element, inclusive\n * @param endIndex the index of the last element, exclusive\n * @return  a new {@code Path} object that is a subsequence of the nameelements in this  {@code Path}\n * @throws IllegalArgumentException if  {@code beginIndex} is negative, or greater than or equal tothe number of elements. If  {@code endIndex} is less than orequal to  {@code beginIndex}, or larger than the number of elements.\n */\n","tf":{"freq":{"greater":1,"last":1,"thesubsequ":1,"count":2,"root":2,"directori":1,"link":1,"hierarchi":1,"object":2,"toth":1,"specifi":1,"inclus":1,"name":5,"path":5,"relat":1,"closest":1,"exclus":1,"subsequ":2,"less":1,"end":4,"argument":1,"element":6,"except":1,"index":14,"larger":1,"subpath":1,"paramet":1,"number":2,"equal":1,"illeg":1,"farthest":1,"begin":6,"nameel":2,"orequ":1,"negat":1,"elementsthat":1,"first":1},"maxFreq":14,"totalTerms":77},"loc":0}