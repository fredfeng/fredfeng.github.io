{"id":14999,"className":"java.nio.file.FileSystems","methodName":"getFileSystem","signature":"\u003cjava.nio.file.FileSystems: java.nio.file.FileSystem getFileSystem(java.net.URI)\u003e","javadoc":"/** \n * Returns a reference to an existing  {@code FileSystem}. \u003cp\u003e This method iterates over the  {@link FileSystemProvider#installedProviders() installed} providers to locate the provider that is identified by the URI{@link URI#getScheme scheme} of the given URI. URI schemes are comparedwithout regard to case. The exact form of the URI is highly provider dependent. If found, the provider\u0027s  {@link FileSystemProvider#getFileSystem getFileSystem} method is invoked to obtain a reference to the {@code FileSystem}. \u003cp\u003e Once a file system created by this provider is  {@link FileSystem#close closed} it is provider-dependent if this method returns a reference tothe closed file system or throws  {@link FileSystemNotFoundException}. If the provider allows a new file system to be created with the same URI as a file system it previously created then this method throws the exception if invoked after the file system is closed (and before a new instance is created by the  {@link #newFileSystem newFileSystem} method).\u003cp\u003e If a security manager is installed then a provider implementation may require to check a permission before returning a reference to an existing file system. In the case of the  {@link FileSystems#getDefault default} file system, no permission check is required.\n * @throws IllegalArgumentException if the pre-conditions for the  {@code uri} parameter are not met\n * @throws FileSystemNotFoundException if the file system, identified by the URI, does not exist\n * @throws ProviderNotFoundException if a provider supporting the URI scheme is not installed\n * @throws SecurityException if a security manager is installed and it denies an unspecified permission\n */\n","tf":{"freq":{"unspecifi":1,"allow":1,"link":7,"comparedwithout":1,"identifi":2,"toth":1,"close":4,"met":1,"requir":2,"scheme":4,"given":1,"refer":4,"file":21,"exact":1,"permiss":3,"exist":3,"deni":1,"condit":1,"argument":1,"may":1,"except":6,"locat":1,"support":1,"check":2,"previous":1,"form":1,"creat":4,"manag":2,"depend":2,"invok":2,"instal":5,"paramet":1,"regard":1,"uri":1,"illeg":1,"provid":13,"instanc":1,"system":21,"obtain":1,"secur":3,"pre":1,"method":5,"high":1,"iter":1,"found":4},"maxFreq":21,"totalTerms":143},"loc":9}