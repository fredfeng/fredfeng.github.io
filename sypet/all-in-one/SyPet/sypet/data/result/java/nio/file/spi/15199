{"id":15199,"className":"java.nio.file.spi.FileSystemProvider","methodName":"createSymbolicLink","signature":"\u003cjava.nio.file.spi.FileSystemProvider: void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute\u003c?\u003e[])\u003e","javadoc":"/** \n * Creates a symbolic link to a target. This method works in exactly the manner specified by the  {@link Files#createSymbolicLink} method.\u003cp\u003e The default implementation of this method throws  {@code UnsupportedOperationException}.\n * @param link the path of the symbolic link to create\n * @param target the target of the symbolic link\n * @param attrs the array of attributes to set atomically when creating the symbolic link\n * @throws UnsupportedOperationException if the implementation does not support symbolic links or the array contains an attribute that cannot be set atomically when creating the symbolic link\n * @throws FileAlreadyExistsException if a file with the name already exists \u003ci\u003e(optional specific exception)\u003c/i\u003e\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, it denies  {@link LinkPermission}\u003ctt\u003e(\"symbolic\")\u003c/tt\u003e or its  {@link SecurityManager#checkWrite(String) checkWrite}method denies write access to the path of the symbolic link.\n */\n","tf":{"freq":{"atom":2,"unsupport":2,"link":14,"specifi":1,"attribut":2,"oper":2,"file":3,"exact":1,"name":1,"write":3,"permiss":1,"path":2,"exist":2,"deni":2,"option":1,"work":1,"except":6,"support":1,"check":2,"error":1,"symbol":10,"creat":6,"manag":2,"instal":1,"attr":1,"access":1,"provid":1,"specif":1,"secur":3,"string":1,"contain":1,"target":3,"manner":1,"method":4,"alreadi":2,"occur":1,"array":2},"maxFreq":14,"totalTerms":91},"loc":3}