{"id":15122,"className":"java.nio.file.Files","methodName":"newOutputStream","signature":"\u003cjava.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])\u003e","javadoc":"/** \n * Opens or creates a file, returning an output stream that may be used to write bytes to the file. The resulting stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Whether the returned stream is \u003ci\u003easynchronously closeable\u003c/i\u003e and/or \u003ci\u003einterruptible\u003c/i\u003e is highly file system provider specific and therefore not specified. \u003cp\u003e This method opens or creates a file in exactly the manner specified by the  {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}method with the exception that the  {@link StandardOpenOption#READ READ}option may not be present in the array of options. If no options are present then this method works as if the  {@link StandardOpenOption#CREATE CREATE},  {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and  {@link StandardOpenOption#WRITE WRITE} options are present. In otherwords, it opens the file for writing, creating the file if it doesn\u0027t exist, or initially truncating an existing  {@link #isRegularFile regular-file} to a size of {@code 0} if it exists.\u003cp\u003e \u003cb\u003eUsage Examples:\u003c/b\u003e \u003cpre\u003e Path path \u003d ... // truncate and overwrite an existing file, or create the file if // it doesn\u0027t initially exist OutputStream out \u003d Files.newOutputStream(path); // append to an existing file, fail if the file does not exist out \u003d Files.newOutputStream(path, APPEND); // append to an existing file, create file if it doesn\u0027t initially exist out \u003d Files.newOutputStream(path, CREATE, APPEND); // always create new file, failing if it already exists out \u003d Files.newOutputStream(path, CREATE_NEW); \u003c/pre\u003e\n * @param path the path to the file to open or create\n * @param options options specifying how the file is opened\n * @return  a new output stream\n * @throws IllegalArgumentException if  {@code options} contains an invalid combination of options\n * @throws UnsupportedOperationException if an unsupported option is specified\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to the file. The  {@link SecurityManager#checkDelete(String) checkDelete} method isinvoked to check delete access if the file is opened with the {@code DELETE_ON_CLOSE} option.\n */\n","tf":{"freq":{"unsupport":2,"closeabl":1,"whether":1,"otherword":1,"specifi":4,"buffer":1,"open":10,"invalid":1,"fail":2,"oper":1,"file":24,"thread":1,"exact":1,"combin":1,"option":14,"argument":1,"work":1,"append":2,"except":5,"multipl":1,"creat":7,"invok":1,"alway":1,"provid":2,"size":1,"present":3,"system":1,"contain":1,"will":2,"output":8,"array":1,"asynchron":1,"result":1,"stream":11,"overwrit":1,"delet":3,"concurr":1,"link":8,"use":1,"truncat":2,"therefor":1,"attribut":1,"write":5,"path":9,"initi":3,"exist":10,"safe":1,"may":2,"check":6,"error":1,"standard":4,"regular":2,"isinvok":1,"manag":3,"instal":1,"access":3,"illeg":1,"interrupt":1,"specif":1,"secur":4,"pre":2,"string":2,"exampl":1,"alreadi":1,"method":5,"manner":1,"high":1,"usag":1,"channel":2,"occur":1},"maxFreq":24,"totalTerms":209},"loc":3}