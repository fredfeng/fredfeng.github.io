{"id":15087,"className":"java.nio.file.Path","methodName":"normalize","signature":"\u003cjava.nio.file.Path: java.nio.file.Path normalize()\u003e","javadoc":"/** \n * Returns a path that is this path with redundant name elements eliminated. \u003cp\u003e The precise definition of this method is implementation dependent but in general it derives from this path, a path that does not contain \u003cem\u003eredundant\u003c/em\u003e name elements. In many file systems, the \" {@code .}\" and \" {@code ..}\" are special names used to indicate the current directory and parent directory. In such file systems all occurrences of \" {@code .}\" are considered redundant. If a \" {@code ..}\" is preceded by a non-\" {@code ..}\" name then both names are considered redundant (the process to identify such names is repeated until is it no longer applicable). \u003cp\u003e This method does not access the file system; the path may not locate a file that exists. Eliminating \" {@code ..}\" and a preceding name from a path may result in the path that locates a different file than the original path. This can arise when the preceding name is a symbolic link.\n * @return  the resulting path or this path if it does not containredundant name elements; an empty path is returned if this path does have a root component and all name elements are redundant\n * @see #getParent\n * @see #toRealPath\n */\n","tf":{"freq":{"result":2,"root":1,"deriv":1,"directori":2,"containredund":1,"link":1,"normal":1,"redund":5,"use":1,"identifi":1,"repeat":1,"applic":1,"consid":2,"occurr":1,"real":1,"indic":1,"file":5,"name":10,"precis":1,"path":13,"current":1,"longer":1,"exist":1,"aris":1,"element":4,"mani":1,"locat":2,"may":2,"symbol":1,"depend":1,"origin":1,"parent":2,"access":1,"general":1,"empti":1,"non":1,"elimin":2,"process":1,"differ":1,"preced":3,"system":3,"compon":1,"definit":1,"contain":1,"method":2,"special":1},"maxFreq":13,"totalTerms":90},"loc":0}