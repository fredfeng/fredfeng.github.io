{"id":15160,"className":"java.nio.file.Files","methodName":"isRegularFile","signature":"\u003cjava.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])\u003e","javadoc":"/** \n * Tests whether a file is a regular file with opaque content. \u003cp\u003e The  {@code options} array may be used to indicate how symbolic linksare handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option  {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is present then symbolic links are not followed.\u003cp\u003e Where is it required to distinguish an I/O exception from the case that the file is not a regular file then the file attributes can be read with the  {@link #readAttributes(Path,Class,LinkOption[]) readAttributes} method and the file type tested with the {@link BasicFileAttributes#isRegularFile} method.\n * @param path the path to the file\n * @param options options indicating how symbolic links are handled\n * @return  {@code true} if the file is a regular file; {@code false} ifthe file does not exist, is not a regular file, or it cannot be determined if the file is a regular file or not.\n * @throws SecurityException In the case of the default provider, and a security manager is installed, its  {@link SecurityManager#checkRead(String) checkRead}method denies read access to the file.\n */\n","tf":{"freq":{"fals":1,"test":2,"link":11,"use":1,"linksar":1,"type":1,"whether":1,"opaqu":1,"attribut":5,"requir":1,"indic":2,"basic":1,"file":19,"path":3,"read":7,"exist":1,"deni":1,"option":6,"follow":2,"may":1,"except":2,"check":2,"ifth":1,"symbol":5,"regular":7,"manag":2,"instal":1,"true":1,"access":1,"provid":1,"handl":2,"content":1,"present":1,"secur":3,"string":1,"determin":1,"target":1,"distinguish":1,"method":3,"array":1},"maxFreq":19,"totalTerms":106},"loc":7}