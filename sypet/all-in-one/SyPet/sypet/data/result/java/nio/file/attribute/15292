{"id":15292,"className":"java.nio.file.attribute.BasicFileAttributeView","methodName":"setTimes","signature":"\u003cjava.nio.file.attribute.BasicFileAttributeView: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)\u003e","javadoc":"/** \n * Updates any or all of the file\u0027s last modified time, last access time, and create time attributes. \u003cp\u003e This method updates the file\u0027s timestamp attributes. The values are converted to the epoch and precision supported by the file system. Converting from finer to coarser granularities result in precision loss. The behavior of this method when attempting to set a timestamp that is not supported or to a value that is outside the range supported by the underlying file store is not defined. It may or not fail by throwing an {@code IOException}. \u003cp\u003e If any of the  {@code lastModifiedTime},  {@code lastAccessTime}, or  {@code createTime} parameters has the value {@code null} then thecorresponding timestamp is not changed. An implementation may require to read the existing values of the file attributes when only some, but not all, of the timestamp attributes are updated. Consequently, this method may not be an atomic operation with respect to other file system operations. Reading and re-writing existing values may also result in precision loss. If all of the  {@code lastModifiedTime},  {@code lastAccessTime} and {@code createTime} parameters are {@code null} thenthis method has no effect. \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e Suppose we want to change a file\u0027s creation time. \u003cpre\u003e Path path \u003d ... FileTime time \u003d ... Files.getFileAttributeView(path, BasicFileAttributeView.class).setTimes(null, null, time); \u003c/pre\u003e\n * @param lastModifiedTime the new last modified time, or  {@code null} to not change thevalue\n * @param lastAccessTime the last access time, or  {@code null} to not change the value\n * @param createTime the file\u0027s create time, or  {@code null} to not change the value\n * @throws IOException if an I/O error occurs\n * @throws SecurityException In the case of the default provider, a security manager is installed, its   {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to the file\n * @see java.nio.file.Files#setLastModifiedTime\n */\n","tf":{"freq":{"atom":1,"last":11,"store":1,"consequ":1,"thenthi":1,"time":22,"requir":1,"fail":1,"basic":1,"oper":2,"file":15,"rang":1,"precis":3,"except":3,"support":3,"creat":5,"invok":1,"finer":1,"provid":1,"system":2,"updat":3,"outsid":1,"view":2,"attempt":1,"creation":1,"result":2,"defin":1,"loss":2,"behavior":1,"link":1,"convert":2,"timestamp":4,"attribut":6,"path":3,"coarser":1,"write":4,"read":2,"valu":7,"exist":2,"want":1,"granular":1,"may":4,"check":3,"error":1,"manag":2,"instal":1,"epoch":1,"paramet":2,"thecorrespond":1,"suppos":1,"access":6,"secur":3,"effect":1,"pre":2,"string":1,"modifi":6,"exampl":1,"nio":1,"java":1,"thevalu":1,"method":5,"chang":5,"usag":1,"also":1,"respect":1,"occur":1},"maxFreq":22,"totalTerms":178},"loc":0}