{"id":15135,"className":"java.nio.file.Files","methodName":"createTempDirectory","signature":"\u003cjava.nio.file.Files: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute\u003c?\u003e[])\u003e","javadoc":"/** \n * Creates a new directory in the specified directory, using the given prefix to generate its name.  The resulting  {@code Path} is associatedwith the same  {@code FileSystem} as the given directory.\u003cp\u003e The details as to how the name of the directory is constructed is implementation dependent and therefore not specified. Where possible the  {@code prefix} is used to construct candidate names.\u003cp\u003e As with the  {@code createTempFile} methods, this method is onlypart of a temporary-file facility. A  {@link Runtime#addShutdownHook shutdown-hook}, or the  {@link java.io.File#deleteOnExit} mechanism may beused to delete the directory automatically. \u003cp\u003e The  {@code attrs} parameter is optional {@link FileAttribute file-attributes} to set atomically when creating the directory. Eachattribute is identified by its  {@link FileAttribute#name name}. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.\n * @param dir the path to directory in which to create the directory\n * @param prefix the prefix string to be used in generating the directory\u0027s name; may be  {@code null}\n * @param attrs an optional list of file attributes to set atomically when creating the directory\n * @return  the path to the newly created directory that did not exist beforethis method was invoked\n * @throws IllegalArgumentException if the prefix cannot be used to generate a candidate directory name\n * @throws UnsupportedOperationException if the array contains an attribute that cannot be set atomically when creating the directory\n * @throws IOException if an I/O error occurs or  {@code dir} does not exist\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the  {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access when creating the directory.\n */\n","tf":{"freq":{"atom":3,"unsupport":1,"detail":1,"last":1,"possibl":1,"associatedwith":1,"specifi":2,"occurr":1,"given":2,"oper":1,"file":8,"option":2,"argument":1,"facil":1,"onlypart":1,"hook":2,"except":4,"ignor":1,"creat":9,"invok":2,"runtim":1,"beus":1,"candid":2,"attr":2,"eachattribut":1,"provid":1,"exit":1,"newli":1,"system":1,"contain":1,"prefix":5,"temp":2,"array":2,"result":1,"directori":15,"delet":2,"link":5,"one":1,"use":4,"identifi":1,"therefor":1,"add":1,"automat":1,"attribut":6,"dir":2,"name":8,"write":3,"path":3,"temporari":1,"exist":2,"shutdown":2,"may":2,"includ":1,"check":3,"error":1,"manag":2,"beforethi":1,"depend":1,"instal":1,"paramet":1,"list":1,"access":1,"illeg":1,"secur":3,"mechan":1,"string":2,"generat":3,"method":4,"java":1,"construct":2,"occur":1},"maxFreq":15,"totalTerms":158},"loc":4}