{"id":11375,"className":"java.io.RandomAccessFile","methodName":"RandomAccessFile","signature":"\u003cjava.io.RandomAccessFile: void RandomAccessFile(java.io.File,java.lang.String)\u003e","javadoc":"/** \n * Creates a random access file stream to read from, and optionally to write to, the file specified by the  {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.\u003ca name\u003d\"mode\"\u003e\u003cp\u003e The \u003ctt\u003emode\u003c/tt\u003e argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: \u003cblockquote\u003e\u003ctable summary\u003d\"Access mode permitted values and meanings\"\u003e \u003ctr\u003e\u003cth\u003e\u003cp align\u003d\"left\"\u003eValue\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp align\u003d\"left\"\u003eMeaning\u003c/p\u003e\u003c/th\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\"r\"\u003c/tt\u003e\u003c/td\u003e \u003ctd\u003e Open for reading only.  Invoking any of the \u003ctt\u003ewrite\u003c/tt\u003e methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. \u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\"rw\"\u003c/tt\u003e\u003c/td\u003e \u003ctd\u003e Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. \u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\"rws\"\u003c/tt\u003e\u003c/td\u003e \u003ctd\u003e Open for reading and writing, as with \u003ctt\u003e\"rw\"\u003c/tt\u003e, and also require that every update to the file\u0027s content or metadata be written synchronously to the underlying storage device.  \u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\"rwd\"\u0026nbsp;\u0026nbsp;\u003c/tt\u003e\u003c/td\u003e \u003ctd\u003e Open for reading and writing, as with \u003ctt\u003e\"rw\"\u003c/tt\u003e, and also require that every update to the file\u0027s content be written synchronously to the underlying storage device. \u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e\u003c/blockquote\u003e The \u003ctt\u003e\"rws\"\u003c/tt\u003e and \u003ctt\u003e\"rwd\"\u003c/tt\u003e modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of\u003ctt\u003etrue\u003c/tt\u003e and \u003ctt\u003efalse\u003c/tt\u003e, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. \u003cp\u003e The \u003ctt\u003e\"rwd\"\u003c/tt\u003e mode can be used to reduce the number of I/O operations performed.  Using \u003ctt\u003e\"rwd\"\u003c/tt\u003e only requires updates to the file\u0027s content to be written to storage; using \u003ctt\u003e\"rws\"\u003c/tt\u003e requires updates to both the file\u0027s content and its metadata to be written, which generally requires at least one more low-level I/O operation. \u003cp\u003e If there is a security manager, its \u003ccode\u003echeckRead\u003c/code\u003e method is called with the pathname of the \u003ccode\u003efile\u003c/code\u003e argument as its argument to see if read access to the file is allowed.  If the mode allows writing, the security manager\u0027s \u003ccode\u003echeckWrite\u003c/code\u003e method is also called with the path argument to see if write access to the file is allowed.\n * @param file   the file object\n * @param mode   the access mode, as described\u003ca href\u003d\"#mode\"\u003eabove\u003c/a\u003e\n * @exception IllegalArgumentException  if the mode argument is not equalto one of \u003ctt\u003e\"r\"\u003c/tt\u003e, \u003ctt\u003e\"rw\"\u003c/tt\u003e, \u003ctt\u003e\"rws\"\u003c/tt\u003e, or \u003ctt\u003e\"rwd\"\u003c/tt\u003e\n * @exception FileNotFoundException if the mode is \u003ctt\u003e\"r\"\u003c/tt\u003e but the given file object does not denote an existing regular file, or if the mode begins with \u003ctt\u003e\"rw\"\u003c/tt\u003e but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file\n * @exception SecurityException         if a security manager exists and its\u003ccode\u003echeckRead\u003c/code\u003e method denies read access to the file or the mode is \"rw\" and the security manager\u0027s \u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file\n * @see java.lang.SecurityManager#checkRead(java.lang.String)\n * @see java.lang.SecurityManager#checkWrite(java.lang.String)\n * @see java.nio.channels.FileChannel#force(boolean)\n * @revised 1.4\n * @spec JSR-51\n */\n","tf":{"freq":{"rws":4,"specifi":2,"open":6,"given":2,"oper":3,"file":32,"blockquot":2,"event":1,"effici":1,"href":1,"deni":2,"option":1,"nbsp":2,"invok":1,"alway":1,"random":2,"describ":1,"writabl":1,"number":1,"like":1,"invoc":2,"content":4,"system":1,"summari":1,"will":3,"low":1,"critic":1,"spec":1,"stream":1,"descriptor":1,"link":5,"denot":2,"made":3,"use":4,"therefor":1,"mode":14,"ensur":1,"written":5,"write":11,"left":2,"forc":3,"repres":1,"true":1,"access":9,"revis":1,"tabl":2,"string":2,"alreadi":1,"method":7,"rwd":5,"respect":1,"fals":1,"least":1,"permit":2,"perform":1,"requir":5,"level":1,"everi":3,"crash":1,"metadata":2,"argument":8,"work":1,"thrown":1,"except":8,"pathnam":1,"creat":5,"align":2,"much":1,"inform":1,"appli":1,"updat":4,"often":1,"attempt":1,"result":1,"call":2,"lost":1,"connect":1,"allow":3,"one":2,"object":5,"lang":4,"name":2,"ofth":1,"path":1,"read":10,"mean":3,"valu":3,"exist":4,"top":4,"resid":2,"error":1,"check":6,"regular":3,"guarante":2,"manag":6,"storag":4,"illeg":1,"general":1,"begin":1,"pass":1,"caus":1,"secur":7,"equalto":1,"java":8,"nio":3,"devic":5,"local":2,"chang":1,"reduc":1,"valign":4,"also":3,"channel":6,"occur":1,"found":1},"maxFreq":32,"totalTerms":335},"loc":36}