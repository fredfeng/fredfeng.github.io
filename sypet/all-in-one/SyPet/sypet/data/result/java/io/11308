{"id":11308,"className":"java.io.InputStream","methodName":"reset","signature":"\u003cjava.io.InputStream: void reset()\u003e","javadoc":"/** \n * Repositions this stream to the position at the time the \u003ccode\u003emark\u003c/code\u003e method was last called on this input stream. \u003cp\u003e The general contract of \u003ccode\u003ereset\u003c/code\u003e is: \u003cp\u003e\u003cul\u003e \u003cli\u003e If the method \u003ccode\u003emarkSupported\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e, then: \u003cul\u003e\u003cli\u003e If the method \u003ccode\u003emark\u003c/code\u003e has not been called since the stream was created, or the number of bytes read from the stream since \u003ccode\u003emark\u003c/code\u003e was last called is larger than the argument to \u003ccode\u003emark\u003c/code\u003e at that last call, then an \u003ccode\u003eIOException\u003c/code\u003e might be thrown. \u003cli\u003e If such an \u003ccode\u003eIOException\u003c/code\u003e is not thrown, then the stream is reset to a state such that all the bytes read since the most recent call to \u003ccode\u003emark\u003c/code\u003e (or since the start of the file, if \u003ccode\u003emark\u003c/code\u003e has not been called) will be resupplied to subsequent callers of the \u003ccode\u003eread\u003c/code\u003e method, followed by any bytes that otherwise would have been the next input data as of the time of the call to \u003ccode\u003ereset\u003c/code\u003e. \u003c/ul\u003e \u003cli\u003e If the method \u003ccode\u003emarkSupported\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, then: \u003cul\u003e\u003cli\u003e The call to \u003ccode\u003ereset\u003c/code\u003e may throw an \u003ccode\u003eIOException\u003c/code\u003e. \u003cli\u003e If an \u003ccode\u003eIOException\u003c/code\u003e is not thrown, then the stream is reset to a fixed state that depends on the particular type of the input stream and how it was created. The bytes that will be supplied to subsequent callers of the \u003ccode\u003eread\u003c/code\u003e method depend on the particular type of the input stream. \u003c/ul\u003e\u003c/ul\u003e \u003cp\u003eThe method \u003ccode\u003ereset\u003c/code\u003e for class \u003ccode\u003eInputStream\u003c/code\u003e does nothing except throw an \u003ccode\u003eIOException\u003c/code\u003e.\n * @exception IOException  if this stream has not been marked or if themark has been invalidated.\n * @see java.io.InputStream#mark(int)\n * @see java.io.IOException\n */\n","tf":{"freq":{"fals":1,"otherwis":1,"caller":2,"call":8,"might":1,"stream":11,"last":3,"next":1,"data":1,"state":2,"particular":2,"type":2,"recent":1,"time":2,"invalid":1,"fix":1,"file":1,"noth":1,"reset":7,"read":4,"subsequ":2,"follow":1,"reposit":1,"argument":1,"may":1,"except":9,"thrown":3,"support":2,"contract":1,"creat":2,"depend":2,"larger":1,"true":1,"suppli":1,"mark":10,"number":1,"general":1,"input":6,"themark":1,"start":1,"will":2,"java":2,"method":7,"posit":1,"resuppli":1},"maxFreq":11,"totalTerms":114},"loc":3}