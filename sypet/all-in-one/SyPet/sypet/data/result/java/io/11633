{"id":11633,"className":"java.io.PipedWriter","methodName":"write","signature":"\u003cjava.io.PipedWriter: void write(char[],int,int)\u003e","javadoc":"/** \n * Writes \u003ccode\u003elen\u003c/code\u003e characters from the specified character array starting at offset \u003ccode\u003eoff\u003c/code\u003e to this piped output stream. This method blocks until all the characters are written to the output stream. If a thread was reading data characters from the connected piped input stream, but the thread is no longer alive, then an \u003ccode\u003eIOException\u003c/code\u003e is thrown.\n * @param cbuf  the data.\n * @param off   the start offset in the data.\n * @param len   the number of characters to write.\n * @exception IOException  if the pipe is\u003ca href\u003dPipedOutputStream.html#BROKEN\u003e \u003ccode\u003ebroken\u003c/code\u003e\u003c/a\u003e, {@link #connect(java.io.PipedReader) unconnected}, closed or an I/O error occurs.\n */\n","tf":{"freq":{"unconnect":1,"stream":4,"connect":2,"link":1,"data":3,"block":1,"pipe":5,"close":1,"specifi":1,"written":1,"thread":2,"write":3,"read":1,"longer":1,"offset":2,"href":1,"except":3,"thrown":1,"error":1,"charact":5,"number":1,"len":2,"broken":1,"input":1,"reader":1,"cbuf":1,"start":2,"aliv":1,"java":1,"html":1,"method":1,"output":3,"occur":1,"array":1},"maxFreq":5,"totalTerms":58},"loc":8}