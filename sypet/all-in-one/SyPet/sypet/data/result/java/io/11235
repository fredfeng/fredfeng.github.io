{"id":11235,"className":"java.io.FilterOutputStream","methodName":"write","signature":"\u003cjava.io.FilterOutputStream: void write(byte[],int,int)\u003e","javadoc":"/** \n * Writes \u003ccode\u003elen\u003c/code\u003e bytes from the specified \u003ccode\u003ebyte\u003c/code\u003e array starting at offset \u003ccode\u003eoff\u003c/code\u003e to this output stream. \u003cp\u003e The \u003ccode\u003ewrite\u003c/code\u003e method of \u003ccode\u003eFilterOutputStream\u003c/code\u003e calls the \u003ccode\u003ewrite\u003c/code\u003e method of one argument on each \u003ccode\u003ebyte\u003c/code\u003e to output. \u003cp\u003e Note that this method does not call the \u003ccode\u003ewrite\u003c/code\u003e method of its underlying input stream with the same arguments. Subclasses of \u003ccode\u003eFilterOutputStream\u003c/code\u003e should provide a more efficient implementation of this method.\n * @param b     the data.\n * @param off   the start offset in the data.\n * @param len   the number of bytes to write.\n * @exception IOException  if an I/O error occurs.\n * @see java.io.FilterOutputStream#write(int)\n */\n","tf":{"freq":{"argument":2,"call":2,"except":2,"stream":5,"error":1,"one":1,"data":2,"number":1,"len":2,"provid":1,"specifi":1,"input":1,"start":2,"subclass":1,"write":7,"java":1,"method":5,"effici":1,"offset":2,"output":5,"note":1,"filter":3,"occur":1,"array":1},"maxFreq":7,"totalTerms":51},"loc":8}