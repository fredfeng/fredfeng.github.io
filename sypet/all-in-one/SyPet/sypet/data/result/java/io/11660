{"id":11660,"className":"java.io.File","methodName":"File","signature":"\u003cjava.io.File: void File(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Creates a new \u003ccode\u003eFile\u003c/code\u003e instance from a parent pathname string and a child pathname string. \u003cp\u003e If \u003ccode\u003eparent\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e then the new \u003ccode\u003eFile\u003c/code\u003e instance is created as if by invoking the single-argument \u003ccode\u003eFile\u003c/code\u003e constructor on the given \u003ccode\u003echild\u003c/code\u003e pathname string. \u003cp\u003e Otherwise the \u003ccode\u003eparent\u003c/code\u003e pathname string is taken to denote a directory, and the \u003ccode\u003echild\u003c/code\u003e pathname string is taken to denote either a directory or a file.  If the \u003ccode\u003echild\u003c/code\u003e pathname string is absolute then it is converted into a relative pathname in a system-dependent way.  If \u003ccode\u003eparent\u003c/code\u003e is the empty string then the new \u003ccode\u003eFile\u003c/code\u003e instance is created by converting \u003ccode\u003echild\u003c/code\u003e into an abstract pathname and resolving the result against a system-dependent default directory.  Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent.\n * @param parent  The parent pathname string\n * @param child   The child pathname string\n * @throws NullPointerException If \u003ccode\u003echild\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"otherwis":2,"result":1,"singl":1,"directori":3,"denot":2,"convert":3,"way":1,"child":9,"given":1,"file":6,"relat":1,"taken":2,"constructor":1,"argument":1,"except":1,"pathnam":13,"creat":3,"invok":1,"depend":2,"resolv":2,"parent":7,"absolut":1,"instanc":3,"empti":1,"either":1,"system":2,"string":10,"pointer":1},"maxFreq":13,"totalTerms":82},"loc":17}