{"id":11561,"className":"java.io.LineNumberInputStream","methodName":"reset","signature":"\u003cjava.io.LineNumberInputStream: void reset()\u003e","javadoc":"/** \n * Repositions this stream to the position at the time the \u003ccode\u003emark\u003c/code\u003e method was last called on this input stream. \u003cp\u003e The \u003ccode\u003ereset\u003c/code\u003e method of \u003ccode\u003eLineNumberInputStream\u003c/code\u003e resets the line number to be the line number at the time the \u003ccode\u003emark\u003c/code\u003e method was called, and then calls the \u003ccode\u003ereset\u003c/code\u003e method of the underlying input stream. \u003cp\u003e Stream marks are intended to be used in situations where you need to read ahead a little to see what\u0027s in the stream. Often this is most easily done by invoking some general parser. If the stream is of the type handled by the parser, it just chugs along happily. If the stream is not of that type, the parser should toss an exception when it fails, which, if it happens within readlimit bytes, allows the outer code to reset the stream and try another parser.\n * @exception IOException  if an I/O error occurs.\n * @see java.io.FilterInputStream#in\n * @see java.io.LineNumberInputStream#mark(int)\n */\n","tf":{"freq":{"need":1,"littl":1,"call":3,"stream":11,"allow":1,"last":1,"chug":1,"line":4,"use":1,"anoth":1,"type":2,"situat":1,"time":2,"fail":1,"easili":1,"reset":5,"read":1,"along":1,"happen":1,"happili":1,"just":1,"reposit":1,"except":3,"error":1,"invok":1,"ahead":1,"done":1,"number":4,"mark":4,"general":1,"handl":1,"readlimit":1,"input":5,"outer":1,"often":1,"java":2,"method":4,"within":1,"toss":1,"intend":1,"parser":4,"posit":1,"filter":1,"occur":1},"maxFreq":11,"totalTerms":84},"loc":5}