{"id":11556,"className":"java.io.LineNumberInputStream","methodName":"skip","signature":"\u003cjava.io.LineNumberInputStream: long skip(long)\u003e","javadoc":"/** \n * Skips over and discards \u003ccode\u003en\u003c/code\u003e bytes of data from this input stream. The \u003ccode\u003eskip\u003c/code\u003e method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly \u003ccode\u003e0\u003c/code\u003e. The actual number of bytes skipped is returned.  If \u003ccode\u003en\u003c/code\u003e is negative, no bytes are skipped. \u003cp\u003e The \u003ccode\u003eskip\u003c/code\u003e method of \u003ccode\u003eLineNumberInputStream\u003c/code\u003e creates a byte array and then repeatedly reads into it until \u003ccode\u003en\u003c/code\u003e bytes have been read or the end of the stream has been reached.\n * @param n   the number of bytes to be skipped.\n * @return     the actual number of bytes skipped.\n * @exception IOException  if an I/O error occurs.\n * @see java.io.FilterInputStream#in\n */\n","tf":{"freq":{"stream":4,"reason":1,"data":1,"possibl":1,"line":1,"repeat":1,"discard":1,"skip":9,"smaller":1,"reach":1,"varieti":1,"read":2,"end":2,"may":1,"except":2,"error":1,"creat":1,"number":5,"input":3,"actual":2,"java":1,"method":2,"negat":1,"filter":1,"array":1,"occur":1},"maxFreq":9,"totalTerms":48},"loc":21}