{"id":11256,"className":"java.io.FileInputStream","methodName":"skip","signature":"\u003cjava.io.FileInputStream: long skip(long)\u003e","javadoc":"/** \n * Skips over and discards \u003ccode\u003en\u003c/code\u003e bytes of data from the input stream. \u003cp\u003eThe \u003ccode\u003eskip\u003c/code\u003e method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly \u003ccode\u003e0\u003c/code\u003e. If \u003ccode\u003en\u003c/code\u003e is negative, an \u003ccode\u003eIOException\u003c/code\u003e is thrown, even though the \u003ccode\u003eskip\u003c/code\u003e method of the  {@link InputStream} superclass does nothing in this case.The actual number of bytes skipped is returned. \u003cp\u003eThis method may skip more bytes than are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file.\n * @param n   the number of bytes to be skipped.\n * @return     the actual number of bytes skipped.\n * @exception IOException  if n is negative, if the stream does notsupport seek, or if an I/O error occurs.\n */\n","tf":{"freq":{"attempt":1,"result":1,"stream":4,"reason":1,"link":1,"data":1,"possibl":1,"discard":1,"skip":11,"smaller":1,"though":1,"beyond":1,"indic":1,"file":3,"read":1,"varieti":1,"noth":1,"end":3,"may":3,"except":4,"thrown":1,"includ":1,"error":1,"back":2,"produc":1,"number":6,"past":1,"seek":1,"notsupport":1,"input":2,"superclass":1,"remain":1,"will":1,"actual":2,"method":3,"negat":2,"even":1,"occur":1},"maxFreq":11,"totalTerms":71},"loc":0}