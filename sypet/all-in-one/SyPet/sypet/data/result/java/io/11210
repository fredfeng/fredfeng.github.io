{"id":11210,"className":"java.io.DataOutput","methodName":"write","signature":"\u003cjava.io.DataOutput: void write(byte[],int,int)\u003e","javadoc":"/** \n * Writes \u003ccode\u003elen\u003c/code\u003e bytes from array \u003ccode\u003eb\u003c/code\u003e, in order,  to the output stream.  If \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown.  If \u003ccode\u003eoff\u003c/code\u003e is negative, or \u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003eoff+len\u003c/code\u003e is greater than the length of the array \u003ccode\u003eb\u003c/code\u003e, then an \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e is thrown.  If \u003ccode\u003elen\u003c/code\u003e is zero, then no bytes are written. Otherwise, the byte \u003ccode\u003eb[off]\u003c/code\u003e is written first, then \u003ccode\u003eb[off+1]\u003c/code\u003e, and so on; the last byte written is \u003ccode\u003eb[off+len-1]\u003c/code\u003e.\n * @param b     the data.\n * @param off   the start offset in the data.\n * @param len   the number of bytes to write.\n * @throws IOException  if an I/O error occurs.\n */\n","tf":{"freq":{"otherwis":1,"stream":1,"greater":1,"last":1,"data":2,"zero":1,"order":1,"written":3,"length":1,"write":3,"offset":1,"thrown":2,"except":3,"index":1,"error":1,"number":1,"len":6,"start":1,"pointer":1,"negat":2,"output":1,"first":1,"bound":1,"occur":1,"array":2},"maxFreq":6,"totalTerms":40},"loc":0}