{"id":11773,"className":"java.io.StreamTokenizer","methodName":"eolIsSignificant","signature":"\u003cjava.io.StreamTokenizer: void eolIsSignificant(boolean)\u003e","javadoc":"/** \n * Determines whether or not ends of line are treated as tokens. If the flag argument is true, this tokenizer treats end of lines as tokens; the \u003ccode\u003enextToken\u003c/code\u003e method returns \u003ccode\u003eTT_EOL\u003c/code\u003e and also sets the \u003ccode\u003ettype\u003c/code\u003e field to this value when an end of line is read. \u003cp\u003e A line is a sequence of characters ending with either a carriage-return character (\u003ccode\u003e\u0027\u0026#92;r\u0027\u003c/code\u003e) or a newline character (\u003ccode\u003e\u0027\u0026#92;n\u0027\u003c/code\u003e). In addition, a carriage-return character followed immediately by a newline character is treated as a single end-of-line token. \u003cp\u003e If the \u003ccode\u003eflag\u003c/code\u003e is false, end-of-line characters are treated as white space and serve only to separate tokens.\n * @param flag   \u003ccode\u003etrue\u003c/code\u003e indicates that end-of-line charactersare separate tokens; \u003ccode\u003efalse\u003c/code\u003e indicates that end-of-line characters are white space.\n * @see java.io.StreamTokenizer#nextToken()\n * @see java.io.StreamTokenizer#ttype\n * @see java.io.StreamTokenizer#TT_EOL\n */\n","tf":{"freq":{"fals":2,"stream":3,"singl":1,"next":2,"line":8,"newlin":2,"space":2,"whether":1,"indic":2,"token":11,"sequenc":1,"charactersar":1,"eol":1,"read":1,"carriag":2,"serv":1,"immedi":1,"valu":1,"end":8,"follow":1,"argument":1,"addit":1,"charact":7,"white":2,"signific":1,"true":2,"ttype":2,"field":1,"either":1,"flag":3,"separ":2,"determin":1,"java":3,"method":1,"also":1,"treat":4},"maxFreq":11,"totalTerms":85},"loc":3}