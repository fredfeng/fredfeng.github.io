{"id":11810,"className":"java.io.ObjectOutputStream","methodName":"writeUnshared","signature":"\u003cjava.io.ObjectOutputStream: void writeUnshared(java.lang.Object)\u003e","javadoc":"/** \n * Writes an \"unshared\" object to the ObjectOutputStream.  This method is identical to writeObject, except that it always writes the given object as a new, unique object in the stream (as opposed to a back-reference pointing to a previously serialized instance).  Specifically: \u003cul\u003e \u003cli\u003eAn object written via writeUnshared is always serialized in the same manner as a newly appearing object (an object that has not been written to the stream yet), regardless of whether or not the object has been written previously. \u003cli\u003eIf writeObject is used to write an object that has been previously written with writeUnshared, the previous writeUnshared operation is treated as if it were a write of a separate object.  In other words, ObjectOutputStream will never generate back-references to object data written by calls to writeUnshared. \u003c/ul\u003e While writing an object via writeUnshared does not in itself guarantee a unique reference to the object when it is deserialized, it allows a single object to be defined multiple times in a stream, so that multiple calls to readUnshared by the receiver will not conflict.  Note that the rules described above only apply to the base-level object written with writeUnshared, and not to any transitively referenced sub-objects in the object graph to be serialized. \u003cp\u003eObjectOutputStream subclasses which override this method can only be constructed in security contexts possessing the \"enableSubclassImplementation\" SerializablePermission; any attempt to instantiate such a subclass without this permission will cause a SecurityException to be thrown.\n * @param obj object to write to stream\n * @throws NotSerializableException if an object in the graph to beserialized does not implement the Serializable interface\n * @throws InvalidClassException if a problem exists with the class of anobject to be serialized\n * @throws IOException if an I/O error occurs during serialization\n * @since 1.4\n */\n","tf":{"freq":{"appear":1,"via":2,"singl":1,"instanti":1,"transit":1,"whether":1,"referenc":1,"uniqu":2,"time":1,"level":1,"invalid":1,"given":1,"refer":3,"oper":1,"permiss":2,"thrown":1,"except":5,"multipl":2,"enabl":1,"alway":2,"describ":1,"beseri":1,"without":1,"instanc":1,"newli":1,"appli":1,"separ":1,"subclass":3,"will":3,"word":1,"conflict":1,"output":3,"treat":1,"attempt":1,"call":2,"defin":1,"sub":1,"stream":7,"allow":1,"serializ":3,"data":1,"use":1,"object":23,"graph":2,"ident":1,"rule":1,"written":6,"possess":1,"write":15,"read":1,"exist":1,"note":1,"regardless":1,"error":1,"previous":4,"guarante":1,"anobject":1,"back":2,"problem":1,"receiv":1,"point":1,"specif":1,"oppos":1,"never":1,"caus":1,"secur":2,"generat":1,"context":1,"base":1,"obj":1,"manner":1,"method":2,"construct":1,"serial":5,"deseri":1,"unshar":9,"occur":1,"yet":1},"maxFreq":23,"totalTerms":164},"loc":10}