{"id":11554,"className":"java.io.LineNumberInputStream","methodName":"read","signature":"\u003cjava.io.LineNumberInputStream: int read()\u003e","javadoc":"/** \n * Reads the next byte of data from this input stream. The value byte is returned as an \u003ccode\u003eint\u003c/code\u003e in the range \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e255\u003c/code\u003e. If no byte is available because the end of the stream has been reached, the value \u003ccode\u003e-1\u003c/code\u003e is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. \u003cp\u003e The \u003ccode\u003eread\u003c/code\u003e method of \u003ccode\u003eLineNumberInputStream\u003c/code\u003e calls the \u003ccode\u003eread\u003c/code\u003e method of the underlying input stream. It checks for carriage returns and newline characters in the input, and modifies the current line number as appropriate. A carriage-return character or a carriage return followed by a newline character are both converted into a single newline character.\n * @return     the next byte of data, or \u003ccode\u003e-1\u003c/code\u003e if the end of thisstream is reached.\n * @exception IOException  if an I/O error occurs.\n * @see java.io.FilterInputStream#in\n * @see java.io.LineNumberInputStream#getLineNumber()\n */\n","tf":{"freq":{"call":1,"stream":7,"singl":1,"next":2,"data":3,"convert":1,"block":1,"line":4,"newlin":3,"reach":2,"rang":1,"current":1,"read":4,"carriag":3,"valu":2,"end":3,"follow":1,"detect":1,"except":3,"thrown":1,"error":1,"check":1,"charact":4,"avail":2,"number":4,"input":7,"appropri":1,"modifi":1,"java":2,"thisstream":1,"method":3,"filter":1,"occur":1},"maxFreq":7,"totalTerms":74},"loc":21}