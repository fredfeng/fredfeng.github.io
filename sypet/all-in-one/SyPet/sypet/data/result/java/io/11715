{"id":11715,"className":"java.io.FileOutputStream","methodName":"FileOutputStream","signature":"\u003cjava.io.FileOutputStream: void FileOutputStream(java.io.File)\u003e","javadoc":"/** \n * Creates a file output stream to write to the file represented by the specified \u003ccode\u003eFile\u003c/code\u003e object. A new \u003ccode\u003eFileDescriptor\u003c/code\u003e object is created to represent this file connection. \u003cp\u003e First, if there is a security manager, its \u003ccode\u003echeckWrite\u003c/code\u003e method is called with the path represented by the \u003ccode\u003efile\u003c/code\u003e argument as its argument. \u003cp\u003e If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.\n * @param file               the file to be opened for writing.\n * @exception FileNotFoundException  if the file exists but is a directoryrather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file.\n * @see java.io.File#getPath()\n * @see java.lang.SecurityException\n * @see java.lang.SecurityManager#checkWrite(java.lang.String)\n */\n","tf":{"freq":{"call":1,"stream":2,"connect":1,"descriptor":1,"directori":1,"reason":2,"object":2,"lang":3,"specifi":1,"open":3,"file":17,"directoryrath":1,"write":6,"path":2,"rather":1,"exist":5,"deni":1,"argument":2,"thrown":1,"except":6,"check":3,"repres":3,"creat":4,"regular":2,"manag":3,"access":1,"secur":5,"string":1,"java":4,"method":2,"output":2,"first":1,"found":2},"maxFreq":17,"totalTerms":92},"loc":3}