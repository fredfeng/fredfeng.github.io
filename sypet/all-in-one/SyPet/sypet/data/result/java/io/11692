{"id":11692,"className":"java.io.File","methodName":"renameTo","signature":"\u003cjava.io.File: boolean renameTo(java.io.File)\u003e","javadoc":"/** \n * Renames the file denoted by this abstract pathname. \u003cp\u003e Many aspects of the behavior of this method are inherently platform-dependent: The rename operation might not be able to move a file from one filesystem to another, it might not be atomic, and it might not succeed if a file with the destination abstract pathname already exists.  The return value should always be checked to make sure that the rename operation was successful. \u003cp\u003e Note that the  {@link java.nio.file.Files} class defines the {@link java.nio.file.Files#move move} method to move or rename a file in aplatform independent manner.\n * @param dest  The new abstract pathname for the named file\n * @return  \u003ccode\u003etrue\u003c/code\u003e if and only if the renaming succeeded;\u003ccode\u003efalse\u003c/code\u003e otherwise\n * @throws SecurityException If a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkWrite(java.lang.String)}\u003c/code\u003e method denies write access to either the old or new pathnames\n * @throws NullPointerException If parameter \u003ccode\u003edest\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"fals":1,"atom":1,"old":1,"renam":6,"abl":1,"independ":1,"oper":2,"file":9,"deni":1,"move":4,"sure":1,"mani":1,"platform":1,"pathnam":4,"except":2,"succeed":2,"alway":1,"aspect":1,"pointer":1,"aplatform":1,"make":1,"otherwis":1,"might":3,"defin":1,"behavior":1,"one":1,"link":3,"denot":1,"anoth":1,"lang":2,"name":1,"write":2,"valu":1,"exist":2,"note":1,"check":2,"depend":1,"manag":2,"paramet":1,"true":1,"access":1,"inher":1,"either":1,"dest":2,"secur":3,"string":1,"alreadi":1,"method":3,"java":4,"nio":2,"manner":1,"success":1,"filesystem":1,"destin":1},"maxFreq":9,"totalTerms":94},"loc":8}