{"id":11257,"className":"java.io.FileInputStream","methodName":"available","signature":"\u003cjava.io.FileInputStream: int available()\u003e","javadoc":"/** \n * Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread.  A single read or skip of this many bytes will not block, but may read or skip fewer bytes. \u003cp\u003e In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks.\n * @return     an estimate of the number of remaining bytes that can be read(or skipped over) from this input stream without blocking.\n * @exception IOException  if this file input stream has been closed by calling{@code close} or an I/O error occurs.\n */\n","tf":{"freq":{"call":1,"might":1,"stream":4,"appear":1,"singl":1,"next":2,"block":5,"anoth":1,"skip":5,"network":1,"close":2,"estim":2,"file":2,"thread":2,"read":6,"slow":2,"mani":1,"except":2,"may":2,"error":1,"number":2,"avail":1,"without":2,"invoc":2,"non":1,"input":4,"remain":2,"larg":1,"exampl":1,"will":1,"fewer":1,"method":1,"mere":1,"occur":1},"maxFreq":6,"totalTerms":65},"loc":0}