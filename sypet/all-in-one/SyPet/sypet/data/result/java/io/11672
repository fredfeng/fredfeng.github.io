{"id":11672,"className":"java.io.File","methodName":"toURL","signature":"\u003cjava.io.File: java.net.URL toURL()\u003e","javadoc":"/** \n * Converts this abstract pathname into a \u003ccode\u003efile:\u003c/code\u003e URL.  The exact form of the URL is system-dependent.  If it can be determined that the file denoted by this abstract pathname is a directory, then the resulting URL will end with a slash.\n * @return  A URL object representing the equivalent file URL\n * @throws MalformedURLException If the path cannot be parsed as a URL\n * @see #toURI()\n * @see java.net.URI\n * @see java.net.URI#toURL()\n * @see java.net.URL\n * @since   1.2\n * @deprecated This method does not automatically escape characters thatare illegal in URLs.  It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI, via the {@link #toURI() toURI} method, and then converting the URI into a URLvia the  {@link java.net.URI#toURL() URI.toURL} method.\n */\n","tf":{"freq":{"result":1,"deprec":1,"via":1,"directori":1,"link":2,"denot":1,"lexcept":1,"convert":4,"object":1,"net":4,"recommend":1,"automat":1,"escap":1,"thatar":1,"equival":1,"file":3,"exact":1,"path":1,"end":1,"pathnam":3,"slash":1,"form":1,"charact":1,"repres":1,"depend":1,"illeg":1,"system":1,"malform":1,"determin":1,"will":1,"lvia":1,"method":3,"java":4,"first":1,"pars":1},"maxFreq":4,"totalTerms":51},"loc":3}