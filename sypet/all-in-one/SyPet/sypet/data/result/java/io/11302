{"id":11302,"className":"java.io.InputStream","methodName":"read","signature":"\u003cjava.io.InputStream: int read(byte[])\u003e","javadoc":"/** \n * Reads some number of bytes from the input stream and stores them into the buffer array \u003ccode\u003eb\u003c/code\u003e. The number of bytes actually read is returned as an integer.  This method blocks until input data is available, end of file is detected, or an exception is thrown. \u003cp\u003e If the length of \u003ccode\u003eb\u003c/code\u003e is zero, then no bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value \u003ccode\u003e-1\u003c/code\u003e is returned; otherwise, at least one byte is read and stored into \u003ccode\u003eb\u003c/code\u003e. \u003cp\u003e The first byte read is stored into element \u003ccode\u003eb[0]\u003c/code\u003e, the next one into \u003ccode\u003eb[1]\u003c/code\u003e, and so on. The number of bytes read is, at most, equal to the length of \u003ccode\u003eb\u003c/code\u003e. Let \u003ci\u003ek\u003c/i\u003e be the number of bytes actually read; these bytes will be stored in elements \u003ccode\u003eb[0]\u003c/code\u003e through \u003ccode\u003eb[\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e-1]\u003c/code\u003e, leaving elements \u003ccode\u003eb[\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e]\u003c/code\u003e through \u003ccode\u003eb[b.length-1]\u003c/code\u003e unaffected. \u003cp\u003e The \u003ccode\u003eread(b)\u003c/code\u003e method for class \u003ccode\u003eInputStream\u003c/code\u003e has the same effect as: \u003cpre\u003e\u003ccode\u003e read(b, 0, b.length) \u003c/code\u003e\u003c/pre\u003e\n * @param b   the buffer into which the data is read.\n * @return     the total number of bytes read into the buffer, or\u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of the stream has been reached.\n * @exception IOException  If the first byte cannot be read for any reasonother than the end of the file, if the input stream has been closed, or if some other I/O error occurs.\n * @exception NullPointerException  if \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see java.io.InputStream#read(byte[],int,int)\n */\n","tf":{"freq":{"total":1,"otherwis":2,"attempt":1,"stream":6,"store":4,"least":2,"next":1,"one":3,"data":3,"block":1,"zero":1,"close":1,"buffer":3,"reach":1,"file":3,"length":4,"read":15,"valu":1,"end":4,"element":3,"detect":1,"except":5,"thrown":1,"error":1,"unaffect":1,"equal":1,"number":5,"avail":2,"reasonoth":1,"input":5,"effect":1,"pre":2,"leav":1,"will":1,"pointer":1,"actual":2,"java":1,"method":2,"first":2,"integ":1,"occur":1,"array":1},"maxFreq":15,"totalTerms":99},"loc":3}