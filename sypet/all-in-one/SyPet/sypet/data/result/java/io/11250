{"id":11250,"className":"java.io.FileInputStream","methodName":"FileInputStream","signature":"\u003cjava.io.FileInputStream: void FileInputStream(java.lang.String)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eFileInputStream\u003c/code\u003e by opening a connection to an actual file, the file named by the path name \u003ccode\u003ename\u003c/code\u003e in the file system.  A new \u003ccode\u003eFileDescriptor\u003c/code\u003e object is created to represent this file connection. \u003cp\u003e First, if there is a security manager, its \u003ccode\u003echeckRead\u003c/code\u003e method is called with the \u003ccode\u003ename\u003c/code\u003e argument as its argument. \u003cp\u003e If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.\n * @param name   the system-dependent file name.\n * @exception FileNotFoundException  if the file does not exist,is a directory rather than a regular file, or for some other reason cannot be opened for reading.\n * @exception SecurityException      if a security manager exists and its\u003ccode\u003echeckRead\u003c/code\u003e method denies read access to the file.\n * @see java.lang.SecurityManager#checkRead(java.lang.String)\n */\n","tf":{"freq":{"call":1,"stream":2,"connect":2,"reason":2,"descriptor":1,"directori":2,"object":1,"lang":2,"open":3,"file":15,"name":7,"path":1,"read":6,"rather":2,"exist":3,"deni":1,"argument":2,"thrown":1,"except":5,"check":3,"regular":2,"creat":2,"repres":1,"depend":1,"manag":3,"access":1,"system":2,"input":2,"secur":4,"string":1,"actual":1,"java":2,"method":2,"first":1,"found":2},"maxFreq":15,"totalTerms":89},"loc":3}