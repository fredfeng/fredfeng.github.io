{"id":11693,"className":"java.io.File","methodName":"setLastModified","signature":"\u003cjava.io.File: boolean setLastModified(long)\u003e","javadoc":"/** \n * Sets the last-modified time of the file or directory named by this abstract pathname. \u003cp\u003e All platforms support file-modification times to the nearest second, but some provide more precision.  The argument will be truncated to fit the supported precision.  If the operation succeeds and no intervening operations on the file take place, then the next invocation of the \u003ccode\u003e {@link #lastModified}\u003c/code\u003e method will return the (possibly truncated) \u003ccode\u003etime\u003c/code\u003e argument that was passed to this method.\n * @param time  The new last-modified time, measured in milliseconds sincethe epoch (00:00:00 GMT, January 1, 1970)\n * @return \u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded;\u003ccode\u003efalse\u003c/code\u003e otherwise\n * @throws IllegalArgumentException  If the argument is negative\n * @throws SecurityException If a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkWrite(java.lang.String)}\u003c/code\u003e method denies write access to the named file\n * @since 1.2\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"second":1,"last":4,"directori":1,"link":2,"next":1,"possibl":1,"truncat":2,"lang":2,"fit":1,"time":5,"oper":3,"millisecond":1,"file":4,"name":2,"write":2,"precis":2,"interven":1,"place":1,"exist":1,"deni":1,"argument":4,"platform":1,"except":2,"pathnam":1,"support":2,"succeed":2,"check":1,"januari":1,"manag":2,"epoch":1,"true":1,"access":1,"illeg":1,"nearest":1,"provid":1,"invoc":1,"pass":1,"secur":3,"take":1,"string":1,"modifi":4,"will":2,"sinceth":1,"java":2,"negat":1,"measur":1,"method":3,"modif":1},"maxFreq":5,"totalTerms":84},"loc":8}