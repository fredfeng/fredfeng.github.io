{"id":11700,"className":"java.io.File","methodName":"setExecutable","signature":"\u003cjava.io.File: boolean setExecutable(boolean)\u003e","javadoc":"/** \n * A convenience method to set the owner\u0027s execute permission for this abstract pathname. \u003cp\u003eAn invocation of this method of the form \u003ctt\u003efile.setExcutable(arg)\u003c/tt\u003e behaves in exactly the same way as the invocation \u003cpre\u003e file.setExecutable(arg, true) \u003c/pre\u003e\n * @param executable If \u003ccode\u003etrue\u003c/code\u003e, sets the access permission to allow execute operations; if \u003ccode\u003efalse\u003c/code\u003e to disallow execute operations\n * @return   \u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded.  Theoperation will fail if the user does not have permission to change the access permissions of this abstract pathname.  If \u003ccode\u003eexecutable\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e and the underlying file system does not implement an excute permission, then the operation will fail.\n * @throws SecurityException If a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkWrite(java.lang.String)}\u003c/code\u003e method denies write access to the file\n * @since 1.6\n */\n","tf":{"freq":{"fals":2,"allow":1,"behav":1,"link":1,"way":1,"theoper":1,"lang":2,"arg":2,"disallow":1,"fail":2,"oper":4,"file":4,"exact":1,"write":2,"permiss":5,"exist":1,"deni":1,"conveni":1,"excut":2,"except":1,"pathnam":2,"succeed":1,"check":1,"form":1,"manag":2,"true":3,"access":3,"invoc":2,"system":1,"secur":3,"pre":2,"string":1,"owner":1,"will":2,"java":2,"method":3,"chang":1,"execut":7,"user":1},"maxFreq":7,"totalTerms":75},"loc":3}