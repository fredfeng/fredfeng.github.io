{"id":11624,"className":"java.io.PushbackInputStream","methodName":"skip","signature":"\u003cjava.io.PushbackInputStream: long skip(long)\u003e","javadoc":"/** \n * Skips over and discards \u003ccode\u003en\u003c/code\u003e bytes of data from this input stream. The \u003ccode\u003eskip\u003c/code\u003e method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly zero.  If \u003ccode\u003en\u003c/code\u003e is negative, no bytes are skipped. \u003cp\u003e The \u003ccode\u003eskip\u003c/code\u003e method of \u003ccode\u003ePushbackInputStream\u003c/code\u003e first skips over the bytes in the pushback buffer, if any.  It then calls the \u003ccode\u003eskip\u003c/code\u003e method of the underlying input stream if more bytes need to be skipped.  The actual number of bytes skipped is returned.\n * @param n  {@inheritDoc}\n * @return     {@inheritDoc}\n * @exception IOException  if the stream does not support seek,or the stream has been closed by invoking its  {@link #close()} method,or an I/O error occurs.\n * @see java.io.FilterInputStream#in\n * @see java.io.InputStream#skip(long n)\n * @since      1.2\n */\n","tf":{"freq":{"need":1,"call":1,"stream":7,"reason":1,"link":1,"data":1,"possibl":1,"discard":1,"skip":11,"zero":1,"smaller":1,"close":2,"buffer":1,"varieti":1,"end":1,"pushback":2,"may":1,"except":2,"support":1,"error":1,"invok":1,"number":2,"seek":1,"input":5,"actual":1,"java":2,"method":4,"negat":1,"first":1,"filter":1,"occur":1},"maxFreq":11,"totalTerms":59},"loc":19}