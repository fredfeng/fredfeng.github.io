{"id":11743,"className":"java.io.DataInputStream","methodName":"read","signature":"\u003cjava.io.DataInputStream: int read(byte[])\u003e","javadoc":"/** \n * Reads some number of bytes from the contained input stream and stores them into the buffer array \u003ccode\u003eb\u003c/code\u003e. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. \u003cp\u003eIf \u003ccode\u003eb\u003c/code\u003e is null, a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown. If the length of \u003ccode\u003eb\u003c/code\u003e is zero, then no bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value \u003ccode\u003e-1\u003c/code\u003e is returned; otherwise, at least one byte is read and stored into \u003ccode\u003eb\u003c/code\u003e. \u003cp\u003eThe first byte read is stored into element \u003ccode\u003eb[0]\u003c/code\u003e, the next one into \u003ccode\u003eb[1]\u003c/code\u003e, and so on. The number of bytes read is, at most, equal to the length of \u003ccode\u003eb\u003c/code\u003e. Let \u003ccode\u003ek\u003c/code\u003e be the number of bytes actually read; these bytes will be stored in elements \u003ccode\u003eb[0]\u003c/code\u003e through \u003ccode\u003eb[k-1]\u003c/code\u003e, leaving elements \u003ccode\u003eb[k]\u003c/code\u003e through \u003ccode\u003eb[b.length-1]\u003c/code\u003e unaffected. \u003cp\u003eThe \u003ccode\u003eread(b)\u003c/code\u003e method has the same effect as: \u003cblockquote\u003e\u003cpre\u003e read(b, 0, b.length) \u003c/pre\u003e\u003c/blockquote\u003e\n * @param b   the buffer into which the data is read.\n * @return     the total number of bytes read into the buffer, or\u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of the stream has been reached.\n * @exception IOException if the first byte cannot be read for any reasonother than end of file, the stream has been closed and the underlying input stream does not support reading after close, or another I/O error occurs.\n * @see java.io.FilterInputStream#in\n * @see java.io.InputStream#read(byte[],int,int)\n */\n","tf":{"freq":{"total":1,"otherwis":2,"attempt":1,"stream":7,"store":4,"least":2,"next":1,"one":3,"data":3,"block":1,"anoth":1,"zero":1,"close":2,"buffer":3,"reach":1,"blockquot":2,"file":3,"length":4,"read":16,"valu":1,"end":4,"element":3,"detect":1,"except":4,"thrown":2,"support":1,"error":1,"unaffect":1,"equal":1,"number":5,"avail":2,"reasonoth":1,"input":5,"effect":1,"pre":2,"contain":1,"leav":1,"will":1,"actual":2,"pointer":1,"java":2,"method":2,"first":2,"integ":1,"filter":1,"occur":1,"array":1},"maxFreq":16,"totalTerms":109},"loc":3}