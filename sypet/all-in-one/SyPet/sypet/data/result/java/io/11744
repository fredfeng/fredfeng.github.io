{"id":11744,"className":"java.io.DataInputStream","methodName":"read","signature":"\u003cjava.io.DataInputStream: int read(byte[],int,int)\u003e","javadoc":"/** \n * Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from the contained input stream into an array of bytes.  An attempt is made to read as many as \u003ccode\u003elen\u003c/code\u003e bytes, but a smaller number may be read, possibly zero. The number of bytes actually read is returned as an integer. \u003cp\u003e This method blocks until input data is available, end of file is detected, or an exception is thrown. \u003cp\u003e If \u003ccode\u003elen\u003c/code\u003e is zero, then no bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value \u003ccode\u003e-1\u003c/code\u003e is returned; otherwise, at least one byte is read and stored into \u003ccode\u003eb\u003c/code\u003e. \u003cp\u003e The first byte read is stored into element \u003ccode\u003eb[off]\u003c/code\u003e, the next one into \u003ccode\u003eb[off+1]\u003c/code\u003e, and so on. The number of bytes read is, at most, equal to \u003ccode\u003elen\u003c/code\u003e. Let \u003ci\u003ek\u003c/i\u003e be the number of bytes actually read; these bytes will be stored in elements \u003ccode\u003eb[off]\u003c/code\u003e through \u003ccode\u003eb[off+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e-1]\u003c/code\u003e, leaving elements \u003ccode\u003eb[off+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e]\u003c/code\u003e through \u003ccode\u003eb[off+len-1]\u003c/code\u003e unaffected. \u003cp\u003e In every case, elements \u003ccode\u003eb[0]\u003c/code\u003e through \u003ccode\u003eb[off]\u003c/code\u003e and elements \u003ccode\u003eb[off+len]\u003c/code\u003e through \u003ccode\u003eb[b.length-1]\u003c/code\u003e are unaffected.\n * @param b     the buffer into which the data is read.\n * @param off the start offset in the destination array \u003ccode\u003eb\u003c/code\u003e\n * @param len   the maximum number of bytes read.\n * @return     the total number of bytes read into the buffer, or\u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of the stream has been reached.\n * @exception NullPointerException If \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @exception IndexOutOfBoundsException If \u003ccode\u003eoff\u003c/code\u003e is negative,\u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003elen\u003c/code\u003e is greater than \u003ccode\u003eb.length - off\u003c/code\u003e\n * @exception IOException if the first byte cannot be read for any reasonother than end of file, the stream has been closed and the underlying input stream does not support reading after close, or another I/O error occurs.\n * @see java.io.FilterInputStream#in\n * @see java.io.InputStream#read(byte[],int,int)\n */\n","tf":{"freq":{"total":1,"greater":1,"store":3,"least":2,"possibl":1,"zero":2,"close":2,"buffer":2,"file":3,"everi":1,"mani":1,"element":5,"except":7,"thrown":1,"index":1,"support":1,"avail":2,"number":6,"input":5,"start":1,"maximum":1,"contain":1,"will":1,"leav":1,"pointer":1,"negat":2,"filter":1,"array":2,"attempt":2,"otherwis":2,"stream":7,"one":3,"next":1,"data":4,"made":1,"block":1,"anoth":1,"smaller":1,"reach":1,"length":2,"read":17,"valu":1,"offset":1,"end":4,"detect":1,"may":1,"error":1,"unaffect":2,"equal":1,"len":9,"reasonoth":1,"actual":2,"java":2,"method":1,"integ":1,"first":2,"bound":1,"occur":1,"destin":1},"maxFreq":17,"totalTerms":134},"loc":3}