{"id":11713,"className":"java.io.FileOutputStream","methodName":"FileOutputStream","signature":"\u003cjava.io.FileOutputStream: void FileOutputStream(java.lang.String)\u003e","javadoc":"/** \n * Creates a file output stream to write to the file with the specified name. A new \u003ccode\u003eFileDescriptor\u003c/code\u003e object is created to represent this file connection. \u003cp\u003e First, if there is a security manager, its \u003ccode\u003echeckWrite\u003c/code\u003e method is called with \u003ccode\u003ename\u003c/code\u003e as its argument. \u003cp\u003e If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.\n * @param name   the system-dependent filename\n * @exception FileNotFoundException  if the file exists but is a directoryrather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file.\n * @see java.lang.SecurityManager#checkWrite(java.lang.String)\n */\n","tf":{"freq":{"call":1,"stream":2,"connect":1,"descriptor":1,"directori":1,"reason":2,"object":1,"lang":2,"specifi":1,"open":2,"file":12,"name":3,"directoryrath":1,"write":5,"rather":1,"exist":5,"deni":1,"argument":1,"thrown":1,"except":5,"check":3,"repres":1,"creat":4,"regular":2,"depend":1,"manag":3,"filenam":1,"access":1,"system":1,"secur":4,"string":1,"java":2,"method":2,"output":2,"first":1,"found":2},"maxFreq":12,"totalTerms":80},"loc":3}