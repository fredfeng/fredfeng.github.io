{"id":11717,"className":"java.io.FileOutputStream","methodName":"FileOutputStream","signature":"\u003cjava.io.FileOutputStream: void FileOutputStream(java.io.FileDescriptor)\u003e","javadoc":"/** \n * Creates a file output stream to write to the specified file descriptor, which represents an existing connection to an actual file in the file system. \u003cp\u003e First, if there is a security manager, its \u003ccode\u003echeckWrite\u003c/code\u003e method is called with the file descriptor \u003ccode\u003efdObj\u003c/code\u003e argument as its argument. \u003cp\u003e If \u003ccode\u003efdObj\u003c/code\u003e is null then a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown. \u003cp\u003e This constructor does not throw an exception if \u003ccode\u003efdObj\u003c/code\u003e is  {@link java.io.FileDescriptor#valid() invalid}. However, if the methods are invoked on the resulting stream to attempt I/O on the stream, an \u003ccode\u003eIOException\u003c/code\u003e is thrown.\n * @param fdObj   the file descriptor to be opened for writing\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file descriptor\n * @see java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)\n */\n","tf":{"freq":{"attempt":1,"result":1,"valid":1,"call":1,"stream":4,"connect":1,"descriptor":6,"link":1,"lang":1,"specifi":1,"open":1,"invalid":1,"file":10,"write":6,"howev":1,"exist":2,"deni":1,"constructor":1,"argument":2,"except":5,"thrown":2,"check":3,"repres":1,"creat":1,"invok":1,"manag":3,"access":1,"system":1,"secur":4,"actual":1,"pointer":1,"java":3,"method":3,"obj":4,"output":2,"first":1},"maxFreq":10,"totalTerms":80},"loc":18}