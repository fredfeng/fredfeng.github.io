{"id":11219,"className":"java.io.DataOutput","methodName":"writeBytes","signature":"\u003cjava.io.DataOutput: void writeBytes(java.lang.String)\u003e","javadoc":"/** \n * Writes a string to the output stream. For every character in the string \u003ccode\u003es\u003c/code\u003e,  taken in order, one byte is written to the output stream.  If \u003ccode\u003es\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown.\u003cp\u003e  If \u003ccode\u003es.length\u003c/code\u003e is zero, then no bytes are written. Otherwise, the character \u003ccode\u003es[0]\u003c/code\u003e is written first, then \u003ccode\u003es[1]\u003c/code\u003e, and so on; the last character written is \u003ccode\u003es[s.length-1]\u003c/code\u003e. For each character, one byte is written, the low-order byte, in exactly the manner of the \u003ccode\u003ewriteByte\u003c/code\u003e method . The high-order eight bits of each character in the string are ignored.\n * @param s   the string of bytes to be written.\n * @throws IOException  if an I/O error occurs.\n */\n","tf":{"freq":{"otherwis":1,"stream":2,"last":1,"one":2,"zero":1,"eight":1,"order":3,"written":6,"exact":1,"write":3,"length":2,"taken":1,"everi":1,"ignor":1,"except":2,"thrown":1,"error":1,"charact":5,"bit":1,"string":4,"pointer":1,"manner":1,"method":1,"high":1,"output":2,"low":1,"first":1,"occur":1},"maxFreq":6,"totalTerms":49},"loc":0}