{"id":11712,"className":"java.io.File","methodName":"toPath","signature":"\u003cjava.io.File: java.nio.file.Path toPath()\u003e","javadoc":"/** \n * Returns a  {@link Path java.nio.file.Path} object constructed from thethis abstract path. The resulting  {@code Path} is associated with the{@link java.nio.file.FileSystems#getDefault default-filesystem}. \u003cp\u003e The first invocation of this method works as if invoking it were equivalent to evaluating the expression: \u003cblockquote\u003e\u003cpre\u003e {@link java.nio.file.FileSystems#getDefault FileSystems.getDefault}(). {@link java.nio.file.FileSystem#getPath getPath}(this. {@link #getPath getPath}()); \u003c/pre\u003e\u003c/blockquote\u003e Subsequent invocations of this method return the same  {@code Path}. \u003cp\u003e If this abstract pathname is the empty abstract pathname then this method returns a  {@code Path} that may be used to access the currentuser directory.\n * @return  a {@code Path} constructed from this abstract path\n * @throws java.nio.file.InvalidPathException if a  {@code Path} object cannot be constructed from the abstractpath (see  {@link java.nio.file.FileSystem#getPath FileSystem.getPath})\n * @since   1.7\n * @see Path#toFile\n */\n","tf":{"freq":{"result":1,"thethi":1,"directori":1,"link":6,"currentus":1,"use":1,"object":2,"express":1,"invalid":1,"associ":1,"equival":1,"file":13,"blockquot":2,"path":18,"subsequ":1,"abstractpath":1,"work":1,"except":1,"may":1,"pathnam":2,"invok":1,"evalu":1,"access":1,"invoc":2,"empti":1,"system":6,"pre":2,"nio":6,"java":6,"method":3,"construct":3,"first":1,"filesystem":1},"maxFreq":18,"totalTerms":91},"loc":13}