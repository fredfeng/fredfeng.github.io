{"id":11374,"className":"java.io.RandomAccessFile","methodName":"RandomAccessFile","signature":"\u003cjava.io.RandomAccessFile: void RandomAccessFile(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Creates a random access file stream to read from, and optionally to write to, a file with the specified name. A new {@link FileDescriptor} object is created to represent theconnection to the file. \u003cp\u003e The \u003ctt\u003emode\u003c/tt\u003e argument specifies the access mode with which the file is to be opened.  The permitted values and their meanings are as specified for the \u003ca href\u003d\"#mode\"\u003e\u003ctt\u003eRandomAccessFile(File,String)\u003c/tt\u003e\u003c/a\u003e constructor. \u003cp\u003e If there is a security manager, its \u003ccode\u003echeckRead\u003c/code\u003e method is called with the \u003ccode\u003ename\u003c/code\u003e argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager\u0027s \u003ccode\u003echeckWrite\u003c/code\u003e method is also called with the \u003ccode\u003ename\u003c/code\u003e argument as its argument to see if write access to the file is allowed.\n * @param name   the system-dependent filename\n * @param mode   the access \u003ca href\u003d\"#mode\"\u003emode\u003c/a\u003e\n * @exception IllegalArgumentException  if the mode argument is not equalto one of \u003ctt\u003e\"r\"\u003c/tt\u003e, \u003ctt\u003e\"rw\"\u003c/tt\u003e, \u003ctt\u003e\"rws\"\u003c/tt\u003e, or \u003ctt\u003e\"rwd\"\u003c/tt\u003e\n * @exception FileNotFoundException if the mode is \u003ctt\u003e\"r\"\u003c/tt\u003e but the given string does not denote an existing regular file, or if the mode begins with \u003ctt\u003e\"rw\"\u003c/tt\u003e but the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file\n * @exception SecurityException         if a security manager exists and its\u003ccode\u003echeckRead\u003c/code\u003e method denies read access to the file or the mode is \"rw\" and the security manager\u0027s \u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file\n * @see java.lang.SecurityException\n * @see java.lang.SecurityManager#checkRead(java.lang.String)\n * @see java.lang.SecurityManager#checkWrite(java.lang.String)\n * @revised 1.4\n * @spec JSR-51\n */\n","tf":{"freq":{"permit":1,"rws":1,"specifi":3,"open":2,"given":2,"file":17,"href":2,"deni":2,"option":1,"argument":7,"except":7,"creat":4,"random":3,"writabl":1,"system":1,"spec":1,"call":2,"stream":1,"allow":3,"descriptor":1,"link":1,"one":1,"denot":2,"theconnect":1,"object":1,"lang":5,"mode":11,"name":5,"write":7,"mean":1,"read":6,"valu":1,"exist":3,"constructor":1,"check":6,"error":1,"repres":1,"regular":3,"manag":6,"depend":1,"filenam":1,"access":9,"illeg":1,"begin":1,"secur":8,"revis":1,"string":5,"java":5,"method":4,"equalto":1,"rwd":1,"also":1,"occur":1,"found":1},"maxFreq":17,"totalTerms":166},"loc":3}