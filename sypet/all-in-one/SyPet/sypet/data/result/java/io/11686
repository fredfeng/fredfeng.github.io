{"id":11686,"className":"java.io.File","methodName":"list","signature":"\u003cjava.io.File: java.lang.String[] list(java.io.FilenameFilter)\u003e","javadoc":"/** \n * Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.  The behavior of this method is the same as that of the {@link #list()} method, except that the strings in the returned arraymust satisfy the filter.  If the given  {@code filter} is {@code null}then all names are accepted.  Otherwise, a name satisfies the filter if and only if the value  {@code true} results when the {@link FilenameFilter#accept FilenameFilter.accept(File,\u0026nbsp;String)} methodof the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes.\n * @param filter A filename filter\n * @return  An array of strings naming the files and directories in thedirectory denoted by this abstract pathname that were accepted by the given  {@code filter}.  The array will be empty if the directory is empty or if no names were accepted by the filter. Returns  {@code null} if this abstract pathname does not denotea directory, or if an I/O error occurs.\n * @throws SecurityException If a security manager exists and its  {@link SecurityManager#checkRead(String)} method denies read access tothe directory\n * @see java.nio.file.Files#newDirectoryStream(Path,String)\n */\n","tf":{"freq":{"otherwis":1,"result":1,"stream":1,"directori":9,"thedirectori":1,"behavior":1,"accept":5,"link":3,"denot":3,"toth":1,"specifi":1,"given":2,"file":6,"name":6,"path":1,"read":2,"valu":1,"exist":1,"denotea":1,"deni":1,"methodof":1,"nbsp":1,"pathnam":4,"except":2,"check":1,"error":1,"manag":2,"invok":1,"filenam":3,"true":1,"list":2,"access":1,"empti":2,"secur":3,"satisfi":3,"string":6,"will":1,"nio":1,"java":1,"method":3,"arraymust":1,"filter":11,"occur":1,"array":3},"maxFreq":11,"totalTerms":104},"loc":13}