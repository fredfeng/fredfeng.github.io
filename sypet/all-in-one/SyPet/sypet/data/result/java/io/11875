{"id":11875,"className":"java.io.FilePermission","methodName":"newPermissionCollection","signature":"\u003cjava.io.FilePermission: java.security.PermissionCollection newPermissionCollection()\u003e","javadoc":"/** \n * Returns a new PermissionCollection object for storing FilePermission objects. \u003cp\u003e FilePermission objects must be stored in a manner that allows them to be inserted into the collection in any order, but that also enables the PermissionCollection \u003ccode\u003eimplies\u003c/code\u003e method to be implemented in an efficient (and consistent) manner. \u003cp\u003eFor example, if you have two FilePermissions: \u003cOL\u003e \u003cLI\u003e  \u003ccode\u003e\"/tmp/-\", \"read\"\u003c/code\u003e \u003cLI\u003e  \u003ccode\u003e\"/tmp/scratch/foo\", \"write\"\u003c/code\u003e \u003c/OL\u003e \u003cp\u003eand you are calling the \u003ccode\u003eimplies\u003c/code\u003e method with the FilePermission: \u003cpre\u003e \"/tmp/scratch/foo\", \"read,write\", \u003c/pre\u003e then the \u003ccode\u003eimplies\u003c/code\u003e function must take into account both the \"/tmp/-\" and \"/tmp/scratch/foo\" permissions, so the effective permission is \"read,write\", and \u003ccode\u003eimplies\u003c/code\u003e returns true. The \"implies\" semantics for FilePermissions are handled properly by the PermissionCollection object returned by this \u003ccode\u003enewPermissionCollection\u003c/code\u003e method.\n * @return a new PermissionCollection object suitable for storingFilePermissions.\n */\n","tf":{"freq":{"call":1,"allow":1,"store":3,"suitabl":1,"foo":3,"object":5,"must":2,"function":1,"order":1,"file":6,"semant":1,"permiss":14,"impli":5,"write":3,"tmp":5,"read":3,"proper":1,"effici":1,"scratch":3,"consist":1,"enabl":1,"true":1,"handl":1,"two":1,"effect":1,"take":1,"pre":2,"exampl":1,"account":1,"manner":2,"method":3,"insert":1,"also":1,"collect":7},"maxFreq":14,"totalTerms":85},"loc":3}