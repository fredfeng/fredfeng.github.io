{"id":11151,"className":"java.io.PipedOutputStream","methodName":"connect","signature":"\u003cjava.io.PipedOutputStream: void connect(java.io.PipedInputStream)\u003e","javadoc":"/** \n * Connects this piped output stream to a receiver. If this object is already connected to some other piped input stream, an \u003ccode\u003eIOException\u003c/code\u003e is thrown. \u003cp\u003e If \u003ccode\u003esnk\u003c/code\u003e is an unconnected piped input stream and \u003ccode\u003esrc\u003c/code\u003e is an unconnected piped output stream, they may be connected by either the call: \u003cblockquote\u003e\u003cpre\u003e src.connect(snk)\u003c/pre\u003e\u003c/blockquote\u003e or the call: \u003cblockquote\u003e\u003cpre\u003e snk.connect(src)\u003c/pre\u003e\u003c/blockquote\u003e The two calls have the same effect.\n * @param snk   the piped input stream to connect to.\n * @exception IOException  if an I/O error occurs.\n */\n","tf":{"freq":{"unconnect":2,"call":3,"may":1,"stream":5,"except":3,"thrown":1,"error":1,"connect":7,"snk":4,"receiv":1,"object":1,"pipe":5,"two":1,"either":1,"input":3,"effect":1,"pre":4,"blockquot":4,"alreadi":1,"src":3,"output":2,"occur":1},"maxFreq":7,"totalTerms":55},"loc":11}