{"id":11047,"className":"java.io.ByteArrayOutputStream","methodName":"toString","signature":"\u003cjava.io.ByteArrayOutputStream: java.lang.String toString(int)\u003e","javadoc":"/** \n * Creates a newly allocated string. Its size is the current size of the output stream and the valid contents of the buffer have been copied into it. Each character \u003ci\u003ec\u003c/i\u003e in the resulting string is constructed from the corresponding element \u003ci\u003eb\u003c/i\u003e in the byte array such that: \u003cblockquote\u003e\u003cpre\u003e c \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8) | (b \u0026amp; 0xff)) \u003c/pre\u003e\u003c/blockquote\u003e\n * @deprecated This method does not properly convert bytes into characters.As of JDK\u0026nbsp;1.1, the preferred way to do this is via the \u003ccode\u003etoString(String enc)\u003c/code\u003e method, which takes an encoding-name argument, or the \u003ccode\u003etoString()\u003c/code\u003e method, which uses the platform\u0027s default character encoding.\n * @param hibyte    the high byte of each resulting Unicode character.\n * @return     the current contents of the output stream, as a string.\n * @see java.io.ByteArrayOutputStream#size()\n * @see java.io.ByteArrayOutputStream#toString(String)\n * @see java.io.ByteArrayOutputStream#toString()\n */\n","tf":{"freq":{"valid":1,"result":2,"stream":5,"deprec":1,"via":1,"correspond":1,"xff":2,"use":1,"way":1,"convert":1,"copi":1,"buffer":1,"hibyt":2,"blockquot":2,"name":1,"current":2,"proper":1,"enc":1,"nbsp":1,"argument":1,"platform":1,"element":1,"creat":1,"charact":4,"size":3,"content":2,"newli":1,"encod":2,"take":1,"pre":2,"string":10,"unicod":1,"java":3,"method":3,"high":1,"construct":1,"prefer":1,"output":5,"amp":2,"alloc":1,"array":4},"maxFreq":10,"totalTerms":79},"loc":3}