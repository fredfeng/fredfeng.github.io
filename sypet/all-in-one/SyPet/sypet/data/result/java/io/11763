{"id":11763,"className":"java.io.StreamTokenizer","methodName":"StreamTokenizer","signature":"\u003cjava.io.StreamTokenizer: void StreamTokenizer(java.io.InputStream)\u003e","javadoc":"/** \n * Creates a stream tokenizer that parses the specified input stream. The stream tokenizer is initialized to the following default state: \u003cul\u003e \u003cli\u003eAll byte values \u003ccode\u003e\u0027A\u0027\u003c/code\u003e through \u003ccode\u003e\u0027Z\u0027\u003c/code\u003e, \u003ccode\u003e\u0027a\u0027\u003c/code\u003e through \u003ccode\u003e\u0027z\u0027\u003c/code\u003e, and \u003ccode\u003e\u0027\u0026#92;u00A0\u0027\u003c/code\u003e through \u003ccode\u003e\u0027\u0026#92;u00FF\u0027\u003c/code\u003e are considered to be alphabetic. \u003cli\u003eAll byte values \u003ccode\u003e\u0027\u0026#92;u0000\u0027\u003c/code\u003e through \u003ccode\u003e\u0027\u0026#92;u0020\u0027\u003c/code\u003e are considered to be white space. \u003cli\u003e\u003ccode\u003e\u0027/\u0027\u003c/code\u003e is a comment character. \u003cli\u003eSingle quote \u003ccode\u003e\u0027\u0026#92;\u0027\u0027\u003c/code\u003e and double quote \u003ccode\u003e\u0027\"\u0027\u003c/code\u003e are string quote characters. \u003cli\u003eNumbers are parsed. \u003cli\u003eEnds of lines are treated as white space, not as separate tokens. \u003cli\u003eC-style and C++-style comments are not recognized. \u003c/ul\u003e\n * @deprecated As of JDK version 1.1, the preferred way to tokenize aninput stream is to convert it into a character stream, for example: \u003cblockquote\u003e\u003cpre\u003e Reader r \u003d new BufferedReader(new InputStreamReader(is)); StreamTokenizer st \u003d new StreamTokenizer(r); \u003c/pre\u003e\u003c/blockquote\u003e\n * @param is        an input stream.\n * @see java.io.BufferedReader\n * @see java.io.InputStreamReader\n * @see java.io.StreamTokenizer#StreamTokenizer(java.io.Reader)\n */\n","tf":{"freq":{"deprec":1,"stream":13,"singl":1,"state":1,"convert":1,"way":1,"line":1,"space":2,"consid":2,"version":1,"specifi":1,"buffer":2,"style":2,"token":9,"blockquot":2,"valu":2,"initi":1,"recogn":1,"quot":3,"aninput":1,"end":1,"follow":1,"creat":1,"charact":3,"white":2,"number":1,"input":4,"reader":6,"separ":1,"pre":2,"string":1,"exampl":1,"java":4,"alphabet":1,"prefer":1,"comment":2,"pars":2,"treat":1},"maxFreq":13,"totalTerms":83},"loc":7}