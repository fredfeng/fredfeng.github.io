{"id":11380,"className":"java.io.RandomAccessFile","methodName":"read","signature":"\u003cjava.io.RandomAccessFile: int read(byte[])\u003e","javadoc":"/** \n * Reads up to \u003ccode\u003eb.length\u003c/code\u003e bytes of data from this file into an array of bytes. This method blocks until at least one byte of input is available. \u003cp\u003e Although \u003ccode\u003eRandomAccessFile\u003c/code\u003e is not a subclass of \u003ccode\u003eInputStream\u003c/code\u003e, this method behaves in exactly the same way as the  {@link InputStream#read(byte[])} method of\u003ccode\u003eInputStream\u003c/code\u003e.\n * @param b   the buffer into which the data is read.\n * @return     the total number of bytes read into the buffer, or\u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of this file has been reached.\n * @exception IOException If the first byte cannot be read for any reasonother than end of file, or if the random access file has been closed, or if some other I/O error occurs.\n * @exception NullPointerException If \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n */\n","tf":{"freq":{"total":1,"stream":3,"least":1,"behav":1,"one":1,"link":1,"data":3,"block":1,"way":1,"close":1,"buffer":2,"reach":1,"although":1,"file":5,"exact":1,"length":1,"read":6,"end":2,"except":4,"error":1,"random":2,"avail":1,"number":1,"access":2,"reasonoth":1,"input":4,"subclass":1,"pointer":1,"method":3,"first":1,"occur":1,"array":1},"maxFreq":6,"totalTerms":57},"loc":3}