{"id":11164,"className":"java.io.FilterInputStream","methodName":"reset","signature":"\u003cjava.io.FilterInputStream: void reset()\u003e","javadoc":"/** \n * Repositions this stream to the position at the time the \u003ccode\u003emark\u003c/code\u003e method was last called on this input stream. \u003cp\u003e This method simply performs \u003ccode\u003ein.reset()\u003c/code\u003e. \u003cp\u003e Stream marks are intended to be used in situations where you need to read ahead a little to see what\u0027s in the stream. Often this is most easily done by invoking some general parser. If the stream is of the type handled by the parse, it just chugs along happily. If the stream is not of that type, the parser should toss an exception when it fails. If this happens within readlimit bytes, it allows the outer code to reset the stream and try another parser.\n * @exception IOException  if the stream has not been marked or if themark has been invalidated.\n * @see java.io.FilterInputStream#in\n * @see java.io.FilterInputStream#mark(int)\n */\n","tf":{"freq":{"need":1,"littl":1,"call":1,"simpli":1,"stream":10,"allow":1,"last":1,"chug":1,"use":1,"perform":1,"anoth":1,"type":2,"situat":1,"time":1,"invalid":1,"fail":1,"easili":1,"reset":3,"read":1,"along":1,"happen":1,"happili":1,"just":1,"reposit":1,"except":3,"invok":1,"ahead":1,"done":1,"mark":4,"general":1,"handl":1,"readlimit":1,"input":3,"themark":1,"outer":1,"often":1,"java":2,"method":2,"within":1,"toss":1,"intend":1,"pars":1,"parser":3,"posit":1,"filter":2},"maxFreq":10,"totalTerms":69},"loc":3}