{"id":11683,"className":"java.io.File","methodName":"delete","signature":"\u003cjava.io.File: boolean delete()\u003e","javadoc":"/** \n * Deletes the file or directory denoted by this abstract pathname.  If this pathname denotes a directory, then the directory must be empty in order to be deleted. \u003cp\u003e Note that the  {@link java.nio.file.Files} class defines the {@link java.nio.file.Files#delete(Path) delete} method to throw an {@link IOException}when a file cannot be deleted. This is useful for error reporting and to diagnose why a file cannot be deleted.\n * @return  \u003ccode\u003etrue\u003c/code\u003e if and only if the file or directory issuccessfully deleted; \u003ccode\u003efalse\u003c/code\u003e otherwise\n * @throws SecurityException If a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkDelete}\u003c/code\u003e method denies delete access to the file\n */\n","tf":{"freq":{"fals":1,"otherwis":1,"defin":1,"directori":4,"delet":10,"link":4,"denot":2,"use":1,"lang":1,"must":1,"order":1,"file":9,"path":1,"report":1,"exist":1,"deni":1,"note":1,"pathnam":2,"except":2,"check":1,"error":1,"manag":2,"true":1,"access":1,"empti":1,"secur":3,"issuccess":1,"nio":2,"java":3,"method":2,"diagnos":1},"maxFreq":10,"totalTerms":64},"loc":7}