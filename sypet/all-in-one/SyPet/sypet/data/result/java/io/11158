{"id":11158,"className":"java.io.FilterInputStream","methodName":"read","signature":"\u003cjava.io.FilterInputStream: int read(byte[])\u003e","javadoc":"/** \n * Reads up to \u003ccode\u003ebyte.length\u003c/code\u003e bytes of data from this input stream into an array of bytes. This method blocks until some input is available. \u003cp\u003e This method simply performs the call \u003ccode\u003eread(b, 0, b.length)\u003c/code\u003e and returns the  result. It is important that it does \u003ci\u003enot\u003c/i\u003e do \u003ccode\u003ein.read(b)\u003c/code\u003e instead; certain subclasses of  \u003ccode\u003eFilterInputStream\u003c/code\u003e depend on the implementation strategy actually used.\n * @param b   the buffer into which the data is read.\n * @return     the total number of bytes read into the buffer, or\u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of the stream has been reached.\n * @exception IOException  if an I/O error occurs.\n * @see java.io.FilterInputStream#read(byte[],int,int)\n */\n","tf":{"freq":{"total":1,"call":1,"result":1,"simpli":1,"stream":4,"data":3,"block":1,"use":1,"perform":1,"buffer":2,"reach":1,"length":2,"read":7,"end":1,"except":2,"error":1,"depend":1,"avail":1,"number":1,"input":4,"instead":1,"subclass":1,"strategi":1,"actual":1,"java":1,"method":2,"certain":1,"filter":2,"occur":1,"array":1},"maxFreq":7,"totalTerms":49},"loc":3}