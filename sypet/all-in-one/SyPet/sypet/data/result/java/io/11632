{"id":11632,"className":"java.io.PipedWriter","methodName":"write","signature":"\u003cjava.io.PipedWriter: void write(int)\u003e","javadoc":"/** \n * Writes the specified \u003ccode\u003echar\u003c/code\u003e to the piped output stream. If a thread was reading data characters from the connected piped input stream, but the thread is no longer alive, then an \u003ccode\u003eIOException\u003c/code\u003e is thrown. \u003cp\u003e Implements the \u003ccode\u003ewrite\u003c/code\u003e method of \u003ccode\u003eWriter\u003c/code\u003e.\n * @param c   the \u003ccode\u003echar\u003c/code\u003e to be written.\n * @exception IOException  if the pipe is\u003ca href\u003dPipedOutputStream.html#BROKEN\u003e \u003ccode\u003ebroken\u003c/code\u003e\u003c/a\u003e, {@link #connect(java.io.PipedReader) unconnected}, closed or an I/O error occurs.\n */\n","tf":{"freq":{"unconnect":1,"stream":3,"connect":2,"link":1,"data":1,"pipe":5,"close":1,"specifi":1,"thread":2,"written":1,"write":3,"longer":1,"read":1,"writer":1,"href":1,"except":3,"thrown":1,"error":1,"charact":1,"broken":1,"input":1,"reader":1,"aliv":1,"method":1,"html":1,"java":1,"output":2,"occur":1},"maxFreq":5,"totalTerms":41},"loc":6}