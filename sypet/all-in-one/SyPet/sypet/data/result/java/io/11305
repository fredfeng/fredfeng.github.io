{"id":11305,"className":"java.io.InputStream","methodName":"available","signature":"\u003cjava.io.InputStream: int available()\u003e","javadoc":"/** \n * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread.  A single read or skip of this many bytes will not block, but may read or skip fewer bytes. \u003cp\u003e Note that while some implementations of  {@code InputStream} will returnthe total number of bytes in the stream, many will not.  It is never correct to use the return value of this method to allocate a buffer intended to hold all data in this stream. \u003cp\u003e A subclass\u0027 implementation of this method may choose to throw an {@link IOException} if this input stream has been closed byinvoking the  {@link #close()} method.\u003cp\u003e The  {@code available} method for class {@code InputStream} alwaysreturns  {@code 0}. \u003cp\u003e This method should be overridden by subclasses.\n * @return     an estimate of the number of bytes that can be read (or skippedover) from this input stream without blocking or  {@code 0} whenit reaches the end of the input stream.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"total":1,"might":1,"stream":9,"byinvok":1,"overridden":1,"singl":1,"link":2,"next":2,"data":1,"alwaysreturn":1,"use":1,"block":3,"anoth":1,"skip":3,"close":2,"buffer":1,"reach":1,"estim":2,"correct":1,"thread":2,"choos":1,"read":4,"valu":1,"end":1,"note":1,"mani":2,"except":3,"may":2,"error":1,"whenit":1,"skippedov":1,"hold":1,"number":3,"avail":2,"without":2,"invoc":2,"input":7,"never":1,"returnth":1,"subclass":2,"will":3,"fewer":1,"method":6,"intend":1,"occur":1,"alloc":1},"maxFreq":9,"totalTerms":89},"loc":3}