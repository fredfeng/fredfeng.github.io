{"id":11791,"className":"java.io.OutputStream","methodName":"flush","signature":"\u003cjava.io.OutputStream: void flush()\u003e","javadoc":"/** \n * Flushes this output stream and forces any buffered output bytes to be written out. The general contract of \u003ccode\u003eflush\u003c/code\u003e is that calling it is an indication that, if any bytes previously written have been buffered by the implementation of the output stream, such bytes should immediately be written to their intended destination. \u003cp\u003e If the intended destination of this stream is an abstraction provided by the underlying operating system, for example a file, then flushing the stream guarantees only that bytes previously written to the stream are passed to the operating system for writing; it does not guarantee that they are actually written to a physical device such as a disk drive. \u003cp\u003e The \u003ccode\u003eflush\u003c/code\u003e method of \u003ccode\u003eOutputStream\u003c/code\u003e does nothing.\n * @exception IOException  if an I/O error occurs.\n */\n","tf":{"freq":{"call":1,"stream":6,"disk":1,"buffer":2,"indic":1,"oper":2,"drive":1,"file":1,"written":5,"write":1,"noth":1,"immedi":1,"forc":1,"except":2,"error":1,"previous":2,"contract":1,"guarante":2,"physic":1,"provid":1,"general":1,"pass":1,"system":2,"flush":5,"exampl":1,"actual":1,"method":1,"devic":1,"output":4,"intend":2,"occur":1,"destin":2},"maxFreq":6,"totalTerms":56},"loc":2}