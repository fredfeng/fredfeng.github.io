{"id":11678,"className":"java.io.File","methodName":"isFile","signature":"\u003cjava.io.File: boolean isFile()\u003e","javadoc":"/** \n * Tests whether the file denoted by this abstract pathname is a normal file.  A file is \u003cem\u003enormal\u003c/em\u003e if it is not a directory and, in addition, satisfies other system-dependent criteria.  Any non-directory file created by a Java application is guaranteed to be a normal file. \u003cp\u003e Where it is required to distinguish an I/O exception from the case that the file is not a normal file, or where several attributes of the same file are required at the same time, then the  {@link java.nio.file.Files#readAttributes(Path,Class,LinkOption[]) Files.readAttributes} method may be used.\n * @return  \u003ccode\u003etrue\u003c/code\u003e if and only if the file denoted by thisabstract pathname exists \u003cem\u003eand\u003c/em\u003e is a normal file; \u003ccode\u003efalse\u003c/code\u003e otherwise\n * @throws SecurityException If a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkRead(java.lang.String)}\u003c/code\u003e method denies read access to the file\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"directori":2,"test":1,"normal":5,"link":3,"denot":2,"use":1,"lang":2,"whether":1,"applic":1,"time":1,"requir":2,"attribut":3,"file":15,"path":1,"read":4,"exist":2,"deni":1,"option":1,"addit":1,"may":1,"pathnam":2,"except":2,"check":1,"criteria":1,"creat":1,"manag":2,"depend":1,"guarante":1,"true":1,"access":1,"thisabstract":1,"sever":1,"non":1,"system":1,"secur":3,"string":1,"satisfi":1,"distinguish":1,"method":2,"nio":1,"java":4},"maxFreq":15,"totalTerms":82},"loc":7}