{"id":11418,"className":"java.io.BufferedReader","methodName":"read","signature":"\u003cjava.io.BufferedReader: int read(char[],int,int)\u003e","javadoc":"/** \n * Reads characters into a portion of an array. \u003cp\u003e This method implements the general contract of the corresponding \u003ccode\u003e {@link Reader#read(char[],int,int) read}\u003c/code\u003e method of the \u003ccode\u003e {@link Reader}\u003c/code\u003e class.  As an additional convenience, it attempts to read as many characters as possible by repeatedly invoking the \u003ccode\u003eread\u003c/code\u003e method of the underlying stream.  This iterated \u003ccode\u003eread\u003c/code\u003e continues until one of the following conditions becomes true: \u003cul\u003e \u003cli\u003e The specified number of characters have been read, \u003cli\u003e The \u003ccode\u003eread\u003c/code\u003e method of the underlying stream returns \u003ccode\u003e-1\u003c/code\u003e, indicating end-of-file, or \u003cli\u003e The \u003ccode\u003eready\u003c/code\u003e method of the underlying stream returns \u003ccode\u003efalse\u003c/code\u003e, indicating that further input requests would block. \u003c/ul\u003e If the first \u003ccode\u003eread\u003c/code\u003e on the underlying stream returns \u003ccode\u003e-1\u003c/code\u003e to indicate end-of-file then this method returns \u003ccode\u003e-1\u003c/code\u003e.  Otherwise this method returns the number of characters actually read. \u003cp\u003e Subclasses of this class are encouraged, but not required, to attempt to read as many characters as possible in the same fashion. \u003cp\u003e Ordinarily this method takes characters from this stream\u0027s character buffer, filling it from the underlying stream as necessary.  If, however, the buffer is empty, the mark is not valid, and the requested length is at least as large as the buffer, then this method will read characters directly from the underlying stream into the given array. Thus redundant \u003ccode\u003eBufferedReader\u003c/code\u003es will not copy data unnecessarily.\n * @param cbuf  Destination buffer\n * @param off   Offset at which to start storing characters\n * @param len   Maximum number of characters to read\n * @return     The number of characters read, or -1 if the end of thestream has been reached\n * @exception IOException  If an I/O error occurs\n */\n","tf":{"freq":{"fals":1,"store":1,"least":1,"possibl":2,"necessari":1,"copi":1,"specifi":1,"buffer":5,"becom":1,"requir":1,"given":1,"file":2,"request":2,"encourag":1,"howev":1,"follow":1,"mani":2,"except":2,"ordinarili":1,"charact":11,"contract":1,"invok":1,"mark":1,"number":4,"continu":1,"input":1,"thestream":1,"reader":3,"start":1,"maximum":1,"will":2,"subclass":1,"readi":1,"array":2,"attempt":2,"otherwis":1,"valid":1,"stream":7,"fashion":1,"correspond":1,"one":1,"link":2,"data":1,"redund":1,"block":1,"repeat":1,"reach":1,"indic":3,"length":1,"read":15,"offset":1,"conveni":1,"end":3,"portion":1,"direct":1,"condit":1,"addit":1,"error":1,"thus":1,"fill":1,"true":1,"len":1,"general":1,"empti":1,"cbuf":1,"larg":1,"take":1,"unnecessarili":1,"actual":1,"method":9,"iter":1,"first":1,"occur":1,"destin":1},"maxFreq":15,"totalTerms":134},"loc":20}