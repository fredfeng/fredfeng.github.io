{"id":11704,"className":"java.io.File","methodName":"getFreeSpace","signature":"\u003cjava.io.File: long getFreeSpace()\u003e","javadoc":"/** \n * Returns the number of unallocated bytes in the partition \u003ca href\u003d\"#partName\"\u003enamed\u003c/a\u003e by this abstract path name. \u003cp\u003e The returned number of unallocated bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes.  The number of unallocated bytes is most likely to be accurate immediately after this call.  It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine.  This method makes no guarantee that write operations to this file system will succeed.\n * @return  The number of unallocated bytes on the partition \u003ctt\u003e0L\u003c/tt\u003eif the abstract pathname does not name a partition.  This value will be less than or equal to the total file system size returned by  {@link #getTotalSpace}.\n * @throws SecurityException If a security manager has been installed and it denies {@link RuntimePermission}\u003ctt\u003e(\"getFileSystemAttributes\")\u003c/tt\u003e or its  {@link SecurityManager#checkRead(String)} method deniesread access to the file named by this abstract pathname\n * @since  1.6\n */\n","tf":{"freq":{"total":2,"possibl":1,"free":1,"oper":2,"file":4,"accur":1,"permiss":1,"inaccur":1,"href":1,"deni":1,"pathnam":2,"except":1,"succeed":1,"runtim":1,"number":4,"like":2,"size":1,"system":4,"machin":1,"outsid":1,"unalloc":4,"will":2,"make":1,"virtual":1,"call":1,"partit":3,"link":3,"made":2,"use":1,"space":2,"attribut":1,"extern":1,"name":5,"path":1,"write":1,"read":1,"immedi":1,"valu":1,"less":1,"deniesread":1,"includ":1,"check":1,"guarante":2,"manag":2,"instal":1,"hint":1,"equal":1,"access":1,"secur":3,"string":1,"method":2,"part":1},"maxFreq":5,"totalTerms":84},"loc":8}