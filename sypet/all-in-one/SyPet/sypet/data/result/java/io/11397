{"id":11397,"className":"java.io.RandomAccessFile","methodName":"readChar","signature":"\u003cjava.io.RandomAccessFile: char readChar()\u003e","javadoc":"/** \n * Reads a character from this file. This method reads two bytes from the file, starting at the current file pointer. If the bytes read, in order, are \u003ccode\u003eb1\u003c/code\u003e and \u003ccode\u003eb2\u003c/code\u003e, where \u003ccode\u003e0\u0026nbsp;\u0026lt;\u003d\u0026nbsp;b1,\u0026nbsp;b2\u0026nbsp;\u0026lt;\u003d\u0026nbsp;255\u003c/code\u003e, then the result is equal to: \u003cblockquote\u003e\u003cpre\u003e (char)((b1 \u0026lt;\u0026lt; 8) | b2) \u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e This method blocks until the two bytes are read, the end of the stream is detected, or an exception is thrown.\n * @return     the next two bytes of this file, interpreted as a\u003ccode\u003echar\u003c/code\u003e.\n * @exception EOFException  if this file reaches the end before readingtwo bytes.\n * @exception IOException   if an I/O error occurs.\n */\n","tf":{"freq":{"result":1,"stream":1,"readingtwo":1,"next":1,"interpret":1,"block":1,"reach":1,"order":1,"file":5,"blockquot":2,"current":1,"read":5,"end":2,"nbsp":5,"detect":1,"except":4,"thrown":1,"error":1,"charact":1,"equal":1,"fexcept":1,"two":3,"start":1,"pre":2,"pointer":1,"method":2,"occur":1},"maxFreq":5,"totalTerms":48},"loc":7}