{"id":11303,"className":"java.io.InputStream","methodName":"read","signature":"\u003cjava.io.InputStream: int read(byte[],int,int)\u003e","javadoc":"/** \n * Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from the input stream into an array of bytes.  An attempt is made to read as many as \u003ccode\u003elen\u003c/code\u003e bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. \u003cp\u003e This method blocks until input data is available, end of file is detected, or an exception is thrown. \u003cp\u003e If \u003ccode\u003elen\u003c/code\u003e is zero, then no bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value \u003ccode\u003e-1\u003c/code\u003e is returned; otherwise, at least one byte is read and stored into \u003ccode\u003eb\u003c/code\u003e. \u003cp\u003e The first byte read is stored into element \u003ccode\u003eb[off]\u003c/code\u003e, the next one into \u003ccode\u003eb[off+1]\u003c/code\u003e, and so on. The number of bytes read is, at most, equal to \u003ccode\u003elen\u003c/code\u003e. Let \u003ci\u003ek\u003c/i\u003e be the number of bytes actually read; these bytes will be stored in elements \u003ccode\u003eb[off]\u003c/code\u003e through \u003ccode\u003eb[off+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e-1]\u003c/code\u003e, leaving elements \u003ccode\u003eb[off+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e]\u003c/code\u003e through \u003ccode\u003eb[off+len-1]\u003c/code\u003e unaffected. \u003cp\u003e In every case, elements \u003ccode\u003eb[0]\u003c/code\u003e through \u003ccode\u003eb[off]\u003c/code\u003e and elements \u003ccode\u003eb[off+len]\u003c/code\u003e through \u003ccode\u003eb[b.length-1]\u003c/code\u003e are unaffected. \u003cp\u003e The \u003ccode\u003eread(b,\u003c/code\u003e \u003ccode\u003eoff,\u003c/code\u003e \u003ccode\u003elen)\u003c/code\u003e method for class \u003ccode\u003eInputStream\u003c/code\u003e simply calls the method \u003ccode\u003eread()\u003c/code\u003e repeatedly. If the first such call results in an \u003ccode\u003eIOException\u003c/code\u003e, that exception is returned from the call to the \u003ccode\u003eread(b,\u003c/code\u003e \u003ccode\u003eoff,\u003c/code\u003e \u003ccode\u003elen)\u003c/code\u003e method.  If any subsequent call to \u003ccode\u003eread()\u003c/code\u003e results in a \u003ccode\u003eIOException\u003c/code\u003e, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into \u003ccode\u003eb\u003c/code\u003e and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data \u003ccode\u003elen\u003c/code\u003e has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method.\n * @param b     the buffer into which the data is read.\n * @param off   the start offset in array \u003ccode\u003eb\u003c/code\u003eat which the data is written.\n * @param len   the maximum number of bytes to read.\n * @return     the total number of bytes read into the buffer, or\u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of the stream has been reached.\n * @exception IOException If the first byte cannot be read for any reasonother than end of file, or if the input stream has been closed, or if some other I/O error occurs.\n * @exception NullPointerException If \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @exception IndexOutOfBoundsException If \u003ccode\u003eoff\u003c/code\u003e is negative,\u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003elen\u003c/code\u003e is greater than \u003ccode\u003eb.length - off\u003c/code\u003e\n * @see java.io.InputStream#read()\n */\n","tf":{"freq":{"total":1,"greater":1,"store":4,"least":2,"zero":1,"close":1,"buffer":2,"amount":1,"file":5,"encourag":1,"request":1,"effici":1,"everi":1,"mani":1,"element":5,"index":1,"thrown":2,"except":13,"avail":2,"number":7,"provid":1,"input":6,"start":1,"maximum":1,"subclass":1,"will":1,"leav":1,"pointer":1,"negat":2,"array":2,"treat":1,"otherwis":2,"attempt":2,"call":4,"result":2,"stream":6,"simpli":1,"one":3,"next":1,"data":6,"made":1,"block":2,"repeat":1,"smaller":1,"reach":1,"written":1,"length":2,"read":23,"valu":1,"caught":1,"offset":1,"subsequ":1,"end":6,"detect":2,"may":1,"error":1,"unaffect":2,"equal":1,"len":12,"point":1,"reasonoth":1,"actual":2,"java":1,"method":6,"integ":1,"first":3,"bound":1,"occur":2},"maxFreq":23,"totalTerms":177},"loc":28}