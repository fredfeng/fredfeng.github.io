{"id":11304,"className":"java.io.InputStream","methodName":"skip","signature":"\u003cjava.io.InputStream: long skip(long)\u003e","javadoc":"/** \n * Skips over and discards \u003ccode\u003en\u003c/code\u003e bytes of data from this input stream. The \u003ccode\u003eskip\u003c/code\u003e method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly \u003ccode\u003e0\u003c/code\u003e. This may result from any of a number of conditions; reaching end of file before \u003ccode\u003en\u003c/code\u003e bytes have been skipped is only one possibility. The actual number of bytes skipped is returned.  If \u003ccode\u003en\u003c/code\u003e is negative, no bytes are skipped. \u003cp\u003e The \u003ccode\u003eskip\u003c/code\u003e method of this class creates a byte array and then repeatedly reads into it until \u003ccode\u003en\u003c/code\u003e bytes have been read or the end of the stream has been reached. Subclasses are encouraged to provide a more efficient implementation of this method. For instance, the implementation may depend on the ability to seek.\n * @param n   the number of bytes to be skipped.\n * @return     the actual number of bytes skipped.\n * @exception IOException  if the stream does not support seek,or if some other I/O error occurs.\n */\n","tf":{"freq":{"result":1,"stream":3,"reason":1,"one":1,"data":1,"possibl":2,"repeat":1,"discard":1,"skip":10,"abil":1,"smaller":1,"reach":2,"file":1,"encourag":1,"varieti":1,"read":2,"effici":1,"end":3,"condit":1,"except":2,"may":3,"support":1,"error":1,"creat":1,"depend":1,"number":5,"provid":1,"seek":2,"instanc":1,"input":1,"subclass":1,"actual":2,"method":3,"negat":1,"occur":1,"array":1},"maxFreq":10,"totalTerms":63},"loc":24}