{"id":11650,"className":"java.io.SequenceInputStream","methodName":"read","signature":"\u003cjava.io.SequenceInputStream: int read(byte[],int,int)\u003e","javadoc":"/** \n * Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from this input stream into an array of bytes.  If \u003ccode\u003elen\u003c/code\u003e is not zero, the method blocks until at least 1 byte of input is available; otherwise, no bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned. \u003cp\u003e The \u003ccode\u003eread\u003c/code\u003e method of \u003ccode\u003eSequenceInputStream\u003c/code\u003e tries to read the data from the current substream. If it fails to read any characters because the substream has reached the end of the stream, it calls the \u003ccode\u003eclose\u003c/code\u003e method of the current substream and begins reading from the next substream.\n * @param b     the buffer into which the data is read.\n * @param off   the start offset in array \u003ccode\u003eb\u003c/code\u003eat which the data is written.\n * @param len   the maximum number of bytes read.\n * @return     int   the number of bytes read.\n * @exception NullPointerException If \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @exception IndexOutOfBoundsException If \u003ccode\u003eoff\u003c/code\u003e is negative,\u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003elen\u003c/code\u003e is greater than \u003ccode\u003eb.length - off\u003c/code\u003e\n * @exception IOException  if an I/O error occurs.\n */\n","tf":{"freq":{"otherwis":1,"call":1,"stream":3,"greater":1,"least":1,"next":1,"data":4,"block":1,"zero":1,"close":1,"buffer":1,"reach":1,"fail":1,"sequenc":1,"written":1,"length":1,"current":2,"read":10,"substream":4,"offset":1,"end":1,"index":1,"except":6,"error":1,"charact":1,"number":2,"avail":1,"len":5,"begin":1,"input":3,"start":1,"maximum":1,"pointer":1,"negat":2,"method":3,"bound":1,"occur":1,"array":2},"maxFreq":10,"totalTerms":72},"loc":18}