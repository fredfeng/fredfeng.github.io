{"id":11320,"className":"java.io.PipedReader","methodName":"read","signature":"\u003cjava.io.PipedReader: int read(char[],int,int)\u003e","javadoc":"/** \n * Reads up to \u003ccode\u003elen\u003c/code\u003e characters of data from this piped stream into an array of characters. Less than \u003ccode\u003elen\u003c/code\u003e characters will be read if the end of the data stream is reached or if \u003ccode\u003elen\u003c/code\u003e exceeds the pipe\u0027s buffer size. This method blocks until at least one character of input is available.\n * @param cbuf     the buffer into which the data is read.\n * @param off   the start offset of the data.\n * @param len   the maximum number of characters read.\n * @return     the total number of characters read into the buffer, or\u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of the stream has been reached.\n * @exception IOException  if the pipe is\u003ca href\u003dPipedInputStream.html#BROKEN\u003e \u003ccode\u003ebroken\u003c/code\u003e\u003c/a\u003e, {@link #connect(java.io.PipedWriter) unconnected}, closed, or an I/O error occurs.\n */\n","tf":{"freq":{"unconnect":1,"total":1,"stream":4,"connect":1,"least":1,"link":1,"one":1,"data":5,"block":1,"pipe":5,"close":1,"buffer":3,"reach":2,"read":6,"writer":1,"offset":1,"href":1,"end":2,"less":1,"except":2,"error":1,"charact":6,"exceed":1,"number":2,"avail":1,"len":4,"size":1,"broken":1,"input":2,"cbuf":1,"start":1,"maximum":1,"will":1,"java":1,"html":1,"method":1,"occur":1,"array":1},"maxFreq":6,"totalTerms":69},"loc":37}