{"id":11159,"className":"java.io.FilterInputStream","methodName":"read","signature":"\u003cjava.io.FilterInputStream: int read(byte[],int,int)\u003e","javadoc":"/** \n * Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from this input stream into an array of bytes. If \u003ccode\u003elen\u003c/code\u003e is not zero, the method blocks until some input is available; otherwise, no bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned. \u003cp\u003e This method simply performs \u003ccode\u003ein.read(b, off, len)\u003c/code\u003e and returns the result.\n * @param b     the buffer into which the data is read.\n * @param off   the start offset in the destination array \u003ccode\u003eb\u003c/code\u003e\n * @param len   the maximum number of bytes read.\n * @return     the total number of bytes read into the buffer, or\u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of the stream has been reached.\n * @exception NullPointerException If \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @exception IndexOutOfBoundsException If \u003ccode\u003eoff\u003c/code\u003e is negative,\u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003elen\u003c/code\u003e is greater than \u003ccode\u003eb.length - off\u003c/code\u003e\n * @exception IOException  if an I/O error occurs.\n * @see java.io.FilterInputStream#in\n */\n","tf":{"freq":{"otherwis":1,"total":1,"result":1,"simpli":1,"stream":3,"greater":1,"data":3,"block":1,"perform":1,"zero":1,"buffer":2,"reach":1,"length":1,"read":7,"offset":1,"end":1,"index":1,"except":6,"error":1,"avail":1,"number":2,"len":6,"input":3,"start":1,"maximum":1,"pointer":1,"java":1,"negat":2,"method":2,"filter":1,"bound":1,"occur":1,"array":2,"destin":1},"maxFreq":7,"totalTerms":61},"loc":3}