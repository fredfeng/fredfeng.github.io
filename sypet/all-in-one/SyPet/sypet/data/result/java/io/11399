{"id":11399,"className":"java.io.RandomAccessFile","methodName":"readLong","signature":"\u003cjava.io.RandomAccessFile: long readLong()\u003e","javadoc":"/** \n * Reads a signed 64-bit integer from this file. This method reads eight bytes from the file, starting at the current file pointer. If the bytes read, in order, are \u003ccode\u003eb1\u003c/code\u003e, \u003ccode\u003eb2\u003c/code\u003e, \u003ccode\u003eb3\u003c/code\u003e, \u003ccode\u003eb4\u003c/code\u003e, \u003ccode\u003eb5\u003c/code\u003e, \u003ccode\u003eb6\u003c/code\u003e, \u003ccode\u003eb7\u003c/code\u003e, and \u003ccode\u003eb8,\u003c/code\u003e where: \u003cblockquote\u003e\u003cpre\u003e 0 \u0026lt;\u003d b1, b2, b3, b4, b5, b6, b7, b8 \u0026lt;\u003d255, \u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e then the result is equal to: \u003cp\u003e\u003cblockquote\u003e\u003cpre\u003e ((long)b1 \u0026lt;\u0026lt; 56) + ((long)b2 \u0026lt;\u0026lt; 48) + ((long)b3 \u0026lt;\u0026lt; 40) + ((long)b4 \u0026lt;\u0026lt; 32) + ((long)b5 \u0026lt;\u0026lt; 24) + ((long)b6 \u0026lt;\u0026lt; 16) + ((long)b7 \u0026lt;\u0026lt; 8) + b8 \u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e This method blocks until the eight bytes are read, the end of the stream is detected, or an exception is thrown.\n * @return     the next eight bytes of this file, interpreted as a\u003ccode\u003elong\u003c/code\u003e.\n * @exception EOFException  if this file reaches the end before readingeight bytes.\n * @exception IOException   if an I/O error occurs.\n */\n","tf":{"freq":{"result":1,"stream":1,"next":1,"interpret":1,"block":1,"readingeight":1,"eight":3,"reach":1,"order":1,"blockquot":4,"file":5,"current":1,"read":5,"end":2,"detect":1,"except":4,"thrown":1,"error":1,"equal":1,"fexcept":1,"sign":1,"bit":1,"start":1,"pre":4,"pointer":1,"method":2,"integ":1,"occur":1},"maxFreq":5,"totalTerms":49},"loc":3}