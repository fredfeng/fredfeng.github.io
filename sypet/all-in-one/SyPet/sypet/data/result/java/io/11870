{"id":11870,"className":"java.io.FilePermission","methodName":"FilePermission","signature":"\u003cjava.io.FilePermission: void FilePermission(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Creates a new FilePermission object with the specified actions. \u003ci\u003epath\u003c/i\u003e is the pathname of a file or directory, and \u003ci\u003eactions\u003c/i\u003e contains a comma-separated list of the desired actions granted on the file or directory. Possible actions are \"read\", \"write\", \"execute\", \"delete\", and \"readlink\". \u003cp\u003eA pathname that ends in \"/*\" (where \"/\" is the file separator character, \u003ccode\u003eFile.separatorChar\u003c/code\u003e) indicates all the files and directories contained in that directory. A pathname that ends with \"/-\" indicates (recursively) all files and subdirectories contained in that directory. The special pathname \"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\" matches any file. \u003cp\u003eA pathname consisting of a single \"*\" indicates all the files in the current directory, while a pathname consisting of a single \"-\" indicates all the files in the current directory and (recursively) all files and subdirectories contained in the current directory. \u003cp\u003eA pathname containing an empty string represents an empty path.\n * @param path the pathname of the file/directory.\n * @param actions the action string.\n * @throws IllegalArgumentException If actions is \u003ccode\u003enull\u003c/code\u003e, empty or contains an action other than the specified possible actions.\n */\n","tf":{"freq":{"grant":1,"singl":2,"directori":9,"delet":1,"possibl":2,"object":1,"subdirectori":2,"desir":1,"specifi":2,"indic":4,"file":13,"current":3,"path":3,"action":9,"permiss":2,"write":1,"read":1,"end":2,"argument":1,"except":1,"comma":1,"pathnam":8,"repres":1,"consist":2,"creat":1,"charact":1,"list":1,"illeg":1,"empti":3,"separ":3,"string":2,"contain":6,"special":1,"match":1,"execut":1,"recurs":2,"readlink":1},"maxFreq":13,"totalTerms":97},"loc":4}