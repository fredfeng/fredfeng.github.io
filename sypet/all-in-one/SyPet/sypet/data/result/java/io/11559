{"id":11559,"className":"java.io.LineNumberInputStream","methodName":"available","signature":"\u003cjava.io.LineNumberInputStream: int available()\u003e","javadoc":"/** \n * Returns the number of bytes that can be read from this input stream without blocking. \u003cp\u003e Note that if the underlying input stream is able to supply \u003ci\u003ek\u003c/i\u003e input characters without blocking, the \u003ccode\u003eLineNumberInputStream\u003c/code\u003e can guarantee only to provide \u003ci\u003ek\u003c/i\u003e/2 characters without blocking, because the \u003ci\u003ek\u003c/i\u003e characters from the underlying input stream might consist of \u003ci\u003ek\u003c/i\u003e/2 pairs of \u003ccode\u003e\u0027\u0026#92;r\u0027\u003c/code\u003e and \u003ccode\u003e\u0027\u0026#92;n\u0027\u003c/code\u003e, which are converted to just \u003ci\u003ek\u003c/i\u003e/2 \u003ccode\u003e\u0027\u0026#92;n\u0027\u003c/code\u003e characters.\n * @return     the number of bytes that can be read from this input streamwithout blocking.\n * @exception IOException  if an I/O error occurs.\n * @see java.io.FilterInputStream#in\n */\n","tf":{"freq":{"might":1,"stream":5,"pair":1,"line":1,"block":4,"convert":1,"abl":1,"read":2,"note":1,"just":1,"except":2,"error":1,"charact":4,"consist":1,"guarante":1,"suppli":1,"number":3,"avail":1,"without":3,"provid":1,"input":7,"streamwithout":1,"java":1,"filter":1,"occur":1},"maxFreq":7,"totalTerms":47},"loc":3}