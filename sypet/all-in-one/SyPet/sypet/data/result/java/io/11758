{"id":11758,"className":"java.io.DataInputStream","methodName":"readLine","signature":"\u003cjava.io.DataInputStream: java.lang.String readLine()\u003e","javadoc":"/** \n * See the general contract of the \u003ccode\u003ereadLine\u003c/code\u003e method of \u003ccode\u003eDataInput\u003c/code\u003e. \u003cp\u003e Bytes for this operation are read from the contained input stream.\n * @deprecated This method does not properly convert bytes to characters.As of JDK\u0026nbsp;1.1, the preferred way to read lines of text is via the \u003ccode\u003eBufferedReader.readLine()\u003c/code\u003e method.  Programs that use the \u003ccode\u003eDataInputStream\u003c/code\u003e class to read lines can be converted to use the \u003ccode\u003eBufferedReader\u003c/code\u003e class by replacing code of the form: \u003cblockquote\u003e\u003cpre\u003e DataInputStream d \u003d\u0026nbsp;new\u0026nbsp;DataInputStream(in); \u003c/pre\u003e\u003c/blockquote\u003e with: \u003cblockquote\u003e\u003cpre\u003e BufferedReader d \u003d\u0026nbsp;new\u0026nbsp;BufferedReader(new\u0026nbsp;InputStreamReader(in)); \u003c/pre\u003e\u003c/blockquote\u003e\n * @return     the next line of text from this input stream.\n * @exception IOException  if an I/O error occurs.\n * @see java.io.BufferedReader#readLine()\n * @see java.io.FilterInputStream#in\n */\n","tf":{"freq":{"deprec":1,"stream":7,"via":1,"next":1,"data":4,"line":7,"convert":2,"way":1,"use":2,"buffer":5,"oper":1,"blockquot":4,"read":7,"proper":1,"nbsp":6,"except":2,"text":2,"error":1,"form":1,"contract":1,"charact":1,"general":1,"input":8,"reader":6,"pre":4,"program":1,"contain":1,"replac":1,"java":2,"method":3,"prefer":1,"filter":1,"occur":1},"maxFreq":8,"totalTerms":88},"loc":43}