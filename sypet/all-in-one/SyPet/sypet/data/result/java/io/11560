{"id":11560,"className":"java.io.LineNumberInputStream","methodName":"mark","signature":"\u003cjava.io.LineNumberInputStream: void mark(int)\u003e","javadoc":"/** \n * Marks the current position in this input stream. A subsequent call to the \u003ccode\u003ereset\u003c/code\u003e method repositions this stream at the last marked position so that subsequent reads re-read the same bytes. \u003cp\u003e The \u003ccode\u003emark\u003c/code\u003e method of \u003ccode\u003eLineNumberInputStream\u003c/code\u003e remembers the current line number in a private variable, and then calls the \u003ccode\u003emark\u003c/code\u003e method of the underlying input stream.\n * @param readlimit   the maximum limit of bytes that can be read beforethe mark position becomes invalid.\n * @see java.io.FilterInputStream#in\n * @see java.io.LineNumberInputStream#reset()\n */\n","tf":{"freq":{"limit":1,"reposit":1,"call":2,"stream":6,"last":1,"rememb":1,"variabl":1,"line":3,"number":3,"mark":6,"beforeth":1,"readlimit":1,"input":5,"becom":1,"invalid":1,"maximum":1,"current":2,"reset":2,"read":3,"java":2,"method":3,"subsequ":2,"posit":3,"filter":1},"maxFreq":6,"totalTerms":53},"loc":5}