{"id":11684,"className":"java.io.File","methodName":"deleteOnExit","signature":"\u003cjava.io.File: void deleteOnExit()\u003e","javadoc":"/** \n * Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates. Files (or directories) are deleted in the reverse order that they are registered. Invoking this method to delete a file or directory that is already registered for deletion has no effect. Deletion will be attempted only for normal termination of the virtual machine, as defined by the Java Language Specification. \u003cp\u003e Once deletion has been requested, it is not possible to cancel the request.  This method should therefore be used with care. \u003cP\u003e Note: this method should \u003ci\u003enot\u003c/i\u003e be used for file-locking, as the resulting protocol cannot be made to work reliably. The {@link java.nio.channels.FileLock FileLock}facility should be used instead.\n * @throws SecurityException If a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkDelete}\u003c/code\u003e method denies delete access to the file\n * @see #delete\n * @since 1.2\n */\n","tf":{"freq":{"virtual":2,"attempt":1,"result":1,"defin":1,"directori":3,"delet":10,"link":2,"normal":1,"made":1,"denot":1,"use":3,"possibl":1,"cancel":1,"languag":1,"therefor":1,"lang":1,"revers":1,"order":1,"file":7,"request":3,"care":1,"regist":2,"exist":1,"deni":1,"note":1,"facil":1,"work":1,"except":1,"protocol":1,"pathnam":1,"check":1,"manag":2,"invok":1,"lock":3,"access":1,"exit":1,"termin":2,"machin":2,"specif":1,"secur":3,"effect":1,"reliabl":1,"instead":1,"will":1,"nio":1,"method":4,"alreadi":1,"java":3,"channel":1},"maxFreq":10,"totalTerms":85},"loc":7}