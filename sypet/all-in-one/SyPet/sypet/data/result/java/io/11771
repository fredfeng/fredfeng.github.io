{"id":11771,"className":"java.io.StreamTokenizer","methodName":"quoteChar","signature":"\u003cjava.io.StreamTokenizer: void quoteChar(int)\u003e","javadoc":"/** \n * Specifies that matching pairs of this character delimit string constants in this tokenizer. \u003cp\u003e When the \u003ccode\u003enextToken\u003c/code\u003e method encounters a string constant, the \u003ccode\u003ettype\u003c/code\u003e field is set to the string delimiter and the \u003ccode\u003esval\u003c/code\u003e field is set to the body of the string. \u003cp\u003e If a string quote character is encountered, then a string is recognized, consisting of all characters after (but not including) the string quote character, up to (but not including) the next occurrence of that same string quote character, or a line terminator, or end of file. The usual escape sequences such as \u003ccode\u003e\"\u0026#92;n\"\u003c/code\u003e and \u003ccode\u003e\"\u0026#92;t\"\u003c/code\u003e are recognized and converted to single characters as the string is parsed. \u003cp\u003eAny other attribute settings for the specified character are cleared.\n * @param ch   the character.\n * @see java.io.StreamTokenizer#nextToken()\n * @see java.io.StreamTokenizer#sval\n * @see java.io.StreamTokenizer#ttype\n */\n","tf":{"freq":{"stream":3,"singl":1,"pair":1,"next":3,"convert":1,"line":1,"escap":1,"specifi":2,"occurr":1,"clear":1,"attribut":1,"token":6,"sequenc":1,"file":1,"sval":2,"quot":4,"recogn":2,"end":1,"usual":1,"delimit":2,"constant":2,"includ":2,"charact":8,"consist":1,"ttype":2,"field":2,"bodi":1,"termin":1,"encount":2,"string":9,"java":3,"method":1,"match":1,"pars":1},"maxFreq":9,"totalTerms":72},"loc":4}