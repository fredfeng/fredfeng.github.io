{"id":11702,"className":"java.io.File","methodName":"listRoots","signature":"\u003cjava.io.File: java.io.File[] listRoots()\u003e","javadoc":"/** \n * List the available filesystem roots. \u003cp\u003e A particular Java platform may support zero or more hierarchically-organized file systems.  Each file system has a {@code root} directory from which all other files in that file systemcan be reached.  Windows platforms, for example, have a root directory for each active drive; UNIX platforms have a single root directory, namely  {@code \"/\"}.  The set of available filesystem roots is affected by various system-level operations such as the insertion or ejection of removable media and the disconnecting or unmounting of physical or virtual disk drives. \u003cp\u003e This method returns an array of  {@code File} objects that denote theroot directories of the available filesystem roots.  It is guaranteed that the canonical pathname of any file physically present on the local machine will begin with one of the roots returned by this method. \u003cp\u003e The canonical pathname of a file that resides on some other machine and is accessed via a remote-filesystem protocol such as SMB or NFS may or may not begin with one of the roots returned by this method.  If the pathname of a remote file is syntactically indistinguishable from the pathname of a local file then it will begin with one of the roots returned by this method.  Thus, for example,  {@code File} objectsdenoting the root directories of the mapped network drives of a Windows platform will be returned by this method, while  {@code File} objectscontaining UNC pathnames will not be returned by this method. \u003cp\u003e Unlike most methods in this class, this method does not throw security exceptions.  If a security manager exists and its  {@link SecurityManager#checkRead(String)} method denies read access to aparticular root directory, then that directory will not appear in the result.\n * @return  An array of {@code File} objects denoting the availablefilesystem roots, or  {@code null} if the set of roots could notbe determined.  The array will be empty if there are no filesystem roots.\n * @since  1.2\n * @see java.nio.file.FileStore\n */\n","tf":{"freq":{"appear":1,"via":1,"store":1,"singl":1,"root":15,"disk":1,"particular":1,"zero":1,"availablefilesystem":1,"syntact":1,"level":1,"oper":1,"drive":3,"file":14,"deni":1,"objectsdenot":1,"platform":4,"except":1,"pathnam":5,"support":1,"indistinguish":1,"remov":1,"systemcan":1,"avail":3,"present":1,"system":3,"machin":2,"window":2,"remot":2,"determin":1,"will":6,"media":1,"array":3,"virtual":1,"canon":2,"result":1,"notb":1,"directori":7,"link":1,"one":3,"denot":2,"eject":1,"object":2,"activ":1,"affect":1,"network":1,"reach":1,"name":1,"unlik":1,"objectscontain":1,"map":1,"unmount":1,"read":2,"theroot":1,"various":1,"exist":1,"hierarch":1,"protocol":1,"may":3,"resid":1,"check":1,"thus":1,"manag":2,"physic":2,"guarante":1,"list":2,"access":2,"empti":1,"begin":3,"secur":3,"organ":1,"string":1,"exampl":2,"nio":1,"java":2,"disconnect":1,"method":9,"local":2,"insert":1,"aparticular":1,"filesystem":5},"maxFreq":15,"totalTerms":168},"loc":3}