{"id":11252,"className":"java.io.FileInputStream","methodName":"FileInputStream","signature":"\u003cjava.io.FileInputStream: void FileInputStream(java.io.FileDescriptor)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eFileInputStream\u003c/code\u003e by using the file descriptor \u003ccode\u003efdObj\u003c/code\u003e, which represents an existing connection to an actual file in the file system. \u003cp\u003e If there is a security manager, its \u003ccode\u003echeckRead\u003c/code\u003e method is called with the file descriptor \u003ccode\u003efdObj\u003c/code\u003e as its argument to see if it\u0027s ok to read the file descriptor. If read access is denied to the file descriptor a \u003ccode\u003eSecurityException\u003c/code\u003e is thrown. \u003cp\u003e If \u003ccode\u003efdObj\u003c/code\u003e is null then a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown. \u003cp\u003e This constructor does not throw an exception if \u003ccode\u003efdObj\u003c/code\u003e is  {@link java.io.FileDescriptor#valid() invalid}. However, if the methods are invoked on the resulting stream to attempt I/O on the stream, an \u003ccode\u003eIOException\u003c/code\u003e is thrown.\n * @param fdObj   the file descriptor to be opened for reading.\n * @throws SecurityException      if a security manager exists and its\u003ccode\u003echeckRead\u003c/code\u003e method denies read access to the file descriptor.\n * @see SecurityManager#checkRead(java.io.FileDescriptor)\n */\n","tf":{"freq":{"attempt":1,"result":1,"valid":1,"call":1,"stream":4,"connect":1,"descriptor":8,"link":1,"use":1,"open":1,"invalid":1,"file":12,"read":7,"howev":1,"exist":2,"deni":2,"constructor":1,"argument":1,"except":5,"thrown":3,"check":3,"repres":1,"creat":1,"invok":1,"manag":3,"access":2,"system":1,"input":2,"secur":5,"actual":1,"pointer":1,"java":2,"obj":5,"method":3},"maxFreq":12,"totalTerms":86},"loc":17}