{"id":10442,"className":"java.sql.Statement","methodName":"executeUpdate","signature":"\u003cjava.sql.Statement: int executeUpdate(java.lang.String,int[])\u003e","javadoc":"/** \n * Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.   This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an \u003ccode\u003eINSERT\u003c/code\u003e statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). \u003cp\u003e \u003cstrong\u003eNote:\u003c/strong\u003eThis method cannot be called on a \u003ccode\u003ePreparedStatement\u003c/code\u003e or \u003ccode\u003eCallableStatement\u003c/code\u003e.\n * @param sql an SQL Data Manipulation Language (DML) statement, such as \u003ccode\u003eINSERT\u003c/code\u003e, \u003ccode\u003eUPDATE\u003c/code\u003e or\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement.\n * @param columnIndexes an array of column indexes indicating the columnsthat should be returned from the inserted row\n * @return either (1) the row count for SQL Data Manipulation Language (DML) statementsor (2) 0 for SQL statements that return nothing\n * @exception SQLException if a database access error occurs,this method is called on a closed \u003ccode\u003eStatement\u003c/code\u003e, the SQL statement returns a \u003ccode\u003eResultSet\u003c/code\u003e object,the second argument supplied to this method is not an \u003ccode\u003eint\u003c/code\u003e array whose elements are valid column indexes, the method is called on a \u003ccode\u003ePreparedStatement\u003c/code\u003e or \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n * @throws SQLTimeoutException when the driver has determined that thetimeout value that was specified by the  {@code setQueryTimeout}method has been exceeded and has at least attempted to cancel the currently running  {@code Statement}\n * @since 1.4\n */\n","tf":{"freq":{"manipul":2,"second":1,"count":1,"least":1,"lexcept":1,"cancel":1,"languag":2,"abl":1,"statementsor":1,"specifi":1,"close":1,"given":2,"thetimeout":1,"callabl":2,"key":3,"argument":1,"element":1,"ignor":1,"index":4,"except":3,"support":2,"whose":1,"avail":2,"prepar":2,"row":2,"databas":1,"statement":16,"columnsthat":1,"queri":1,"ltimeout":1,"updat":1,"strong":2,"determin":1,"contain":2,"will":1,"column":4,"auto":3,"execut":2,"array":5,"attempt":1,"valid":1,"result":1,"call":3,"made":2,"data":2,"signal":1,"object":1,"run":1,"indic":2,"current":1,"noth":2,"valu":1,"driver":4,"note":1,"error":1,"vendor":1,"exceed":1,"suppli":1,"list":1,"access":1,"lfeatur":1,"specif":1,"either":1,"sql":1,"tabl":1,"retriev":1,"generat":3,"target":1,"method":6,"insert":1,"timeout":1,"occur":1},"maxFreq":16,"totalTerms":130},"loc":0}