{"id":10717,"className":"java.sql.Connection","methodName":"setTransactionIsolation","signature":"\u003cjava.sql.Connection: void setTransactionIsolation(int)\u003e","javadoc":"/** \n * Attempts to change the transaction isolation level for this \u003ccode\u003eConnection\u003c/code\u003e object to the one given. The constants defined in the interface \u003ccode\u003eConnection\u003c/code\u003e are the possible transaction isolation levels. \u003cP\u003e \u003cB\u003eNote:\u003c/B\u003e If this method is called during a transaction, the result is implementation-defined.\n * @param level one of the following \u003ccode\u003eConnection\u003c/code\u003e constants:\u003ccode\u003eConnection.TRANSACTION_READ_UNCOMMITTED\u003c/code\u003e, \u003ccode\u003eConnection.TRANSACTION_READ_COMMITTED\u003c/code\u003e, \u003ccode\u003eConnection.TRANSACTION_REPEATABLE_READ\u003c/code\u003e, or \u003ccode\u003eConnection.TRANSACTION_SERIALIZABLE\u003c/code\u003e. (Note that \u003ccode\u003eConnection.TRANSACTION_NONE\u003c/code\u003e cannot be used because it specifies that transactions are not supported.)\n * @exception SQLException if a database access error occurs, thismethod is called on a closed connection or the given parameter is not one of the \u003ccode\u003eConnection\u003c/code\u003e constants\n * @see DatabaseMetaData#supportsTransactionIsolationLevel\n * @see #getTransactionIsolation\n */\n","tf":{"freq":{"attempt":1,"defin":2,"call":2,"result":1,"connect":10,"one":3,"data":1,"lexcept":1,"possibl":1,"use":1,"object":1,"meta":1,"close":1,"specifi":1,"level":4,"thismethod":1,"given":2,"isol":5,"note":2,"follow":1,"except":1,"constant":3,"support":2,"error":1,"paramet":1,"access":1,"databas":2,"transact":7,"method":1,"chang":1,"occur":1},"maxFreq":10,"totalTerms":63},"loc":0}