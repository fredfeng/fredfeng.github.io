{"id":10914,"className":"java.sql.DatabaseMetaData","methodName":"getColumns","signature":"\u003cjava.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Retrieves a description of table columns available in the specified catalog. \u003cP\u003eOnly column descriptions matching the catalog, schema, table and column name criteria are returned.  They are ordered by \u003ccode\u003eTABLE_CAT\u003c/code\u003e,\u003ccode\u003eTABLE_SCHEM\u003c/code\u003e, \u003ccode\u003eTABLE_NAME\u003c/code\u003e, and \u003ccode\u003eORDINAL_POSITION\u003c/code\u003e. \u003cP\u003eEach column description has the following columns: \u003cOL\u003e \u003cLI\u003e\u003cB\u003eTABLE_CAT\u003c/B\u003e String \u003d\u003e table catalog (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eTABLE_SCHEM\u003c/B\u003e String \u003d\u003e table schema (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eTABLE_NAME\u003c/B\u003e String \u003d\u003e table name \u003cLI\u003e\u003cB\u003eCOLUMN_NAME\u003c/B\u003e String \u003d\u003e column name \u003cLI\u003e\u003cB\u003eDATA_TYPE\u003c/B\u003e int \u003d\u003e SQL type from java.sql.Types \u003cLI\u003e\u003cB\u003eTYPE_NAME\u003c/B\u003e String \u003d\u003e Data source dependent type name, for a UDT the type name is fully qualified \u003cLI\u003e\u003cB\u003eCOLUMN_SIZE\u003c/B\u003e int \u003d\u003e column size. \u003cLI\u003e\u003cB\u003eBUFFER_LENGTH\u003c/B\u003e is not used. \u003cLI\u003e\u003cB\u003eDECIMAL_DIGITS\u003c/B\u003e int \u003d\u003e the number of fractional digits. Null is returned for data types where DECIMAL_DIGITS is not applicable. \u003cLI\u003e\u003cB\u003eNUM_PREC_RADIX\u003c/B\u003e int \u003d\u003e Radix (typically either 10 or 2) \u003cLI\u003e\u003cB\u003eNULLABLE\u003c/B\u003e int \u003d\u003e is NULL allowed. \u003cUL\u003e \u003cLI\u003e columnNoNulls - might not allow \u003ccode\u003eNULL\u003c/code\u003e values \u003cLI\u003e columnNullable - definitely allows \u003ccode\u003eNULL\u003c/code\u003e values \u003cLI\u003e columnNullableUnknown - nullability unknown \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eREMARKS\u003c/B\u003e String \u003d\u003e comment describing column (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eCOLUMN_DEF\u003c/B\u003e String \u003d\u003e default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eSQL_DATA_TYPE\u003c/B\u003e int \u003d\u003e unused \u003cLI\u003e\u003cB\u003eSQL_DATETIME_SUB\u003c/B\u003e int \u003d\u003e unused \u003cLI\u003e\u003cB\u003eCHAR_OCTET_LENGTH\u003c/B\u003e int \u003d\u003e for char types the maximum number of bytes in the column \u003cLI\u003e\u003cB\u003eORDINAL_POSITION\u003c/B\u003e int \u003d\u003e index of column in table (starting at 1) \u003cLI\u003e\u003cB\u003eIS_NULLABLE\u003c/B\u003e String  \u003d\u003e ISO rules are used to determine the nullability for a column. \u003cUL\u003e \u003cLI\u003e YES           --- if the column can include NULLs \u003cLI\u003e NO            --- if the column cannot include NULLs \u003cLI\u003e empty string  --- if the nullability for the column is unknown \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eSCOPE_CATALOG\u003c/B\u003e String \u003d\u003e catalog of table that is the scope of a reference attribute (\u003ccode\u003enull\u003c/code\u003e if DATA_TYPE isn\u0027t REF) \u003cLI\u003e\u003cB\u003eSCOPE_SCHEMA\u003c/B\u003e String \u003d\u003e schema of table that is the scope of a reference attribute (\u003ccode\u003enull\u003c/code\u003e if the DATA_TYPE isn\u0027t REF) \u003cLI\u003e\u003cB\u003eSCOPE_TABLE\u003c/B\u003e String \u003d\u003e table name that this the scope of a reference attribute (\u003ccode\u003enull\u003c/code\u003e if the DATA_TYPE isn\u0027t REF) \u003cLI\u003e\u003cB\u003eSOURCE_DATA_TYPE\u003c/B\u003e short \u003d\u003e source type of a distinct type or user-generated Ref type, SQL type from java.sql.Types (\u003ccode\u003enull\u003c/code\u003e if DATA_TYPE isn\u0027t DISTINCT or user-generated REF) \u003cLI\u003e\u003cB\u003eIS_AUTOINCREMENT\u003c/B\u003e String  \u003d\u003e Indicates whether this column is auto incremented \u003cUL\u003e \u003cLI\u003e YES           --- if the column is auto incremented \u003cLI\u003e NO            --- if the column is not auto incremented \u003cLI\u003e empty string  --- if it cannot be determined whether the column is auto incremented \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eIS_GENERATEDCOLUMN\u003c/B\u003e String  \u003d\u003e Indicates whether this is a generated column \u003cUL\u003e \u003cLI\u003e YES           --- if this a generated column \u003cLI\u003e NO            --- if this not a generated column \u003cLI\u003e empty string  --- if it cannot be determined whether this is a generated column \u003c/UL\u003e \u003c/OL\u003e \u003cp\u003eThe COLUMN_SIZE column specifies the column size for the given column. For numeric data, this is the maximum precision.  For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.\n * @param catalog a catalog name; must match the catalog name as itis stored in the database; \"\" retrieves those without a catalog; \u003ccode\u003enull\u003c/code\u003e means that the catalog name should not be used to narrow the search\n * @param schemaPattern a schema name pattern; must match the schema nameas it is stored in the database; \"\" retrieves those without a schema; \u003ccode\u003enull\u003c/code\u003e means that the schema name should not be used to narrow the search\n * @param tableNamePattern a table name pattern; must match thetable name as it is stored in the database\n * @param columnNamePattern a column name pattern; must match the columnname as it is stored in the database\n * @return \u003ccode\u003eResultSet\u003c/code\u003e - each row is a column description\n * @exception SQLException if a database access error occurs\n * @see #getSearchStringEscape\n */\n","tf":{"freq":{"lls":2,"store":4,"second":1,"singl":1,"lexcept":1,"type":12,"must":4,"whether":4,"distinct":1,"specifi":2,"schema":8,"given":1,"search":3,"refer":3,"precis":2,"quot":1,"datetim":1,"follow":1,"increment":4,"except":1,"index":1,"charact":3,"numer":1,"catalog":9,"descript":4,"describ":1,"avail":1,"number":2,"without":2,"row":1,"columnnam":1,"databas":5,"size":3,"digit":1,"unus":2,"start":1,"maximum":3,"determin":3,"definit":1,"enclos":1,"column":34,"auto":4,"sourc":2,"match":5,"comment":1,"iti":1,"result":1,"might":1,"binari":1,"scope":3,"allow":4,"data":6,"typic":1,"interpret":1,"use":4,"nullabl":5,"escap":1,"applic":2,"namea":1,"attribut":3,"indic":2,"order":1,"rule":1,"name":16,"length":4,"mean":2,"valu":4,"thetabl":1,"datatyp":2,"may":4,"fraction":2,"assum":1,"includ":2,"error":1,"criteria":1,"depend":1,"fulli":1,"unknown":3,"access":1,"represent":1,"empti":3,"ref":1,"narrow":2,"either":1,"sql":2,"pattern":6,"compon":1,"retriev":3,"tabl":11,"radix":1,"generat":6,"string":19,"java":2,"user":2,"qualifi":1,"occur":1},"maxFreq":34,"totalTerms":297},"loc":0}