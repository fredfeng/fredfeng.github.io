{"id":10659,"className":"java.sql.ResultSet","methodName":"updateClob","signature":"\u003cjava.sql.ResultSet: void updateClob(int,java.io.Reader,long)\u003e","javadoc":"/** \n * Updates the designated column using the given \u003ccode\u003eReader\u003c/code\u003e object, which is the given number of characters long. When a very large UNICODE value is input to a \u003ccode\u003eLONGVARCHAR\u003c/code\u003e parameter, it may be more practical to send it via a \u003ccode\u003ejava.io.Reader\u003c/code\u003e object. The JDBC driver will do any necessary conversion from UNICODE to the database char format. \u003cp\u003e The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the \u003ccode\u003eupdateRow\u003c/code\u003e or \u003ccode\u003einsertRow\u003c/code\u003e methods are called to update the database.\n * @param columnIndex the first column is 1, the second is 2, ...\n * @param reader An object that contains the data to set the parameter value to.\n * @param length the number of characters in the parameter data.\n * @exception SQLException if the columnIndex is not valid;if a database access error occurs; the result set concurrency is \u003ccode\u003eCONCUR_READ_ONLY\u003c/code\u003e or this method is called on a closed result set\n * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method\n * @since 1.6\n */\n","tf":{"freq":{"via":1,"send":1,"second":1,"lexcept":1,"necessari":1,"close":1,"given":2,"index":2,"except":3,"support":1,"charact":2,"number":2,"format":1,"databas":4,"row":4,"input":1,"reader":3,"updat":8,"contain":1,"will":1,"column":5,"call":2,"valid":1,"result":2,"concurr":1,"clob":1,"convers":1,"data":2,"use":2,"object":3,"practic":1,"current":1,"length":1,"driver":2,"valu":3,"may":1,"error":1,"paramet":3,"supportthi":1,"access":1,"lfeatur":1,"larg":1,"instead":1,"java":1,"method":5,"insert":2,"first":1,"design":1,"occur":1},"maxFreq":8,"totalTerms":90},"loc":0}