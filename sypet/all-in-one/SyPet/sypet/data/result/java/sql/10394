{"id":10394,"className":"java.sql.PreparedStatement","methodName":"setBinaryStream","signature":"\u003cjava.sql.PreparedStatement: void setBinaryStream(int,java.io.InputStream,long)\u003e","javadoc":"/** \n * Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a \u003ccode\u003eLONGVARBINARY\u003c/code\u003e parameter, it may be more practical to send it via a \u003ccode\u003ejava.io.InputStream\u003c/code\u003e object. The data will be read from the stream as needed until end-of-file is reached. \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.\n * @param parameterIndex the first parameter is 1, the second is 2, ...\n * @param x the java input stream which contains the binary parameter value\n * @param length the number of bytes in the stream\n * @exception SQLException if parameterIndex does not correspond to a parametermarker in the SQL statement; if a database access error occurs or this method is called on a closed \u003ccode\u003ePreparedStatement\u003c/code\u003e\n * @since 1.6\n */\n","tf":{"freq":{"need":1,"call":1,"stream":8,"binari":3,"send":1,"via":1,"second":1,"correspond":1,"lexcept":1,"data":1,"object":3,"close":1,"specifi":1,"reach":1,"given":1,"file":1,"length":1,"practic":1,"read":1,"valu":2,"end":1,"note":1,"except":1,"index":2,"may":1,"error":1,"standard":2,"paramet":6,"number":2,"parametermark":1,"access":1,"prepar":1,"databas":1,"statement":2,"either":1,"input":4,"larg":1,"contain":1,"subclass":1,"will":2,"method":1,"java":3,"first":1,"design":1,"occur":1},"maxFreq":8,"totalTerms":72},"loc":0}