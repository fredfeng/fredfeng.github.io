{"id":10289,"className":"java.sql.SQLClientInfoException","methodName":"SQLClientInfoException","signature":"\u003cjava.sql.SQLClientInfoException: void SQLClientInfoException(java.lang.String,java.lang.String,java.util.Map,java.lang.Throwable)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eSQLClientInfoException\u003c/code\u003e object initialized with a given  \u003ccode\u003ereason\u003c/code\u003e, \u003ccode\u003eSQLState\u003c/code\u003e, \u003ccode\u003ecause\u003c/code\u003e and \u003ccode\u003efailedProperties\u003c/code\u003e.  The vendor code is initialized to 0. \u003cp\u003e\n * @param reason                            a description of the exception\n * @param SQLState                          an XOPEN or SQL:2003 code identifying the exception\n * @param failedProperties          A Map containing the property values that could notbe set.  The keys in the Map contain the names of the client info properties that could not be set and the values contain one of the reason codes defined in \u003ccode\u003eClientInfoStatus\u003c/code\u003e\n * @param cause                                     the underlying reason for this \u003ccode\u003eSQLException\u003c/code\u003e (which is saved for later retrieval by the \u003ccode\u003egetCause()\u003c/code\u003e method); may be null indicatingthe cause is non-existent or unknown. \u003cp\u003e\n * @since 1.6\n */\n","tf":{"freq":{"defin":1,"notb":1,"save":1,"client":3,"reason":4,"one":1,"lexcept":1,"identifi":1,"object":1,"info":4,"fail":2,"given":1,"name":1,"map":2,"valu":2,"initi":2,"exist":1,"key":1,"may":1,"except":4,"status":1,"later":1,"vendor":1,"descript":1,"unknown":1,"lclient":1,"non":1,"caus":4,"indicatingth":1,"retriev":1,"contain":3,"method":1,"lstate":2,"construct":1,"properti":4},"maxFreq":4,"totalTerms":59},"loc":6}