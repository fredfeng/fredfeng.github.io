{"id":10182,"className":"java.sql.CallableStatement","methodName":"getObject","signature":"\u003cjava.sql.CallableStatement: java.lang.Object getObject(java.lang.String,java.util.Map)\u003e","javadoc":"/** \n * Returns an object representing the value of OUT parameter \u003ccode\u003eparameterName\u003c/code\u003e and uses \u003ccode\u003emap\u003c/code\u003e for the custom mapping of the parameter value. \u003cp\u003e This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method \u003ccode\u003eregisterOutParameter\u003c/code\u003e.  By registering the target JDBC type as \u003ccode\u003ejava.sql.Types.OTHER\u003c/code\u003e, this method can be used to read database-specific abstract data types.\n * @param parameterName the name of the parameter\n * @param map the mapping from SQL type names to Java classes\n * @return a \u003ccode\u003ejava.lang.Object\u003c/code\u003e holding the OUT parameter value\n * @exception SQLException if parameterName does not correspond to a namedparameter; if a database access error occurs or this method is called on a closed \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method\n * @see #setObject\n * @since 1.4\n */\n","tf":{"freq":{"call":1,"namedparamet":1,"correspond":2,"data":1,"lexcept":1,"use":3,"object":5,"type":6,"lang":1,"close":1,"callabl":1,"name":5,"map":4,"regist":3,"read":1,"driver":1,"valu":3,"custom":1,"except":3,"support":1,"error":1,"whose":1,"repres":1,"hold":1,"paramet":9,"supportthi":1,"access":1,"databas":2,"lfeatur":1,"statement":1,"specif":1,"sql":1,"target":1,"java":4,"method":5,"occur":1},"maxFreq":9,"totalTerms":77},"loc":0}