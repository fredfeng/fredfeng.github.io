{"id":10981,"className":"java.sql.SQLException","methodName":"SQLException","signature":"\u003cjava.sql.SQLException: void SQLException(java.lang.String,java.lang.String,int,java.lang.Throwable)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eSQLException\u003c/code\u003e object with a given \u003ccode\u003ereason\u003c/code\u003e, \u003ccode\u003eSQLState\u003c/code\u003e, \u003ccode\u003evendorCode\u003c/code\u003e and  \u003ccode\u003ecause\u003c/code\u003e. \u003cp\u003e\n * @param reason a description of the exception\n * @param sqlState an XOPEN or SQL:2003 code identifying the exception\n * @param vendorCode a database vendor-specific exception code\n * @param cause the underlying reason for this \u003ccode\u003eSQLException\u003c/code\u003e(which is saved for later retrieval by the \u003ccode\u003egetCause()\u003c/code\u003e method); may be null indicating the cause is non-existent or unknown.\n * @since 1.6\n */\n","tf":{"freq":{"may":1,"except":4,"save":1,"reason":3,"later":1,"vendor":3,"lexcept":2,"descript":1,"state":1,"identifi":1,"unknown":1,"object":1,"databas":1,"non":1,"specif":1,"caus":4,"sql":1,"indic":1,"given":1,"retriev":1,"method":1,"lstate":1,"construct":1,"exist":1},"maxFreq":4,"totalTerms":35},"loc":13}