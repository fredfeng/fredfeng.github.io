{"id":10711,"className":"java.sql.Connection","methodName":"isClosed","signature":"\u003cjava.sql.Connection: boolean isClosed()\u003e","javadoc":"/** \n * Retrieves whether this \u003ccode\u003eConnection\u003c/code\u003e object has been closed.  A connection is closed if the method \u003ccode\u003eclose\u003c/code\u003e has been called on it or if certain fatal errors have occurred. This method is guaranteed to return \u003ccode\u003etrue\u003c/code\u003e only when it is called after the method \u003ccode\u003eConnection.close\u003c/code\u003e has been called. \u003cP\u003e This method generally cannot be called to determine whether a connection to a database is valid or invalid.  A typical client can determine that a connection is invalid by catching any exceptions that might be thrown when an operation is attempted.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this \u003ccode\u003eConnection\u003c/code\u003e objectis closed; \u003ccode\u003efalse\u003c/code\u003e if it is still open\n * @exception SQLException if a database access error occurs\n */\n","tf":{"freq":{"fals":1,"attempt":1,"call":4,"valid":1,"might":1,"objecti":1,"connect":6,"client":1,"lexcept":1,"typic":1,"object":1,"whether":2,"close":6,"open":1,"invalid":2,"oper":1,"except":2,"thrown":1,"error":2,"guarante":1,"fatal":1,"true":2,"still":1,"access":1,"general":1,"databas":2,"retriev":1,"determin":2,"method":4,"certain":1,"occur":2},"maxFreq":6,"totalTerms":55},"loc":0}