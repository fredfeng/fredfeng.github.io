{"id":10141,"className":"java.sql.CallableStatement","methodName":"registerOutParameter","signature":"\u003cjava.sql.CallableStatement: void registerOutParameter(java.lang.String,int,java.lang.String)\u003e","javadoc":"/** \n * Registers the designated output parameter.  This version of the method \u003ccode\u003eregisterOutParameter\u003c/code\u003e should be used for a user-named or REF output parameter.  Examples of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. \u003cp\u003e All OUT parameters must be registered before a stored procedure is executed. \u003cp\u003e For a user-named parameter the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given.  A JDBC driver that does not need the type code and type name information may ignore it.   To be portable, however, applications should always provide these values for user-named and REF parameters. Although it is intended for user-named and REF parameters, this method may be used to register a parameter of any JDBC type. If the parameter does not have a user-named or REF type, the typeName parameter is ignored. \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e When reading the value of an out parameter, you must use the \u003ccode\u003egetXXX\u003c/code\u003e method whose Java type XXX corresponds to the parameter\u0027s registered SQL type.\n * @param parameterName the name of the parameter\n * @param sqlType a value from {@link java.sql.Types}\n * @param typeName the fully-qualified name of an SQL structured type\n * @exception SQLException if parameterName does not correspond to a namedparameter; if a database access error occurs or this method is called on a closed \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @exception SQLFeatureNotSupportedException if \u003ccode\u003esqlType\u003c/code\u003e isa \u003ccode\u003eARRAY\u003c/code\u003e, \u003ccode\u003eBLOB\u003c/code\u003e, \u003ccode\u003eCLOB\u003c/code\u003e, \u003ccode\u003eDATALINK\u003c/code\u003e, \u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \u003ccode\u003eNCHAR\u003c/code\u003e, \u003ccode\u003eNCLOB\u003c/code\u003e, \u003ccode\u003eNVARCHAR\u003c/code\u003e, \u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \u003ccode\u003eREF\u003c/code\u003e, \u003ccode\u003eROWID\u003c/code\u003e, \u003ccode\u003eSQLXML\u003c/code\u003e or  \u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method\n * @see Types\n * @since 1.4\n */\n","tf":{"freq":{"need":1,"store":1,"lexcept":1,"type":20,"must":2,"close":1,"referenc":1,"although":1,"requir":1,"given":2,"callabl":1,"howev":1,"ignor":2,"except":3,"support":3,"whose":1,"alway":1,"provid":1,"procedur":1,"databas":1,"statement":1,"inform":1,"execut":1,"output":2,"array":1,"call":1,"namedparamet":1,"portabl":1,"structur":1,"correspond":2,"link":1,"data":2,"use":3,"applic":1,"version":1,"name":16,"isa":1,"regist":6,"read":1,"driver":3,"valu":3,"note":1,"may":2,"includ":1,"error":1,"paramet":18,"fulli":3,"access":1,"lfeatur":1,"sql":3,"exampl":1,"method":5,"java":2,"intend":1,"also":1,"user":6,"qualifi":3,"design":1,"occur":1},"maxFreq":20,"totalTerms":148},"loc":0}