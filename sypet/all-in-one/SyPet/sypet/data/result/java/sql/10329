{"id":10329,"className":"java.sql.SQLOutput","methodName":"writeObject","signature":"\u003cjava.sql.SQLOutput: void writeObject(java.sql.SQLData)\u003e","javadoc":"/** \n * Writes to the stream the data contained in the given \u003ccode\u003eSQLData\u003c/code\u003e object. When the \u003ccode\u003eSQLData\u003c/code\u003e object is \u003ccode\u003enull\u003c/code\u003e, this method writes an SQL \u003ccode\u003eNULL\u003c/code\u003e to the stream. Otherwise, it calls the \u003ccode\u003eSQLData.writeSQL\u003c/code\u003e method of the given object, which writes the object\u0027s attributes to the stream. The implementation of the method \u003ccode\u003eSQLData.writeSQ\u003c/code\u003e calls the appropriate \u003ccode\u003eSQLOutput\u003c/code\u003e writer method(s) for writing each of the object\u0027s attributes in order. The attributes must be read from an \u003ccode\u003eSQLInput\u003c/code\u003e input stream and written to an \u003ccode\u003eSQLOutput\u003c/code\u003e output stream in the same order in which they were listed in the SQL definition of the user-defined type.\n * @param x the object representing data of an SQL structured ordistinct type\n * @exception SQLException if a database access error occurs\n * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method\n * @since 1.2\n */\n","tf":{"freq":{"otherwis":1,"defin":1,"call":2,"stream":5,"structur":1,"lexcept":1,"data":2,"object":7,"type":2,"ldata":4,"must":1,"attribut":3,"given":2,"order":2,"written":1,"write":7,"read":1,"driver":1,"writer":1,"except":3,"support":1,"error":1,"repres":1,"supportthi":1,"loutput":2,"list":1,"access":1,"databas":1,"linput":1,"lfeatur":1,"input":1,"ordistinct":1,"appropri":1,"contain":1,"definit":1,"method":5,"output":1,"user":1,"occur":1},"maxFreq":7,"totalTerms":72},"loc":0}