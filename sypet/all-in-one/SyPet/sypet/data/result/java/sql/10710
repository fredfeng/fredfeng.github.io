{"id":10710,"className":"java.sql.Connection","methodName":"close","signature":"\u003cjava.sql.Connection: void close()\u003e","javadoc":"/** \n * Releases this \u003ccode\u003eConnection\u003c/code\u003e object\u0027s database and JDBC resources immediately instead of waiting for them to be automatically released. \u003cP\u003e Calling the method \u003ccode\u003eclose\u003c/code\u003e on a \u003ccode\u003eConnection\u003c/code\u003e object that is already closed is a no-op. \u003cP\u003e It is \u003cb\u003estrongly recommended\u003c/b\u003e that an application explicitly commits or rolls back an active transaction prior to calling the \u003ccode\u003eclose\u003c/code\u003e method.  If the \u003ccode\u003eclose\u003c/code\u003e method is called and there is an active transaction, the results are implementation-defined. \u003cP\u003e\n * @exception SQLException SQLException if a database access error occurs\n */\n","tf":{"freq":{"defin":1,"call":3,"result":1,"connect":2,"lexcept":2,"wait":1,"object":2,"activ":2,"automat":1,"recommend":1,"applic":1,"close":5,"prior":1,"resourc":1,"roll":1,"releas":2,"commit":1,"immedi":1,"except":1,"error":1,"back":1,"access":1,"databas":2,"transact":2,"strong":1,"explicit":1,"instead":1,"method":3,"alreadi":1,"occur":1},"maxFreq":5,"totalTerms":45},"loc":0}