{"id":10298,"className":"java.sql.BatchUpdateException","methodName":"BatchUpdateException","signature":"\u003cjava.sql.BatchUpdateException: void BatchUpdateException(java.lang.Throwable)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eBatchUpdateException\u003c/code\u003e object initialized with a given \u003ccode\u003ecause\u003c/code\u003e. The \u003ccode\u003eSQLState\u003c/code\u003e and \u003ccode\u003eupdateCounts\u003c/code\u003e are initialized to \u003ccode\u003enull\u003c/code\u003e and the vendor code is initialized to 0. The \u003ccode\u003ereason\u003c/code\u003e  is initialized to \u003ccode\u003enull\u003c/code\u003e if \u003ccode\u003ecause\u003d\u003dnull\u003c/code\u003e or to \u003ccode\u003ecause.toString()\u003c/code\u003e if \u003ccode\u003ecause!\u003dnull\u003c/code\u003e.\n * @param cause the underlying reason for this \u003ccode\u003eSQLException\u003c/code\u003e(which is saved for later retrieval by the \u003ccode\u003egetCause()\u003c/code\u003e method); may be null indicating the cause is non-existent or unknown.\n * @since 1.6\n */\n","tf":{"freq":{"may":1,"except":2,"save":1,"count":1,"reason":2,"later":1,"vendor":1,"lexcept":1,"unknown":1,"object":1,"non":1,"caus":7,"indic":1,"updat":3,"given":1,"retriev":1,"batch":2,"string":1,"method":1,"lstate":1,"construct":1,"initi":4,"exist":1},"maxFreq":7,"totalTerms":37},"loc":3}