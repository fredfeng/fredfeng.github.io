{"id":10446,"className":"java.sql.Statement","methodName":"execute","signature":"\u003cjava.sql.Statement: boolean execute(java.lang.String,java.lang.String[])\u003e","javadoc":"/** \n * Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the names of the columns in the target table that contain the auto-generated keys that should be made available.  The driver will ignore the array if the SQL statement is not an \u003ccode\u003eINSERT\u003c/code\u003e statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). \u003cP\u003e In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts.  Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. \u003cP\u003e The \u003ccode\u003eexecute\u003c/code\u003e method executes an SQL statement and indicates the form of the first result.  You must then use the methods \u003ccode\u003egetResultSet\u003c/code\u003e or \u003ccode\u003egetUpdateCount\u003c/code\u003e to retrieve the result, and \u003ccode\u003egetMoreResults\u003c/code\u003e to move to any subsequent result(s). \u003cp\u003e \u003cstrong\u003eNote:\u003c/strong\u003eThis method cannot be called on a \u003ccode\u003ePreparedStatement\u003c/code\u003e or \u003ccode\u003eCallableStatement\u003c/code\u003e.\n * @param sql any SQL statement\n * @param columnNames an array of the names of the columns in the insertedrow that should be made available for retrieval by a call to the method \u003ccode\u003egetGeneratedKeys\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if the next result is a \u003ccode\u003eResultSet\u003c/code\u003eobject; \u003ccode\u003efalse\u003c/code\u003e if it is an update count or there are no more results\n * @exception SQLException if a database access error occurs,this method is called on a closed \u003ccode\u003eStatement\u003c/code\u003e,the elements of the \u003ccode\u003eString\u003c/code\u003e array passed to this method are not valid column names, the method is called on a \u003ccode\u003ePreparedStatement\u003c/code\u003e or \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n * @throws SQLTimeoutException when the driver has determined that thetimeout value that was specified by the  {@code setQueryTimeout}method has been exceeded and has at least attempted to cancel the currently running  {@code Statement}\n * @see #getResultSet\n * @see #getUpdateCount\n * @see #getMoreResults\n * @see #getGeneratedKeys\n * @since 1.4\n */\n","tf":{"freq":{"fals":1,"count":4,"store":1,"singl":1,"least":1,"normal":1,"lexcept":1,"cancel":1,"abl":1,"situat":1,"must":1,"specifi":1,"close":1,"given":2,"thetimeout":1,"callabl":2,"key":5,"dynam":1,"move":1,"element":1,"except":3,"ignor":2,"support":2,"multipl":3,"form":1,"avail":3,"databas":1,"prepar":2,"procedur":1,"statement":14,"queri":1,"ltimeout":1,"updat":4,"strong":2,"insertedrow":1,"determin":1,"contain":2,"will":1,"column":4,"auto":3,"execut":6,"array":5,"attempt":1,"valid":1,"call":4,"result":13,"next":1,"made":3,"use":1,"signal":1,"object":1,"run":1,"indic":2,"uncommon":1,"unless":1,"name":4,"current":1,"valu":1,"driver":4,"subsequ":1,"note":1,"may":3,"error":1,"vendor":1,"exceed":1,"true":1,"list":1,"unknown":1,"access":1,"know":1,"pass":1,"lfeatur":1,"specif":1,"sql":1,"tabl":1,"retriev":3,"generat":5,"string":2,"target":1,"method":9,"first":1,"timeout":1,"occur":1},"maxFreq":14,"totalTerms":174},"loc":0}