{"id":10224,"className":"java.sql.CallableStatement","methodName":"getObject","signature":"\u003cjava.sql.CallableStatement: T getObject(java.lang.String,java.lang.Class)\u003e","javadoc":"/** \n * \u003cp\u003eReturns an object representing the value of OUT parameter {@code parameterName} and will convert from theSQL type of the parameter to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a \u003ccode\u003eSQLException\u003c/code\u003e is thrown. \u003cp\u003e At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements  {@code SQLData}, or  {@code Struct}. Additional conversions may be supported and are vendor defined.\n * @param parameterName the name of the parameter\n * @param type Class representing the Java data type to convertthe designated parameter to.\n * @return an instance of {@code type} holding the OUT parametervalue\n * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs\n * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method\n * @since 1.7\n */\n","tf":{"freq":{"defin":3,"detail":1,"minimum":1,"convers":7,"data":2,"lexcept":2,"convert":1,"object":2,"type":9,"must":1,"ldata":1,"specifi":1,"struct":1,"request":1,"name":3,"driver":1,"valu":1,"parametervalu":1,"addit":1,"except":3,"may":2,"thrown":1,"support":6,"error":2,"repres":2,"vendor":1,"hold":1,"paramet":6,"supportthi":1,"provid":1,"instanc":1,"lfeatur":1,"caus":1,"tabl":1,"appropri":1,"exampl":1,"convertth":1,"will":1,"method":2,"java":3,"appendix":1,"user":1,"design":1,"occur":2,"oranoth":1},"maxFreq":9,"totalTerms":85},"loc":0}