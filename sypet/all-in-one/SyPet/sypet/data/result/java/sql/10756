{"id":10756,"className":"java.sql.SQLData","methodName":"writeSQL","signature":"\u003cjava.sql.SQLData: void writeSQL(java.sql.SQLOutput)\u003e","javadoc":"/** \n * Writes this object to the given SQL data stream, converting it back to its SQL value in the data source. The implementation of the method must follow this protocol:\u003cBR\u003e It must write each of the attributes of the SQL type to the given output stream.  This is done by calling a method of the output stream to write each item, in the order that they appear in the SQL definition of the type. Specifically, it must call the appropriate \u003ccode\u003eSQLOutput\u003c/code\u003e writer method(s) (\u003ccode\u003ewriteInt\u003c/code\u003e, \u003ccode\u003ewriteString\u003c/code\u003e, and so on) to do the following: for a Distinct Type, write its single data element; for a Structured Type, write a value for each attribute of the SQL type.\n * @param stream the \u003ccode\u003eSQLOutput\u003c/code\u003e object to which to write the data forthe value that was custom mapped\n * @exception SQLException if there is a database access error\n * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method\n * @see SQLOutput\n * @since 1.2\n */\n","tf":{"freq":{"forth":1,"call":2,"stream":4,"appear":1,"structur":1,"singl":1,"lexcept":1,"data":4,"convert":1,"object":2,"type":5,"must":3,"distinct":1,"attribut":2,"given":2,"order":1,"map":1,"write":9,"driver":1,"valu":3,"writer":1,"custom":1,"follow":2,"element":1,"except":3,"protocol":1,"support":1,"error":1,"done":1,"back":1,"supportthi":1,"loutput":3,"access":1,"databas":1,"lfeatur":1,"specif":1,"appropri":1,"string":1,"item":1,"definit":1,"method":4,"sourc":1,"output":2},"maxFreq":9,"totalTerms":78},"loc":0}