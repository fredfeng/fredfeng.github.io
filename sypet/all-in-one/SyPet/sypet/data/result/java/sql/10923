{"id":10923,"className":"java.sql.DatabaseMetaData","methodName":"getTypeInfo","signature":"\u003cjava.sql.DatabaseMetaData: java.sql.ResultSet getTypeInfo()\u003e","javadoc":"/** \n * Retrieves a description of all the data types supported by this database. They are ordered by DATA_TYPE and then by how closely the data type maps to the corresponding JDBC SQL type. \u003cP\u003eIf the database supports SQL distinct types, then getTypeInfo() will return a single row with a TYPE_NAME of DISTINCT and a DATA_TYPE of Types.DISTINCT. If the database supports SQL structured types, then getTypeInfo() will return a single row with a TYPE_NAME of STRUCT and a DATA_TYPE of Types.STRUCT. \u003cP\u003eIf SQL distinct or structured types are supported, then information on the individual types may be obtained from the getUDTs() method. \u003cP\u003eEach type description has the following columns: \u003cOL\u003e \u003cLI\u003e\u003cB\u003eTYPE_NAME\u003c/B\u003e String \u003d\u003e Type name \u003cLI\u003e\u003cB\u003eDATA_TYPE\u003c/B\u003e int \u003d\u003e SQL data type from java.sql.Types \u003cLI\u003e\u003cB\u003ePRECISION\u003c/B\u003e int \u003d\u003e maximum precision \u003cLI\u003e\u003cB\u003eLITERAL_PREFIX\u003c/B\u003e String \u003d\u003e prefix used to quote a literal (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eLITERAL_SUFFIX\u003c/B\u003e String \u003d\u003e suffix used to quote a literal (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eCREATE_PARAMS\u003c/B\u003e String \u003d\u003e parameters used in creating the type (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eNULLABLE\u003c/B\u003e short \u003d\u003e can you use NULL for this type. \u003cUL\u003e \u003cLI\u003e typeNoNulls - does not allow NULL values \u003cLI\u003e typeNullable - allows NULL values \u003cLI\u003e typeNullableUnknown - nullability unknown \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eCASE_SENSITIVE\u003c/B\u003e boolean\u003d\u003e is it case sensitive. \u003cLI\u003e\u003cB\u003eSEARCHABLE\u003c/B\u003e short \u003d\u003e can you use \"WHERE\" based on this type: \u003cUL\u003e \u003cLI\u003e typePredNone - No support \u003cLI\u003e typePredChar - Only supported with WHERE .. LIKE \u003cLI\u003e typePredBasic - Supported except for WHERE .. LIKE \u003cLI\u003e typeSearchable - Supported for all WHERE .. \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eUNSIGNED_ATTRIBUTE\u003c/B\u003e boolean \u003d\u003e is it unsigned. \u003cLI\u003e\u003cB\u003eFIXED_PREC_SCALE\u003c/B\u003e boolean \u003d\u003e can it be a money value. \u003cLI\u003e\u003cB\u003eAUTO_INCREMENT\u003c/B\u003e boolean \u003d\u003e can it be used for an auto-increment value. \u003cLI\u003e\u003cB\u003eLOCAL_TYPE_NAME\u003c/B\u003e String \u003d\u003e localized version of type name (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eMINIMUM_SCALE\u003c/B\u003e short \u003d\u003e minimum scale supported \u003cLI\u003e\u003cB\u003eMAXIMUM_SCALE\u003c/B\u003e short \u003d\u003e maximum scale supported \u003cLI\u003e\u003cB\u003eSQL_DATA_TYPE\u003c/B\u003e int \u003d\u003e unused \u003cLI\u003e\u003cB\u003eSQL_DATETIME_SUB\u003c/B\u003e int \u003d\u003e unused \u003cLI\u003e\u003cB\u003eNUM_PREC_RADIX\u003c/B\u003e int \u003d\u003e usually 2 or 10 \u003c/OL\u003e \u003cp\u003eThe PRECISION column represents the maximum column size that the server supports for the given datatype. For numeric data, this is the maximum precision.  For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.\n * @return a \u003ccode\u003eResultSet\u003c/code\u003e object in which each row is an SQLtype description\n * @exception SQLException if a database access error occurs\n */\n","tf":{"freq":{"second":1,"singl":2,"lexcept":1,"type":28,"info":3,"close":1,"distinct":2,"searchabl":1,"given":1,"basic":1,"precis":3,"none":1,"quot":2,"datetim":1,"follow":1,"increment":1,"liter":2,"sensit":1,"except":2,"support":11,"charact":3,"numer":1,"creat":1,"descript":3,"row":3,"databas":4,"size":2,"inform":1,"obtain":1,"unus":2,"maximum":5,"unsign":1,"prefix":1,"column":4,"will":2,"auto":1,"pred":3,"ltype":1,"result":1,"scale":2,"binari":1,"allow":3,"minimum":1,"structur":2,"correspond":1,"data":7,"use":6,"object":1,"nullabl":3,"applic":1,"version":1,"order":1,"name":2,"length":4,"money":1,"map":1,"valu":4,"datatyp":3,"individu":1,"usual":1,"fraction":1,"may":5,"assum":1,"error":1,"repres":1,"paramet":1,"unknown":2,"access":1,"suffix":1,"represent":1,"sql":1,"compon":1,"retriev":1,"string":6,"base":1,"server":1,"method":1,"java":1,"local":1,"occur":1},"maxFreq":28,"totalTerms":183},"loc":0}