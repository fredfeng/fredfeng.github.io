{"id":10508,"className":"java.sql.ResultSet","methodName":"getBinaryStream","signature":"\u003cjava.sql.ResultSet: java.io.InputStream getBinaryStream(int)\u003e","javadoc":"/** \n * Retrieves the value of the designated column in the current row of this \u003ccode\u003eResultSet\u003c/code\u003e object as a  stream of uninterpreted bytes. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large \u003ccode\u003eLONGVARBINARY\u003c/code\u003e values. \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream.  Also, a stream may return \u003ccode\u003e0\u003c/code\u003e when the method \u003ccode\u003eInputStream.available\u003c/code\u003e is called whether there is data available or not.\n * @param columnIndex the first column is 1, the second is 2, ...\n * @return a Java input stream that delivers the database column valueas a stream of uninterpreted bytes; if the value is SQL \u003ccode\u003eNULL\u003c/code\u003e, the value returned is \u003ccode\u003enull\u003c/code\u003e\n * @exception SQLException if the columnIndex is not valid;if a database access error occurs or this method is called on a closed result set\n */\n","tf":{"freq":{"valid":1,"result":2,"call":3,"stream":9,"binari":1,"chunk":1,"second":1,"getter":1,"suitabl":1,"next":1,"lexcept":1,"implicit":1,"data":2,"particular":1,"object":1,"whether":1,"must":1,"close":2,"prior":1,"uninterpret":2,"current":1,"read":2,"valu":6,"note":1,"except":1,"valuea":1,"index":2,"may":1,"error":1,"avail":2,"access":1,"databas":2,"row":1,"input":2,"retriev":2,"larg":1,"deliv":1,"column":6,"java":1,"method":4,"first":1,"also":1,"design":1,"occur":1},"maxFreq":9,"totalTerms":77},"loc":0}