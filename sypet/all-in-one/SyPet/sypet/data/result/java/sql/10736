{"id":10736,"className":"java.sql.Connection","methodName":"prepareStatement","signature":"\u003cjava.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])\u003e","javadoc":"/** \n * Creates a default \u003ccode\u003ePreparedStatement\u003c/code\u003e object capable of returning the auto-generated keys designated by the given array. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available.  The driver will ignore the array if the SQL statement is not an \u003ccode\u003eINSERT\u003c/code\u003e statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). \u003cp\u003e An SQL statement with or without IN parameters can be pre-compiled and stored in a \u003ccode\u003ePreparedStatement\u003c/code\u003e object. This object can then be used to efficiently execute this statement multiple times. \u003cP\u003e \u003cB\u003eNote:\u003c/B\u003e This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method \u003ccode\u003eprepareStatement\u003c/code\u003e will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the \u003ccode\u003ePreparedStatement\u003c/code\u003e object is executed.  This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. \u003cP\u003e Result sets created using the returned \u003ccode\u003ePreparedStatement\u003c/code\u003e object will by default be type \u003ccode\u003eTYPE_FORWARD_ONLY\u003c/code\u003e and have a concurrency level of \u003ccode\u003eCONCUR_READ_ONLY\u003c/code\u003e. The holdability of the created result sets can be determined by calling  {@link #getHoldability}.\n * @param sql an SQL statement that may contain one or more \u0027?\u0027 INparameter placeholders\n * @param columnIndexes an array of column indexes indicating the columnsthat should be returned from the inserted row or rows\n * @return a new \u003ccode\u003ePreparedStatement\u003c/code\u003e object, containing thepre-compiled statement, that is capable of returning the auto-generated keys designated by the given array of column indexes\n * @exception SQLException if a database access error occursor this method is called on a closed connection\n * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method\n * @since 1.4\n */\n","tf":{"freq":{"send":1,"store":1,"benefit":1,"lexcept":2,"abl":1,"occursor":1,"type":1,"close":1,"time":1,"sent":1,"level":1,"given":2,"inparamet":1,"effici":1,"howev":1,"key":4,"except":3,"ignor":1,"index":4,"support":3,"multipl":1,"thepr":1,"creat":3,"avail":1,"parametr":1,"without":1,"row":2,"prepar":7,"databas":3,"columnsthat":1,"statement":18,"determin":1,"contain":4,"will":3,"column":4,"auto":4,"execut":2,"array":5,"compil":2,"call":2,"result":2,"connect":1,"concurr":1,"one":1,"link":1,"made":1,"use":2,"object":6,"affect":1,"holdabl":2,"indic":1,"driver":4,"note":1,"direct":1,"may":3,"error":1,"optim":1,"vendor":1,"paramet":1,"supportthi":1,"list":1,"capabl":2,"access":1,"handl":1,"lfeatur":1,"specif":1,"placehold":1,"sql":1,"effect":1,"tabl":1,"pre":1,"precompil":4,"generat":4,"target":1,"method":5,"certain":1,"insert":1,"user":1,"design":2},"maxFreq":18,"totalTerms":162},"loc":0}