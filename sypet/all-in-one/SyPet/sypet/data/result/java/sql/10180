{"id":10180,"className":"java.sql.CallableStatement","methodName":"getObject","signature":"\u003cjava.sql.CallableStatement: java.lang.Object getObject(java.lang.String)\u003e","javadoc":"/** \n * Retrieves the value of a parameter as an \u003ccode\u003eObject\u003c/code\u003e in the Java programming language. If the value is an SQL \u003ccode\u003eNULL\u003c/code\u003e, the driver returns a Java \u003ccode\u003enull\u003c/code\u003e. \u003cp\u003e This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method \u003ccode\u003eregisterOutParameter\u003c/code\u003e.  By registering the target JDBC type as \u003ccode\u003ejava.sql.Types.OTHER\u003c/code\u003e, this method can be used to read database-specific abstract data types.\n * @param parameterName the name of the parameter\n * @return A \u003ccode\u003ejava.lang.Object\u003c/code\u003e holding the OUT parameter value.\n * @exception SQLException if parameterName does not correspond to a namedparameter; if a database access error occurs or this method is called on a closed \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method\n * @see Types\n * @see #setObject\n * @since 1.4\n */\n","tf":{"freq":{"call":1,"namedparamet":1,"correspond":2,"lexcept":1,"data":1,"use":2,"languag":1,"object":5,"type":6,"lang":1,"close":1,"callabl":1,"name":3,"regist":3,"read":1,"driver":2,"valu":3,"except":3,"support":1,"error":1,"whose":1,"hold":1,"paramet":7,"supportthi":1,"access":1,"databas":2,"lfeatur":1,"statement":1,"specif":1,"sql":1,"program":1,"retriev":1,"target":1,"method":5,"java":5,"occur":1},"maxFreq":7,"totalTerms":71},"loc":0}