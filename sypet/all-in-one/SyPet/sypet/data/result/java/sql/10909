{"id":10909,"className":"java.sql.DatabaseMetaData","methodName":"getProcedureColumns","signature":"\u003cjava.sql.DatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Retrieves a description of the given catalog\u0027s stored procedure parameter and result columns. \u003cP\u003eOnly descriptions matching the schema, procedure and parameter name criteria are returned.  They are ordered by PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME and SPECIFIC_NAME. Within this, the return value, if any, is first. Next are the parameter descriptions in call order. The column descriptions follow in column number order. \u003cP\u003eEach row in the \u003ccode\u003eResultSet\u003c/code\u003e is a parameter description or column description with the following fields: \u003cOL\u003e \u003cLI\u003e\u003cB\u003ePROCEDURE_CAT\u003c/B\u003e String \u003d\u003e procedure catalog (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003ePROCEDURE_SCHEM\u003c/B\u003e String \u003d\u003e procedure schema (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003ePROCEDURE_NAME\u003c/B\u003e String \u003d\u003e procedure name \u003cLI\u003e\u003cB\u003eCOLUMN_NAME\u003c/B\u003e String \u003d\u003e column/parameter name \u003cLI\u003e\u003cB\u003eCOLUMN_TYPE\u003c/B\u003e Short \u003d\u003e kind of column/parameter: \u003cUL\u003e \u003cLI\u003e procedureColumnUnknown - nobody knows \u003cLI\u003e procedureColumnIn - IN parameter \u003cLI\u003e procedureColumnInOut - INOUT parameter \u003cLI\u003e procedureColumnOut - OUT parameter \u003cLI\u003e procedureColumnReturn - procedure return value \u003cLI\u003e procedureColumnResult - result column in \u003ccode\u003eResultSet\u003c/code\u003e \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eDATA_TYPE\u003c/B\u003e int \u003d\u003e SQL type from java.sql.Types \u003cLI\u003e\u003cB\u003eTYPE_NAME\u003c/B\u003e String \u003d\u003e SQL type name, for a UDT type the type name is fully qualified \u003cLI\u003e\u003cB\u003ePRECISION\u003c/B\u003e int \u003d\u003e precision \u003cLI\u003e\u003cB\u003eLENGTH\u003c/B\u003e int \u003d\u003e length in bytes of data \u003cLI\u003e\u003cB\u003eSCALE\u003c/B\u003e short \u003d\u003e scale -  null is returned for data types where SCALE is not applicable. \u003cLI\u003e\u003cB\u003eRADIX\u003c/B\u003e short \u003d\u003e radix \u003cLI\u003e\u003cB\u003eNULLABLE\u003c/B\u003e short \u003d\u003e can it contain NULL. \u003cUL\u003e \u003cLI\u003e procedureNoNulls - does not allow NULL values \u003cLI\u003e procedureNullable - allows NULL values \u003cLI\u003e procedureNullableUnknown - nullability unknown \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eREMARKS\u003c/B\u003e String \u003d\u003e comment describing parameter/column \u003cLI\u003e\u003cB\u003eCOLUMN_DEF\u003c/B\u003e String \u003d\u003e default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be \u003ccode\u003enull\u003c/code\u003e) \u003cUL\u003e \u003cLI\u003e The string NULL (not enclosed in quotes) - if NULL was specified as the default value \u003cLI\u003e TRUNCATE (not enclosed in quotes)        - if the specified default value cannot be represented without truncation \u003cLI\u003e NULL                                     - if a default value was not specified \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eSQL_DATA_TYPE\u003c/B\u003e int  \u003d\u003e reserved for future use \u003cLI\u003e\u003cB\u003eSQL_DATETIME_SUB\u003c/B\u003e int  \u003d\u003e reserved for future use \u003cLI\u003e\u003cB\u003eCHAR_OCTET_LENGTH\u003c/B\u003e int  \u003d\u003e the maximum length of binary and character based columns.  For any other datatype the returned value is a NULL \u003cLI\u003e\u003cB\u003eORDINAL_POSITION\u003c/B\u003e int  \u003d\u003e the ordinal position, starting from 1, for the input and output parameters for a procedure. A value of 0 is returned if this row describes the procedure\u0027s return value.  For result set columns, it is the ordinal position of the column in the result set starting from 1.  If there are multiple result sets, the column ordinal positions are implementation defined. \u003cLI\u003e\u003cB\u003eIS_NULLABLE\u003c/B\u003e String  \u003d\u003e ISO rules are used to determine the nullability for a column. \u003cUL\u003e \u003cLI\u003e YES           --- if the column can include NULLs \u003cLI\u003e NO            --- if the column cannot include NULLs \u003cLI\u003e empty string  --- if the nullability for the column is unknown \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eSPECIFIC_NAME\u003c/B\u003e String  \u003d\u003e the name which uniquely identifies this procedure within its schema. \u003c/OL\u003e \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e Some databases may not return the column descriptions for a procedure. \u003cp\u003eThe PRECISION column represents the specified column size for the given column. For numeric data, this is the maximum precision.  For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.\n * @param catalog a catalog name; must match the catalog name as itis stored in the database; \"\" retrieves those without a catalog; \u003ccode\u003enull\u003c/code\u003e means that the catalog name should not be used to narrow the search\n * @param schemaPattern a schema name pattern; must match the schema nameas it is stored in the database; \"\" retrieves those without a schema; \u003ccode\u003enull\u003c/code\u003e means that the schema name should not be used to narrow the search\n * @param procedureNamePattern a procedure name pattern; must match theprocedure name as it is stored in the database\n * @param columnNamePattern a column name pattern; must match the column nameas it is stored in the database\n * @return \u003ccode\u003eResultSet\u003c/code\u003e - each row describes a stored procedure parameter orcolumn\n * @exception SQLException if a database access error occurs\n * @see #getSearchStringEscape\n */\n","tf":{"freq":{"store":6,"singl":1,"lexcept":1,"specifi":4,"schema":8,"given":2,"search":3,"quot":3,"datetim":1,"multipl":1,"charact":4,"numer":1,"catalog":7,"describ":3,"number":1,"without":3,"procedur":23,"row":3,"databas":6,"nobodi":1,"start":2,"enclos":3,"comment":1,"posit":3,"iti":1,"next":1,"data":6,"truncat":1,"use":5,"nullabl":5,"applic":2,"kind":1,"ordin":3,"length":6,"note":1,"may":4,"assum":1,"criteria":1,"repres":2,"fulli":1,"unknown":4,"access":1,"empti":1,"represent":1,"field":1,"narrow":2,"sql":1,"compon":1,"pattern":6,"retriev":3,"string":14,"base":1,"theprocedur":1,"within":2,"lls":2,"second":1,"type":7,"must":4,"uniqu":1,"precis":3,"follow":2,"except":1,"descript":7,"size":2,"input":1,"maximum":3,"contain":1,"determin":1,"column":32,"match":5,"output":1,"scale":1,"result":9,"call":1,"defin":1,"binari":2,"allow":3,"interpret":1,"identifi":1,"escap":1,"namea":2,"order":3,"reserv":2,"orcolumn":1,"name":16,"rule":1,"mean":2,"valu":12,"datatyp":3,"fraction":1,"futur":2,"includ":2,"error":1,"paramet":12,"know":1,"radix":1,"java":1,"first":1,"qualifi":1,"occur":1},"maxFreq":32,"totalTerms":331},"loc":0}