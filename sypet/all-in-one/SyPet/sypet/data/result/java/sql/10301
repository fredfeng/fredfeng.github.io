{"id":10301,"className":"java.sql.BatchUpdateException","methodName":"BatchUpdateException","signature":"\u003cjava.sql.BatchUpdateException: void BatchUpdateException(java.lang.String,java.lang.String,int[],java.lang.Throwable)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eBatchUpdateException\u003c/code\u003e object initialized with a given \u003ccode\u003ereason\u003c/code\u003e, \u003ccode\u003eSQLState\u003c/code\u003e,\u003ccode\u003ecause\u003c/code\u003e, and \u003ccode\u003eupdateCounts\u003c/code\u003e. The vendor code is initialized to 0.\n * @param reason a description of the exception\n * @param SQLState an XOPEN or SQL:2003 code identifying the exception\n * @param updateCounts an array of \u003ccode\u003eint\u003c/code\u003e, with each elementindicating the update count, \u003ccode\u003eStatement.SUCCESS_NO_INFO\u003c/code\u003e or \u003ccode\u003eStatement.EXECUTE_FAILED\u003c/code\u003e for each SQL command in the batch for JDBC drivers that continue processing after a command failure; an update count or \u003ccode\u003eStatement.SUCCESS_NO_INFO\u003c/code\u003e for each SQL command in the batch prior to the failure for JDBC drivers that stop processing after a command failure\n * @param cause the underlying reason for this \u003ccode\u003eSQLException\u003c/code\u003e (which is saved for later retrieval by the \u003ccode\u003egetCause()\u003c/code\u003e method);may be null indicating the cause is non-existent or unknown.\n * @since 1.6\n */\n","tf":{"freq":{"stop":1,"elementind":1,"save":1,"count":4,"reason":3,"lexcept":1,"identifi":1,"object":1,"prior":1,"indic":1,"given":1,"command":4,"driver":2,"initi":2,"exist":1,"may":1,"except":4,"failur":3,"later":1,"vendor":1,"descript":1,"unknown":1,"continu":1,"non":1,"statement":3,"process":2,"caus":4,"updat":6,"retriev":1,"batch":4,"method":1,"lstate":2,"construct":1,"array":1},"maxFreq":6,"totalTerms":64},"loc":3}