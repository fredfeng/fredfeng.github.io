{"id":10410,"className":"java.sql.SQLIntegrityConstraintViolationException","methodName":"SQLIntegrityConstraintViolationException","signature":"\u003cjava.sql.SQLIntegrityConstraintViolationException: void SQLIntegrityConstraintViolationException(java.lang.String,java.lang.String,int,java.lang.Throwable)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eSQLIntegrityConstraintViolationException\u003c/code\u003e object with a given \u003ccode\u003ereason\u003c/code\u003e, \u003ccode\u003eSQLState\u003c/code\u003e, \u003ccode\u003evendorCode\u003c/code\u003e and  \u003ccode\u003ecause\u003c/code\u003e. \u003cp\u003e\n * @param reason a description of the exception\n * @param SQLState an XOPEN or SQL:2003 code identifying the exception\n * @param vendorCode a database vendor-specific exception code\n * @param cause the (which is saved for later retrieval by the \u003ccode\u003egetCause()\u003c/code\u003e method); may be null indicatingthe cause is non-existent or unknown.\n * @since 1.6\n */\n","tf":{"freq":{"integr":1,"save":1,"reason":2,"constraint":2,"identifi":1,"object":1,"violat":2,"given":1,"lintegr":1,"exist":1,"except":5,"may":1,"vendor":3,"later":1,"descript":1,"unknown":1,"databas":1,"non":1,"specif":1,"caus":4,"indicatingth":1,"retriev":1,"lstate":2,"method":1,"construct":1},"maxFreq":5,"totalTerms":38},"loc":3}