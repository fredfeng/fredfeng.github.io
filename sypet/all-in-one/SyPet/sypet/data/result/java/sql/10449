{"id":10449,"className":"java.sql.Statement","methodName":"setPoolable","signature":"\u003cjava.sql.Statement: void setPoolable(boolean)\u003e","javadoc":"/** \n * Requests that a \u003ccode\u003eStatement\u003c/code\u003e be pooled or not pooled.  The value specified is a hint to the statement pool implementation indicating whether the applicaiton wants the statement to be pooled.  It is up to the statement pool manager as to whether the hint is used. \u003cp\u003e The poolable value of a statement is applicable to both internal statement caches implemented by the driver and external statement caches implemented by application servers and other applications. \u003cp\u003e By default, a \u003ccode\u003eStatement\u003c/code\u003e is not poolable when created, and a \u003ccode\u003ePreparedStatement\u003c/code\u003e and \u003ccode\u003eCallableStatement\u003c/code\u003e are poolable when created. \u003cp\u003e\n * @param poolable              requests that the statement be pooled if true andthat the statement not be pooled if false \u003cp\u003e\n * @throws SQLException if this method is called on a closed\u003ccode\u003eStatement\u003c/code\u003e \u003cp\u003e\n * @since 1.6\n */\n","tf":{"freq":{"fals":1,"call":1,"lexcept":1,"use":1,"whether":2,"applic":3,"close":1,"specifi":1,"applicaiton":1,"indic":1,"pool":7,"extern":1,"callabl":1,"request":2,"valu":2,"driver":1,"want":1,"creat":2,"manag":1,"true":1,"hint":2,"cach":2,"prepar":1,"statement":13,"poolabl":5,"andthat":1,"intern":1,"method":1,"server":1},"maxFreq":13,"totalTerms":59},"loc":0}