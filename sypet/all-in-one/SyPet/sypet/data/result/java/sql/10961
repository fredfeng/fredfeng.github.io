{"id":10961,"className":"java.sql.DatabaseMetaData","methodName":"getFunctionColumns","signature":"\u003cjava.sql.DatabaseMetaData: java.sql.ResultSet getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Retrieves a description of the given catalog\u0027s system or user function parameters and return type. \u003cP\u003eOnly descriptions matching the schema,  function and parameter name criteria are returned. They are ordered by \u003ccode\u003eFUNCTION_CAT\u003c/code\u003e, \u003ccode\u003eFUNCTION_SCHEM\u003c/code\u003e, \u003ccode\u003eFUNCTION_NAME\u003c/code\u003e and \u003ccode\u003eSPECIFIC_ NAME\u003c/code\u003e. Within this, the return value, if any, is first. Next are the parameter descriptions in call order. The column descriptions follow in column number order. \u003cP\u003eEach row in the \u003ccode\u003eResultSet\u003c/code\u003e is a parameter description, column description or return type description with the following fields: \u003cOL\u003e \u003cLI\u003e\u003cB\u003eFUNCTION_CAT\u003c/B\u003e String \u003d\u003e function catalog (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eFUNCTION_SCHEM\u003c/B\u003e String \u003d\u003e function schema (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eFUNCTION_NAME\u003c/B\u003e String \u003d\u003e function name.  This is the name used to invoke the function \u003cLI\u003e\u003cB\u003eCOLUMN_NAME\u003c/B\u003e String \u003d\u003e column/parameter name \u003cLI\u003e\u003cB\u003eCOLUMN_TYPE\u003c/B\u003e Short \u003d\u003e kind of column/parameter: \u003cUL\u003e \u003cLI\u003e functionColumnUnknown - nobody knows \u003cLI\u003e functionColumnIn - IN parameter \u003cLI\u003e functionColumnInOut - INOUT parameter \u003cLI\u003e functionColumnOut - OUT parameter \u003cLI\u003e functionColumnReturn - function return value \u003cLI\u003e functionColumnResult - Indicates that the parameter or column is a column in the \u003ccode\u003eResultSet\u003c/code\u003e \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eDATA_TYPE\u003c/B\u003e int \u003d\u003e SQL type from java.sql.Types \u003cLI\u003e\u003cB\u003eTYPE_NAME\u003c/B\u003e String \u003d\u003e SQL type name, for a UDT type the type name is fully qualified \u003cLI\u003e\u003cB\u003ePRECISION\u003c/B\u003e int \u003d\u003e precision \u003cLI\u003e\u003cB\u003eLENGTH\u003c/B\u003e int \u003d\u003e length in bytes of data \u003cLI\u003e\u003cB\u003eSCALE\u003c/B\u003e short \u003d\u003e scale -  null is returned for data types where SCALE is not applicable. \u003cLI\u003e\u003cB\u003eRADIX\u003c/B\u003e short \u003d\u003e radix \u003cLI\u003e\u003cB\u003eNULLABLE\u003c/B\u003e short \u003d\u003e can it contain NULL. \u003cUL\u003e \u003cLI\u003e functionNoNulls - does not allow NULL values \u003cLI\u003e functionNullable - allows NULL values \u003cLI\u003e functionNullableUnknown - nullability unknown \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eREMARKS\u003c/B\u003e String \u003d\u003e comment describing column/parameter \u003cLI\u003e\u003cB\u003eCHAR_OCTET_LENGTH\u003c/B\u003e int  \u003d\u003e the maximum length of binary and character based parameters or columns.  For any other datatype the returned value is a NULL \u003cLI\u003e\u003cB\u003eORDINAL_POSITION\u003c/B\u003e int  \u003d\u003e the ordinal position, starting from 1, for the input and output parameters. A value of 0 is returned if this row describes the function\u0027s return value. For result set columns, it is the ordinal position of the column in the result set starting from 1. \u003cLI\u003e\u003cB\u003eIS_NULLABLE\u003c/B\u003e String  \u003d\u003e ISO rules are used to determine the nullability for a parameter or column. \u003cUL\u003e \u003cLI\u003e YES           --- if the parameter or column can include NULLs \u003cLI\u003e NO            --- if the parameter or column  cannot include NULLs \u003cLI\u003e empty string  --- if the nullability for the parameter  or column is unknown \u003c/UL\u003e \u003cLI\u003e\u003cB\u003eSPECIFIC_NAME\u003c/B\u003e String  \u003d\u003e the name which uniquely identifies this function within its schema.  This is a user specified, or DBMS generated, name that may be different then the \u003ccode\u003eFUNCTION_NAME\u003c/code\u003e for example with overload functions \u003c/OL\u003e \u003cp\u003eThe PRECISION column represents the specified column size for the given parameter or column. For numeric data, this is the maximum precision.  For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.\n * @param catalog a catalog name; must match the catalog name as itis stored in the database; \"\" retrieves those without a catalog; \u003ccode\u003enull\u003c/code\u003e means that the catalog name should not be used to narrow the search\n * @param schemaPattern a schema name pattern; must match the schema nameas it is stored in the database; \"\" retrieves those without a schema; \u003ccode\u003enull\u003c/code\u003e means that the schema name should not be used to narrow the search\n * @param functionNamePattern a procedure name pattern; must match thefunction name as it is stored in the database\n * @param columnNamePattern a parameter name pattern; must match theparameter or column name as it is stored in the database\n * @return \u003ccode\u003eResultSet\u003c/code\u003e - each row describes auser function parameter, column  or return type\n * @exception SQLException if a database access error occurs\n * @see #getSearchStringEscape\n * @since 1.6\n */\n","tf":{"freq":{"store":4,"thefunct":1,"lexcept":1,"specifi":2,"schema":8,"given":2,"search":3,"datetim":1,"charact":4,"numer":1,"invok":1,"catalog":7,"describ":3,"number":1,"without":2,"row":3,"databas":5,"procedur":1,"nobodi":1,"system":1,"start":2,"comment":1,"posit":2,"iti":1,"next":1,"data":6,"use":4,"nullabl":5,"applic":2,"kind":1,"indic":1,"ordin":2,"length":6,"may":3,"assum":1,"criteria":1,"repres":1,"fulli":1,"unknown":4,"access":1,"empti":1,"represent":1,"field":1,"differ":1,"narrow":2,"sql":1,"compon":1,"pattern":6,"retriev":3,"string":11,"base":1,"exampl":1,"within":2,"lls":2,"second":1,"type":10,"auser":1,"must":4,"function":22,"uniqu":1,"precis":3,"follow":2,"except":1,"descript":7,"size":2,"input":1,"maximum":3,"contain":1,"determin":1,"column":29,"match":5,"output":1,"scale":1,"call":1,"result":6,"binari":2,"allow":3,"identifi":1,"theparamet":1,"escap":1,"namea":1,"order":3,"name":19,"rule":1,"mean":2,"valu":7,"datatyp":3,"fraction":1,"includ":2,"error":1,"paramet":20,"overload":1,"know":1,"radix":1,"generat":1,"java":1,"user":2,"first":1,"qualifi":1,"occur":1},"maxFreq":29,"totalTerms":313},"loc":0}