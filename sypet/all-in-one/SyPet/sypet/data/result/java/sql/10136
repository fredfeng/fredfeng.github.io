{"id":10136,"className":"java.sql.CallableStatement","methodName":"getTime","signature":"\u003cjava.sql.CallableStatement: java.sql.Time getTime(int,java.util.Calendar)\u003e","javadoc":"/** \n * Retrieves the value of the designated JDBC \u003ccode\u003eTIME\u003c/code\u003e parameter as a \u003ccode\u003ejava.sql.Time\u003c/code\u003e object, using the given \u003ccode\u003eCalendar\u003c/code\u003e object to construct the time. With a \u003ccode\u003eCalendar\u003c/code\u003e object, the driver can calculate the time taking into account a custom timezone and locale. If no \u003ccode\u003eCalendar\u003c/code\u003e object is specified, the driver uses the default timezone and locale.\n * @param parameterIndex the first parameter is 1, the second is 2,and so on\n * @param cal the \u003ccode\u003eCalendar\u003c/code\u003e object the driver will useto construct the time\n * @return the parameter value; if the value is SQL \u003ccode\u003eNULL\u003c/code\u003e, the resultis \u003ccode\u003enull\u003c/code\u003e.\n * @exception SQLException if the parameterIndex is not valid;if a database access error occurs or this method is called on a closed \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @see #setTime\n * @since 1.2\n */\n","tf":{"freq":{"call":1,"valid":1,"second":1,"lexcept":1,"use":2,"timezon":2,"object":5,"useto":1,"close":1,"resulti":1,"specifi":1,"time":6,"given":1,"callabl":1,"valu":3,"driver":3,"cal":1,"calendar":4,"custom":1,"except":1,"index":2,"error":1,"calcul":1,"paramet":5,"access":1,"databas":1,"statement":1,"sql":1,"retriev":1,"take":1,"will":1,"account":1,"method":1,"java":1,"construct":2,"local":2,"first":1,"design":1,"occur":1},"maxFreq":6,"totalTerms":64},"loc":0}