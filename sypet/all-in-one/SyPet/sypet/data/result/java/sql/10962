{"id":10962,"className":"java.sql.DatabaseMetaData","methodName":"getPseudoColumns","signature":"\u003cjava.sql.DatabaseMetaData: java.sql.ResultSet getPseudoColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Retrieves a description of the pseudo or hidden columns available in a given table within the specified catalog and schema. Pseudo or hidden columns may not always be stored within a table and are not visible in a ResultSet unless they are specified in the query\u0027s outermost SELECT list. Pseudo or hidden columns may not necessarily be able to be modified. If there are no pseudo or hidden columns, an empty ResultSet is returned. \u003cP\u003eOnly column descriptions matching the catalog, schema, table and column name criteria are returned.  They are ordered by \u003ccode\u003eTABLE_CAT\u003c/code\u003e,\u003ccode\u003eTABLE_SCHEM\u003c/code\u003e, \u003ccode\u003eTABLE_NAME\u003c/code\u003e and \u003ccode\u003eCOLUMN_NAME\u003c/code\u003e. \u003cP\u003eEach column description has the following columns: \u003cOL\u003e \u003cLI\u003e\u003cB\u003eTABLE_CAT\u003c/B\u003e String \u003d\u003e table catalog (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eTABLE_SCHEM\u003c/B\u003e String \u003d\u003e table schema (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eTABLE_NAME\u003c/B\u003e String \u003d\u003e table name \u003cLI\u003e\u003cB\u003eCOLUMN_NAME\u003c/B\u003e String \u003d\u003e column name \u003cLI\u003e\u003cB\u003eDATA_TYPE\u003c/B\u003e int \u003d\u003e SQL type from java.sql.Types \u003cLI\u003e\u003cB\u003eCOLUMN_SIZE\u003c/B\u003e int \u003d\u003e column size. \u003cLI\u003e\u003cB\u003eDECIMAL_DIGITS\u003c/B\u003e int \u003d\u003e the number of fractional digits. Null is returned for data types where DECIMAL_DIGITS is not applicable. \u003cLI\u003e\u003cB\u003eNUM_PREC_RADIX\u003c/B\u003e int \u003d\u003e Radix (typically either 10 or 2) \u003cLI\u003e\u003cB\u003eCOLUMN_USAGE\u003c/B\u003e String \u003d\u003e The allowed usage for the column.  The value returned will correspond to the enum name returned by  {@link PseudoColumnUsage#name PseudoColumnUsage.name()}\u003cLI\u003e\u003cB\u003eREMARKS\u003c/B\u003e String \u003d\u003e comment describing column (may be \u003ccode\u003enull\u003c/code\u003e) \u003cLI\u003e\u003cB\u003eCHAR_OCTET_LENGTH\u003c/B\u003e int \u003d\u003e for char types the maximum number of bytes in the column \u003cLI\u003e\u003cB\u003eIS_NULLABLE\u003c/B\u003e String  \u003d\u003e ISO rules are used to determine the nullability for a column. \u003cUL\u003e \u003cLI\u003e YES           --- if the column can include NULLs \u003cLI\u003e NO            --- if the column cannot include NULLs \u003cLI\u003e empty string  --- if the nullability for the column is unknown \u003c/UL\u003e \u003c/OL\u003e \u003cp\u003eThe COLUMN_SIZE column specifies the column size for the given column. For numeric data, this is the maximum precision.  For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.\n * @param catalog a catalog name; must match the catalog name as itis stored in the database; \"\" retrieves those without a catalog; \u003ccode\u003enull\u003c/code\u003e means that the catalog name should not be used to narrow the search\n * @param schemaPattern a schema name pattern; must match the schema nameas it is stored in the database; \"\" retrieves those without a schema; \u003ccode\u003enull\u003c/code\u003e means that the schema name should not be used to narrow the search\n * @param tableNamePattern a table name pattern; must match thetable name as it is stored in the database\n * @param columnNamePattern a column name pattern; must match the columnname as it is stored in the database\n * @return \u003ccode\u003eResultSet\u003c/code\u003e - each row is a column description\n * @exception SQLException if a database access error occurs\n * @see PseudoColumnUsage\n * @since 1.7\n */\n","tf":{"freq":{"lls":2,"second":1,"store":5,"pseudo":8,"lexcept":1,"abl":1,"outermost":1,"type":5,"must":4,"specifi":3,"schema":8,"given":2,"search":2,"precis":2,"datetim":1,"follow":1,"except":1,"charact":3,"numer":1,"alway":1,"catalog":8,"descript":4,"describ":1,"avail":1,"number":2,"without":2,"row":1,"columnnam":1,"databas":5,"size":3,"digit":1,"queri":1,"maximum":3,"determin":1,"column":28,"will":1,"match":5,"comment":1,"iti":1,"result":3,"binari":1,"allow":2,"visibl":1,"correspond":1,"link":1,"data":5,"typic":1,"use":3,"nullabl":2,"applic":2,"namea":1,"unless":1,"order":1,"rule":1,"name":16,"length":4,"mean":2,"valu":1,"thetabl":1,"datatyp":2,"may":5,"fraction":2,"assum":1,"includ":2,"error":1,"criteria":1,"list":1,"unknown":1,"access":1,"represent":1,"empti":2,"narrow":2,"either":1,"sql":1,"pattern":6,"compon":1,"retriev":3,"hidden":4,"tabl":8,"radix":1,"string":9,"modifi":1,"java":1,"within":2,"usag":4,"necessarili":1,"occur":1},"maxFreq":28,"totalTerms":239},"loc":0}