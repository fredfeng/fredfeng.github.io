{"id":10233,"className":"java.sql.RowId","methodName":"equals","signature":"\u003cjava.sql.RowId: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Compares this \u003ccode\u003eRowId\u003c/code\u003e to the specified object. The result is \u003ccode\u003etrue\u003c/code\u003e if and only if the argument is not null and is a RowId object that represents the same ROWID as  this object. \u003cp\u003e It is important to consider both the origin and the valid lifetime of a \u003ccode\u003eRowId\u003c/code\u003e when comparing it to another \u003ccode\u003eRowId\u003c/code\u003e. If both are valid, and both are from the same table on the same data source, then if they are equal they identify the same row; if one or more is no longer guaranteed to be valid, or if they originate from different data sources, or different tables on the same data source, they  may be equal but still not identify the same row.\n * @param obj the \u003ccode\u003eObject\u003c/code\u003e to compare this \u003ccode\u003eRowId\u003c/code\u003e objectagainst.\n * @return true if the \u003ccode\u003eRowId\u003c/code\u003es are equal; false otherwise\n * @since 1.6\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"lifetim":1,"valid":3,"result":1,"one":1,"data":3,"identifi":2,"object":4,"anoth":1,"consid":1,"specifi":1,"objectagainst":1,"longer":1,"argument":1,"may":1,"repres":1,"guarante":1,"origin":2,"true":2,"equal":4,"still":1,"row":8,"differ":2,"tabl":2,"obj":1,"sourc":3,"compar":3},"maxFreq":8,"totalTerms":54},"loc":0}