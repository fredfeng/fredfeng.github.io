{"id":10378,"className":"java.sql.PreparedStatement","methodName":"setDate","signature":"\u003cjava.sql.PreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)\u003e","javadoc":"/** \n * Sets the designated parameter to the given \u003ccode\u003ejava.sql.Date\u003c/code\u003e value, using the given \u003ccode\u003eCalendar\u003c/code\u003e object.  The driver uses the \u003ccode\u003eCalendar\u003c/code\u003e object to construct an SQL \u003ccode\u003eDATE\u003c/code\u003e value, which the driver then sends to the database.  With a \u003ccode\u003eCalendar\u003c/code\u003e object, the driver can calculate the date taking into account a custom timezone.  If no \u003ccode\u003eCalendar\u003c/code\u003e object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.\n * @param parameterIndex the first parameter is 1, the second is 2, ...\n * @param x the parameter value\n * @param cal the \u003ccode\u003eCalendar\u003c/code\u003e object the driver will useto construct the date\n * @exception SQLException if parameterIndex does not correspond to a parametermarker in the SQL statement; if a database access error occurs or this method is called on a closed \u003ccode\u003ePreparedStatement\u003c/code\u003e\n * @since 1.2\n */\n","tf":{"freq":{"virtual":1,"call":1,"send":1,"second":1,"correspond":1,"lexcept":1,"use":3,"timezon":2,"object":5,"useto":1,"date":4,"run":1,"applic":1,"close":1,"specifi":1,"given":2,"driver":5,"valu":3,"cal":1,"calendar":5,"custom":1,"except":1,"index":2,"error":1,"calcul":1,"paramet":5,"parametermark":1,"access":1,"prepar":1,"databas":2,"statement":2,"machin":1,"sql":1,"take":1,"will":1,"account":1,"method":1,"java":1,"construct":2,"first":1,"design":1,"occur":1},"maxFreq":5,"totalTerms":71},"loc":0}