{"id":10369,"className":"java.sql.PreparedStatement","methodName":"setObject","signature":"\u003cjava.sql.PreparedStatement: void setObject(int,java.lang.Object)\u003e","javadoc":"/** \n * \u003cp\u003eSets the value of the designated parameter using the given object. The second parameter must be of type \u003ccode\u003eObject\u003c/code\u003e; therefore, the \u003ccode\u003ejava.lang\u003c/code\u003e equivalent objects should be used for built-in types. \u003cp\u003eThe JDBC specification specifies a standard mapping from Java \u003ccode\u003eObject\u003c/code\u003e types to SQL types.  The given argument will be converted to the corresponding SQL type before being sent to the database. \u003cp\u003eNote that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface \u003ccode\u003eSQLData\u003c/code\u003e, the JDBC driver should call the method \u003ccode\u003eSQLData.writeSQL\u003c/code\u003e to write it to the SQL data stream. If, on the other hand, the object is of a class implementing \u003ccode\u003eRef\u003c/code\u003e, \u003ccode\u003eBlob\u003c/code\u003e, \u003ccode\u003eClob\u003c/code\u003e,  \u003ccode\u003eNClob\u003c/code\u003e, \u003ccode\u003eStruct\u003c/code\u003e, \u003ccode\u003ejava.net.URL\u003c/code\u003e, \u003ccode\u003eRowId\u003c/code\u003e, \u003ccode\u003eSQLXML\u003c/code\u003e or \u003ccode\u003eArray\u003c/code\u003e, the driver should pass it to the database as a value of the corresponding SQL type. \u003cP\u003e \u003cb\u003eNote:\u003c/b\u003e Not all databases allow for a non-typed Null to be sent to the backend. For maximum portability, the \u003ccode\u003esetNull\u003c/code\u003e or the \u003ccode\u003esetObject(int parameterIndex, Object x, int sqlType)\u003c/code\u003e method should be used instead of \u003ccode\u003esetObject(int parameterIndex, Object x)\u003c/code\u003e. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.\n * @param parameterIndex the first parameter is 1, the second is 2, ...\n * @param x the object containing the input parameter value\n * @exception SQLException if parameterIndex does not correspond to a parametermarker in the SQL statement; if a database access error occurs; this method is called on a closed \u003ccode\u003ePreparedStatement\u003c/code\u003e or the type of the given object is ambiguous\n */\n","tf":{"freq":{"second":2,"lexcept":1,"type":11,"must":1,"ldata":2,"close":1,"specifi":1,"sent":2,"nclob":1,"given":3,"equival":1,"argument":1,"except":2,"index":4,"parametermark":1,"prepar":1,"databas":4,"row":1,"non":1,"statement":2,"input":1,"maximum":1,"contain":1,"will":1,"array":1,"call":2,"stream":1,"allow":1,"portabl":1,"correspond":3,"one":1,"clob":1,"data":2,"convert":1,"use":5,"object":14,"therefor":1,"ambigu":2,"net":1,"lang":1,"hand":1,"struct":1,"name":1,"map":1,"write":2,"valu":3,"driver":3,"built":1,"note":3,"may":1,"error":1,"standard":1,"paramet":8,"access":1,"pass":2,"blob":1,"ref":1,"specif":3,"sql":1,"backend":1,"datatabas":1,"exampl":1,"instead":1,"java":4,"method":5,"first":1,"design":1,"occur":1},"maxFreq":14,"totalTerms":137},"loc":0}