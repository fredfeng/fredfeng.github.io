{"id":25450,"className":"java.security.AuthProvider","methodName":"setCallbackHandler","signature":"\u003cjava.security.AuthProvider: void setCallbackHandler(javax.security.auth.callback.CallbackHandler)\u003e","javadoc":"/** \n * Set a \u003ccode\u003eCallbackHandler\u003c/code\u003e. \u003cp\u003e The provider uses this handler if one is not passed to the \u003ccode\u003elogin\u003c/code\u003e method.  The provider also uses this handler if it invokes \u003ccode\u003elogin\u003c/code\u003e on behalf of callers. In either case if a handler is not set via this method, the provider queries the \u003ci\u003eauth.login.defaultCallbackHandler\u003c/i\u003e security property for the fully qualified class name of a default handler implementation. If the security property is not set, the provider is assumed to have alternative means for obtaining authentication information.\n * @param handler a \u003ccode\u003eCallbackHandler\u003c/code\u003e for obtainingauthentication information, which may be \u003ccode\u003enull\u003c/code\u003e\n * @exception SecurityException if the caller does not pass asecurity check for \u003ccode\u003eSecurityPermission(\"authProvider.\u003ci\u003ename\u003c/i\u003e\")\u003c/code\u003e, where \u003ci\u003ename\u003c/i\u003e is the value returned by this provider\u0027s \u003ccode\u003egetName\u003c/code\u003e method\n */\n","tf":{"freq":{"caller":2,"behalf":1,"via":1,"one":1,"use":2,"asecur":1,"authent":1,"obtainingauthent":1,"altern":1,"name":4,"permiss":1,"mean":1,"valu":1,"login":3,"except":2,"may":1,"assum":1,"check":1,"invok":1,"fulli":1,"provid":6,"pass":2,"inform":2,"queri":1,"obtain":1,"either":1,"secur":4,"callback":4,"method":3,"properti":2,"also":1,"auth":2,"qualifi":1,"handler":9},"maxFreq":9,"totalTerms":67},"loc":0}