{"id":25617,"className":"java.security.Signature","methodName":"getInstance","signature":"\u003cjava.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns a Signature object that implements the specified signature algorithm. \u003cp\u003e A new Signature object encapsulating the SignatureSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param algorithm the name of the algorithm requested.See the Signature section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#Signature\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @param provider the provider.\n * @return the new Signature object.\n * @exception NoSuchAlgorithmException if a SignatureSpiimplementation for the specified algorithm is not available from the specified Provider object.\n * @exception IllegalArgumentException if the provider is null.\n * @see Provider\n * @since 1.4\n */\n","tf":{"freq":{"root":1,"object":6,"signatur":8,"algorithm":7,"specifi":5,"technot":1,"document":1,"name":4,"spi":1,"request":1,"regist":1,"spiimplement":1,"href":1,"note":1,"cryptographi":1,"argument":1,"except":4,"standard":3,"avail":1,"list":1,"illeg":1,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":1,"architectur":1,"encapsul":1,"html":1,"java":1},"maxFreq":8,"totalTerms":68},"loc":12}