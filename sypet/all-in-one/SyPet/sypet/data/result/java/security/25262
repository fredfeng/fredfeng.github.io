{"id":25262,"className":"java.security.KeyStore$Builder","methodName":"newInstance","signature":"\u003cjava.security.KeyStore$Builder: java.security.KeyStore$Builder newInstance(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore$ProtectionParameter)\u003e","javadoc":"/** \n * Returns a new Builder object. \u003cp\u003eThe first call to the  {@link #getKeyStore} method on the returnedbuilder will create a KeyStore of type \u003ccode\u003etype\u003c/code\u003e and call its  {@link KeyStore#load load()} method.The \u003ccode\u003einputStream\u003c/code\u003e argument is constructed from \u003ccode\u003efile\u003c/code\u003e. If \u003ccode\u003eprotection\u003c/code\u003e is a \u003ccode\u003ePasswordProtection\u003c/code\u003e, the password is obtained by calling the \u003ccode\u003egetPassword\u003c/code\u003e method. Otherwise, if \u003ccode\u003eprotection\u003c/code\u003e is a \u003ccode\u003eCallbackHandlerProtection\u003c/code\u003e, the password is obtained by invoking the CallbackHandler. \u003cp\u003eSubsequent calls to  {@link #getKeyStore} return the same objectas the initial call. If the initial call to failed with a KeyStoreException, subsequent calls also throw a KeyStoreException. \u003cp\u003eThe KeyStore is instantiated from \u003ccode\u003eprovider\u003c/code\u003e if non-null. Otherwise, all installed providers are searched. \u003cp\u003eCalls to  {@link #getProtectionParameter getProtectionParameter()}will return a  {@link KeyStore.PasswordProtection PasswordProtection}object encapsulating the password that was used to invoke the \u003ccode\u003eload\u003c/code\u003e method. \u003cp\u003e\u003cem\u003eNote\u003c/em\u003e that the  {@link #getKeyStore} method is executedwithin the  {@link AccessControlContext} of the code invoking thismethod.\n * @return a new Builder object\n * @param type the type of KeyStore to be constructed\n * @param provider the provider from which the KeyStore is tobe instantiated (or null)\n * @param file the File that contains the KeyStore data\n * @param protection the ProtectionParameter securing the KeyStore data\n * @throws NullPointerException if type, file or protection is null\n * @throws IllegalArgumentException if protection is not an instanceof either PasswordProtection or CallbackHandlerProtection; or if file does not exist or does not refer to a normal file\n */\n","tf":{"freq":{"store":13,"instanti":2,"normal":1,"objecta":1,"type":5,"password":8,"fail":1,"refer":1,"search":1,"file":6,"tobe":1,"key":13,"argument":2,"control":1,"except":4,"creat":1,"invok":3,"builder":2,"provid":4,"instanc":1,"non":1,"obtain":2,"input":1,"contain":1,"will":2,"pointer":1,"load":3,"otherwis":2,"call":8,"stream":1,"link":7,"data":2,"use":1,"object":3,"thismethod":1,"initi":2,"executedwithin":1,"subsequ":2,"exist":1,"note":1,"instal":1,"paramet":3,"access":1,"illeg":1,"returnedbuild":1,"either":1,"secur":1,"callback":3,"encapsul":1,"context":1,"method":5,"construct":2,"first":1,"also":1,"handler":3},"maxFreq":13,"totalTerms":140},"loc":18}