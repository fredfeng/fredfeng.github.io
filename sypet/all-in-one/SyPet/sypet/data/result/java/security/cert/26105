{"id":26105,"className":"java.security.cert.X509CertSelector","methodName":"setPathToNames","signature":"\u003cjava.security.cert.X509CertSelector: void setPathToNames(java.util.Collection)\u003e","javadoc":"/** \n * Sets the pathToNames criterion. The \u003ccode\u003eX509Certificate\u003c/code\u003e must not include name constraints that would prohibit building a path to the specified names. \u003cp\u003e This method allows the caller to specify, with a single method call, the complete set of names which the \u003ccode\u003eX509Certificates\u003c/code\u003e\u0027s name constraints must permit. The specified value replaces the previous value for the pathToNames criterion. \u003cp\u003e This constraint is useful when building a certification path forward (from the target toward the trust anchor. If a partial path has been built, any candidate certificate must not include name constraints that would prohibit building a path to any of the names in the partial path. \u003cp\u003e The \u003ccode\u003enames\u003c/code\u003e parameter (if not \u003ccode\u003enull\u003c/code\u003e) is a \u003ccode\u003eCollection\u003c/code\u003e with one entry for each name to be included in the pathToNames criterion. Each entry is a \u003ccode\u003eList\u003c/code\u003e whose first entry is an \u003ccode\u003eInteger\u003c/code\u003e (the name type, 0-8) and whose second entry is a \u003ccode\u003eString\u003c/code\u003e or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If \u003ccode\u003enull\u003c/code\u003e is supplied as the value for this argument, no pathToNames check will be performed. \u003cp\u003e Each name in the \u003ccode\u003eCollection\u003c/code\u003e may be specified either as a \u003ccode\u003eString\u003c/code\u003e or as an ASN.1 encoded byte array. For more details about the formats used, see {@link #addPathToName(int type,String name) addPathToName(int type, String name)} and{@link #addPathToName(int type,byte[] name) addPathToName(int type, byte [] name)}. \u003cp\u003e \u003cstrong\u003eNote:\u003c/strong\u003e for distinguished names, specify the byte array form instead of the String form. See the note in {@link #addPathToName(int,String)} for more information.\u003cp\u003e Note that the \u003ccode\u003enames\u003c/code\u003e parameter can contain duplicate names (same name and name type), but they may be removed from the \u003ccode\u003eCollection\u003c/code\u003e of names returned by the {@link #getPathToNames getPathToNames} method.\u003cp\u003e Note that a deep copy is performed on the \u003ccode\u003eCollection\u003c/code\u003e to protect against subsequent modifications.\n * @param names a \u003ccode\u003eCollection\u003c/code\u003e with one entry per name(or \u003ccode\u003enull\u003c/code\u003e)\n * @throws IOException if a parsing error occurs\n * @see #getPathToNames\n */\n","tf":{"freq":{"detail":1,"second":1,"singl":1,"permit":1,"perform":2,"type":7,"copi":1,"must":3,"specifi":5,"anchor":1,"toward":1,"forward":1,"deep":1,"argument":1,"except":1,"form":3,"multipl":1,"whose":2,"remov":1,"candid":1,"format":1,"partial":2,"inform":1,"criterion":3,"encod":2,"strong":2,"contain":1,"duplic":1,"will":1,"distinguish":1,"collect":5,"array":3,"caller":1,"call":1,"allow":1,"link":4,"one":2,"use":2,"constraint":4,"add":5,"build":3,"prohibit":2,"name":37,"path":18,"valu":3,"subsequ":1,"built":1,"note":4,"complet":1,"may":2,"certif":4,"includ":3,"error":1,"previous":1,"check":1,"trust":1,"entri":5,"paramet":2,"list":1,"suppli":1,"either":1,"per":1,"replac":1,"string":7,"instead":1,"target":1,"method":3,"pars":1,"first":1,"integ":1,"modif":1,"respect":1,"occur":1},"maxFreq":37,"totalTerms":192},"loc":11}