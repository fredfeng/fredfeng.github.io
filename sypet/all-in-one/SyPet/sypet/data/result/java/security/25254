{"id":25254,"className":"java.security.KeyStore","methodName":"getEntry","signature":"\u003cjava.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)\u003e","javadoc":"/** \n * Gets a keystore \u003ccode\u003eEntry\u003c/code\u003e for the specified alias with the specified protection parameter.\n * @param alias get the keystore \u003ccode\u003eEntry\u003c/code\u003e for this alias\n * @param protParam the \u003ccode\u003eProtectionParameter\u003c/code\u003eused to protect the \u003ccode\u003eEntry\u003c/code\u003e, which may be \u003ccode\u003enull\u003c/code\u003e\n * @return the keystore \u003ccode\u003eEntry\u003c/code\u003e for the specified alias,or \u003ccode\u003enull\u003c/code\u003e if there is no such entry\n * @exception NullPointerException if\u003ccode\u003ealias\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @exception NoSuchAlgorithmException if the algorithm for recovering theentry cannot be found\n * @exception UnrecoverableEntryException if the specified\u003ccode\u003eprotParam\u003c/code\u003e were insufficient or invalid\n * @exception UnrecoverableKeyException if the entry is a\u003ccode\u003ePrivateKeyEntry\u003c/code\u003e or \u003ccode\u003eSecretKeyEntry\u003c/code\u003e and the specified \u003ccode\u003eprotParam\u003c/code\u003e does not contain the information needed to recover the key (e.g. wrong password)\n * @exception KeyStoreException if the keystore has not been initialized(loaded).\n * @see #setEntry(String,KeyStore.Entry,KeyStore.ProtectionParameter)\n * @since 1.5\n */\n","tf":{"freq":{"need":1,"store":3,"use":1,"password":1,"algorithm":2,"specifi":5,"recov":2,"invalid":1,"initi":1,"key":7,"except":10,"may":1,"entri":12,"paramet":3,"prot":3,"alia":5,"insuffici":1,"theentri":1,"inform":1,"string":1,"unrecover":2,"contain":1,"pointer":1,"keystor":4,"secret":1,"load":1,"wrong":1,"found":1},"maxFreq":12,"totalTerms":74},"loc":10}