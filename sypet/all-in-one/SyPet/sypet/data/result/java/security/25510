{"id":25510,"className":"java.security.KeyStoreSpi","methodName":"engineGetEntry","signature":"\u003cjava.security.KeyStoreSpi: java.security.KeyStore$Entry engineGetEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)\u003e","javadoc":"/** \n * Gets a \u003ccode\u003eKeyStore.Entry\u003c/code\u003e for the specified alias with the specified protection parameter.\n * @param alias get the \u003ccode\u003eKeyStore.Entry\u003c/code\u003e for this alias\n * @param protParam the \u003ccode\u003eProtectionParameter\u003c/code\u003eused to protect the \u003ccode\u003eEntry\u003c/code\u003e, which may be \u003ccode\u003enull\u003c/code\u003e\n * @return the \u003ccode\u003eKeyStore.Entry\u003c/code\u003e for the specified alias,or \u003ccode\u003enull\u003c/code\u003e if there is no such entry\n * @exception KeyStoreException if the operation failed\n * @exception NoSuchAlgorithmException if the algorithm for recovering theentry cannot be found\n * @exception UnrecoverableEntryException if the specified\u003ccode\u003eprotParam\u003c/code\u003e were insufficient or invalid\n * @exception UnrecoverableKeyException if the entry is a\u003ccode\u003ePrivateKeyEntry\u003c/code\u003e or \u003ccode\u003eSecretKeyEntry\u003c/code\u003e and the specified \u003ccode\u003eprotParam\u003c/code\u003e does not contain the information needed to recover the key (e.g. wrong password)\n * @since 1.5\n */\n","tf":{"freq":{"need":1,"may":1,"except":8,"store":4,"entri":10,"engin":1,"paramet":2,"use":1,"prot":3,"password":1,"insuffici":1,"algorithm":2,"specifi":5,"alia":4,"recov":2,"inform":1,"theentri":1,"invalid":1,"fail":1,"oper":1,"contain":1,"unrecover":2,"secret":1,"wrong":1,"key":8,"found":1},"maxFreq":10,"totalTerms":65},"loc":37}