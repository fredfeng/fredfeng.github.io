{"id":25309,"className":"java.security.KeyPairGenerator","methodName":"initialize","signature":"\u003cjava.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)\u003e","javadoc":"/** \n * Initializes the key pair generator using the specified parameter set and the \u003ccode\u003eSecureRandom\u003c/code\u003e implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of \u003ccode\u003eSecureRandom\u003c/code\u003e, a system-provided source of randomness is used.). \u003cp\u003eThis concrete method has been added to this previously-defined abstract class. This method calls the KeyPairGeneratorSpi {@link KeyPairGeneratorSpi#initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) initialize} method,passing it \u003ccode\u003eparams\u003c/code\u003e and a source of randomness (obtained from the highest-priority installed provider or system-provided if none of the installed providers supply one). That \u003ccode\u003einitialize\u003c/code\u003e method always throws an UnsupportedOperationException if it is not overridden by the provider.\n * @param params the parameter set used to generate the keys.\n * @exception InvalidAlgorithmParameterException if the given parametersare inappropriate for this key pair generator.\n * @since 1.2\n */\n","tf":{"freq":{"spec":2,"defin":1,"call":1,"unsupport":1,"inappropri":1,"overridden":1,"pair":4,"highest":2,"one":1,"link":1,"use":3,"algorithm":2,"specifi":1,"given":1,"invalid":1,"oper":1,"spi":2,"concret":1,"none":2,"initi":5,"key":5,"except":3,"previous":1,"prioriti":2,"alway":1,"instal":4,"random":6,"paramet":4,"suppli":2,"provid":7,"parametersar":1,"pass":1,"obtain":1,"system":2,"secur":5,"generat":5,"ad":1,"java":2,"sourc":3,"method":4},"maxFreq":7,"totalTerms":94},"loc":3}