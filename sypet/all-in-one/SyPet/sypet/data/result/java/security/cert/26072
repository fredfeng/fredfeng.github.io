{"id":26072,"className":"java.security.cert.CertificateFactorySpi","methodName":"engineGenerateCertificate","signature":"\u003cjava.security.cert.CertificateFactorySpi: java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream)\u003e","javadoc":"/** \n * Generates a certificate object and initializes it with the data read from the input stream \u003ccode\u003einStream\u003c/code\u003e. \u003cp\u003eIn order to take advantage of the specialized certificate format supported by this certificate factory, the returned certificate object can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the returned certificate object can be typecast to the \u003ccode\u003eX509Certificate\u003c/code\u003e class. \u003cp\u003eIn the case of a certificate factory for X.509 certificates, the certificate provided in \u003ccode\u003einStream\u003c/code\u003e must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----. \u003cp\u003eNote that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and{@link java.io.InputStream#reset() reset}, this method will consume the entire input stream. Otherwise, each call to this method consumes one certificate and the read position of the input stream is positioned to the next available byte after the inherent end-of-certificate marker. If the data in the input stream does not contain an inherent end-of-certificate marker (other than EOF) and there is trailing data after the certificate is parsed, a \u003ccode\u003eCertificateException\u003c/code\u003e is thrown.\n * @param inStream an input stream with the certificate data.\n * @return a certificate object initialized with the datafrom the input stream.\n * @exception CertificateException on parsing errors.\n */\n","tf":{"freq":{"must":3,"typecast":2,"given":1,"trail":1,"reset":2,"thrown":1,"except":3,"support":2,"advantag":1,"mark":2,"avail":1,"format":1,"provid":2,"encod":3,"input":9,"datafrom":1,"marker":2,"contain":1,"will":1,"entir":1,"posit":2,"otherwis":1,"call":1,"stream":12,"binari":1,"correspond":1,"link":2,"one":1,"next":1,"engin":1,"data":4,"object":4,"consum":2,"order":1,"factori":3,"read":2,"initi":2,"end":3,"note":1,"may":1,"certif":22,"error":1,"suppli":1,"printabl":1,"begin":1,"inher":2,"take":1,"generat":2,"exampl":1,"base":2,"special":1,"java":2,"method":2,"pars":2,"bound":2},"maxFreq":22,"totalTerms":129},"loc":0}