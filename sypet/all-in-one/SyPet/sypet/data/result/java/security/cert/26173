{"id":26173,"className":"java.security.cert.CertificateFactory","methodName":"getInstance","signature":"\u003cjava.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Returns a certificate factory object for the specified certificate type. \u003cp\u003e A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the specified provider is returned.  The specified provider must be registered in the security provider list. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param type the certificate type.See the CertificateFactory section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard certificate types.\n * @param provider the name of the provider.\n * @return a certificate factory object for the specified type.\n * @exception CertificateException if a CertificateFactorySpiimplementation for the specified algorithm is not available from the specified provider.\n * @exception NoSuchProviderException if the specified provider is notregistered in the security provider list.\n * @exception IllegalArgumentException if the provider name is nullor empty.\n * @see java.security.Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"object":3,"type":5,"must":1,"nullor":1,"algorithm":2,"specifi":7,"technot":1,"document":1,"factori":7,"name":4,"spi":1,"regist":2,"spiimplement":1,"href":1,"note":1,"cryptographi":1,"argument":1,"notregist":1,"except":6,"certif":11,"may":1,"standard":3,"avail":1,"list":3,"illeg":1,"provid":14,"section":1,"empti":1,"instanc":1,"guid":1,"inform":1,"secur":6,"architectur":1,"retriev":1,"encapsul":1,"java":2,"html":1,"method":1},"maxFreq":14,"totalTerms":102},"loc":10}