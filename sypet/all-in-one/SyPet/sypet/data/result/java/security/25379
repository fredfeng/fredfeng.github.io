{"id":25379,"className":"java.security.Provider","methodName":"clear","signature":"\u003cjava.security.Provider: void clear()\u003e","javadoc":"/** \n * Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider. \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckSecurityAccess\u003c/code\u003e method is called with the string \u003ccode\u003e\"clearProviderProperties.\"+name\u003c/code\u003e (where \u003ccode\u003ename\u003c/code\u003e is the provider name) to see if it\u0027s ok to clear this provider. If the default implementation of \u003ccode\u003echeckSecurityAccess\u003c/code\u003e is used (that is, that method is not overriden), then this results in a call to the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with a \u003ccode\u003eSecurityPermission(\"clearProviderProperties.\"+name)\u003c/code\u003e permission.\n * @throws SecurityException if a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkSecurityAccess}\u003c/code\u003e method denies access to clear this provider\n * @since 1.2\n */\n","tf":{"freq":{"call":2,"result":1,"link":1,"use":2,"lang":1,"clear":6,"name":4,"permiss":3,"longer":1,"exist":1,"deni":1,"facil":1,"look":1,"overriden":1,"except":1,"check":4,"manag":4,"access":4,"provid":7,"secur":9,"contain":1,"string":1,"method":4,"java":1,"properti":3,"first":1},"maxFreq":9,"totalTerms":66},"loc":7}