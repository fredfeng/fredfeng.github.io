{"id":25586,"className":"java.security.Policy","methodName":"getInstance","signature":"\u003cjava.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy$Parameters,java.security.Provider)\u003e","javadoc":"/** \n * Returns a Policy object of the specified type. \u003cp\u003e A new Policy object encapsulating the PolicySpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param type the specified Policy type.  See the Policy section in the\u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#Policy\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for a list of standard Policy types.\n * @param params parameters for the Policy, which may be null.\n * @param provider the Provider.\n * @return the new Policy object.\n * @exception SecurityException if the caller does not have permissionto get a Policy instance for the specified type.\n * @exception NullPointerException if the specified type is null.\n * @exception IllegalArgumentException if the specified Provider is null,or if the specified parameters are not understood by the PolicySpi implementation from the specified Provider.\n * @exception NoSuchAlgorithmException if the specified Provider does notsupport a PolicySpi implementation for the specified type.\n * @see Provider\n * @since 1.6\n */\n","tf":{"freq":{"caller":1,"root":1,"object":5,"type":7,"specifi":11,"technot":1,"algorithm":2,"document":1,"understood":1,"permissionto":1,"spi":3,"name":2,"regist":1,"href":1,"note":1,"cryptographi":1,"argument":1,"except":8,"may":1,"standard":3,"paramet":2,"list":2,"polici":12,"illeg":1,"provid":9,"section":1,"notsupport":1,"instanc":2,"guid":1,"secur":2,"architectur":1,"encapsul":1,"pointer":1,"html":1,"java":1},"maxFreq":12,"totalTerms":91},"loc":21}