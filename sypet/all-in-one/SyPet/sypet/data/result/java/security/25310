{"id":25310,"className":"java.security.KeyPairGenerator","methodName":"initialize","signature":"\u003cjava.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)\u003e","javadoc":"/** \n * Initializes the key pair generator with the given parameter set and source of randomness. \u003cp\u003eThis concrete method has been added to this previously-defined abstract class. This method calls the KeyPairGeneratorSpi  {@link KeyPairGeneratorSpi#initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) initialize} method,passing it \u003ccode\u003eparams\u003c/code\u003e and \u003ccode\u003erandom\u003c/code\u003e. That \u003ccode\u003einitialize\u003c/code\u003e method always throws an UnsupportedOperationException if it is not overridden by the provider.\n * @param params the parameter set used to generate the keys.\n * @param random the source of randomness.\n * @exception InvalidAlgorithmParameterException if the given parametersare inappropriate for this key pair generator.\n * @since 1.2\n */\n","tf":{"freq":{"spec":2,"defin":1,"call":1,"unsupport":1,"inappropri":1,"overridden":1,"pair":4,"link":1,"use":1,"algorithm":2,"invalid":1,"given":2,"oper":1,"spi":2,"concret":1,"initi":5,"key":5,"except":3,"previous":1,"alway":1,"random":5,"paramet":4,"provid":1,"parametersar":1,"pass":1,"secur":3,"generat":5,"ad":1,"method":4,"sourc":2,"java":2},"maxFreq":5,"totalTerms":66},"loc":12}