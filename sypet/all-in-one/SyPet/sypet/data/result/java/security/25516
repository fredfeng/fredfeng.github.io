{"id":25516,"className":"java.security.Security","methodName":"addProvider","signature":"\u003cjava.security.Security: int addProvider(java.security.Provider)\u003e","javadoc":"/** \n * Adds a provider to the next position available. \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckSecurityAccess\u003c/code\u003e method is called with the string \u003ccode\u003e\"insertProvider.\"+provider.getName()\u003c/code\u003e to see if it\u0027s ok to add a new provider. If the default implementation of \u003ccode\u003echeckSecurityAccess\u003c/code\u003e is used (i.e., that method is not overriden), then this will result in a call to the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with a \u003ccode\u003eSecurityPermission(\"insertProvider.\"+provider.getName())\u003c/code\u003e permission.\n * @param provider the provider to be added.\n * @return the preference position in which the provider wasadded, or -1 if the provider was not added because it is already installed.\n * @throws NullPointerException if provider is null\n * @throws SecurityException if a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkSecurityAccess}\u003c/code\u003e method denies access to add a new provider\n * @see #getProvider\n * @see #removeProvider\n * @see java.security.SecurityPermission\n */\n","tf":{"freq":{"call":2,"result":1,"link":1,"next":1,"use":1,"add":4,"lang":1,"name":2,"permiss":4,"exist":1,"deni":1,"overriden":1,"except":2,"check":4,"manag":4,"instal":1,"remov":1,"avail":1,"access":4,"provid":15,"wasad":1,"secur":11,"string":1,"will":1,"pointer":1,"ad":2,"java":2,"method":4,"alreadi":1,"insert":2,"prefer":1,"first":1,"posit":2},"maxFreq":15,"totalTerms":82},"loc":9}