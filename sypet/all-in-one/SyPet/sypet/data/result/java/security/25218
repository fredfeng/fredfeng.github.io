{"id":25218,"className":"java.security.KeyStore$PrivateKeyEntry","methodName":"PrivateKeyEntry","signature":"\u003cjava.security.KeyStore$PrivateKeyEntry: void PrivateKeyEntry(java.security.PrivateKey,java.security.cert.Certificate[])\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003ePrivateKeyEntry\u003c/code\u003e with a \u003ccode\u003ePrivateKey\u003c/code\u003e and corresponding certificate chain. \u003cp\u003e The specified \u003ccode\u003echain\u003c/code\u003e is cloned before it is stored in the new \u003ccode\u003ePrivateKeyEntry\u003c/code\u003e object.\n * @param privateKey the \u003ccode\u003ePrivateKey\u003c/code\u003e\n * @param chain an array of \u003ccode\u003eCertificate\u003c/code\u003esrepresenting the certificate chain. The chain must be ordered and contain a \u003ccode\u003eCertificate\u003c/code\u003e at index 0 corresponding to the private key.\n * @exception NullPointerException if\u003ccode\u003eprivateKey\u003c/code\u003e or \u003ccode\u003echain\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @exception IllegalArgumentException if the specified chain has alength of 0, if the specified chain does not contain \u003ccode\u003eCertificate\u003c/code\u003es of the same type, or if the \u003ccode\u003ePrivateKey\u003c/code\u003e algorithm does not match the algorithm of the \u003ccode\u003ePublicKey\u003c/code\u003e in the end entity \u003ccode\u003eCertificate\u003c/code\u003e (at index 0)\n */\n","tf":{"freq":{"store":1,"correspond":2,"object":1,"type":1,"must":1,"specifi":3,"algorithm":2,"order":1,"srepres":1,"end":1,"key":10,"argument":1,"clone":1,"certif":6,"index":2,"except":4,"entri":3,"illeg":1,"entiti":1,"chain":8,"contain":2,"pointer":1,"construct":1,"match":1,"array":1,"alength":1},"maxFreq":10,"totalTerms":58},"loc":37}