{"id":26104,"className":"java.security.cert.X509CertSelector","methodName":"setPolicy","signature":"\u003cjava.security.cert.X509CertSelector: void setPolicy(java.util.Set)\u003e","javadoc":"/** \n * Sets the policy constraint. The \u003ccode\u003eX509Certificate\u003c/code\u003e must include at least one of the specified policies in its certificate policies extension. If \u003ccode\u003ecertPolicySet\u003c/code\u003e is empty, then the \u003ccode\u003eX509Certificate\u003c/code\u003e must include at least some specified policy in its certificate policies extension. If \u003ccode\u003ecertPolicySet\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, no policy check will be performed. \u003cp\u003e Note that the \u003ccode\u003eSet\u003c/code\u003e is cloned to protect against subsequent modifications.\n * @param certPolicySet a \u003ccode\u003eSet\u003c/code\u003e of certificate policy OIDs instring format (or \u003ccode\u003enull\u003c/code\u003e). Each OID is represented by a set of nonnegative integers separated by periods.\n * @throws IOException if a parsing error occurs on the OID such asthe first component is not 0, 1 or 2 or the second component is greater than 39.\n * @see #getPolicy\n */\n","tf":{"freq":{"greater":1,"second":1,"least":2,"one":1,"constraint":1,"perform":1,"must":2,"specifi":2,"cert":3,"extens":2,"subsequ":1,"note":1,"asth":1,"clone":1,"except":1,"certif":5,"includ":2,"error":1,"check":1,"repres":1,"polici":12,"format":1,"period":1,"empti":1,"instr":1,"compon":2,"separ":1,"nonneg":1,"will":1,"first":1,"pars":1,"integ":1,"modif":1,"occur":1},"maxFreq":12,"totalTerms":57},"loc":24}