{"id":26006,"className":"java.security.cert.X509Certificate","methodName":"getKeyUsage","signature":"\u003cjava.security.cert.X509Certificate: boolean[] getKeyUsage()\u003e","javadoc":"/** \n * Gets a boolean array representing bits of the \u003ccode\u003eKeyUsage\u003c/code\u003e extension, (OID \u003d 2.5.29.15). The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate. The ASN.1 definition for this is: \u003cpre\u003e KeyUsage ::\u003d BIT STRING { digitalSignature        (0), nonRepudiation          (1), keyEncipherment         (2), dataEncipherment        (3), keyAgreement            (4), keyCertSign             (5), cRLSign                 (6), encipherOnly            (7), decipherOnly            (8) } \u003c/pre\u003e RFC 3280 recommends that when used, this be marked as a critical extension.\n * @return the KeyUsage extension of this certificate, represented asan array of booleans. The order of KeyUsage values in the array is the same as in the above ASN.1 definition. The array will contain a value for each KeyUsage defined above. If the KeyUsage list encoded in the certificate is longer than the above list, it will not be truncated. Returns null if this certificate does not contain a KeyUsage extension.\n */\n","tf":{"freq":{"defin":2,"deciph":1,"data":1,"truncat":1,"use":1,"signatur":2,"recommend":1,"cert":1,"order":1,"extens":5,"longer":1,"purpos":1,"valu":2,"key":13,"encipher":3,"certif":5,"repres":2,"repudi":1,"agreement":1,"list":2,"mark":1,"enciph":1,"non":1,"sign":3,"digit":1,"bit":1,"encod":1,"asan":1,"pre":2,"contain":3,"definit":2,"will":2,"usag":9,"critic":1,"array":4},"maxFreq":13,"totalTerms":80},"loc":0}