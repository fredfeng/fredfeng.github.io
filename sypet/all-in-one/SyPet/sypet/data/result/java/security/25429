{"id":25429,"className":"java.security.MessageDigest","methodName":"getInstance","signature":"\u003cjava.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a MessageDigest object that implements the specified digest algorithm. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the first Provider that supports the specified algorithm is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the name of the algorithm requested.See the MessageDigest section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @return a Message Digest object that implements the specified algorithm.\n * @exception NoSuchAlgorithmException if no Provider supports aMessageDigestSpi implementation for the specified algorithm.\n * @see Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"digest":8,"object":3,"technot":1,"algorithm":9,"specifi":4,"document":1,"request":1,"spi":2,"name":4,"regist":2,"href":1,"note":1,"cryptographi":1,"travers":1,"except":2,"may":1,"support":2,"standard":3,"messag":7,"list":2,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":4,"architectur":1,"start":1,"retriev":1,"encapsul":1,"java":1,"html":1,"method":2,"prefer":1,"first":1},"maxFreq":9,"totalTerms":85},"loc":18}