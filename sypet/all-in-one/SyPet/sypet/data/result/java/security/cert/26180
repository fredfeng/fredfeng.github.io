{"id":26180,"className":"java.security.cert.CertificateFactory","methodName":"generateCertPath","signature":"\u003cjava.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream,java.lang.String)\u003e","javadoc":"/** \n * Generates a \u003ccode\u003eCertPath\u003c/code\u003e object and initializes it with the data read from the \u003ccode\u003eInputStream\u003c/code\u003e inStream. The data is assumed to be in the specified encoding. See the CertPath Encodings section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard encoding names and their formats.\n * @param inStream an \u003ccode\u003eInputStream\u003c/code\u003e containing the data\n * @param encoding the encoding used for the data\n * @return a \u003ccode\u003eCertPath\u003c/code\u003e initialized with the data from the\u003ccode\u003eInputStream\u003c/code\u003e\n * @exception CertificateException if an exception occurs while decoding orthe encoding requested is not supported\n * @since 1.4\n */\n","tf":{"freq":{"orth":1,"stream":5,"root":1,"data":5,"use":1,"object":1,"algorithm":1,"specifi":1,"technot":1,"document":1,"cert":5,"request":1,"name":3,"path":5,"read":1,"initi":2,"href":1,"cryptographi":1,"decod":1,"certif":1,"except":3,"support":1,"assum":1,"standard":3,"format":1,"section":1,"guid":1,"inform":1,"encod":7,"input":3,"secur":1,"architectur":1,"contain":1,"generat":2,"html":1,"java":1,"occur":1},"maxFreq":7,"totalTerms":69},"loc":3}