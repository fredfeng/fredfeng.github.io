{"id":25187,"className":"java.security.AlgorithmParameters","methodName":"getInstance","signature":"\u003cjava.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns a parameter object for the specified algorithm. \u003cp\u003e A new AlgorithmParameters object encapsulating the AlgorithmParametersSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list. \u003cp\u003eThe returned parameter object must be initialized via a call to \u003ccode\u003einit\u003c/code\u003e, using an appropriate parameter specification or parameter encoding.\n * @param algorithm the name of the algorithm requested.See the AlgorithmParameters section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameters\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @param provider the name of the provider.\n * @return the new parameter object.\n * @exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpiimplementation for the specified algorithm is not available from the specified Provider object.\n * @exception IllegalArgumentException if the provider is null.\n * @see Provider\n * @since 1.4\n */\n","tf":{"freq":{"call":1,"via":1,"root":1,"use":1,"object":7,"must":1,"technot":1,"algorithm":12,"specifi":5,"document":1,"spi":1,"name":5,"request":1,"regist":1,"initi":1,"spiimplement":1,"href":1,"note":1,"cryptographi":1,"argument":1,"except":4,"standard":3,"paramet":10,"init":1,"avail":1,"list":1,"illeg":1,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"specif":1,"encod":1,"secur":1,"architectur":1,"appropri":1,"generat":1,"encapsul":1,"java":1,"html":1},"maxFreq":12,"totalTerms":87},"loc":9}