{"id":25963,"className":"java.security.cert.PKIXCertPathBuilderResult","methodName":"PKIXCertPathBuilderResult","signature":"\u003cjava.security.cert.PKIXCertPathBuilderResult: void PKIXCertPathBuilderResult(java.security.cert.CertPath,java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)\u003e","javadoc":"/** \n * Creates an instance of \u003ccode\u003ePKIXCertPathBuilderResult\u003c/code\u003e containing the specified parameters.\n * @param certPath the validated \u003ccode\u003eCertPath\u003c/code\u003e\n * @param trustAnchor a \u003ccode\u003eTrustAnchor\u003c/code\u003e describing the CA thatserved as a trust anchor for the certification path\n * @param policyTree the immutable valid policy tree, or \u003ccode\u003enull\u003c/code\u003eif there are no valid policies\n * @param subjectPublicKey the public key of the subject\n * @throws NullPointerException if the \u003ccode\u003ecertPath\u003c/code\u003e,\u003ccode\u003etrustAnchor\u003c/code\u003e or \u003ccode\u003esubjectPublicKey\u003c/code\u003e parameters are \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"result":2,"valid":3,"except":1,"certif":1,"creat":1,"subject":3,"trust":4,"immut":1,"thatserv":1,"builder":2,"paramet":2,"describ":1,"xcert":1,"polici":3,"anchor":4,"instanc":1,"specifi":1,"cert":4,"tree":2,"contain":1,"path":6,"pointer":1,"key":3},"maxFreq":6,"totalTerms":49},"loc":6}