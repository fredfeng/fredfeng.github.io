{"id":25680,"className":"java.security.SecureRandom","methodName":"SecureRandom","signature":"\u003cjava.security.SecureRandom: void SecureRandom(byte[])\u003e","javadoc":"/** \n * Constructs a secure random number generator (RNG) implementing the default random number algorithm. The SecureRandom instance is seeded with the specified seed bytes. \u003cp\u003e This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\u003cp\u003e See the SecureRandom section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard RNG algorithm names.\n * @param seed the seed.\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"object":1,"technot":1,"specifi":1,"algorithm":5,"document":1,"name":3,"spi":1,"regist":2,"none":1,"href":1,"note":1,"cryptographi":1,"constructor":1,"travers":1,"may":1,"support":2,"standard":3,"seed":4,"random":9,"list":2,"number":2,"provid":7,"section":1,"instanc":1,"guid":1,"inform":1,"specif":1,"secur":12,"architectur":1,"start":1,"retriev":1,"generat":1,"encapsul":1,"java":1,"html":1,"method":1,"construct":1,"prefer":1,"first":1},"maxFreq":12,"totalTerms":82},"loc":4}