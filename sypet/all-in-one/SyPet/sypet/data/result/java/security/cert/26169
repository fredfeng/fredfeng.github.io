{"id":26169,"className":"java.security.cert.CertPathValidator","methodName":"validate","signature":"\u003cjava.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)\u003e","javadoc":"/** \n * Validates the specified certification path using the specified algorithm parameter set. \u003cp\u003e The \u003ccode\u003eCertPath\u003c/code\u003e specified must be of a type that is supported by the validation algorithm, otherwise an \u003ccode\u003eInvalidAlgorithmParameterException\u003c/code\u003e will be thrown. For example, a \u003ccode\u003eCertPathValidator\u003c/code\u003e that implements the PKIX algorithm validates \u003ccode\u003eCertPath\u003c/code\u003e objects of type X.509.\n * @param certPath the \u003ccode\u003eCertPath\u003c/code\u003e to be validated\n * @param params the algorithm parameters\n * @return the result of the validation algorithm\n * @exception CertPathValidatorException if the \u003ccode\u003eCertPath\u003c/code\u003edoes not validate\n * @exception InvalidAlgorithmParameterException if the specifiedparameters or the type of the specified \u003ccode\u003eCertPath\u003c/code\u003e are inappropriate for this \u003ccode\u003eCertPathValidator\u003c/code\u003e\n */\n","tf":{"freq":{"otherwis":1,"result":1,"valid":10,"thrown":1,"except":5,"certif":1,"support":1,"inappropri":1,"paramet":4,"use":1,"object":1,"type":3,"must":1,"specifiedparamet":1,"specifi":4,"algorithm":7,"cert":9,"invalid":2,"exampl":1,"will":1,"path":10},"maxFreq":10,"totalTerms":66},"loc":3}