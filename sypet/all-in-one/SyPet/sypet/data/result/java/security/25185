{"id":25185,"className":"java.security.AlgorithmParameters","methodName":"getInstance","signature":"\u003cjava.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a parameter object for the specified algorithm. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new AlgorithmParameters object encapsulating the AlgorithmParametersSpi implementation from the first Provider that supports the specified algorithm is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\u003cp\u003e The returned parameter object must be initialized via a call to \u003ccode\u003einit\u003c/code\u003e, using an appropriate parameter specification or parameter encoding.\n * @param algorithm the name of the algorithm requested.See the AlgorithmParameters section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameters\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @return the new parameter object.\n * @exception NoSuchAlgorithmException if no Provider supports anAlgorithmParametersSpi implementation for the specified algorithm.\n * @see Provider\n */\n","tf":{"freq":{"call":1,"via":2,"root":1,"link":1,"use":1,"object":4,"must":1,"technot":1,"algorithm":13,"specifi":3,"document":1,"request":1,"name":4,"spi":2,"regist":2,"initi":1,"href":1,"note":1,"cryptographi":1,"travers":1,"except":2,"may":1,"support":2,"standard":3,"paramet":10,"init":1,"list":2,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"encod":1,"specif":1,"secur":4,"architectur":1,"start":1,"appropri":1,"retriev":1,"encapsul":1,"java":1,"html":1,"method":2,"prefer":1,"first":1},"maxFreq":13,"totalTerms":93},"loc":11}