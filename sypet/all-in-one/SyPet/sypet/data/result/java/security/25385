{"id":25385,"className":"java.security.Provider","methodName":"put","signature":"\u003cjava.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e","javadoc":"/** \n * Sets the \u003ccode\u003ekey\u003c/code\u003e property to have the specified \u003ccode\u003evalue\u003c/code\u003e. \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckSecurityAccess\u003c/code\u003e method is called with the string \u003ccode\u003e\"putProviderProperty.\"+name\u003c/code\u003e, where \u003ccode\u003ename\u003c/code\u003e is the provider name, to see if it\u0027s ok to set this provider\u0027s property values. If the default implementation of \u003ccode\u003echeckSecurityAccess\u003c/code\u003e is used (that is, that method is not overriden), then this results in a call to the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with a \u003ccode\u003eSecurityPermission(\"putProviderProperty.\"+name)\u003c/code\u003e permission.\n * @param key the property key.\n * @param value the property value.\n * @return the previous value of the specified property(\u003ccode\u003ekey\u003c/code\u003e), or null if it did not have one.\n * @throws SecurityException if a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkSecurityAccess}\u003c/code\u003e method denies access to set property values.\n * @since 1.2\n */\n","tf":{"freq":{"call":2,"result":1,"put":3,"one":1,"link":1,"use":1,"lang":1,"specifi":2,"name":4,"permiss":3,"valu":6,"exist":1,"deni":1,"key":4,"overriden":1,"except":1,"check":4,"previous":1,"manag":4,"access":4,"provid":4,"secur":9,"string":1,"java":1,"method":4,"properti":8,"first":1},"maxFreq":9,"totalTerms":74},"loc":8}