{"id":25646,"className":"java.security.KeyFactory","methodName":"getInstance","signature":"\u003cjava.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a KeyFactory object that converts public/private keys of the specified algorithm. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyFactory object encapsulating the KeyFactorySpi implementation from the first Provider that supports the specified algorithm is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the name of the requested key algorithm.See the KeyFactory section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @return the new KeyFactory object.\n * @exception NoSuchAlgorithmException if no Provider supports aKeyFactorySpi implementation for the specified algorithm.\n * @see Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"convert":1,"object":3,"technot":1,"algorithm":8,"specifi":3,"document":1,"factori":7,"request":1,"name":4,"spi":2,"regist":2,"href":1,"key":9,"note":1,"cryptographi":1,"travers":1,"except":2,"may":1,"support":2,"standard":3,"list":2,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":4,"architectur":1,"start":1,"retriev":1,"encapsul":1,"java":1,"html":1,"method":2,"prefer":1,"first":1},"maxFreq":9,"totalTerms":85},"loc":3}