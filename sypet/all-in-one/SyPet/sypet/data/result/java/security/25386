{"id":25386,"className":"java.security.Provider","methodName":"remove","signature":"\u003cjava.security.Provider: java.lang.Object remove(java.lang.Object)\u003e","javadoc":"/** \n * Removes the \u003ccode\u003ekey\u003c/code\u003e property (and its corresponding \u003ccode\u003evalue\u003c/code\u003e). \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckSecurityAccess\u003c/code\u003e method is called with the string \u003ccode\u003e\"removeProviderProperty.\"+name\u003c/code\u003e, where \u003ccode\u003ename\u003c/code\u003e is the provider name, to see if it\u0027s ok to remove this provider\u0027s properties. If the default implementation of \u003ccode\u003echeckSecurityAccess\u003c/code\u003e is used (that is, that method is not overriden), then this results in a call to the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with a \u003ccode\u003eSecurityPermission(\"removeProviderProperty.\"+name)\u003c/code\u003e permission.\n * @param key the key for the property to be removed.\n * @return the value to which the key had been mapped,or null if the key did not have a mapping.\n * @throws SecurityException if a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkSecurityAccess}\u003c/code\u003e method denies access to remove this provider\u0027s properties.\n * @since 1.2\n */\n","tf":{"freq":{"call":2,"result":1,"correspond":1,"link":1,"use":1,"lang":1,"name":4,"permiss":3,"map":2,"valu":2,"exist":1,"deni":1,"key":5,"overriden":1,"except":1,"check":4,"manag":4,"remov":7,"access":4,"provid":5,"secur":9,"string":1,"method":4,"java":1,"properti":6,"first":1},"maxFreq":9,"totalTerms":73},"loc":7}