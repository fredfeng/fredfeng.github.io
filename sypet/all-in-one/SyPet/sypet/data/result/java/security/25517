{"id":25517,"className":"java.security.Security","methodName":"removeProvider","signature":"\u003cjava.security.Security: void removeProvider(java.lang.String)\u003e","javadoc":"/** \n * Removes the provider with the specified name. \u003cp\u003eWhen the specified provider is removed, all providers located at a position greater than where the specified provider was are shifted down one position (towards the head of the list of installed providers). \u003cp\u003eThis method returns silently if the provider is not installed or if name is null. \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckSecurityAccess\u003c/code\u003e method is called with the string \u003ccode\u003e\"removeProvider.\"+name\u003c/code\u003e to see if it\u0027s ok to remove the provider. If the default implementation of \u003ccode\u003echeckSecurityAccess\u003c/code\u003e is used (i.e., that method is not overriden), then this will result in a call to the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with a \u003ccode\u003eSecurityPermission(\"removeProvider.\"+name)\u003c/code\u003e permission.\n * @param name the name of the provider to remove.\n * @throws SecurityException if a security manager exists and its \u003ccode\u003e {@link java.lang.SecurityManager#checkSecurityAccess}\u003c/code\u003e method denies access to remove the provider\n * @see #getProvider\n * @see #addProvider\n */\n","tf":{"freq":{"silent":1,"result":1,"call":2,"greater":1,"link":1,"one":1,"use":1,"add":1,"lang":1,"specifi":3,"toward":1,"name":6,"permiss":3,"head":1,"exist":1,"deni":1,"overriden":1,"except":1,"locat":1,"check":4,"manag":4,"instal":2,"remov":8,"list":1,"access":4,"provid":14,"secur":9,"string":1,"will":1,"java":1,"method":5,"posit":2,"first":1,"shift":1},"maxFreq":14,"totalTerms":87},"loc":6}