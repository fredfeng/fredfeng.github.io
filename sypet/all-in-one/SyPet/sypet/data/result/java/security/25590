{"id":25590,"className":"java.security.Policy","methodName":"getPermissions","signature":"\u003cjava.security.Policy: java.security.PermissionCollection getPermissions(java.security.CodeSource)\u003e","javadoc":"/** \n * Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource. \u003cp\u003e Applications are discouraged from calling this method since this operation may not be supported by all policy implementations. Applications should solely rely on the \u003ccode\u003eimplies\u003c/code\u003e method to perform policy checks.  If an application absolutely must call a getPermissions method, it should call \u003ccode\u003egetPermissions(ProtectionDomain)\u003c/code\u003e. \u003cp\u003e The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION.  This method can be overridden if the policy implementation can return a set of permissions granted to a CodeSource.\n * @param codesource the CodeSource to which the returnedPermissionCollection has been granted.\n * @return a set of permissions granted to the specified CodeSource.If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.\n */\n","tf":{"freq":{"call":3,"grant":4,"overridden":1,"codesourc":1,"mutabl":1,"perform":1,"object":1,"type":1,"applic":3,"must":3,"specifi":2,"reli":1,"heterogen":1,"oper":3,"permiss":10,"impli":1,"domain":1,"sole":1,"may":1,"support":4,"check":1,"discourag":1,"polici":5,"absolut":1,"instanc":1,"contain":1,"method":5,"sourc":4,"collect":2},"maxFreq":10,"totalTerms":65},"loc":3}