{"id":25508,"className":"java.security.KeyStoreSpi","methodName":"engineLoad","signature":"\u003cjava.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])\u003e","javadoc":"/** \n * Loads the keystore from the given input stream. \u003cp\u003eA password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device), or to check the integrity of the keystore data. If a password is not given for integrity checking, then integrity checking is not performed.\n * @param stream the input stream from which the keystore is loaded,or \u003ccode\u003enull\u003c/code\u003e\n * @param password the password used to check the integrity ofthe keystore, the password used to unlock the keystore, or \u003ccode\u003enull\u003c/code\u003e\n * @exception IOException if there is an I/O or format problem with thekeystore data, if a password is required but not given, or if the given password was incorrect. If the error is due to a wrong password, the  {@link Throwable#getCause cause} of the\u003ccode\u003eIOException\u003c/code\u003e should be an \u003ccode\u003eUnrecoverableKeyException\u003c/code\u003e\n * @exception NoSuchAlgorithmException if the algorithm used to checkthe integrity of the keystore cannot be found\n * @exception CertificateException if any of the certificates in thekeystore could not be loaded\n */\n","tf":{"freq":{"stream":3,"integr":5,"thekeystor":2,"link":1,"engin":1,"data":2,"use":3,"perform":1,"password":8,"algorithm":2,"requir":1,"given":5,"token":1,"ofth":1,"incorrect":1,"key":1,"certif":2,"unlock":2,"may":1,"except":8,"resid":1,"error":1,"check":4,"problem":1,"format":1,"input":2,"caus":2,"checkth":1,"unrecover":1,"due":1,"keystor":8,"wrong":1,"hardwar":1,"load":4,"throwabl":1,"devic":1,"found":1},"maxFreq":8,"totalTerms":83},"loc":0}