{"id":26025,"className":"java.security.cert.PKIXBuilderParameters","methodName":"PKIXBuilderParameters","signature":"\u003cjava.security.cert.PKIXBuilderParameters: void PKIXBuilderParameters(java.security.KeyStore,java.security.cert.CertSelector)\u003e","javadoc":"/** \n * Creates an instance of \u003ccode\u003ePKIXBuilderParameters\u003c/code\u003e that populates the set of most-trusted CAs from the trusted certificate entries contained in the specified \u003ccode\u003eKeyStore\u003c/code\u003e. Only keystore entries that contain trusted \u003ccode\u003eX509Certificate\u003c/code\u003es are considered; all other certificate types are ignored.\n * @param keystore a \u003ccode\u003eKeyStore\u003c/code\u003e from which the set ofmost-trusted CAs will be populated\n * @param targetConstraints a \u003ccode\u003eCertSelector\u003c/code\u003e specifying theconstraints on the target certificate\n * @throws KeyStoreException if \u003ccode\u003ekeystore\u003c/code\u003e has not beeninitialized\n * @throws InvalidAlgorithmParameterException if \u003ccode\u003ekeystore\u003c/code\u003e doesnot contain at least one trusted certificate entry\n * @throws NullPointerException if \u003ccode\u003ekeystore\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"selector":1,"cas":2,"store":3,"least":1,"one":1,"constraint":1,"type":1,"consid":1,"algorithm":1,"specifi":2,"ofmost":1,"popul":2,"cert":1,"invalid":1,"doesnot":1,"key":3,"beeniniti":1,"except":3,"certif":5,"ignor":1,"theconstraint":1,"creat":1,"entri":3,"trust":5,"builder":1,"paramet":3,"instanc":1,"contain":3,"will":1,"target":2,"pointer":1,"xbuilder":1,"keystor":5},"maxFreq":5,"totalTerms":61},"loc":4}