{"id":25698,"className":"java.security.interfaces.DSAKeyPairGenerator","methodName":"initialize","signature":"\u003cjava.security.interfaces.DSAKeyPairGenerator: void initialize(int,boolean,java.security.SecureRandom)\u003e","javadoc":"/** \n * Initializes the key pair generator for a given modulus length (instead of parameters), and an optional SecureRandom bit source. If a SecureRandom bit source is needed but not supplied, i.e. null, a default SecureRandom instance will be used. \u003cp\u003eIf \u003ccode\u003egenParams\u003c/code\u003e is true, this method generates new p, q and g parameters. If it is false, the method uses precomputed parameters for the modulus length requested. If there are no precomputed parameters for that modulus length, an exception will be thrown. It is guaranteed that there will always be default parameters for modulus lengths of 512 and 1024 bits.\n * @param modlen the modulus length in bits. Valid values are anymultiple of 8 between 512 and 1024, inclusive.\n * @param random the random bit source to use to generate key bits;can be null.\n * @param genParams whether or not to generate new parameters forthe modulus length requested.\n * @exception InvalidParameterException if \u003ccode\u003emodlen\u003c/code\u003e is notbetween 512 and 1024, or if \u003ccode\u003egenParams\u003c/code\u003e is false and there are no precomputed parameters for the requested modulus length.\n */\n","tf":{"freq":{"forth":1,"need":1,"fals":2,"valid":1,"pair":1,"use":3,"whether":1,"modlen":2,"inclus":1,"invalid":1,"given":1,"request":3,"length":7,"valu":1,"initi":2,"notbetween":1,"option":1,"key":2,"precomput":3,"thrown":1,"except":3,"gen":3,"alway":1,"guarante":1,"random":5,"paramet":8,"true":1,"suppli":1,"instanc":1,"bit":6,"secur":3,"anymultipl":1,"generat":4,"instead":1,"will":3,"sourc":3,"method":2,"modulus":7},"maxFreq":8,"totalTerms":90},"loc":0}