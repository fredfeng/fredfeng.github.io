{"id":26182,"className":"java.security.cert.CertificateFactory","methodName":"generateCertificates","signature":"\u003cjava.security.cert.CertificateFactory: java.util.Collection\u003c? extends java.security.cert.Certificate\u003e generateCertificates(java.io.InputStream)\u003e","javadoc":"/** \n * Returns a (possibly empty) collection view of the certificates read from the given input stream \u003ccode\u003einStream\u003c/code\u003e. \u003cp\u003eIn order to take advantage of the specialized certificate format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the elements in the returned collection can be typecast to the \u003ccode\u003eX509Certificate\u003c/code\u003e class. \u003cp\u003eIn the case of a certificate factory for X.509 certificates, \u003ccode\u003einStream\u003c/code\u003e may contain a sequence of DER-encoded certificates in the formats described for {@link #generateCertificate(java.io.InputStream) generateCertificate}. In addition, \u003ccode\u003einStream\u003c/code\u003e may contain a PKCS#7 certificate chain. This is a PKCS#7 \u003ci\u003eSignedData\u003c/i\u003e object, with the only significant field being \u003ci\u003ecertificates\u003c/i\u003e. In particular, the signature and the contents are ignored. This format allows multiple certificates to be downloaded at once. If no certificates are present, an empty collection is returned. \u003cp\u003eNote that if the given input stream does not support {@link java.io.InputStream#mark(int) mark} and{@link java.io.InputStream#reset() reset}, this method will consume the entire input stream.\n * @param inStream the input stream with the certificates.\n * @return a (possibly empty) collection view ofjava.security.cert.Certificate objects initialized with the data from the input stream.\n * @exception CertificateException on parsing errors.\n */\n","tf":{"freq":{"possibl":2,"particular":1,"download":1,"typecast":2,"given":2,"sequenc":1,"reset":2,"element":2,"except":2,"ignor":1,"support":2,"multipl":1,"advantag":1,"signific":1,"describ":1,"mark":2,"format":3,"sign":1,"content":1,"present":1,"input":8,"encod":1,"contain":2,"will":1,"view":3,"entir":1,"collect":5,"stream":12,"allow":1,"correspond":1,"link":3,"data":2,"object":2,"signatur":1,"consum":1,"cert":1,"order":1,"factori":3,"read":1,"initi":1,"note":1,"addit":1,"may":2,"certif":20,"error":1,"ofjava":1,"empti":3,"field":1,"secur":1,"chain":1,"take":1,"generat":3,"exampl":1,"special":1,"java":3,"method":1,"pars":1},"maxFreq":20,"totalTerms":124},"loc":3}