{"id":25973,"className":"java.security.cert.PKIXCertPathValidatorResult","methodName":"getPolicyTree","signature":"\u003cjava.security.cert.PKIXCertPathValidatorResult: java.security.cert.PolicyNode getPolicyTree()\u003e","javadoc":"/** \n * Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm. The \u003ccode\u003ePolicyNode\u003c/code\u003e object that is returned and any objects that it returns through public methods are immutable. \u003cp\u003eMost applications will not need to examine the valid policy tree. They can achieve their policy processing goals by setting the policy-related parameters in \u003ccode\u003ePKIXParameters\u003c/code\u003e. However, more sophisticated applications, especially those that process policy qualifiers, may need to traverse the valid policy tree using the {@link PolicyNode#getParent PolicyNode.getParent} and{@link PolicyNode#getChildren PolicyNode.getChildren} methods.\n * @return the root node of the valid policy tree, or \u003ccode\u003enull\u003c/code\u003eif there are no valid policies\n */\n","tf":{"freq":{"need":2,"result":1,"valid":6,"root":2,"link":2,"children":2,"use":1,"object":2,"applic":2,"algorithm":1,"sophist":1,"tree":5,"path":1,"relat":1,"especi":1,"howev":1,"examin":1,"travers":1,"may":1,"certif":1,"immut":1,"paramet":2,"parent":2,"polici":14,"goal":1,"achiev":1,"process":2,"node":7,"will":1,"method":2,"qualifi":1},"maxFreq":14,"totalTerms":69},"loc":3}