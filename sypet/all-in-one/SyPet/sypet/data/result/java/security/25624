{"id":25624,"className":"java.security.Signature","methodName":"sign","signature":"\u003cjava.security.Signature: int sign(byte[],int,int)\u003e","javadoc":"/** \n * Finishes the signature operation and stores the resulting signature bytes in the provided buffer \u003ccode\u003eoutbuf\u003c/code\u003e, starting at \u003ccode\u003eoffset\u003c/code\u003e. The format of the signature depends on the underlying signature scheme. \u003cp\u003eThis signature object is reset to its initial state (the state it was in after a call to one of the \u003ccode\u003einitSign\u003c/code\u003e methods) and can be reused to generate further signatures with the same private key.\n * @param outbuf buffer for the signature result.\n * @param offset offset into \u003ccode\u003eoutbuf\u003c/code\u003e where the signature isstored.\n * @param len number of bytes within \u003ccode\u003eoutbuf\u003c/code\u003e allotted for thesignature.\n * @return the number of bytes placed into \u003ccode\u003eoutbuf\u003c/code\u003e.\n * @exception SignatureException if this signature object is notinitialized properly, if this signature algorithm is unable to process the input data provided, or if \u003ccode\u003elen\u003c/code\u003e is less than the actual signature length.\n * @since 1.2\n */\n","tf":{"freq":{"result":2,"call":1,"store":1,"one":1,"data":1,"state":2,"allot":1,"object":2,"signatur":12,"reus":1,"algorithm":1,"isstor":1,"buffer":2,"scheme":1,"oper":1,"length":1,"reset":1,"proper":1,"initi":1,"place":1,"offset":3,"less":1,"key":1,"except":2,"depend":1,"init":1,"number":2,"outbuf":5,"len":2,"format":1,"provid":2,"process":1,"unabl":1,"sign":2,"finish":1,"input":1,"thesignatur":1,"start":1,"notiniti":1,"generat":1,"actual":1,"method":1,"within":1},"maxFreq":12,"totalTerms":69},"loc":14}