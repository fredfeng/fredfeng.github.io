{"id":26102,"className":"java.security.cert.X509CertSelector","methodName":"setNameConstraints","signature":"\u003cjava.security.cert.X509CertSelector: void setNameConstraints(byte[])\u003e","javadoc":"/** \n * Sets the name constraints criterion. The \u003ccode\u003eX509Certificate\u003c/code\u003e must have subject and subject alternative names that meet the specified name constraints. \u003cp\u003e The name constraints are specified as a byte array. This byte array should contain the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 3280 and X.509. The ASN.1 definition of this structure appears below. \u003cpre\u003e\u003ccode\u003e NameConstraints ::\u003d SEQUENCE { permittedSubtrees       [0]     GeneralSubtrees OPTIONAL, excludedSubtrees        [1]     GeneralSubtrees OPTIONAL } GeneralSubtrees ::\u003d SEQUENCE SIZE (1..MAX) OF GeneralSubtree GeneralSubtree ::\u003d SEQUENCE { base                    GeneralName, minimum         [0]     BaseDistance DEFAULT 0, maximum         [1]     BaseDistance OPTIONAL } BaseDistance ::\u003d INTEGER (0..MAX) GeneralName ::\u003d CHOICE { otherName                       [0]     OtherName, rfc822Name                      [1]     IA5String, dNSName                         [2]     IA5String, x400Address                     [3]     ORAddress, directoryName                   [4]     Name, ediPartyName                    [5]     EDIPartyName, uniformResourceIdentifier       [6]     IA5String, iPAddress                       [7]     OCTET STRING, registeredID                    [8]     OBJECT IDENTIFIER} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e Note that the byte array supplied here is cloned to protect against subsequent modifications.\n * @param bytes a byte array containing the ASN.1 DER encoding ofa NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or criticality flag. Can be \u003ccode\u003enull\u003c/code\u003e, in which case no name constraints check will be performed.\n * @throws IOException if a parsing error occurs\n * @see #getNameConstraints\n */\n","tf":{"freq":{"appear":2,"paddress":1,"permit":1,"perform":1,"must":1,"specifi":2,"altern":1,"clone":1,"except":1,"form":1,"meet":1,"criterion":1,"encod":2,"flag":1,"maximum":1,"definit":1,"contain":2,"will":1,"distanc":3,"critic":1,"array":4,"parti":1,"defin":1,"minimum":1,"structur":2,"directori":1,"subject":2,"edi":1,"constraint":11,"use":1,"identifi":1,"exclud":1,"rfc":1,"resourc":1,"extens":2,"name":22,"regist":1,"valu":1,"subtre":7,"subsequ":1,"note":1,"certif":1,"includ":1,"error":1,"check":2,"uniform":1,"iparti":1,"suppli":1,"general":7,"address":2,"pre":2,"string":3,"base":4,"pars":1,"ofa":1,"modif":1,"occur":1},"maxFreq":22,"totalTerms":120},"loc":9}