{"id":26100,"className":"java.security.cert.X509CertSelector","methodName":"addSubjectAlternativeName","signature":"\u003cjava.security.cert.X509CertSelector: void addSubjectAlternativeName(int,java.lang.String)\u003e","javadoc":"/** \n * Adds a name to the subjectAlternativeNames criterion. The \u003ccode\u003eX509Certificate\u003c/code\u003e must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see  {@link #setMatchAllSubjectAltNames setMatchAllSubjectAltNames}). \u003cp\u003e This method allows the caller to add a name to the set of subject alternative names. The specified name is added to any previous value for the subjectAlternativeNames criterion. If the specified name is a duplicate, it may be ignored. \u003cp\u003e The name is provided in string format. \u003ca href\u003d\"http://www.ietf.org/rfc/rfc822.txt\"\u003eRFC 822\u003c/a\u003e, DNS, and URI names use the well-established string formats for those types (subject to the restrictions included in RFC 3280). IPv4 address names are supplied using dotted quad notation. OID address names are represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are supplied in RFC 2253 format. No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the {@link #addSubjectAlternativeName(int type,byte[] name) addSubjectAlternativeName(int type, byte [] name)}method. \u003cp\u003e \u003cstrong\u003eNote:\u003c/strong\u003e for distinguished names, use {@linkplain #addSubjectAlternativeName(int,byte[])} instead.This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.\n * @param type the name type (0-8, as specified inRFC 3280, section 4.2.1.7)\n * @param name the name in string form (not \u003ccode\u003enull\u003c/code\u003e)\n * @throws IOException if a parsing error occurs\n */\n","tf":{"freq":{"ipv":2,"least":1,"type":6,"must":1,"dot":1,"reli":1,"specifi":5,"fail":1,"altern":8,"href":1,"except":1,"ignor":1,"form":2,"format":4,"period":1,"provid":1,"restrict":1,"inform":1,"encod":1,"criterion":2,"flag":1,"strong":2,"separ":1,"http":1,"contain":1,"duplic":1,"distinguish":3,"match":4,"parti":1,"caller":1,"linkplain":1,"defin":1,"loss":1,"seri":1,"allow":1,"directori":1,"subject":11,"link":2,"one":1,"www":1,"use":4,"well":1,"add":6,"org":1,"rfc":2,"txt":1,"alt":2,"name":33,"valu":2,"note":1,"may":1,"certif":2,"includ":1,"error":1,"standard":1,"previous":1,"repres":1,"depend":1,"establish":1,"suppli":2,"section":1,"ietf":1,"notat":1,"quad":1,"address":3,"nonneg":1,"string":5,"instead":1,"ad":1,"method":3,"pars":1,"integ":1,"occur":1},"maxFreq":33,"totalTerms":165},"loc":3}