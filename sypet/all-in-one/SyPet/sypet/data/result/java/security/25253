{"id":25253,"className":"java.security.KeyStore","methodName":"load","signature":"\u003cjava.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)\u003e","javadoc":"/** \n * Loads this keystore using the given \u003ccode\u003eLoadStoreParameter\u003c/code\u003e. \u003cp\u003e Note that if this KeyStore has already been loaded, it is reinitialized and loaded again from the given parameter.\n * @param param the \u003ccode\u003eLoadStoreParameter\u003c/code\u003ethat specifies how to load the keystore, which may be \u003ccode\u003enull\u003c/code\u003e\n * @exception IllegalArgumentException if the given\u003ccode\u003eLoadStoreParameter\u003c/code\u003e input is not recognized\n * @exception IOException if there is an I/O or format problem with thekeystore data. If the error is due to an incorrect \u003ccode\u003eProtectionParameter\u003c/code\u003e (e.g. wrong password) the  {@link Throwable#getCause cause} of the\u003ccode\u003eIOException\u003c/code\u003e should be an \u003ccode\u003eUnrecoverableKeyException\u003c/code\u003e\n * @exception NoSuchAlgorithmException if the algorithm used to checkthe integrity of the keystore cannot be found\n * @exception CertificateException if any of the certificates in thekeystore could not be loaded\n * @since 1.5\n */\n","tf":{"freq":{"integr":1,"store":4,"thekeystor":2,"link":1,"data":1,"use":2,"password":1,"algorithm":2,"specifi":1,"given":3,"incorrect":1,"recogn":1,"key":2,"note":1,"argument":1,"certif":2,"may":1,"except":10,"error":1,"paramet":5,"problem":1,"format":1,"reiniti":1,"illeg":1,"input":1,"caus":2,"checkth":1,"unrecover":1,"keystor":3,"due":1,"wrong":1,"alreadi":1,"load":9,"throwabl":1,"found":1},"maxFreq":10,"totalTerms":69},"loc":5}