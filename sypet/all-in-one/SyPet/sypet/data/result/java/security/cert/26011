{"id":26011,"className":"java.security.cert.PKIXCertPathChecker","methodName":"init","signature":"\u003cjava.security.cert.PKIXCertPathChecker: void init(boolean)\u003e","javadoc":"/** \n * Initializes the internal state of this \u003ccode\u003ePKIXCertPathChecker\u003c/code\u003e. \u003cp\u003e The \u003ccode\u003eforward\u003c/code\u003e flag specifies the order that certificates will be passed to the  {@link #check check} method(forward or reverse). A \u003ccode\u003ePKIXCertPathChecker\u003c/code\u003e \u003cb\u003emust\u003c/b\u003e support reverse checking and \u003cb\u003emay\u003c/b\u003e support forward checking.\n * @param forward the order that certificates are presented tothe \u003ccode\u003echeck\u003c/code\u003e method. If \u003ccode\u003etrue\u003c/code\u003e, certificates are presented from target to most-trusted CA (forward); if \u003ccode\u003efalse\u003c/code\u003e, from most-trusted CA to target (reverse).\n * @throws CertPathValidatorException if this\u003ccode\u003ePKIXCertPathChecker\u003c/code\u003e is unable to check certificates in the specified order; it should never be thrown if the forward flag is false since reverse checking must be supported\n */\n","tf":{"freq":{"fals":2,"valid":1,"link":1,"state":1,"toth":1,"must":2,"specifi":2,"revers":4,"cert":4,"order":3,"forward":6,"path":4,"initi":1,"thrown":1,"except":1,"certif":4,"may":1,"support":3,"check":7,"trust":2,"init":1,"true":1,"checker":3,"pass":1,"unabl":1,"present":2,"never":1,"flag":2,"target":2,"intern":1,"will":1,"method":2},"maxFreq":7,"totalTerms":69},"loc":0}