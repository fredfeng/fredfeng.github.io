{"id":26174,"className":"java.security.cert.CertificateFactory","methodName":"getInstance","signature":"\u003cjava.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns a certificate factory object for the specified certificate type. \u003cp\u003e A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param type the certificate type.See the CertificateFactory section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard certificate types.\n * @param provider the provider.\n * @return a certificate factory object for the specified type.\n * @exception CertificateException if a CertificateFactorySpiimplementation for the specified algorithm is not available from the specified Provider object.\n * @exception IllegalArgumentException if the \u003ccode\u003eprovider\u003c/code\u003e isnull.\n * @see java.security.Provider\n * @since 1.4\n */\n","tf":{"freq":{"root":1,"object":6,"type":5,"algorithm":2,"specifi":6,"technot":1,"document":1,"factori":7,"isnul":1,"spi":1,"name":2,"regist":1,"spiimplement":1,"href":1,"note":1,"cryptographi":1,"argument":1,"except":4,"certif":11,"standard":3,"avail":1,"list":1,"illeg":1,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":2,"architectur":1,"encapsul":1,"html":1,"java":2},"maxFreq":11,"totalTerms":79},"loc":10}