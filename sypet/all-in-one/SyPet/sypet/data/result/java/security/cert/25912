{"id":25912,"className":"java.security.cert.PKIXParameters","methodName":"setInitialPolicies","signature":"\u003cjava.security.cert.PKIXParameters: void setInitialPolicies(java.util.Set)\u003e","javadoc":"/** \n * Sets the \u003ccode\u003eSet\u003c/code\u003e of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing. By default, any policy is acceptable (i.e. all policies), so a user that wants to allow any policy as acceptable does not need to call this method, or can call it with an empty \u003ccode\u003eSet\u003c/code\u003e (or \u003ccode\u003enull\u003c/code\u003e). \u003cp\u003e Note that the \u003ccode\u003eSet\u003c/code\u003e is copied to protect against subsequent modifications.\n * @param initialPolicies a \u003ccode\u003eSet\u003c/code\u003e of initial policyOIDs in \u003ccode\u003eString\u003c/code\u003e format (or \u003ccode\u003enull\u003c/code\u003e)\n * @throws ClassCastException if any of the elements in the set arenot of type \u003ccode\u003eString\u003c/code\u003e\n * @see #getInitialPolicies\n */\n","tf":{"freq":{"need":1,"call":2,"allow":1,"accept":3,"one":1,"identifi":1,"type":1,"copi":1,"indic":1,"path":1,"purpos":1,"initi":5,"subsequ":1,"want":1,"note":1,"element":1,"except":1,"certif":2,"polici":9,"format":1,"empti":1,"process":1,"cast":1,"string":3,"method":1,"arenot":1,"user":2,"modif":1},"maxFreq":9,"totalTerms":47},"loc":13}