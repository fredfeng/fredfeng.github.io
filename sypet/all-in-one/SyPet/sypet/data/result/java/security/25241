{"id":25241,"className":"java.security.KeyStore","methodName":"setKeyEntry","signature":"\u003cjava.security.KeyStore: void setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])\u003e","javadoc":"/** \n * Assigns the given key (that has already been protected) to the given alias. \u003cp\u003eIf the protected key is of type \u003ccode\u003ejava.security.PrivateKey\u003c/code\u003e, it must be accompanied by a certificate chain certifying the corresponding public key. If the underlying keystore implementation is of type \u003ccode\u003ejks\u003c/code\u003e, \u003ccode\u003ekey\u003c/code\u003e must be encoded as an \u003ccode\u003eEncryptedPrivateKeyInfo\u003c/code\u003e as defined in the PKCS #8 standard. \u003cp\u003eIf the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).\n * @param alias the alias name\n * @param key the key (in protected format) to be associated with the alias\n * @param chain the certificate chain for the corresponding publickey (only useful if the protected key is of type \u003ccode\u003ejava.security.PrivateKey\u003c/code\u003e).\n * @exception KeyStoreException if the keystore has not been initialized(loaded), or if this operation fails for some other reason.\n */\n","tf":{"freq":{"defin":1,"assign":1,"store":1,"reason":1,"overridden":1,"correspond":2,"use":1,"possibl":1,"jks":1,"type":3,"publickey":1,"must":2,"info":1,"fail":1,"given":4,"oper":1,"associ":2,"encrypt":1,"name":1,"initi":1,"exist":1,"key":13,"except":2,"certif":3,"standard":1,"entri":1,"format":1,"accompani":1,"alia":5,"certifi":1,"inform":1,"encod":1,"secur":2,"chain":4,"keystor":3,"load":1,"java":2,"alreadi":2},"maxFreq":13,"totalTerms":73},"loc":6}