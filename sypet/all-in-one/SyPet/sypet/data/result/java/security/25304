{"id":25304,"className":"java.security.KeyPairGenerator","methodName":"getInstance","signature":"\u003cjava.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. \u003cp\u003e A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the specified provider is returned.  The specified provider must be registered in the security provider list. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the standard string name of the algorithm.See the KeyPairGenerator section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @param provider the string name of the provider.\n * @return the new KeyPairGenerator object.\n * @exception NoSuchAlgorithmException if a KeyPairGeneratorSpiimplementation for the specified algorithm is not available from the specified provider.\n * @exception NoSuchProviderException if the specified provider is notregistered in the security provider list.\n * @exception IllegalArgumentException if the provider name is nullor empty.\n * @see Provider\n */\n","tf":{"freq":{"via":1,"root":1,"pair":8,"link":1,"object":3,"must":1,"nullor":1,"technot":1,"algorithm":7,"specifi":6,"document":1,"spi":1,"name":6,"regist":2,"spiimplement":1,"href":1,"key":8,"note":1,"cryptographi":1,"argument":1,"notregist":1,"except":6,"may":1,"standard":4,"avail":1,"list":3,"illeg":1,"provid":14,"section":1,"empti":1,"instanc":1,"guid":1,"inform":1,"secur":5,"architectur":1,"retriev":1,"generat":8,"string":2,"encapsul":1,"java":1,"html":1,"method":1},"maxFreq":14,"totalTerms":110},"loc":5}