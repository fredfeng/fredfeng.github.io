{"id":25924,"className":"java.security.cert.PKIXParameters","methodName":"setPolicyQualifiersRejected","signature":"\u003cjava.security.cert.PKIXParameters: void setPolicyQualifiersRejected(boolean)\u003e","javadoc":"/** \n * Sets the PolicyQualifiersRejected flag. If this flag is true, certificates that include policy qualifiers in a certificate policies extension that is marked critical are rejected. If the flag is false, certificates are not rejected on this basis. \u003cp\u003e When a \u003ccode\u003ePKIXParameters\u003c/code\u003e object is created, this flag is set to true. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications that want to use a more sophisticated policy must set this flag to false. \u003cp\u003e Note that the PKIX certification path validation algorithm specifies that any policy qualifier in a certificate policies extension that is marked critical must be processed and validated. Otherwise the certification path must be rejected. If the policyQualifiersRejected flag is set to false, it is up to the application to validate all policy qualifiers in this manner in order to be PKIX compliant.\n * @param qualifiersRejected the new value of the PolicyQualifiersRejectedflag\n * @see #getPolicyQualifiersRejected\n * @see PolicyQualifierInfo\n */\n","tf":{"freq":{"otherwis":1,"fals":3,"valid":3,"reject":8,"common":1,"simplest":1,"use":1,"object":1,"must":3,"applic":2,"info":1,"specifi":1,"algorithm":1,"sophist":1,"order":1,"extens":2,"path":2,"valu":1,"note":1,"want":1,"certif":6,"includ":1,"creat":1,"paramet":1,"true":2,"mark":2,"polici":13,"process":2,"rejectedflag":1,"flag":6,"compliant":1,"strategi":1,"manner":1,"basi":1,"qualifi":11,"reflect":1,"critic":2},"maxFreq":13,"totalTerms":89},"loc":3}