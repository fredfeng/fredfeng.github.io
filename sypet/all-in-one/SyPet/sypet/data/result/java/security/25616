{"id":25616,"className":"java.security.Signature","methodName":"getInstance","signature":"\u003cjava.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Returns a Signature object that implements the specified signature algorithm. \u003cp\u003e A new Signature object encapsulating the SignatureSpi implementation from the specified provider is returned.  The specified provider must be registered in the security provider list. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the name of the algorithm requested.See the Signature section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#Signature\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @param provider the name of the provider.\n * @return the new Signature object.\n * @exception NoSuchAlgorithmException if a SignatureSpiimplementation for the specified algorithm is not available from the specified provider.\n * @exception NoSuchProviderException if the specified provider is notregistered in the security provider list.\n * @exception IllegalArgumentException if the provider name is nullor empty.\n * @see Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"object":3,"signatur":8,"must":1,"nullor":1,"algorithm":7,"specifi":6,"technot":1,"document":1,"spi":1,"name":6,"request":1,"regist":2,"spiimplement":1,"href":1,"note":1,"cryptographi":1,"argument":1,"notregist":1,"except":6,"may":1,"standard":3,"avail":1,"list":3,"illeg":1,"provid":14,"section":1,"empti":1,"instanc":1,"guid":1,"inform":1,"secur":5,"architectur":1,"retriev":1,"encapsul":1,"java":1,"html":1,"method":1},"maxFreq":14,"totalTerms":92},"loc":17}