{"id":26097,"className":"java.security.cert.X509CertSelector","methodName":"setExtendedKeyUsage","signature":"\u003cjava.security.cert.X509CertSelector: void setExtendedKeyUsage(java.util.Set)\u003e","javadoc":"/** \n * Sets the extendedKeyUsage criterion. The \u003ccode\u003eX509Certificate\u003c/code\u003e must allow the specified key purposes in its extended key usage extension. If \u003ccode\u003ekeyPurposeSet\u003c/code\u003e is empty or \u003ccode\u003enull\u003c/code\u003e, no extendedKeyUsage check will be done. Note that an \u003ccode\u003eX509Certificate\u003c/code\u003e that has no extendedKeyUsage extension implicitly allows all key purposes. \u003cp\u003e Note that the \u003ccode\u003eSet\u003c/code\u003e is cloned to protect against subsequent modifications.\n * @param keyPurposeSet a \u003ccode\u003eSet\u003c/code\u003e of key purpose OIDs in stringformat (or \u003ccode\u003enull\u003c/code\u003e). Each OID is represented by a set of nonnegative integers separated by periods.\n * @throws IOException if the OID is invalid, such asthe first component being not 0, 1 or 2 or the second component being greater than 39.\n * @see #getExtendedKeyUsage\n */\n","tf":{"freq":{"stringformat":1,"greater":1,"second":1,"allow":2,"implicit":1,"must":1,"specifi":1,"invalid":1,"extens":2,"purpos":5,"subsequ":1,"key":11,"note":2,"asth":1,"clone":1,"except":1,"certif":2,"check":1,"repres":1,"done":1,"period":1,"empti":1,"criterion":1,"compon":2,"separ":1,"nonneg":1,"will":1,"usag":6,"first":1,"integ":1,"modif":1},"maxFreq":11,"totalTerms":55},"loc":13}