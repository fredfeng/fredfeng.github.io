{"id":25296,"className":"java.security.CodeSource","methodName":"implies","signature":"\u003cjava.security.CodeSource: boolean implies(java.security.CodeSource)\u003e","javadoc":"/** \n * Returns true if this CodeSource object \"implies\" the specified CodeSource. \u003cP\u003e More specifically, this method makes the following checks, in order. If any fail, it returns false. If they all succeed, it returns true.\u003cp\u003e \u003col\u003e \u003cli\u003e \u003ci\u003ecodesource\u003c/i\u003e must not be null. \u003cli\u003e If this object\u0027s certificates are not null, then all of this object\u0027s certificates must be present in \u003ci\u003ecodesource\u003c/i\u003e\u0027s certificates. \u003cli\u003e If this object\u0027s location (getLocation()) is not null, then the following checks are made against this object\u0027s location and \u003ci\u003ecodesource\u003c/i\u003e\u0027s:\u003cp\u003e \u003col\u003e \u003cli\u003e  \u003ci\u003ecodesource\u003c/i\u003e\u0027s location must not be null. \u003cli\u003e  If this object\u0027s location equals \u003ci\u003ecodesource\u003c/i\u003e\u0027s location, then return true. \u003cli\u003e  This object\u0027s protocol (getLocation().getProtocol()) must be equal to \u003ci\u003ecodesource\u003c/i\u003e\u0027s protocol. \u003cli\u003e  If this object\u0027s host (getLocation().getHost()) is not null, then the SocketPermission constructed with this object\u0027s host must imply the SocketPermission constructed with \u003ci\u003ecodesource\u003c/i\u003e\u0027s host. \u003cli\u003e  If this object\u0027s port (getLocation().getPort()) is not equal to -1 (that is, if a port is specified), it must equal \u003ci\u003ecodesource\u003c/i\u003e\u0027s port. \u003cli\u003e  If this object\u0027s file (getLocation().getFile()) doesn\u0027t equal \u003ci\u003ecodesource\u003c/i\u003e\u0027s file, then the following checks are made: If this object\u0027s file ends with \"/-\", then \u003ci\u003ecodesource\u003c/i\u003e\u0027s file must start with this object\u0027s file (exclusive the trailing \"-\"). If this object\u0027s file ends with a \"/*\", then \u003ci\u003ecodesource\u003c/i\u003e\u0027s file must start with this object\u0027s file and must not have any further \"/\" separators. If this object\u0027s file doesn\u0027t end with a \"/\", then \u003ci\u003ecodesource\u003c/i\u003e\u0027s file must match this object\u0027s file with a \u0027/\u0027 appended. \u003cli\u003e  If this object\u0027s reference (getLocation().getRef()) is not null, it must equal \u003ci\u003ecodesource\u003c/i\u003e\u0027s reference. \u003c/ol\u003e \u003c/ol\u003e \u003cp\u003e For example, the codesource objects with the following locations and null certificates all imply the codesource with the location \"http://java.sun.com/classes/foo.jar\" and null certificates: \u003cpre\u003e http: http://*.sun.com/classes/ http://java.sun.com/classes/- http://java.sun.com/classes/foo.jar \u003c/pre\u003e Note that if this CodeSource has a null location and a null certificate chain, then it implies every other CodeSource.\n * @param codesource CodeSource to compare against.\n * @return true if the specified codesource is implied by this codesource,false if not.\n */\n","tf":{"freq":{"fals":2,"com":4,"foo":2,"must":11,"specifi":3,"fail":1,"refer":2,"file":12,"jar":2,"trail":1,"impli":6,"permiss":2,"socket":2,"everi":1,"follow":4,"append":1,"host":4,"succeed":1,"present":1,"start":2,"separ":1,"http":5,"sourc":5,"match":1,"compar":1,"make":1,"port":4,"codesourc":18,"made":2,"object":19,"sun":4,"order":1,"exclus":1,"end":3,"note":1,"protocol":3,"locat":14,"certif":6,"check":3,"true":4,"equal":6,"ref":1,"specif":1,"chain":1,"pre":2,"exampl":1,"method":1,"java":3,"construct":2},"maxFreq":19,"totalTerms":179},"loc":6}