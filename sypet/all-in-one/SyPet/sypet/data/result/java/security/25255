{"id":25255,"className":"java.security.KeyStore","methodName":"setEntry","signature":"\u003cjava.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)\u003e","javadoc":"/** \n * Saves a keystore \u003ccode\u003eEntry\u003c/code\u003e under the specified alias. The protection parameter is used to protect the \u003ccode\u003eEntry\u003c/code\u003e. \u003cp\u003e If an entry already exists for the specified alias, it is overridden.\n * @param alias save the keystore \u003ccode\u003eEntry\u003c/code\u003e under this alias\n * @param entry the \u003ccode\u003eEntry\u003c/code\u003e to save\n * @param protParam the \u003ccode\u003eProtectionParameter\u003c/code\u003eused to protect the \u003ccode\u003eEntry\u003c/code\u003e, which may be \u003ccode\u003enull\u003c/code\u003e\n * @exception NullPointerException if\u003ccode\u003ealias\u003c/code\u003e or \u003ccode\u003eentry\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @exception KeyStoreException if the keystore has not been initialized(loaded), or if this operation fails for some other reason\n * @see #getEntry(String,KeyStore.ProtectionParameter)\n * @since 1.5\n */\n","tf":{"freq":{"except":4,"may":1,"store":2,"save":3,"reason":1,"overridden":1,"entri":10,"paramet":3,"use":2,"prot":1,"specifi":2,"alia":5,"fail":1,"oper":1,"string":1,"pointer":1,"keystor":3,"load":1,"alreadi":1,"initi":1,"exist":1,"key":2},"maxFreq":10,"totalTerms":48},"loc":9}