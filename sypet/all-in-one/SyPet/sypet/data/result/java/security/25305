{"id":25305,"className":"java.security.KeyPairGenerator","methodName":"getInstance","signature":"\u003cjava.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. \u003cp\u003e A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param algorithm the standard string name of the algorithm.See the KeyPairGenerator section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @param provider the provider.\n * @return the new KeyPairGenerator object.\n * @exception NoSuchAlgorithmException if a KeyPairGeneratorSpiimplementation for the specified algorithm is not available from the specified Provider object.\n * @exception IllegalArgumentException if the specified provider is null.\n * @see Provider\n * @since 1.4\n */\n","tf":{"freq":{"pair":8,"root":1,"object":6,"algorithm":7,"specifi":6,"technot":1,"document":1,"spi":1,"name":4,"regist":1,"spiimplement":1,"href":1,"note":1,"key":8,"cryptographi":1,"argument":1,"except":4,"standard":4,"avail":1,"list":1,"illeg":1,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":1,"architectur":1,"generat":8,"string":1,"encapsul":1,"html":1,"java":1},"maxFreq":8,"totalTerms":86},"loc":5}