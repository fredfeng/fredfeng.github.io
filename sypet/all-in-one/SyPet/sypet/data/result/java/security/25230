{"id":25230,"className":"java.security.KeyStore","methodName":"getInstance","signature":"\u003cjava.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Returns a keystore object of the specified type. \u003cp\u003e A new KeyStore object encapsulating the KeyStoreSpi implementation from the specified provider is returned.  The specified provider must be registered in the security provider list. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param type the type of keystore.See the KeyStore section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard keystore types.\n * @param provider the name of the provider.\n * @return a keystore object of the specified type.\n * @exception KeyStoreException if a KeyStoreSpiimplementation for the specified type is not available from the specified provider.\n * @exception NoSuchProviderException if the specified provider is notregistered in the security provider list.\n * @exception IllegalArgumentException if the provider name is nullor empty.\n * @see Provider\n */\n","tf":{"freq":{"via":1,"store":6,"root":1,"link":1,"object":3,"type":6,"must":1,"nullor":1,"algorithm":1,"specifi":7,"technot":1,"document":1,"name":4,"spi":1,"regist":2,"spiimplement":1,"href":1,"key":6,"note":1,"cryptographi":1,"argument":1,"notregist":1,"except":6,"may":1,"standard":3,"avail":1,"list":3,"illeg":1,"provid":14,"section":1,"empti":1,"instanc":1,"guid":1,"inform":1,"secur":5,"architectur":1,"retriev":1,"encapsul":1,"keystor":4,"java":1,"html":1,"method":1},"maxFreq":14,"totalTerms":98},"loc":10}