{"id":25981,"className":"java.security.cert.CertPathBuilder","methodName":"getInstance","signature":"\u003cjava.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eCertPathBuilder\u003c/code\u003e object that implements the specified algorithm. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertPathBuilder object encapsulating the CertPathBuilderSpi implementation from the first Provider that supports the specified algorithm is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the name of the requested \u003ccode\u003eCertPathBuilder\u003c/code\u003ealgorithm.  See the CertPathBuilder section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#CertPathBuilder\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @return a \u003ccode\u003eCertPathBuilder\u003c/code\u003e object that implements thespecified algorithm.\n * @throws NoSuchAlgorithmException if no Provider supports aCertPathBuilderSpi implementation for the specified algorithm.\n * @see java.security.Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"object":3,"technot":1,"algorithm":9,"specifi":3,"document":1,"cert":8,"request":1,"name":4,"spi":2,"path":8,"thespecifi":1,"regist":2,"href":1,"note":1,"cryptographi":1,"travers":1,"except":1,"may":1,"support":2,"standard":3,"builder":8,"list":2,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":5,"architectur":1,"start":1,"retriev":1,"encapsul":1,"java":2,"html":1,"method":2,"prefer":1,"first":1},"maxFreq":9,"totalTerms":95},"loc":6}