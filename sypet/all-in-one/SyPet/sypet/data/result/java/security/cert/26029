{"id":26029,"className":"java.security.cert.CertificateRevokedException","methodName":"CertificateRevokedException","signature":"\u003cjava.security.cert.CertificateRevokedException: void CertificateRevokedException(java.util.Date,java.security.cert.CRLReason,javax.security.auth.x500.X500Principal,java.util.Map)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eCertificateRevokedException\u003c/code\u003e with the specified revocation date, reason code, authority name, and map of extensions.\n * @param revocationDate the date on which the certificate was revoked. Thedate is copied to protect against subsequent modification.\n * @param reason the revocation reason\n * @param extensions a map of X.509 Extensions. Each key is an OID Stringthat maps to the corresponding Extension. The map is copied to prevent subsequent modification.\n * @param authority the \u003ccode\u003eX500Principal\u003c/code\u003e that represents the nameof the authority that signed the certificate\u0027s revocation status information\n * @throws NullPointerException if \u003ccode\u003erevocationDate\u003c/code\u003e,\u003ccode\u003ereason\u003c/code\u003e, \u003ccode\u003eauthority\u003c/code\u003e, or \u003ccode\u003eextensions\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"revoc":5,"reason":4,"correspond":1,"date":4,"revok":3,"copi":2,"specifi":1,"author":4,"extens":5,"name":1,"map":4,"subsequ":2,"key":1,"thedat":1,"except":3,"certif":4,"status":1,"repres":1,"prevent":1,"sign":1,"inform":1,"stringthat":1,"nameof":1,"pointer":1,"construct":1,"modif":2,"princip":1},"maxFreq":5,"totalTerms":57},"loc":10}