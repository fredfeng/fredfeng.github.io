{"id":12677,"className":"java.beans.Introspector","methodName":"getBeanInfo","signature":"\u003cjava.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,java.lang.Class,int)\u003e","javadoc":"/** \n * Introspect on a Java Bean and learn about all its properties, exposed methods and events, below a given  {@code stopClass} pointsubject to some control  {@code flags}. \u003cdl\u003e \u003cdt\u003eUSE_ALL_BEANINFO\u003c/dt\u003e \u003cdd\u003eAny BeanInfo that can be discovered will be used.\u003c/dd\u003e \u003cdt\u003eIGNORE_IMMEDIATE_BEANINFO\u003c/dt\u003e \u003cdd\u003eAny BeanInfo associated with the specified  {@code beanClass} will be ignored.\u003c/dd\u003e\u003cdt\u003eIGNORE_ALL_BEANINFO\u003c/dt\u003e \u003cdd\u003eAny BeanInfo associated with the specified  {@code beanClass}or any of its parent classes will be ignored.\u003c/dd\u003e \u003c/dl\u003e Any methods/properties/events in the  {@code stopClass}or in its parent classes will be ignored in the analysis. \u003cp\u003e If the BeanInfo class for a Java Bean has been previously introspected based on the same arguments then the BeanInfo class is retrieved from the BeanInfo cache.\n * @param beanClass  the bean class to be analyzed\n * @param stopClass  the parent class at which to stop the analysis\n * @param flags      flags to control the introspection\n * @return a BeanInfo object describing the target bean\n * @exception IntrospectionException if an exception occurs during introspection\n * @since 1.7\n */\n","tf":{"freq":{"stop":4,"introspect":5,"use":1,"object":1,"info":8,"specifi":2,"given":1,"associ":2,"event":2,"expos":1,"analysi":2,"argument":1,"control":2,"except":3,"ignor":3,"bean":15,"previous":1,"describ":1,"learn":1,"parent":3,"analyz":1,"cach":1,"discov":1,"flag":3,"retriev":1,"pointsubject":1,"target":1,"will":4,"base":1,"method":2,"java":2,"properti":2,"occur":1},"maxFreq":15,"totalTerms":80},"loc":13}