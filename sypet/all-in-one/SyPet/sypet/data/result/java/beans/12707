{"id":12707,"className":"java.beans.Encoder","methodName":"writeStatement","signature":"\u003cjava.beans.Encoder: void writeStatement(java.beans.Statement)\u003e","javadoc":"/** \n * Writes statement \u003ccode\u003eoldStm\u003c/code\u003e to the stream. The \u003ccode\u003eoldStm\u003c/code\u003e should be written entirely in terms of the callers environment, i.e. the target and all arguments should be part of the object graph being written. These expressions represent a series of \"what happened\" expressions which tell the output stream how to produce an object graph like the original. \u003cp\u003e The implementation of this method will produce a second expression to represent the same expression in an environment that will exist when the stream is read. This is achieved simply by calling \u003ccode\u003ewriteObject\u003c/code\u003e on the target and all the arguments and building a new expression with the results.\n * @param oldStm The expression to be written to the stream.\n */\n","tf":{"freq":{"caller":1,"result":1,"call":1,"simpli":1,"stream":4,"old":3,"second":1,"seri":1,"object":3,"build":1,"express":6,"graph":2,"written":3,"write":3,"read":1,"tell":1,"happen":1,"exist":1,"argument":2,"repres":2,"environ":2,"stm":3,"origin":1,"produc":2,"like":1,"achiev":1,"statement":2,"term":1,"will":2,"target":2,"method":1,"part":1,"output":1,"entir":1},"maxFreq":6,"totalTerms":60},"loc":12}