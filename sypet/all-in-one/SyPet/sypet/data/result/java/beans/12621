{"id":12621,"className":"java.beans.EventHandler","methodName":"create","signature":"\u003cjava.beans.EventHandler: T create(java.lang.Class,java.lang.Object,java.lang.String,java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Creates an implementation of \u003ccode\u003elistenerInterface\u003c/code\u003e in which the method named \u003ccode\u003elistenerMethodName\u003c/code\u003e passes the value of the event expression, \u003ccode\u003eeventPropertyName\u003c/code\u003e, to the final method in the statement, \u003ccode\u003eaction\u003c/code\u003e, which is applied to the \u003ccode\u003etarget\u003c/code\u003e. All of the other listener methods do nothing. \u003cp\u003e The \u003ccode\u003eeventPropertyName\u003c/code\u003e string is used to extract a value from the incoming event object that is passed to the target method.  The common case is the target method takes no arguments, in which case a value of null should be used for the \u003ccode\u003eeventPropertyName\u003c/code\u003e.  Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the \u003ccode\u003eeventPropertyName\u003c/code\u003e string is a sequence of methods or properties where each method or property is applied to the value returned by the preceeding method starting from the incoming event object. The syntax is: \u003ccode\u003epropertyName{.propertyName}*\u003c/code\u003e where \u003ccode\u003epropertyName\u003c/code\u003e matches a method or property.  For example, to extract the \u003ccode\u003epoint\u003c/code\u003e property from a \u003ccode\u003eMouseEvent\u003c/code\u003e, you could use either \u003ccode\u003e\"point\"\u003c/code\u003e or \u003ccode\u003e\"getPoint\"\u003c/code\u003e as the \u003ccode\u003eeventPropertyName\u003c/code\u003e.  To extract the \"text\" property from a \u003ccode\u003eMouseEvent\u003c/code\u003e with a \u003ccode\u003eJLabel\u003c/code\u003e source use any of the following as \u003ccode\u003eeventPropertyName\u003c/code\u003e: \u003ccode\u003e\"source.text\"\u003c/code\u003e, \u003ccode\u003e\"getSource.text\"\u003c/code\u003e \u003ccode\u003e\"getSource.getText\"\u003c/code\u003e or \u003ccode\u003e\"source.getText\"\u003c/code\u003e.  If a method can not be found, or an exception is generated as part of invoking a method a \u003ccode\u003eRuntimeException\u003c/code\u003e will be thrown at dispatch time.  For example, if the incoming event object is null, and \u003ccode\u003eeventPropertyName\u003c/code\u003e is non-null and not empty, a \u003ccode\u003eRuntimeException\u003c/code\u003e will be thrown. \u003cp\u003e The \u003ccode\u003eaction\u003c/code\u003e argument is of the same format as the \u003ccode\u003eeventPropertyName\u003c/code\u003e argument where the last property name identifies either a method name or writable property. \u003cp\u003e If the \u003ccode\u003elistenerMethodName\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e \u003cem\u003eall\u003c/em\u003e methods in the interface trigger the \u003ccode\u003eaction\u003c/code\u003e to be executed on the \u003ccode\u003etarget\u003c/code\u003e. \u003cp\u003e For example, to create a \u003ccode\u003eMouseListener\u003c/code\u003e that sets the target object\u0027s \u003ccode\u003eorigin\u003c/code\u003e property to the incoming \u003ccode\u003eMouseEvent\u003c/code\u003e\u0027s location (that\u0027s the value of \u003ccode\u003emouseEvent.getPoint()\u003c/code\u003e) each time a mouse button is pressed, one would write: \u003cblockquote\u003e \u003cpre\u003e EventHandler.create(MouseListener.class, target, \"origin\", \"point\", \"mousePressed\"); \u003c/pre\u003e \u003c/blockquote\u003e This is comparable to writing a \u003ccode\u003eMouseListener\u003c/code\u003e in which all of the methods except \u003ccode\u003emousePressed\u003c/code\u003e are no-ops: \u003cblockquote\u003e \u003cpre\u003e //Equivalent code using an inner class instead of EventHandler. new MouseAdapter() { public void mousePressed(MouseEvent e) { target.setOrigin(e.getPoint()); } }; \u003c/pre\u003e \u003c/blockquote\u003e\n * @param listenerInterface the listener interface to create a proxy for\n * @param target the object that will perform the action\n * @param action the name of a (possibly qualified) property or method onthe target\n * @param eventPropertyName the (possibly qualified) name of a readable property of the incoming event\n * @param listenerMethodName the name of the method in the listener interface that should trigger the action\n * @return an object that implements \u003ccode\u003elistenerInterface\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003elistenerInterface\u003c/code\u003e is null\n * @throws NullPointerException if \u003ccode\u003etarget\u003c/code\u003e is null\n * @throws NullPointerException if \u003ccode\u003eaction\u003c/code\u003e is null\n * @see EventHandler\n */\n","tf":{"freq":{"last":1,"inner":1,"possibl":2,"perform":1,"mous":13,"time":2,"altern":1,"equival":1,"button":1,"blockquot":4,"event":23,"sequenc":1,"action":7,"follow":1,"argument":3,"text":5,"except":7,"thrown":2,"op":1,"creat":5,"invok":1,"runtim":2,"onth":1,"writabl":1,"format":2,"extract":3,"non":1,"statement":1,"appli":2,"syntax":1,"start":1,"will":3,"pointer":3,"sourc":5,"properti":22,"match":1,"execut":1,"compar":1,"incom":6,"press":4,"common":1,"readabl":1,"one":1,"use":6,"jlabel":1,"identifi":1,"adapt":1,"object":7,"express":1,"name":21,"write":2,"noth":1,"dispatch":1,"valu":5,"listen":13,"want":1,"preceed":1,"direct":1,"trigger":2,"locat":1,"proxi":1,"origin":3,"pass":3,"empti":2,"point":6,"either":2,"pre":4,"take":1,"string":3,"generat":1,"instead":1,"target":11,"exampl":3,"method":20,"part":1,"qualifi":2,"handler":3,"found":1},"maxFreq":23,"totalTerms":281},"loc":13}