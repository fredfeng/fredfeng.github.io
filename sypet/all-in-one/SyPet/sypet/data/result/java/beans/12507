{"id":12507,"className":"java.beans.PersistenceDelegate","methodName":"writeObject","signature":"\u003cjava.beans.PersistenceDelegate: void writeObject(java.lang.Object,java.beans.Encoder)\u003e","javadoc":"/** \n * The \u003ccode\u003ewriteObject\u003c/code\u003e is a single entry point to the persistence and is used by a \u003ccode\u003eEncoder\u003c/code\u003e in the traditional mode of delegation. Although this method is not final, it should not need to be subclassed under normal circumstances. \u003cp\u003e This implementation first checks to see if the stream has already encountered this object. Next the \u003ccode\u003emutatesTo\u003c/code\u003e method is called to see if that candidate returned from the stream can be mutated into an accurate copy of \u003ccode\u003eoldInstance\u003c/code\u003e. If it can, the \u003ccode\u003einitialize\u003c/code\u003e method is called to perform the initialization. If not, the candidate is removed from the stream, and the \u003ccode\u003einstantiate\u003c/code\u003e method is called to create a new candidate for this object.\n * @param oldInstance The instance that will be created by this expression.\n * @param out The stream to which this expression will be written.\n * @throws NullPointerException if {@code out} is {@code null}\n */\n","tf":{"freq":{"need":1,"call":3,"old":2,"stream":4,"singl":1,"instanti":1,"normal":1,"next":1,"use":1,"perform":1,"persist":1,"object":4,"express":2,"copi":1,"mode":1,"although":1,"deleg":1,"written":1,"accur":1,"write":2,"initi":2,"except":1,"check":1,"creat":2,"entri":1,"remov":1,"candid":3,"circumst":1,"mutat":2,"tradit":1,"instanc":3,"point":1,"encod":1,"encount":1,"will":2,"subclass":1,"pointer":1,"method":4,"alreadi":1,"first":1},"maxFreq":4,"totalTerms":62},"loc":10}