{"id":12675,"className":"java.beans.Introspector","methodName":"getBeanInfo","signature":"\u003cjava.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,int)\u003e","javadoc":"/** \n * Introspect on a Java bean and learn about all its properties, exposed methods, and events, subject to some control flags. \u003cp\u003e If the BeanInfo class for a Java Bean has been previously Introspected based on the same arguments then the BeanInfo class is retrieved from the BeanInfo cache.\n * @param beanClass  The bean class to be analyzed.\n * @param flags  Flags to control the introspection.If flags \u003d\u003d USE_ALL_BEANINFO then we use all of the BeanInfo classes we can discover. If flags \u003d\u003d IGNORE_IMMEDIATE_BEANINFO then we ignore any BeanInfo associated with the specified beanClass. If flags \u003d\u003d IGNORE_ALL_BEANINFO then we ignore all BeanInfo associated with the specified beanClass or any of its parent classes.\n * @return  A BeanInfo object describing the target bean.\n * @exception IntrospectionException if an exception occurs duringintrospection.\n */\n","tf":{"freq":{"introspect":4,"subject":1,"use":1,"object":1,"info":8,"specifi":2,"associ":2,"event":1,"expos":1,"duringintrospect":1,"argument":1,"control":2,"except":3,"ignor":2,"bean":15,"previous":1,"describ":1,"learn":1,"parent":1,"cach":1,"analyz":1,"discov":1,"flag":6,"retriev":1,"target":1,"base":1,"method":1,"java":2,"properti":1,"occur":1},"maxFreq":15,"totalTerms":66},"loc":3}