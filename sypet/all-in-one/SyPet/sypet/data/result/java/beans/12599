{"id":12599,"className":"java.beans.VetoableChangeSupport","methodName":"getVetoableChangeListeners","signature":"\u003cjava.beans.VetoableChangeSupport: java.beans.VetoableChangeListener[] getVetoableChangeListeners()\u003e","javadoc":"/** \n * Returns an array of all the listeners that were added to the VetoableChangeSupport object with addVetoableChangeListener(). \u003cp\u003e If some listeners have been added with a named property, then the returned array will be a mixture of VetoableChangeListeners and \u003ccode\u003eVetoableChangeListenerProxy\u003c/code\u003es. If the calling method is interested in distinguishing the listeners then it must test each element to see if it\u0027s a \u003ccode\u003eVetoableChangeListenerProxy\u003c/code\u003e, perform the cast, and examine the parameter. \u003cpre\u003e VetoableChangeListener[] listeners \u003d bean.getVetoableChangeListeners(); for (int i \u003d 0; i \u003c listeners.length; i++) { if (listeners[i] instanceof VetoableChangeListenerProxy) { VetoableChangeListenerProxy proxy \u003d (VetoableChangeListenerProxy)listeners[i]; if (proxy.getPropertyName().equals(\"foo\")) { // proxy is a VetoableChangeListener which was associated // with the property named \"foo\" } } } \u003c/pre\u003e\n * @see VetoableChangeListenerProxy\n * @return all of the \u003ccode\u003eVetoableChangeListeners\u003c/code\u003e added or anempty array if no listeners have been added\n * @since 1.4\n */\n","tf":{"freq":{"call":1,"vetoabl":14,"anempti":1,"test":1,"foo":2,"perform":1,"object":1,"add":1,"must":1,"mixtur":1,"associ":1,"interest":1,"name":3,"length":1,"listen":21,"examin":1,"element":1,"support":1,"bean":1,"proxi":9,"paramet":1,"equal":1,"cast":1,"pre":2,"will":1,"ad":4,"distinguish":1,"method":1,"properti":3,"chang":14,"array":3},"maxFreq":21,"totalTerms":96},"loc":3}