{"id":12605,"className":"java.beans.VetoableChangeSupport","methodName":"fireVetoableChange","signature":"\u003cjava.beans.VetoableChangeSupport: void fireVetoableChange(java.lang.String,boolean,boolean)\u003e","javadoc":"/** \n * Reports a boolean constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name. \u003cp\u003e Any listener can throw a  {@code PropertyVetoException} to veto the update.If one of the listeners vetoes the update, this method passes a new \"undo\"  {@code PropertyChangeEvent} that reverts to the old valueto all listeners that already confirmed this update and throws the  {@code PropertyVetoException} again.\u003cp\u003e No event is fired if old and new values are equal. \u003cp\u003e This is merely a convenience wrapper around the more general {@link #fireVetoableChange(String,Object,Object)} method.\n * @param propertyName  the programmatic name of the property that is about to change\n * @param oldValue      the old value of the property\n * @param newValue      the new value of the property\n * @throws PropertyVetoException if one of listeners vetoes the property update\n */\n","tf":{"freq":{"old":4,"constrain":1,"programmat":1,"vetoabl":2,"undo":1,"link":1,"one":2,"object":2,"specifi":1,"wrapper":1,"revert":1,"event":2,"name":3,"report":1,"regist":1,"valu":5,"listen":5,"conveni":1,"valueto":1,"except":3,"veto":6,"track":1,"equal":1,"general":1,"fire":3,"around":1,"pass":1,"updat":6,"string":1,"method":2,"alreadi":1,"mere":1,"properti":12,"chang":4,"confirm":1},"maxFreq":12,"totalTerms":81},"loc":5}