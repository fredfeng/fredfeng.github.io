{"id":12703,"className":"java.beans.Encoder","methodName":"getPersistenceDelegate","signature":"\u003cjava.beans.Encoder: java.beans.PersistenceDelegate getPersistenceDelegate(java.lang.Class)\u003e","javadoc":"/** \n * Returns the persistence delegate for the given type. The persistence delegate is calculated by applying the following rules in order: \u003col\u003e \u003cli\u003e If a persistence delegate is associated with the given type by using the  {@link #setPersistenceDelegate} methodit is returned. \u003cli\u003e A persistence delegate is then looked up by the name composed of the the fully qualified name of the given type and the \"PersistenceDelegate\" postfix. For example, a persistence delegate for the  {@code Bean} classshould be named  {@code BeanPersistenceDelegate}and located in the same package. \u003cpre\u003e public class Bean { ... } public class BeanPersistenceDelegate { ... }\u003c/pre\u003e The instance of the  {@code BeanPersistenceDelegate} classis returned for the  {@code Bean} class.\u003cli\u003e If the type is  {@code null}, a shared internal persistence delegate is returned that encodes  {@code null} value.\u003cli\u003e If the type is a  {@code enum} declaration,a shared internal persistence delegate is returned that encodes constants of this enumeration by their names. \u003cli\u003e If the type is a primitive type or the corresponding wrapper, a shared internal persistence delegate is returned that encodes values of the given type. \u003cli\u003e If the type is an array, a shared internal persistence delegate is returned that encodes an array of the appropriate type and length, and each of its elements as if they are properties. \u003cli\u003e If the type is a proxy, a shared internal persistence delegate is returned that encodes a proxy instance by using the  {@link java.lang.reflect.Proxy#newProxyInstance} method.\u003cli\u003e If the  {@link BeanInfo} for this type has a {@link BeanDescriptor}which defined a \"persistenceDelegate\" attribute, the value of this named attribute is returned. \u003cli\u003e In all other cases the default persistence delegate is returned. The default persistence delegate assumes the type is a \u003cem\u003eJavaBean\u003c/em\u003e, implying that it has a default constructor and that its state may be characterized by the matching pairs of \"setter\" and \"getter\" methods returned by the  {@link Introspector} class.The default constructor is the constructor with the greatest number of parameters that has the  {@link ConstructorProperties} annotation.If none of the constructors has the  {@code ConstructorProperties} annotation,then the nullary constructor (constructor with no parameters) will be used. For example, in the following code fragment, the nullary constructor for the  {@code Foo} class will be used,while the two-parameter constructor for the  {@code Bar} class will be used.\u003cpre\u003e public class Foo { public Foo() { ... } public Foo(int x) { ... } } public class Bar { public Bar() { ... } \u0026#64;ConstructorProperties({\"x\"}) public Bar(int x) { ... } \u0026#64;ConstructorProperties({\"x\", \"y\"}) public Bar(int x, int y) { ... } }\u003c/pre\u003e \u003c/ol\u003e\n * @param type  the class of the objects\n * @return the persistence delegate for the given type\n * @see #setPersistenceDelegate\n * @see java.beans.Introspector#getBeanInfo\n * @see java.beans.BeanInfo#getBeanDescriptor\n */\n","tf":{"freq":{"getter":1,"foo":4,"persist":21,"type":15,"info":3,"nullari":2,"introspector":2,"given":5,"wrapper":1,"impli":1,"none":1,"follow":2,"element":1,"calcul":1,"number":1,"instanc":3,"appli":1,"encod":5,"will":3,"match":1,"properti":5,"bar":5,"array":2,"primit":1,"defin":1,"pair":1,"descriptor":2,"correspond":1,"link":6,"state":1,"use":5,"object":1,"classshould":1,"lang":1,"character":1,"share":5,"attribut":2,"deleg":21,"order":1,"declar":1,"associ":1,"annot":2,"methodit":1,"name":5,"rule":1,"length":1,"setter":1,"valu":3,"fragment":1,"constructor":12,"look":1,"may":1,"locat":1,"assum":1,"constant":1,"bean":14,"proxi":4,"paramet":3,"compos":1,"greatest":1,"fulli":1,"two":1,"postfix":1,"pre":4,"appropri":1,"exampl":2,"intern":5,"classi":1,"java":4,"method":2,"qualifi":1,"reflect":1},"maxFreq":21,"totalTerms":218},"loc":4}