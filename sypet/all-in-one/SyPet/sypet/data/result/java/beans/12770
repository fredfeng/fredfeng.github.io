{"id":12770,"className":"java.beans.Beans","methodName":"instantiate","signature":"\u003cjava.beans.Beans: java.lang.Object instantiate(java.lang.ClassLoader,java.lang.String,java.beans.beancontext.BeanContext,java.beans.AppletInitializer)\u003e","javadoc":"/** \n * Instantiate a bean. \u003cp\u003e The bean is created based on a name relative to a class-loader. This name should be a dot-separated name such as \"a.b.c\". \u003cp\u003e In Beans 1.0 the given name can indicate either a serialized object or a class.  Other mechanisms may be added in the future.  In beans 1.0 we first try to treat the beanName as a serialized object name then as a class name. \u003cp\u003e When using the beanName as a serialized object name we convert the given beanName to a resource pathname and add a trailing \".ser\" suffix. We then try to load a serialized object from that resource. \u003cp\u003e For example, given a beanName of \"x.y\", Beans.instantiate would first try to read a serialized object from the resource \"x/y.ser\" and if that failed it would try to load the class \"x.y\" and create an instance of that class. \u003cp\u003e If the bean is a subtype of java.applet.Applet, then it is given some special initialization.  First, it is supplied with a default AppletStub and AppletContext.  Second, if it was instantiated from a classname the applet\u0027s \"init\" method is called.  (If the bean was deserialized this step is skipped.) \u003cp\u003e Note that for beans which are applets, it is the caller\u0027s responsiblity to call \"start\" on the applet.  For correct behaviour, this should be done after the applet has been added into a visible AWT container. \u003cp\u003e Note that applets created via beans.instantiate run in a slightly different environment than applets running inside browsers.  In particular, bean applets have no access to \"parameters\", so they may wish to provide property get/set methods to set parameter values.  We advise bean-applet developers to test their bean-applets against both the JDK appletviewer (for a reference browser environment) and the BDK BeanBox (for a reference bean container).\n * @param cls         the class-loader from which we should createthe bean.  If this is null, then the system class-loader is used.\n * @param beanName    the name of the bean within the class-loader.For example \"sun.beanbox.foobah\"\n * @param beanContext The BeanContext in which to nest the new bean\n * @param initializer The AppletInitializer for the new bean\n * @exception ClassNotFoundException if the class of a serializedobject could not be found.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"via":1,"second":1,"test":1,"wish":1,"instanti":5,"particular":1,"subtyp":1,"skip":1,"dot":1,"advis":1,"slight":1,"correct":1,"given":4,"fail":1,"refer":2,"trail":1,"relat":1,"createth":1,"beanbox":1,"except":4,"pathnam":1,"cls":1,"creat":3,"loader":4,"done":1,"environ":2,"init":1,"foobah":1,"provid":1,"instanc":1,"system":1,"start":1,"separ":1,"contain":2,"load":2,"classnam":1,"properti":1,"treat":1,"caller":1,"call":2,"ser":2,"serializedobject":1,"visibl":1,"behaviour":1,"appletview":1,"convert":1,"use":2,"object":5,"run":2,"add":1,"sun":1,"resourc":3,"indic":1,"name":13,"browser":2,"read":1,"applet":14,"valu":1,"develop":1,"initi":3,"note":2,"responsibl":1,"may":2,"futur":1,"error":1,"bean":25,"stub":1,"nest":1,"paramet":2,"suppli":1,"access":1,"suffix":1,"differ":1,"either":1,"mechan":1,"base":1,"exampl":2,"context":3,"ad":2,"box":1,"insid":1,"java":1,"special":1,"method":2,"within":1,"first":3,"serial":5,"deseri":1,"step":1,"occur":1,"found":2},"maxFreq":25,"totalTerms":187},"loc":193}