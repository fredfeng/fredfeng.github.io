{"id":25053,"className":"java.math.BigDecimal","methodName":"BigDecimal","signature":"\u003cjava.math.BigDecimal: void BigDecimal(java.lang.String)\u003e","javadoc":"/** \n * Translates the string representation of a  {@code BigDecimal}into a  {@code BigDecimal}.  The string representation consists of an optional sign,  {@code \u0027+\u0027} (\u003ctt\u003e \u0027\u0026#92;u002B\u0027\u003c/tt\u003e) or{@code \u0027-\u0027} (\u003ctt\u003e\u0027\u0026#92;u002D\u0027\u003c/tt\u003e), followed by a sequence ofzero or more decimal digits (\"the integer\"), optionally followed by a fraction, optionally followed by an exponent. \u003cp\u003eThe fraction consists of a decimal point followed by zero or more decimal digits.  The string must contain at least one digit in either the integer or the fraction.  The number formed by the sign, the integer and the fraction is referred to as the \u003ci\u003esignificand\u003c/i\u003e. \u003cp\u003eThe exponent consists of the character  {@code \u0027e\u0027}(\u003ctt\u003e\u0027\u0026#92;u0065\u0027\u003c/tt\u003e) or  {@code \u0027E\u0027} (\u003ctt\u003e\u0027\u0026#92;u0045\u0027\u003c/tt\u003e)followed by one or more decimal digits.  The value of the exponent must lie between - {@link Integer#MAX_VALUE} ({@link Integer#MIN_VALUE}+1) and  {@link Integer#MAX_VALUE}, inclusive. \u003cp\u003eMore formally, the strings this constructor accepts are described by the following grammar: \u003cblockquote\u003e \u003cdl\u003e \u003cdt\u003e\u003ci\u003eBigDecimalString:\u003c/i\u003e \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e Significand Exponent\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e \u003cp\u003e \u003cdt\u003e\u003ci\u003eSign:\u003c/i\u003e \u003cdd\u003e {@code +}\u003cdd\u003e {@code -}\u003cp\u003e \u003cdt\u003e\u003ci\u003eSignificand:\u003c/i\u003e \u003cdd\u003e\u003ci\u003eIntegerPart\u003c/i\u003e  {@code .} \u003ci\u003eFractionPart\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e\u003cdd\u003e {@code .} \u003ci\u003eFractionPart\u003c/i\u003e\u003cdd\u003e\u003ci\u003eIntegerPart\u003c/i\u003e \u003cp\u003e \u003cdt\u003e\u003ci\u003eIntegerPart:\u003c/i\u003e \u003cdd\u003e\u003ci\u003eDigits\u003c/i\u003e \u003cp\u003e \u003cdt\u003e\u003ci\u003eFractionPart:\u003c/i\u003e \u003cdd\u003e\u003ci\u003eDigits\u003c/i\u003e \u003cp\u003e \u003cdt\u003e\u003ci\u003eExponent:\u003c/i\u003e \u003cdd\u003e\u003ci\u003eExponentIndicator SignedInteger\u003c/i\u003e \u003cp\u003e \u003cdt\u003e\u003ci\u003eExponentIndicator:\u003c/i\u003e \u003cdd\u003e {@code e}\u003cdd\u003e {@code E}\u003cp\u003e \u003cdt\u003e\u003ci\u003eSignedInteger:\u003c/i\u003e \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e Digits\u003c/i\u003e \u003cp\u003e \u003cdt\u003e\u003ci\u003eDigits:\u003c/i\u003e \u003cdd\u003e\u003ci\u003eDigit\u003c/i\u003e \u003cdd\u003e\u003ci\u003eDigits Digit\u003c/i\u003e \u003cp\u003e \u003cdt\u003e\u003ci\u003eDigit:\u003c/i\u003e \u003cdd\u003eany character for which  {@link Character#isDigit}returns  {@code true}, including 0, 1, 2 ... \u003c/dl\u003e \u003c/blockquote\u003e \u003cp\u003eThe scale of the returned  {@code BigDecimal} will be thenumber of digits in the fraction, or zero if the string contains no decimal point, subject to adjustment for any exponent; if the string contains an exponent, the exponent is subtracted from the scale.  The value of the resulting scale must lie between  {@code Integer.MIN_VALUE} and{@code Integer.MAX_VALUE}, inclusive. \u003cp\u003eThe character-to-digit mapping is provided by  {@link java.lang.Character#digit} set to convert to radix 10.  TheString may not contain any extraneous characters (whitespace, for example). \u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003cbr\u003e The value of the returned  {@code BigDecimal} is equal to\u003ci\u003esignificand\u003c/i\u003e \u0026times; 10\u003csup\u003e\u0026nbsp;\u003ci\u003eexponent\u003c/i\u003e\u003c/sup\u003e. For each string on the left, the resulting representation [ {@code BigInteger},  {@code scale}] is shown on the right. \u003cpre\u003e \"0\"            [0,0] \"0.00\"         [0,2] \"123\"          [123,0] \"-123\"         [-123,0] \"1.23E3\"       [123,-1] \"1.23E+3\"      [123,-1] \"12.3E+7\"      [123,-6] \"12.0\"         [120,1] \"12.3\"         [123,1] \"0.00123\"      [123,5] \"-1.23E-12\"    [-123,14] \"1234.5E-4\"    [12345,5] \"0E+7\"         [0,-7] \"-0\"           [0,0] \u003c/pre\u003e \u003cp\u003eNote: For values other than  {@code float} and{@code double} NaN and \u0026plusmn;Infinity, this constructor iscompatible with the values returned by  {@link Float#toString}and  {@link Double#toString}.  This is generally the preferred way to convert a  {@code float} or {@code double} into aBigDecimal, as it doesn\u0027t suffer from the unpredictability of the  {@link #BigDecimal(double)} constructor.\n * @param val String representation of {@code BigDecimal}.\n * @throws NumberFormatException if {@code val} is not a validrepresentation of a  {@code BigDecimal}.\n */\n","tf":{"freq":{"infin":1,"least":1,"accept":1,"zero":2,"must":3,"extran":1,"time":1,"refer":1,"sequenc":1,"blockquot":2,"iscompat":1,"right":1,"option":3,"opt":4,"nbsp":1,"follow":6,"expon":11,"except":1,"ofzero":1,"form":1,"consist":3,"charact":6,"shown":1,"describ":1,"number":2,"validrepresent":1,"format":1,"provid":1,"sign":7,"digit":16,"formal":1,"contain":4,"will":1,"prefer":1,"big":11,"val":2,"result":2,"scale":4,"sub":8,"significand":4,"subject":1,"one":2,"link":8,"way":1,"convert":2,"sup":2,"decim":15,"lang":1,"inclus":2,"indic":2,"plusmn":1,"map":1,"adjust":1,"unpredict":1,"left":1,"valu":5,"note":1,"constructor":3,"may":1,"fraction":8,"includ":1,"suffer":1,"whitespac":1,"true":1,"equal":1,"translat":1,"general":1,"represent":4,"grammar":1,"subtract":1,"point":2,"either":1,"pre":2,"radix":1,"string":12,"exampl":2,"java":1,"part":6,"integ":14,"lie":2,"thenumb":1},"maxFreq":16,"totalTerms":237},"loc":3}