{"id":25050,"className":"java.math.BigDecimal","methodName":"BigDecimal","signature":"\u003cjava.math.BigDecimal: void BigDecimal(char[],int,int,java.math.MathContext)\u003e","javadoc":"/** \n * Translates a character array representation of a {@code BigDecimal} into a {@code BigDecimal}, accepting the same sequence of characters as the  {@link #BigDecimal(String)}constructor, while allowing a sub-array to be specified and with rounding according to the context settings. \u003cp\u003eNote that if the sequence of characters is already available within a character array, using this constructor is faster than converting the  {@code char} array to string and using the{@code BigDecimal(String)} constructor .\n * @param in {@code char} array that is the source of characters.\n * @param offset first character in the array to inspect.\n * @param len number of characters to consider..\n * @param mc the context to use.\n * @throws ArithmeticException if the result is inexact but therounding mode is  {@code UNNECESSARY}.\n * @throws NumberFormatException if {@code in} is not a validrepresentation of a  {@code BigDecimal} or the defined subarrayis not wholly within  {@code in}.\n * @since  1.5\n */\n","tf":{"freq":{"defin":1,"result":1,"sub":1,"allow":1,"accept":1,"link":1,"arithmet":1,"use":3,"convert":1,"round":1,"decim":6,"consid":1,"mode":1,"specifi":1,"inexact":1,"faster":1,"theround":1,"sequenc":2,"offset":1,"note":1,"constructor":3,"wholli":1,"except":2,"charact":7,"subarrayi":1,"number":2,"avail":1,"validrepresent":1,"format":1,"len":1,"accord":1,"translat":1,"represent":1,"string":3,"context":2,"sourc":1,"alreadi":1,"within":2,"big":6,"first":1,"inspect":1,"array":6},"maxFreq":7,"totalTerms":74},"loc":5}