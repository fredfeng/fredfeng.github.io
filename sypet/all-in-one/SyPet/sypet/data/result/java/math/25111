{"id":25111,"className":"java.math.BigDecimal","methodName":"toString","signature":"\u003cjava.math.BigDecimal: java.lang.String toString()\u003e","javadoc":"/** \n * Returns the string representation of this  {@code BigDecimal}, using scientific notation if an exponent is needed. \u003cp\u003eA standard canonical string form of the  {@code BigDecimal}is created as though by the following steps: first, the absolute value of the unscaled value of the  {@code BigDecimal}is converted to a string in base ten using the characters {@code \u00270\u0027} through {@code \u00279\u0027} with no leading zeros (exceptif its value is zero, in which case a single  {@code \u00270\u0027}character is used). \u003cp\u003eNext, an \u003ci\u003eadjusted exponent\u003c/i\u003e is calculated; this is the negated scale, plus the number of characters in the converted unscaled value, less one.  That is, {@code -scale+(ulength-1)}, where  {@code ulength} is thelength of the absolute value of the unscaled value in decimal digits (its \u003ci\u003eprecision\u003c/i\u003e). \u003cp\u003eIf the scale is greater than or equal to zero and the adjusted exponent is greater than or equal to  {@code -6}, the number will be converted to a character form without using exponential notation.  In this case, if the scale is zero then no decimal point is added and if the scale is positive a decimal point will be inserted with the scale specifying the number of characters to the right of the decimal point. {@code \u00270\u0027} characters are added to the left of the convertedunscaled value as necessary.  If no character precedes the decimal point after this insertion then a conventional {@code \u00270\u0027} character is prefixed.\u003cp\u003eOtherwise (that is, if the scale is negative, or the adjusted exponent is less than  {@code -6}), the number will be converted to a character form using exponential notation.  In this case, if the converted  {@code BigInteger} has more thanone digit a decimal point is inserted after the first digit. An exponent in character form is then suffixed to the converted unscaled value (perhaps with inserted decimal point); this comprises the letter  {@code \u0027E\u0027} followed immediately by theadjusted exponent converted to a character form.  The latter is in base ten, using the characters  {@code \u00270\u0027} through{@code \u00279\u0027} with no leading zeros, and is always prefixed by asign character  {@code \u0027-\u0027} (\u003ctt\u003e\u0027\u0026#92;u002D\u0027\u003c/tt\u003e) if theadjusted exponent is negative,  {@code \u0027+\u0027}(\u003ctt\u003e\u0027\u0026#92;u002B\u0027\u003c/tt\u003e) otherwise). \u003cp\u003eFinally, the entire string is prefixed by a minus sign character  {@code \u0027-\u0027} (\u003ctt\u003e\u0027\u0026#92;u002D\u0027\u003c/tt\u003e) if the unscaledvalue is less than zero.  No sign character is prefixed if the unscaled value is zero or positive. \u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e \u003cp\u003eFor each representation [\u003ci\u003eunscaled value\u003c/i\u003e, \u003ci\u003escale\u003c/i\u003e] on the left, the resulting string is shown on the right. \u003cpre\u003e [123,0]      \"123\" [-123,0]     \"-123\" [123,-1]     \"1.23E+3\" [123,-3]     \"1.23E+5\" [123,1]      \"12.3\" [123,5]      \"0.00123\" [123,10]     \"1.23E-8\" [-123,12]    \"-1.23E-10\" \u003c/pre\u003e \u003cb\u003eNotes:\u003c/b\u003e \u003col\u003e \u003cli\u003eThere is a one-to-one mapping between the distinguishable {@code BigDecimal} values and the result of this conversion.That is, every distinguishable  {@code BigDecimal} value(unscaled value and scale) has a unique string representation as a result of using  {@code toString}.  If that string representation is converted back to a  {@code BigDecimal} usingthe  {@link #BigDecimal(String)} constructor, then the originalvalue will be recovered. \u003cli\u003eThe string produced for a given number is always the same; it is not affected by locale.  This means that it can be used as a canonical string representation for exchanging decimal data, or as a key for a Hashtable, etc.  Locale-sensitive number formatting and parsing is handled by the  {@link java.text.NumberFormat} class and its subclasses.\u003cli\u003eThe  {@link #toEngineeringString} method may be used forpresenting numbers with exponents in engineering notation, and the {@link #setScale(int,RoundingMode) setScale} method may be used forrounding a  {@code BigDecimal} so it has a known number of digits afterthe decimal point. \u003cli\u003eThe digit-to-character mapping provided by {@code Character.forDigit} is used.\u003c/ol\u003e\n * @return string representation of this {@code BigDecimal}.\n * @see Character#forDigit\n * @see #BigDecimal(java.lang.String)\n */\n","tf":{"freq":{"need":1,"greater":2,"singl":1,"etc":1,"zero":7,"specifi":1,"recov":1,"given":1,"exponenti":2,"theadjust":2,"right":2,"plus":1,"form":5,"charact":18,"alway":2,"calcul":1,"shown":1,"number":9,"absolut":2,"provid":1,"without":1,"digit":7,"prefix":4,"will":4,"convertedunsc":1,"afterth":1,"big":11,"posit":2,"entir":1,"convent":1,"next":1,"link":4,"engin":2,"data":1,"use":11,"decim":19,"usingth":1,"mode":1,"latter":1,"adjust":3,"map":2,"left":2,"note":1,"may":2,"thelength":1,"hashtabl":1,"perhap":1,"back":1,"exchang":1,"represent":6,"point":7,"preced":1,"string":15,"base":2,"exampl":1,"method":2,"insert":4,"pars":1,"thanon":1,"ten":2,"lead":2,"round":1,"necessari":1,"though":1,"compris":1,"uniqu":1,"exceptif":1,"forround":1,"precis":1,"everi":1,"key":1,"follow":2,"expon":8,"text":1,"sensit":1,"minus":1,"creat":1,"letter":1,"scientif":1,"format":2,"unscal":7,"sign":2,"subclass":1,"distinguish":2,"negat":3,"known":1,"canon":2,"otherwis":2,"scale":11,"result":3,"one":3,"convers":1,"convert":8,"lang":1,"affect":1,"mean":1,"valu":13,"immedi":1,"less":3,"constructor":1,"asign":1,"ulength":2,"standard":1,"equal":2,"produc":1,"suffix":1,"handl":1,"notat":4,"forpres":1,"pre":2,"originalvalu":1,"ad":2,"unscaledvalu":1,"java":2,"local":2,"first":2,"integ":1,"step":1},"maxFreq":19,"totalTerms":317},"loc":6}