{"id":25055,"className":"java.math.BigDecimal","methodName":"BigDecimal","signature":"\u003cjava.math.BigDecimal: void BigDecimal(double)\u003e","javadoc":"/** \n * Translates a  {@code double} into a {@code BigDecimal} whichis the exact decimal representation of the  {@code double}\u0027s binary floating-point value.  The scale of the returned {@code BigDecimal} is the smallest value such that\u003ctt\u003e(10\u003csup\u003escale\u003c/sup\u003e \u0026times; val)\u003c/tt\u003e is an integer. \u003cp\u003e \u003cb\u003eNotes:\u003c/b\u003e \u003col\u003e \u003cli\u003e The results of this constructor can be somewhat unpredictable. One might assume that writing  {@code new BigDecimal(0.1)} inJava creates a  {@code BigDecimal} which is exactly equal to0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a {@code double} (or, for that matter, as a binary fraction ofany finite length).  Thus, the value that is being passed \u003ci\u003ein\u003c/i\u003e to the constructor is not exactly equal to 0.1, appearances notwithstanding. \u003cli\u003e The  {@code String} constructor, on the other hand, isperfectly predictable: writing  {@code new BigDecimal(\"0.1\")}creates a  {@code BigDecimal} which is \u003ci\u003eexactly\u003c/i\u003e equal to0.1, as one would expect.  Therefore, it is generally recommended that the  {@linkplain #BigDecimal(String) \u003ctt\u003eString\u003c/tt\u003e constructor} be used in preference to this one.\u003cli\u003e When a  {@code double} must be used as a source for a{@code BigDecimal}, note that this constructor provides an exact conversion; it does not give the same result as converting the  {@code double} to a {@code String} using the{@link Double#toString(double)} method and then using the{@link #BigDecimal(String)} constructor.  To get that result,use the  {@code static} {@link #valueOf(double)} method.\u003c/ol\u003e\n * @param val {@code double} value to be converted to{@code BigDecimal}.\n * @throws NumberFormatException if {@code val} is infinite or NaN.\n */\n","tf":{"freq":{"appear":1,"must":1,"expect":1,"infinit":1,"time":1,"whichi":1,"exact":6,"finit":1,"ofani":1,"isperfect":1,"except":1,"creat":2,"number":1,"format":1,"provid":1,"unscal":1,"sourc":1,"prefer":1,"big":11,"val":3,"might":1,"result":3,"scale":3,"linkplain":1,"binari":2,"give":1,"link":3,"one":3,"convers":1,"convert":2,"use":5,"therefor":1,"decim":12,"sup":2,"recommend":1,"hand":1,"write":2,"length":1,"unpredict":1,"valu":6,"note":2,"constructor":6,"fraction":1,"assum":1,"repres":1,"matter":1,"thus":1,"smallest":1,"equal":4,"translat":1,"general":1,"represent":1,"pass":1,"point":1,"predict":1,"string":6,"actual":1,"notwithstand":1,"method":2,"java":1,"somewhat":1,"integ":1},"maxFreq":12,"totalTerms":127},"loc":45}