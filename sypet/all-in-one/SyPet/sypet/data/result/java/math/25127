{"id":25127,"className":"java.math.BigInteger","methodName":"BigInteger","signature":"\u003cjava.math.BigInteger: void BigInteger(int,byte[])\u003e","javadoc":"/** \n * Translates the sign-magnitude representation of a BigInteger into a BigInteger.  The sign is represented as an integer signum value: -1 for negative, 0 for zero, or 1 for positive.  The magnitude is a byte array in \u003ci\u003ebig-endian\u003c/i\u003e byte-order: the most significant byte is in the zeroth element.  A zero-length magnitude array is permissible, and will result in a BigInteger value of 0, whether signum is -1, 0 or 1.\n * @param signum signum of the number (-1 for negative, 0 for zero, 1for positive).\n * @param magnitude big-endian binary representation of the magnitude ofthe number.\n * @throws NumberFormatException {@code signum} is not one of the threelegal values (-1, 0, and 1), or  {@code signum} is 0 and{@code magnitude} contains one or more non-zero bytes.\n */\n","tf":{"freq":{"result":1,"binari":1,"one":2,"zero":4,"whether":1,"order":1,"ofth":1,"length":1,"permiss":1,"valu":3,"element":1,"except":1,"threeleg":1,"repres":1,"signific":1,"magnitud":6,"number":3,"format":1,"translat":1,"non":1,"represent":2,"sign":2,"zeroth":1,"signum":6,"endian":2,"contain":1,"will":1,"negat":2,"big":6,"posit":2,"integ":5,"array":2},"maxFreq":6,"totalTerms":65},"loc":14}