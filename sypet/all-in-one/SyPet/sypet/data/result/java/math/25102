{"id":25102,"className":"java.math.BigDecimal","methodName":"movePointLeft","signature":"\u003cjava.math.BigDecimal: java.math.BigDecimal movePointLeft(int)\u003e","javadoc":"/** \n * Returns a  {@code BigDecimal} which is equivalent to this onewith the decimal point moved  {@code n} places to the left.  If{@code n} is non-negative, the call merely adds {@code n} tothe scale.  If  {@code n} is negative, the call is equivalentto  {@code movePointRight(-n)}.  The  {@code BigDecimal}returned by this call has value \u003ctt\u003e(this \u0026times; 10\u003csup\u003e-n\u003c/sup\u003e)\u003c/tt\u003e and scale  {@code max(this.scale()+n,0)}.\n * @param n number of places to move the decimal point to the left.\n * @return a {@code BigDecimal} which is equivalent to this one with thedecimal point moved  {@code n} places to the left.\n * @throws ArithmeticException if scale overflows.\n */\n","tf":{"freq":{"scale":4,"call":3,"except":1,"max":1,"one":1,"arithmet":1,"number":1,"thedecim":1,"sup":2,"toth":1,"add":1,"decim":5,"non":1,"point":5,"time":1,"equival":2,"overflow":1,"onewith":1,"valu":1,"left":4,"negat":2,"equivalentto":1,"mere":1,"big":3,"place":3,"right":1,"move":5},"maxFreq":5,"totalTerms":54},"loc":6}