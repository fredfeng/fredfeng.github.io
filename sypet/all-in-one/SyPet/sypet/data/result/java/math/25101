{"id":25101,"className":"java.math.BigDecimal","methodName":"setScale","signature":"\u003cjava.math.BigDecimal: java.math.BigDecimal setScale(int)\u003e","javadoc":"/** \n * Returns a  {@code BigDecimal} whose scale is the specifiedvalue, and whose value is numerically equal to this {@code BigDecimal}\u0027s.  Throws an  {@code ArithmeticException}if this is not possible. \u003cp\u003eThis call is typically used to increase the scale, in which case it is guaranteed that there exists a  {@code BigDecimal}of the specified scale and the correct value.  The call can also be used to reduce the scale if the caller knows that the {@code BigDecimal} has sufficiently many zeros at the end ofits fractional part (i.e., factors of ten in its integer value) to allow for the rescaling without changing its value. \u003cp\u003eThis method returns the same result as the two-argument versions of  {@code setScale}, but saves the caller the trouble of specifying a rounding mode in cases where it is irrelevant. \u003cp\u003eNote that since  {@code BigDecimal} objects are immutable,calls of this method do \u003ci\u003enot\u003c/i\u003e result in the original object being modified, contrary to the usual convention of having methods named \u003ctt\u003eset\u003ci\u003eX\u003c/i\u003e\u003c/tt\u003e mutate field \u003ci\u003e {@code X}\u003c/i\u003e.  Instead,  {@code setScale} returns anobject with the proper scale; the returned object may or may not be newly allocated.\n * @param newScale scale of the {@code BigDecimal} value to be returned.\n * @return a {@code BigDecimal} whose scale is the specified value, andwhose unscaled value is determined by multiplying or dividing this  {@code BigDecimal}\u0027s unscaled value by the appropriate power of ten to maintain its overall value.\n * @throws ArithmeticException if the specified scaling operation wouldrequire rounding.\n * @see #setScale(int,int)\n * @see #setScale(int,RoundingMode)\n */\n","tf":{"freq":{"ten":2,"save":1,"maintain":1,"arithmet":2,"possibl":1,"round":3,"zero":1,"specifi":4,"correct":1,"oper":1,"power":1,"proper":1,"argument":1,"mani":1,"except":2,"andwhos":1,"troubl":1,"whose":3,"numer":1,"ofit":1,"immut":1,"without":1,"unscal":2,"newli":1,"determin":1,"suffici":1,"big":8,"alloc":1,"caller":2,"increas":1,"scale":14,"call":3,"result":2,"convent":1,"allow":1,"typic":1,"use":2,"object":3,"decim":8,"version":1,"mode":2,"rescal":1,"contrari":1,"name":1,"multipli":1,"valu":9,"exist":1,"end":1,"note":1,"usual":1,"may":2,"fraction":1,"wouldrequir":1,"guarante":1,"origin":1,"divid":1,"anobject":1,"equal":1,"mutat":1,"factor":1,"know":1,"field":1,"two":1,"appropri":1,"instead":1,"modifi":1,"irrelev":1,"method":3,"reduc":1,"chang":1,"specifiedvalu":1,"part":1,"also":1,"integ":1},"maxFreq":14,"totalTerms":131},"loc":3}