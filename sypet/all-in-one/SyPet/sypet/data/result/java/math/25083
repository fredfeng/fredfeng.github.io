{"id":25083,"className":"java.math.BigDecimal","methodName":"remainder","signature":"\u003cjava.math.BigDecimal: java.math.BigDecimal remainder(java.math.BigDecimal,java.math.MathContext)\u003e","javadoc":"/** \n * Returns a  {@code BigDecimal} whose value is {@code (this %divisor)}, with rounding according to the context settings. The  {@code MathContext} settings affect the implicit divideused to compute the remainder.  The remainder computation itself is by definition exact.  Therefore, the remainder may contain more than  {@code mc.getPrecision()} digits.\u003cp\u003eThe remainder is given by {@code this.subtract(this.divideToIntegralValue(divisor,mc).multiply(divisor))}.  Note that this is not the modulo operation (the result can be negative).\n * @param divisor value by which this {@code BigDecimal} is to be divided.\n * @param mc the context to use.\n * @return {@code this % divisor}, rounded as necessary.\n * @throws ArithmeticException if {@code divisor\u003d\u003d0}\n * @throws ArithmeticException if the result is inexact but therounding mode is  {@code UNNECESSARY}, or  {@code mc.precision}{@literal \u003e} 0 and the result of {@code this.divideToIntgralValue(divisor)} wouldrequire a precision of more than  {@code mc.precision} digits.\n * @see #divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)\n * @since  1.5\n */\n","tf":{"freq":{"result":3,"integr":2,"arithmet":2,"implicit":1,"use":1,"round":2,"therefor":1,"decim":3,"necessari":1,"affect":1,"mode":1,"inexact":1,"divideus":1,"given":1,"theround":1,"oper":1,"exact":1,"precis":4,"multipli":1,"valu":5,"note":1,"liter":1,"except":2,"may":1,"wouldrequir":1,"whose":1,"divid":4,"accord":1,"divisor":7,"math":4,"digit":2,"subtract":1,"intgral":1,"remaind":5,"definit":1,"contain":1,"context":4,"modulo":1,"comput":2,"java":2,"negat":1,"big":3},"maxFreq":7,"totalTerms":81},"loc":4}