{"id":25106,"className":"java.math.BigDecimal","methodName":"compareTo","signature":"\u003cjava.math.BigDecimal: int compareTo(java.math.BigDecimal)\u003e","javadoc":"/** \n * Compares this  {@code BigDecimal} with the specified{@code BigDecimal}.  Two  {@code BigDecimal} objects that areequal in value but have a different scale (like 2.0 and 2.00) are considered equal by this method.  This method is provided in preference to individual methods for each of the six boolean comparison operators ( {@literal \u003c}, \u003d\u003d, {@literal \u003e},  {@literal \u003e\u003d}, !\u003d,  {@literal \u003c\u003d}).  The suggested idiom for performing these comparisons is: {@code (x.compareTo(y)} \u0026lt;\u003ci\u003eop\u003c/i\u003e\u0026gt; {@code 0)}, where \u0026lt;\u003ci\u003eop\u003c/i\u003e\u0026gt; is one of the six comparison operators.\n * @param val {@code BigDecimal} to which this {@code BigDecimal} isto be compared.\n * @return -1, 0, or 1 as this {@code BigDecimal} is numericallyless than, equal to, or greater than  {@code val}.\n */\n","tf":{"freq":{"val":2,"scale":1,"greater":1,"one":1,"idiom":1,"perform":1,"object":1,"decim":6,"consid":1,"specifi":1,"six":2,"areequ":1,"oper":2,"valu":1,"individu":1,"liter":4,"isto":1,"equal":2,"suggest":1,"like":1,"provid":1,"comparison":3,"differ":1,"two":1,"numericallyless":1,"method":3,"big":6,"prefer":1,"compar":4},"maxFreq":6,"totalTerms":53},"loc":17}