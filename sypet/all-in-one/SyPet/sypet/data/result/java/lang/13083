{"id":13083,"className":"java.lang.StrictMath","methodName":"scalb","signature":"\u003cjava.lang.StrictMath: float scalb(float,int)\u003e","javadoc":"/** \n * Return  {@code f} \u0026times;2\u003csup\u003e {@code scaleFactor}\u003c/sup\u003e rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set.  See the Java Language Specification for a discussion of floating-point value sets.  If the exponent of the result is between  {@link Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the answer is calculated exactly.  If the exponent of the result would be larger than  {@code Float.MAX_EXPONENT}, an infinity is returned.  Note that if the result is subnormal, precision may be lost; that is, when  {@code scalb(x, n)}is subnormal,  {@code scalb(scalb(x, n), -n)} may not equal\u003ci\u003ex\u003c/i\u003e.  When the result is non-NaN, the result has the same sign as  {@code f}. \u003cp\u003eSpecial cases: \u003cul\u003e \u003cli\u003e If the first argument is NaN, NaN is returned. \u003cli\u003e If the first argument is infinite, then an infinity of the same sign is returned. \u003cli\u003e If the first argument is zero, then a zero of the same sign is returned. \u003c/ul\u003e\n * @param f number to be scaled by a power of two.\n * @param scaleFactor power of 2 used to scale {@code f}\n * @return {@code f} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n * @since 1.6\n */\n","tf":{"freq":{"scale":5,"result":5,"lost":1,"singl":1,"infin":2,"link":2,"use":1,"perform":1,"round":2,"languag":1,"zero":2,"sup":4,"scalb":4,"subnorm":2,"infinit":1,"time":2,"correct":1,"exact":1,"precis":1,"power":2,"multipli":1,"valu":2,"note":1,"argument":3,"member":1,"expon":2,"may":2,"calcul":1,"larger":1,"answer":1,"number":1,"equal":1,"factor":3,"non":1,"sign":3,"two":1,"point":2,"specif":1,"discuss":1,"special":1,"java":1,"first":3},"maxFreq":5,"totalTerms":75},"loc":3}