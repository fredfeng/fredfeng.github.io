{"id":13439,"className":"java.lang.String","methodName":"substring","signature":"\u003cjava.lang.String: java.lang.String substring(int,int)\u003e","javadoc":"/** \n * Returns a new string that is a substring of this string. The substring begins at the specified \u003ccode\u003ebeginIndex\u003c/code\u003e and extends to the character at index \u003ccode\u003eendIndex - 1\u003c/code\u003e. Thus the length of the substring is \u003ccode\u003eendIndex-beginIndex\u003c/code\u003e. \u003cp\u003e Examples: \u003cblockquote\u003e\u003cpre\u003e \"hamburger\".substring(4, 8) returns \"urge\" \"smiles\".substring(1, 5) returns \"mile\" \u003c/pre\u003e\u003c/blockquote\u003e\n * @param beginIndex   the beginning index, inclusive.\n * @param endIndex     the ending index, exclusive.\n * @return     the specified substring.\n * @exception IndexOutOfBoundsException  if the\u003ccode\u003ebeginIndex\u003c/code\u003e is negative, or \u003ccode\u003eendIndex\u003c/code\u003e is larger than the length of this \u003ccode\u003eString\u003c/code\u003e object, or \u003ccode\u003ebeginIndex\u003c/code\u003e is larger than \u003ccode\u003eendIndex\u003c/code\u003e.\n */\n","tf":{"freq":{"except":2,"index":14,"charact":1,"thus":1,"larger":2,"object":1,"urg":1,"hamburg":1,"begin":7,"specifi":2,"inclus":1,"blockquot":2,"pre":2,"string":3,"mile":1,"length":2,"exampl":1,"negat":1,"exclus":1,"smile":1,"substr":7,"bound":1,"end":6},"maxFreq":14,"totalTerms":61},"loc":13}