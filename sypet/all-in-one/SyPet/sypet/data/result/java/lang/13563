{"id":13563,"className":"java.lang.Math","methodName":"nextAfter","signature":"\u003cjava.lang.Math: float nextAfter(float,double)\u003e","javadoc":"/** \n * Returns the floating-point number adjacent to the first argument in the direction of the second argument.  If both arguments compare as equal a value equivalent to the second argument is returned. \u003cp\u003e Special cases: \u003cul\u003e \u003cli\u003e If either argument is a NaN, then NaN is returned. \u003cli\u003e If both arguments are signed zeros, a value equivalent to  {@code direction} is returned.\u003cli\u003e If  {@code start} is\u0026plusmn; {@link Float#MIN_VALUE} and {@code direction}has a value such that the result should have a smaller magnitude, then a zero with the same sign as  {@code start}is returned. \u003cli\u003e If  {@code start} is infinite and{@code direction} has a value such that the result shouldhave a smaller magnitude,  {@link Float#MAX_VALUE} with thesame sign as  {@code start} is returned.\u003cli\u003e If  {@code start} is equal to \u0026plusmn;{@link Float#MAX_VALUE} and {@code direction} has avalue such that the result should have a larger magnitude, an infinity with same sign as  {@code start} is returned.\u003c/ul\u003e\n * @param start  starting floating-point value\n * @param direction value indicating which of{@code start}\u0027s neighbors or  {@code start} shouldbe returned\n * @return The floating-point number adjacent to {@code start} in thedirection of  {@code direction}.\n * @since 1.6\n */\n","tf":{"freq":{"result":3,"second":2,"infin":1,"next":1,"link":3,"shouldhav":1,"avalu":1,"neighbor":1,"zero":2,"smaller":2,"infinit":1,"indic":1,"equival":2,"plusmn":2,"valu":6,"thesam":1,"direct":7,"argument":6,"adjac":2,"thedirect":1,"larger":1,"magnitud":3,"equal":2,"number":2,"sign":4,"shouldb":1,"point":3,"either":1,"start":11,"special":1,"compar":1,"first":1},"maxFreq":11,"totalTerms":77},"loc":3}