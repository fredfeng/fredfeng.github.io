{"id":13708,"className":"java.lang.Class","methodName":"getField","signature":"\u003cjava.lang.Class: java.lang.reflect.Field getField(java.lang.String)\u003e","javadoc":"/** \n * Returns a  {@code Field} object that reflects the specified publicmember field of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} specifying the simple name of the desired field.\u003cp\u003e The field to be reflected is determined by the algorithm that follows.  Let C be the class represented by this object: \u003cOL\u003e \u003cLI\u003e If C declares a public field with the name specified, that is the field to be reflected.\u003c/LI\u003e \u003cLI\u003e If no field was found in step 1 above, this algorithm is applied recursively to each direct superinterface of C. The direct superinterfaces are searched in the order they were declared.\u003c/LI\u003e \u003cLI\u003e If no field was found in steps 1 and 2 above, and C has a superclass S, then this algorithm is invoked recursively upon S. If C has no superclass, then a  {@code NoSuchFieldException}is thrown.\u003c/LI\u003e \u003c/OL\u003e \u003cp\u003e See \u003cem\u003eThe Java Language Specification\u003c/em\u003e, sections 8.2 and 8.3.\n * @param name the field name\n * @return  the {@code Field} object of this class specified by{@code name}\n * @exception NoSuchFieldException if a field with the specified name isnot found.\n * @exception NullPointerException if {@code name} is {@code null}\n * @exception SecurityException If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \u003cul\u003e \u003cli\u003e invocation of {@link SecurityManager#checkMemberAccess s.checkMemberAccess(this, Member.PUBLIC)} deniesaccess to the field \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class \u003c/ul\u003e\n * @since JDK1.1\n */\n","tf":{"freq":{"simpl":1,"languag":1,"desir":1,"specifi":5,"superinterfac":2,"search":1,"deni":1,"follow":2,"except":7,"thrown":1,"invok":1,"loader":2,"invoc":2,"present":1,"appli":1,"superclass":2,"determin":1,"pointer":1,"recurs":2,"upon":1,"caller":1,"packageof":1,"link":2,"object":4,"deniesaccess":1,"algorithm":3,"met":1,"order":1,"declar":2,"isnot":1,"name":8,"current":1,"ancestor":1,"publicmemb":1,"direct":2,"condit":1,"member":3,"check":4,"repres":2,"manag":3,"paramet":1,"access":5,"section":1,"field":15,"specif":1,"secur":4,"string":1,"java":1,"step":2,"reflect":3,"found":3},"maxFreq":15,"totalTerms":116},"loc":11}