{"id":14472,"className":"java.lang.invoke.MethodHandles","methodName":"dropArguments","signature":"\u003cjava.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.util.List)\u003e","javadoc":"/** \n * Produces a method handle which will discard some dummy arguments before calling some other specified \u003ci\u003etarget\u003c/i\u003e method handle. The type of the new method handle will be the same as the target\u0027s type, except it will also include the dummy argument types, at some given position. \u003cp\u003e The  {@code pos} argument may range between zero and \u003ci\u003eN\u003c/i\u003e,where \u003ci\u003eN\u003c/i\u003e is the arity of the target. If  {@code pos} is zero, the dummy arguments will precedethe target\u0027s real arguments; if  {@code pos} is \u003ci\u003eN\u003c/i\u003ethey will come after. \u003cp\u003e \u003cb\u003eExample:\u003c/b\u003e \u003cp\u003e\u003cblockquote\u003e\u003cpre\u003e import static java.lang.invoke.MethodHandles.*; import static java.lang.invoke.MethodType.*; ... MethodHandle cat \u003d lookup().findVirtual(String.class, \"concat\", methodType(String.class, String.class)); assertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\")); MethodType bigType \u003d cat.type().insertParameterTypes(0, int.class, String.class); MethodHandle d0 \u003d dropArguments(cat, 0, bigType.parameterList().subList(0,2)); assertEquals(bigType, d0.type()); assertEquals(\"yz\", (String) d0.invokeExact(123, \"x\", \"y\", \"z\")); \u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e This method is also equivalent to the following code: \u003cp\u003e\u003cblockquote\u003e\u003cpre\u003e {@link #dropArguments(MethodHandle,int,Class...) dropArguments}(target, pos, valueTypes.toArray(new Class[0])) \u003c/pre\u003e\u003c/blockquote\u003e\n * @param target the method handle to invoke after the arguments are dropped\n * @param valueTypes the type(s) of the argument(s) to drop\n * @param pos position of first argument to drop (zero for the leftmost)\n * @return a method handle which drops arguments of the given types,before calling the original method handle\n * @throws NullPointerException if the target is null,or if the  {@code valueTypes} list or any of its elements is null\n * @throws IllegalArgumentException if any element of {@code valueTypes} is {@code void.class}, or if  {@code pos} is negative or greater than the arity of the target,or if the new method handle\u0027s type would have too many parameters\n */\n","tf":{"freq":{"greater":1,"precedeth":1,"drop":8,"dummi":3,"zero":3,"type":19,"lookup":1,"pos":6,"specifi":1,"given":2,"equival":1,"rang":1,"blockquot":4,"exact":2,"follow":1,"argument":14,"mani":1,"element":2,"except":3,"invok":5,"leftmost":1,"will":5,"pointer":1,"negat":1,"big":3,"posit":2,"array":1,"virtual":1,"call":2,"cat":4,"sub":1,"link":1,"discard":1,"lang":2,"real":1,"valu":4,"find":1,"ariti":2,"may":1,"includ":1,"origin":1,"paramet":3,"come":1,"produc":1,"equal":3,"list":3,"illeg":1,"concat":1,"handl":11,"pre":4,"string":6,"target":8,"exampl":1,"method":15,"java":2,"insert":1,"first":1,"also":2},"maxFreq":19,"totalTerms":180},"loc":13}