{"id":13591,"className":"java.lang.Throwable","methodName":"addSuppressed","signature":"\u003cjava.lang.Throwable: void addSuppressed(java.lang.Throwable)\u003e","javadoc":"/** \n * Appends the specified exception to the exceptions that were suppressed in order to deliver this exception. This method is thread-safe and typically called (automatically and implicitly) by the  {@code try}-with-resources statement. \u003cp\u003eThe suppression behavior is enabled \u003cem\u003eunless\u003c/em\u003e disabled {@linkplain #Throwable(String,Throwable,boolean,boolean) viaa constructor}.  When suppression is disabled, this method does nothing other than to validate its argument. \u003cp\u003eNote that when one exception  {@linkplain #initCause(Throwable) causes} another exception, the firstexception is usually caught and then the second exception is thrown in response.  In other words, there is a causal connection between the two exceptions. In contrast, there are situations where two independent exceptions can be thrown in sibling code blocks, in particular in the  {@code try} block of a {@code try}-with-resources statement and the compiler-generated  {@code finally} blockwhich closes the resource. In these situations, only one of the thrown exceptions can be propagated.  In the  {@code try}-with-resources statement, when there are two such exceptions, the exception originating from the  {@code try} block is propagated and the exception from the{@code finally} block is added to the list of exceptionssuppressed by the exception from the  {@code try} block.  As anexception unwinds the stack, it can accumulate multiple suppressed exceptions. \u003cp\u003eAn exception may have suppressed exceptions while also being caused by another exception.  Whether or not an exception has a cause is semantically known at the time of its creation, unlike whether or not an exception will suppress other exceptions which is typically only determined after an exception is thrown. \u003cp\u003eNote that programmer written code is also able to take advantage of calling this method in situations where there are multiple sibling exceptions and only one can be propagated.\n * @param exception the exception to be added to the list ofsuppressed exceptions\n * @throws IllegalArgumentException if {@code exception} is thisthrowable; a throwable cannot suppress itself.\n * @throws NullPointerException if {@code exception} is {@code null}\n * @since 1.7\n */\n","tf":{"freq":{"unwind":1,"second":1,"viaa":1,"implicit":1,"particular":1,"abl":1,"whether":2,"situat":3,"close":1,"specifi":1,"contrast":1,"time":1,"independ":1,"ofsuppress":1,"firstexcept":1,"thread":1,"propag":3,"argument":2,"append":1,"blockwhich":1,"except":29,"thrown":4,"multipl":2,"respons":1,"sibl":2,"enabl":1,"advantag":1,"programm":1,"init":1,"causal":1,"accumul":1,"statement":3,"disabl":2,"anexcept":1,"determin":1,"will":1,"pointer":1,"word":1,"known":1,"stack":1,"compil":1,"creation":1,"linkplain":2,"call":2,"valid":1,"connect":1,"behavior":1,"one":3,"typic":2,"block":5,"anoth":2,"add":1,"automat":1,"resourc":4,"unless":1,"order":1,"written":1,"semant":1,"unlik":1,"noth":1,"caught":1,"note":2,"constructor":1,"usual":1,"thisthrow":1,"safe":1,"may":1,"origin":1,"list":2,"illeg":1,"two":3,"caus":4,"take":1,"generat":1,"string":1,"deliv":1,"ad":2,"exceptionssuppress":1,"method":3,"throwabl":4,"also":2,"suppress":8},"maxFreq":29,"totalTerms":158},"loc":15}