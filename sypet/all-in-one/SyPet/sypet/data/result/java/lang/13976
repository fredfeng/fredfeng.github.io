{"id":13976,"className":"java.lang.Short","methodName":"decode","signature":"\u003cjava.lang.Short: java.lang.Short decode(java.lang.String)\u003e","javadoc":"/** \n * Decodes a  {@code String} into a {@code Short}. Accepts decimal, hexadecimal, and octal numbers given by the following grammar: \u003cblockquote\u003e \u003cdl\u003e \u003cdt\u003e\u003ci\u003eDecodableString:\u003c/i\u003e \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e DecimalNumeral\u003c/i\u003e \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e  {@code 0x} \u003ci\u003eHexDigits\u003c/i\u003e\u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e  {@code 0X} \u003ci\u003eHexDigits\u003c/i\u003e\u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e  {@code #} \u003ci\u003eHexDigits\u003c/i\u003e\u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e  {@code 0} \u003ci\u003eOctalDigits\u003c/i\u003e\u003cp\u003e \u003cdt\u003e\u003ci\u003eSign:\u003c/i\u003e \u003cdd\u003e {@code -}\u003cdd\u003e {@code +}\u003c/dl\u003e \u003c/blockquote\u003e \u003ci\u003eDecimalNumeral\u003c/i\u003e, \u003ci\u003eHexDigits\u003c/i\u003e, and \u003ci\u003eOctalDigits\u003c/i\u003e are as defined in section 3.10.1 of \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e, except that underscores are not accepted between digits. \u003cp\u003eThe sequence of characters following an optional sign and/or radix specifier (\" {@code 0x}\", \" {@code 0X}\", \" {@code #}\", or leading zero) is parsed as by the  {@code Short.parseShort} method with the indicated radix (10, 16, or8).  This sequence of characters must represent a positive value or a  {@link NumberFormatException} will be thrown.  Theresult is negated if first character of the specified  {@code String} is the minus sign.  No whitespace characters arepermitted in the  {@code String}.\n * @param nm the {@code String} to decode.\n * @return    a {@code Short} object holding the {@code short}value represented by  {@code nm}\n * @throws NumberFormatException  if the {@code String} does notcontain a parsable  {@code short}.\n * @see java.lang.Short#parseShort(java.lang.String,int)\n */\n","tf":{"freq":{"accept":2,"lead":1,"languag":1,"zero":1,"parsabl":1,"must":1,"specifi":2,"hex":4,"given":1,"blockquot":2,"sequenc":2,"opt":5,"option":1,"follow":2,"decod":4,"except":3,"thrown":1,"minus":1,"notcontain":1,"numer":2,"charact":4,"hold":1,"number":3,"theresult":1,"format":2,"cite":2,"digit":7,"sign":8,"arepermit":1,"will":1,"negat":1,"posit":1,"defin":1,"sub":10,"trade":1,"link":1,"object":1,"decim":3,"lang":2,"indic":1,"valu":2,"repres":2,"whitespac":1,"hexadecim":1,"underscor":1,"section":1,"grammar":1,"specif":1,"octal":3,"radix":2,"string":7,"java":3,"method":1,"pars":3,"first":1},"maxFreq":10,"totalTerms":120},"loc":7}