{"id":13585,"className":"java.lang.Throwable","methodName":"printStackTrace","signature":"\u003cjava.lang.Throwable: void printStackTrace()\u003e","javadoc":"/** \n * Prints this throwable and its backtrace to the standard error stream. This method prints a stack trace for this {@code Throwable} object on the error output stream that isthe value of the field  {@code System.err}. The first line of output contains the result of the  {@link #toString()} method forthis object.  Remaining lines represent data previously recorded by the method  {@link #fillInStackTrace()}. The format of this information depends on the implementation, but the following example may be regarded as typical: \u003cblockquote\u003e\u003cpre\u003e java.lang.NullPointerException at MyClass.mash(MyClass.java:9) at MyClass.crunch(MyClass.java:6) at MyClass.main(MyClass.java:3) \u003c/pre\u003e\u003c/blockquote\u003e This example was produced by running the program: \u003cpre\u003e class MyClass { public static void main(String[] args) { crunch(null); } static void crunch(int[] a) { mash(a); } static void mash(int[] b) { System.out.println(b[0]); } } \u003c/pre\u003e The backtrace for a throwable with an initialized, non-null cause should generally include the backtrace for the cause.  The format of this information depends on the implementation, but the following example may be regarded as typical: \u003cpre\u003e HighLevelException: MidLevelException: LowLevelException at Junk.a(Junk.java:13) at Junk.main(Junk.java:4) Caused by: MidLevelException: LowLevelException at Junk.c(Junk.java:23) at Junk.b(Junk.java:17) at Junk.a(Junk.java:11) ... 1 more Caused by: LowLevelException at Junk.e(Junk.java:30) at Junk.d(Junk.java:27) at Junk.c(Junk.java:21) ... 3 more \u003c/pre\u003e Note the presence of lines containing the characters  {@code \"...\"}. These lines indicate that the remainder of the stack trace for this exception matches the indicated number of frames from the bottom of the stack trace of the exception that was caused by this exception (the \"enclosing\" exception).  This shorthand can greatly reduce the length of the output in the common case where a wrapped exception is thrown from same method as the \"causative exception\" is caught.  The above example was produced by running the program: \u003cpre\u003e public class Junk { public static void main(String args[]) { try { a(); } catch(HighLevelException e) { e.printStackTrace(); } } static void a() throws HighLevelException { try { b(); } catch(MidLevelException e) { throw new HighLevelException(e); } } static void b() throws MidLevelException { c(); } static void c() throws MidLevelException { try { d(); } catch(LowLevelException e) { throw new MidLevelException(e); } } static void d() throws LowLevelException { e(); } static void e() throws LowLevelException { throw new LowLevelException(); } } class HighLevelException extends Exception { HighLevelException(Throwable cause) { super(cause); } } class MidLevelException extends Exception { MidLevelException(Throwable cause)  { super(cause); } } class LowLevelException extends Exception { } \u003c/pre\u003e As of release 7, the platform supports the notion of \u003ci\u003esuppressed exceptions\u003c/i\u003e (in conjunction with the  {@code try}-with-resources statement). Any exceptions that were suppressed in order to deliver an exception are printed out beneath the stack trace.  The format of this information depends on the implementation, but the following example may be regarded as typical: \u003cpre\u003e Exception in thread \"main\" java.lang.Exception: Something happened at Foo.bar(Foo.java:10) at Foo.main(Foo.java:5) Suppressed: Resource$CloseFailException: Resource ID \u003d 0 at Resource.close(Resource.java:26) at Foo.bar(Foo.java:9) ... 1 more \u003c/pre\u003e Note that the \"... n more\" notation is used on suppressed exceptions just at it is used on causes. Unlike causes, suppressed exceptions are indented beyond their \"containing exceptions.\" \u003cp\u003eAn exception can have both a cause and one or more suppressed exceptions: \u003cpre\u003e Exception in thread \"main\" java.lang.Exception: Main block at Foo3.main(Foo3.java:7) Suppressed: Resource$CloseFailException: Resource ID \u003d 2 at Resource.close(Resource.java:26) at Foo3.main(Foo3.java:5) Suppressed: Resource$CloseFailException: Resource ID \u003d 1 at Resource.close(Resource.java:26) at Foo3.main(Foo3.java:5) Caused by: java.lang.Exception: I did it at Foo3.main(Foo3.java:8) \u003c/pre\u003e Likewise, a suppressed exception can have a cause: \u003cpre\u003e Exception in thread \"main\" java.lang.Exception: Main block at Foo4.main(Foo4.java:6) Suppressed: Resource2$CloseFailException: Resource ID \u003d 1 at Resource2.close(Resource2.java:20) at Foo4.main(Foo4.java:5) Caused by: java.lang.Exception: Rats, you caught me at Resource2$CloseFailException.\u003cinit\u003e(Resource2.java:45) ... 2 more \u003c/pre\u003e\n */\n","tf":{"freq":{"foo":18,"beyond":1,"arg":2,"forthi":1,"fail":5,"blockquot":2,"thread":3,"happen":1,"presenc":1,"platform":1,"causat":1,"support":1,"notion":1,"charact":1,"regard":3,"number":1,"non":1,"record":1,"conjunct":1,"system":2,"enclos":1,"bottom":1,"pointer":1,"low":8,"bar":2,"stream":2,"common":1,"link":2,"typic":3,"data":1,"block":2,"use":2,"line":4,"run":2,"someth":1,"indic":2,"length":1,"initi":1,"caught":2,"isth":1,"note":2,"just":1,"may":3,"previous":1,"repres":1,"field":1,"remain":1,"remaind":1,"string":3,"exampl":5,"method":4,"throwabl":5,"mid":8,"suppress":10,"mash":3,"close":9,"level":22,"shorthand":1,"println":1,"follow":3,"wrap":1,"except":54,"thrown":1,"indent":1,"init":1,"format":3,"backtrac":3,"statement":1,"inform":3,"likewis":1,"frame":1,"program":2,"contain":3,"match":1,"output":3,"stack":7,"crunch":3,"result":1,"one":1,"object":2,"rat":1,"lang":6,"junk":17,"resourc":19,"releas":1,"order":1,"unlik":1,"valu":1,"beneath":1,"includ":1,"error":2,"standard":1,"depend":3,"trace":7,"fill":1,"produc":2,"print":5,"general":1,"main":16,"notat":1,"caus":15,"great":1,"pre":14,"err":1,"deliv":1,"java":31,"high":6,"reduc":1,"first":1},"maxFreq":54,"totalTerms":425},"loc":3}