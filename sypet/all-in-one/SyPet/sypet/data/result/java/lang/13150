{"id":13150,"className":"java.lang.Character","methodName":"offsetByCodePoints","signature":"\u003cjava.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)\u003e","javadoc":"/** \n * Returns the index within the given char sequence that is offset from the given  {@code index} by {@code codePointOffset}code points. Unpaired surrogates within the text range given by {@code index} and {@code codePointOffset} count asone code point each.\n * @param seq the char sequence\n * @param index the index to be offset\n * @param codePointOffset the offset in code points\n * @return the index within the char sequence\n * @exception NullPointerException if {@code seq} is null.\n * @exception IndexOutOfBoundsException if {@code index}is negative or larger then the length of the char sequence, or if  {@code codePointOffset} is positive and thesubsequence starting with  {@code index} has fewer than{@code codePointOffset} code points, or if{@code codePointOffset} is negative and the subsequencebefore  {@code index} has fewer than the absolute valueof  {@code codePointOffset} code points.\n * @since 1.5\n */\n","tf":{"freq":{"count":1,"thesubsequ":1,"unpair":1,"ason":1,"given":3,"rang":1,"sequenc":4,"length":1,"offset":11,"text":1,"index":10,"except":4,"surrog":1,"subsequencebefor":1,"larger":1,"absolut":1,"valueof":1,"point":13,"start":1,"seq":2,"pointer":1,"fewer":2,"negat":2,"within":3,"posit":1,"bound":1},"maxFreq":13,"totalTerms":70},"loc":32}