{"id":12960,"className":"java.lang.System","methodName":"exit","signature":"\u003cjava.lang.System: void exit(int)\u003e","javadoc":"/** \n * Terminates the currently running Java Virtual Machine. The argument serves as a status code; by convention, a nonzero status code indicates abnormal termination. \u003cp\u003e This method calls the \u003ccode\u003eexit\u003c/code\u003e method in class \u003ccode\u003eRuntime\u003c/code\u003e. This method never returns normally. \u003cp\u003e The call \u003ccode\u003eSystem.exit(n)\u003c/code\u003e is effectively equivalent to the call: \u003cblockquote\u003e\u003cpre\u003e Runtime.getRuntime().exit(n) \u003c/pre\u003e\u003c/blockquote\u003e\n * @param status   exit status.\n * @throws SecurityException if a security manager exists and its \u003ccode\u003echeckExit\u003c/code\u003e method doesn\u0027t allow exit with the specified status.\n * @see java.lang.Runtime#exit(int)\n */\n","tf":{"freq":{"virtual":1,"call":3,"allow":1,"convent":1,"normal":1,"run":1,"lang":1,"specifi":1,"indic":1,"equival":1,"blockquot":2,"current":1,"serv":1,"exist":1,"nonzero":1,"argument":1,"except":1,"check":1,"status":5,"manag":1,"runtim":4,"exit":8,"abnorm":1,"machin":1,"termin":2,"never":1,"system":1,"secur":2,"effect":1,"pre":2,"java":2,"method":4},"maxFreq":8,"totalTerms":56},"loc":3}