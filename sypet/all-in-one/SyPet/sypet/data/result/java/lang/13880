{"id":13880,"className":"java.lang.Runtime","methodName":"getLocalizedInputStream","signature":"\u003cjava.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)\u003e","javadoc":"/** \n * Creates a localized version of an input stream. This method takes an \u003ccode\u003eInputStream\u003c/code\u003e and returns an \u003ccode\u003eInputStream\u003c/code\u003e equivalent to the argument in all respects except that it is localized: as characters in the local character set are read from the stream, they are automatically converted from the local character set to Unicode. \u003cp\u003e If the argument is already a localized stream, it may be returned as the result.\n * @param in InputStream to localize\n * @return     a localized input stream\n * @see java.io.InputStream\n * @see java.io.BufferedReader#BufferedReader(java.io.Reader)\n * @see java.io.InputStreamReader#InputStreamReader(java.io.InputStream)\n * @deprecated As of JDK\u0026nbsp;1.1, the preferred way to translate a bytestream in the local encoding into a character stream in Unicode is via the \u003ccode\u003eInputStreamReader\u003c/code\u003e and \u003ccode\u003eBufferedReader\u003c/code\u003e classes.\n */\n","tf":{"freq":{"result":1,"stream":14,"deprec":1,"via":1,"bytestream":1,"way":1,"convert":1,"automat":1,"version":1,"buffer":3,"equival":1,"read":1,"nbsp":1,"argument":2,"except":1,"may":1,"charact":4,"creat":1,"translat":1,"encod":1,"input":11,"reader":7,"take":1,"unicod":2,"method":1,"alreadi":1,"java":5,"local":9,"prefer":1,"respect":1},"maxFreq":14,"totalTerms":78},"loc":3}