{"id":14255,"className":"java.lang.reflect.Constructor","methodName":"getGenericExceptionTypes","signature":"\u003cjava.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()\u003e","javadoc":"/** \n * Returns an array of  {@code Type} objects that represent theexceptions declared to be thrown by this  {@code Constructor} object.Returns an array of length 0 if the underlying method declares no exceptions in its  {@code throws} clause.\u003cp\u003eIf an exception type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.\n * @return an array of Types that represent the exception typesthrown by the underlying method\n * @throws GenericSignatureFormatError if the generic method signature does not conform to the format specified in \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n * @throws TypeNotPresentException if the underlying method\u0027s{@code throws} clause refers to a non-existent type declaration\n * @throws MalformedParameterizedTypeException ifthe underlying method\u0027s  {@code throws} clause refers to aparameterized type that cannot be instantiated for any reason\n * @since 1.5\n */\n","tf":{"freq":{"virtual":1,"generic":3,"otherwis":1,"typesthrown":1,"reason":1,"trade":1,"instanti":1,"theexcept":1,"variabl":1,"object":2,"type":10,"signatur":2,"specifi":1,"parameter":2,"declar":3,"refer":2,"length":1,"exist":1,"constructor":1,"thrown":1,"except":6,"ifth":1,"error":1,"repres":2,"creat":1,"resolv":1,"claus":3,"format":2,"non":1,"cite":2,"present":1,"malform":1,"specif":1,"machin":1,"conform":1,"java":1,"method":5,"aparameter":1,"array":3},"maxFreq":10,"totalTerms":72},"loc":8}