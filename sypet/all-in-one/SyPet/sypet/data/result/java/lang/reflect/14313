{"id":14313,"className":"java.lang.reflect.Field","methodName":"get","signature":"\u003cjava.lang.reflect.Field: java.lang.Object get(java.lang.Object)\u003e","javadoc":"/** \n * Returns the value of the field represented by this  {@code Field}, on the specified object. The value is automatically wrapped in an object if it has a primitive type. \u003cp\u003eThe underlying field\u0027s value is obtained as follows: \u003cp\u003eIf the underlying field is a static field, the  {@code obj} argumentis ignored; it may be null. \u003cp\u003eOtherwise, the underlying field is an instance field.  If the specified  {@code obj} argument is null, the method throws a{@code NullPointerException}. If the specified object is not an instance of the class or interface declaring the underlying field, the method throws an  {@code IllegalArgumentException}. \u003cp\u003eIf this  {@code Field} object is enforcing Java language access control, andthe underlying field is inaccessible, the method throws an {@code IllegalAccessException}. If the underlying field is static, the class that declared the field is initialized if it has not already been initialized. \u003cp\u003eOtherwise, the value is retrieved from the underlying instance or static field.  If the field has a primitive type, the value is wrapped in an object before being returned, otherwise it is returned as is. \u003cp\u003eIf the field is hidden in the type of  {@code obj}, the field\u0027s value is obtained according to the preceding rules.\n * @param obj object from which the represented field\u0027s value isto be extracted\n * @return the value of the represented field in object{@code obj}; primitive values are wrapped in an appropriate object before being returned\n * @exception IllegalAccessException    if this {@code Field} objectis enforcing Java language access control and the underlying field is inaccessible.\n * @exception IllegalArgumentException  if the specified object is not aninstance of the class or interface declaring the underlying field (or a subclass or implementor thereof).\n * @exception NullPointerException      if the specified object is nulland the field is an instance field.\n * @exception ExceptionInInitializerError if the initialization provokedby this method fails.\n */\n","tf":{"freq":{"inaccess":2,"objecti":1,"nulland":1,"languag":2,"type":3,"aninst":1,"specifi":5,"fail":1,"follow":1,"implementor":1,"argument":3,"wrap":3,"control":2,"except":11,"ignor":1,"enforc":2,"provokedbi":1,"extract":1,"instanc":4,"obtain":2,"thereof":1,"subclass":1,"pointer":2,"otherwis":3,"primit":3,"object":10,"automat":1,"declar":3,"rule":1,"valu":9,"initi":4,"may":1,"error":1,"repres":3,"isto":1,"argumenti":1,"accord":1,"access":4,"illeg":4,"field":23,"preced":1,"retriev":1,"hidden":1,"appropri":1,"method":4,"obj":5,"java":2,"alreadi":1,"andth":1},"maxFreq":23,"totalTerms":142},"loc":3}