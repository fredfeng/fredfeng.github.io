{"id":14297,"className":"java.lang.reflect.Proxy","methodName":"newProxyInstance","signature":"\u003cjava.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class\u003c?\u003e[],java.lang.reflect.InvocationHandler)\u003e","javadoc":"/** \n * Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.  This method is equivalent to: \u003cpre\u003e Proxy.getProxyClass(loader, interfaces). getConstructor(new Class[] { InvocationHandler.class }). newInstance(new Object[] { handler }); \u003c/pre\u003e \u003cp\u003e {@code Proxy.newProxyInstance} throws{@code IllegalArgumentException} for the same reasons that{@code Proxy.getProxyClass} does.\n * @param loader the class loader to define the proxy class\n * @param interfaces the list of interfaces for the proxy classto implement\n * @param h the invocation handler to dispatch method invocations to\n * @return  a proxy instance with the specified invocation handler of aproxy class that is defined by the specified class loader and that implements the specified interfaces\n * @throws IllegalArgumentException if any of the restrictions on theparameters that may be passed to  {@code getProxyClass}are violated\n * @throws NullPointerException if the {@code interfaces} arrayargument or any of its elements are  {@code null}, or if the invocation handler,  {@code h}, is {@code null}\n */\n","tf":{"freq":{"defin":2,"arrayargu":1,"reason":1,"theparamet":1,"object":1,"violat":1,"aproxi":1,"specifi":5,"equival":1,"dispatch":2,"constructor":1,"argument":2,"element":1,"except":3,"may":1,"proxi":12,"loader":4,"list":1,"classto":1,"illeg":2,"invoc":7,"restrict":1,"instanc":5,"pass":1,"pre":2,"pointer":1,"method":3,"handler":6},"maxFreq":12,"totalTerms":70},"loc":26}