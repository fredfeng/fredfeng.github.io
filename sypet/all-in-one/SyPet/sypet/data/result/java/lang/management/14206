{"id":14206,"className":"java.lang.management.PlatformLoggingMXBean","methodName":"setLoggerLevel","signature":"\u003cjava.lang.management.PlatformLoggingMXBean: void setLoggerLevel(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Sets the specified logger to the specified new {@linkplain java.util.logging.Logger#setLevel level}. If the  {@code levelName} is not {@code null}, the level of the specified logger is set to the parsed {@link java.util.logging.Level Level}matching the  {@code levelName}. If the  {@code levelName} is {@code null}, the level of the specified logger is set to  {@code null} andthe effective level of the logger is inherited from its nearest ancestor with a specific (non-null) level value.\n * @param loggerName The name of the {@code Logger} to be set.Must be non-null.\n * @param levelName The name of the level to set on the specified logger,or   {@code null} if setting the level to inheritfrom its nearest ancestor.\n * @throws IllegalArgumentException if the specified loggerdoes not exist, or  {@code levelName} is not a valid level name.\n * @throws SecurityException if a security manager exists and ifthe caller does not have LoggingPermission(\"control\").\n * @see java.util.logging.Logger#setLevel\n */\n","tf":{"freq":{"caller":1,"valid":1,"linkplain":1,"loggerdo":1,"link":1,"inheritfrom":1,"must":1,"specifi":6,"level":18,"name":9,"permiss":1,"logger":10,"valu":1,"exist":2,"ancestor":2,"argument":1,"control":1,"except":2,"ifth":1,"manag":1,"log":4,"nearest":2,"illeg":1,"non":2,"specif":1,"secur":2,"effect":1,"java":3,"match":1,"pars":1,"andth":1,"util":3},"maxFreq":18,"totalTerms":84},"loc":0}