{"id":14413,"className":"java.lang.instrument.Instrumentation","methodName":"appendToSystemClassLoaderSearch","signature":"\u003cjava.lang.instrument.Instrumentation: void appendToSystemClassLoaderSearch(java.util.jar.JarFile)\u003e","javadoc":"/** \n * Specifies a JAR file with instrumentation classes to be defined by the system class loader. When the system class loader for delegation (see {@link java.lang.ClassLoader#getSystemClassLoader getSystemClassLoader()}) unsuccessfully searches for a class, the entries in the  {@link java.util.jar.JarFile JarFile} will be searched as well.\u003cp\u003e This method may be used multiple times to add multiple JAR files to be searched in the order that this method was invoked. \u003cp\u003e The agent should take care to ensure that the JAR does not contain any classes or resources other than those to be defined by the system class loader for the purpose of instrumentation. Failure to observe this warning could result in unexpected behavior that is difficult to diagnose (see {@link #appendToBootstrapClassLoaderSearch appendToBootstrapClassLoaderSearch}). \u003cp\u003e The system class loader supports adding a JAR file to be searched if it implements a method named \u003ccode\u003eappendToClassPathForInstrumentation\u003c/code\u003e which takes a single parameter of type \u003ccode\u003ejava.lang.String\u003c/code\u003e. The method is not required to have \u003ccode\u003epublic\u003c/code\u003e access. The name of the JAR file is obtained by invoking the  {@link java.util.zip.ZipFile#getName getName()} method on the \u003ccode\u003ejarfile\u003c/code\u003e and this is provided as theparameter to the \u003ccode\u003eappendToClassPathForInstrumentation\u003c/code\u003e method. \u003cp\u003e \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e specifies that a subsequent attempt to resolve a symbolic reference that the Java virtual machine has previously unsuccessfully attempted to resolve always fails with the same error that was thrown as a result of the initial resolution attempt. Consequently, if the JAR file contains an entry that corresponds to a class for which the Java virtual machine has unsuccessfully attempted to resolve a reference, then subsequent attempts to resolve that reference will fail with the same error as the initial attempt. \u003cp\u003e This method does not change the value of \u003ccode\u003ejava.class.path\u003c/code\u003e {@link java.lang.System#getProperties system property}.\n * @param jarfile The JAR file to be searched when the system class loader unsuccessfully searches for a class.\n * @throws UnsupportedOperationException If the system class loader does not support appending a a JAR file to be searched.\n * @throws NullPointerException If \u003ccode\u003ejarfile\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see #appendToBootstrapClassLoaderSearch\n * @see java.lang.ClassLoader#getSystemClassLoader\n * @see java.util.jar.JarFile\n * @since 1.6\n */\n","tf":{"freq":{"unsupport":1,"singl":1,"consequ":1,"jarfil":3,"type":1,"specifi":2,"time":1,"requir":1,"observ":1,"fail":2,"oper":1,"refer":3,"search":11,"jar":5,"file":11,"care":1,"purpos":1,"append":7,"except":2,"thrown":1,"support":2,"symbol":1,"multipl":2,"alway":1,"loader":15,"invok":2,"resolv":4,"provid":1,"agent":1,"cite":2,"machin":3,"obtain":1,"system":12,"contain":2,"will":2,"pointer":1,"properti":2,"util":3,"attempt":6,"virtual":3,"warn":1,"defin":2,"result":2,"unexpect":1,"bootstrap":3,"trade":1,"unsuccess":4,"correspond":1,"behavior":1,"link":5,"use":1,"theparamet":1,"well":1,"add":1,"difficult":1,"lang":4,"ensur":1,"resolut":1,"resourc":1,"deleg":1,"order":1,"name":4,"path":3,"valu":1,"initi":2,"subsequ":2,"zip":2,"may":1,"error":2,"previous":1,"failur":1,"entri":2,"paramet":1,"instrument":4,"access":1,"specif":1,"take":2,"string":1,"ad":1,"method":7,"java":11,"chang":1,"diagnos":1},"maxFreq":15,"totalTerms":210},"loc":0}