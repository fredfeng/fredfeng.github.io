{"id":13289,"className":"java.lang.SecurityManager","methodName":"checkSecurityAccess","signature":"\u003cjava.lang.SecurityManager: void checkSecurityAccess(java.lang.String)\u003e","javadoc":"/** \n * Determines whether the permission with the specified permission target name should be granted or denied. \u003cp\u003e If the requested permission is allowed, this method returns quietly. If denied, a SecurityException is raised. \u003cp\u003e This method creates a \u003ccode\u003eSecurityPermission\u003c/code\u003e object for the given permission target name and calls \u003ccode\u003echeckPermission\u003c/code\u003e with it. \u003cp\u003e See the documentation for \u003ccode\u003e {@link java.security.SecurityPermission}\u003c/code\u003e for a list of possible permission target names. \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkSecurityAccess\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param target the target name of the \u003ccode\u003eSecurityPermission\u003c/code\u003e.\n * @exception SecurityException if the calling thread does not havepermission for the requested access.\n * @exception NullPointerException if \u003ccode\u003etarget\u003c/code\u003e is null.\n * @exception IllegalArgumentException if \u003ccode\u003etarget\u003c/code\u003e is empty.\n * @since   JDK1.1\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"call":3,"grant":1,"allow":1,"overridden":1,"normal":1,"link":1,"possibl":1,"object":1,"whether":1,"specifi":1,"document":1,"rais":1,"given":1,"thread":1,"request":2,"name":4,"permiss":12,"deni":2,"argument":1,"except":8,"check":5,"creat":1,"list":1,"quiet":1,"access":3,"illeg":1,"empti":1,"havepermiss":1,"point":1,"secur":9,"determin":1,"target":7,"pointer":1,"method":4,"java":2,"make":1},"maxFreq":12,"totalTerms":85},"loc":3}