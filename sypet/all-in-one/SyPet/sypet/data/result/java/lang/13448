{"id":13448,"className":"java.lang.String","methodName":"split","signature":"\u003cjava.lang.String: java.lang.String[] split(java.lang.String,int)\u003e","javadoc":"/** \n * Splits this string around matches of the given \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e. \u003cp\u003e The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string.  The substrings in the array are in the order in which they occur in this string.  If the expression does not match any part of the input then the resulting array has just one element, namely this string. \u003cp\u003e The \u003ctt\u003elimit\u003c/tt\u003e parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.  If the limit \u003ci\u003en\u003c/i\u003e is greater than zero then the pattern will be applied at most \u003ci\u003en\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be no greater than \u003ci\u003en\u003c/i\u003e, and the array\u0027s last entry will contain all input beyond the last matched delimiter.  If \u003ci\u003en\u003c/i\u003e is non-positive then the pattern will be applied as many times as possible and the array can have any length.  If \u003ci\u003en\u003c/i\u003e is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. \u003cp\u003e The string \u003ctt\u003e\"boo:and:foo\"\u003c/tt\u003e, for example, yields the following results with these parameters: \u003cblockquote\u003e\u003ctable cellpadding\u003d1 cellspacing\u003d0 summary\u003d\"Split example showing regex, limit, and result\"\u003e \u003ctr\u003e \u003cth\u003eRegex\u003c/th\u003e \u003cth\u003eLimit\u003c/th\u003e \u003cth\u003eResult\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e \u003ctd align\u003dcenter\u003e2\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and:foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e \u003ctd align\u003dcenter\u003e5\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and\", \"foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e \u003ctd align\u003dcenter\u003e-2\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and\", \"foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e \u003ctd align\u003dcenter\u003e5\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\", \"\", \"\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e \u003ctd align\u003dcenter\u003e-2\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\", \"\", \"\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e \u003ctd align\u003dcenter\u003e0\u003c/td\u003e \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e\u003c/blockquote\u003e \u003cp\u003e An invocation of this method of the form \u003ci\u003estr.\u003c/i\u003e\u003ctt\u003esplit(\u003c/tt\u003e\u003ci\u003eregex\u003c/i\u003e\u003ctt\u003e,\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e yields the same result as the expression \u003cblockquote\u003e {@link java.util.regex.Pattern}. {@link java.util.regex.Pattern#compile compile}\u003ctt\u003e(\u003c/tt\u003e\u003ci\u003eregex\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e. {@link java.util.regex.Pattern#split(java.lang.CharSequence,int) split}\u003ctt\u003e(\u003c/tt\u003e\u003ci\u003estr\u003c/i\u003e\u003ctt\u003e,\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e \u003c/blockquote\u003e\n * @param regex the delimiting regular expression\n * @param limit the result threshold, as described above\n * @return  the array of strings computed by splitting this stringaround matches of the given regular expression\n * @throws PatternSyntaxException if the regular expression\u0027s syntax is invalid\n * @see java.util.regex.Pattern\n * @since 1.4\n * @spec JSR-51\n */\n","tf":{"freq":{"greater":2,"last":2,"yield":2,"possibl":2,"show":1,"foo":4,"zero":2,"beyond":1,"center":12,"time":4,"invalid":1,"given":3,"sequenc":1,"blockquot":4,"trail":1,"substr":3,"href":1,"follow":1,"nbsp":4,"limit":5,"mani":2,"element":1,"control":1,"delimit":2,"except":1,"form":1,"regex":10,"align":12,"describ":1,"number":1,"invoc":1,"non":1,"syntax":2,"input":2,"appli":4,"summari":1,"str":2,"cellpad":1,"contain":2,"will":6,"stringaround":1,"comput":1,"split":7,"match":5,"posit":1,"util":5,"compil":2,"array":9,"spec":1,"result":7,"link":3,"one":1,"sum":1,"anoth":1,"therefor":1,"discard":1,"express":7,"lang":1,"affect":1,"order":1,"name":1,"length":4,"cellspac":1,"end":1,"just":1,"regular":4,"entri":1,"paramet":2,"threshold":1,"empti":1,"around":1,"termin":2,"boo":4,"pattern":10,"tabl":2,"string":8,"exampl":2,"java":5,"method":2,"html":1,"part":1,"occur":1},"maxFreq":12,"totalTerms":223},"loc":51}