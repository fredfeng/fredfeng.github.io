{"id":13557,"className":"java.lang.Math","methodName":"log1p","signature":"\u003cjava.lang.Math: double log1p(double)\u003e","javadoc":"/** \n * Returns the natural logarithm of the sum of the argument and 1. Note that for small values  {@code x}, the result of {@code log1p(x)} is much closer to the true result of ln(1+  {@code x}) than the floating-point evaluation of {@code log(1.0+x)}. \u003cp\u003eSpecial cases: \u003cul\u003e \u003cli\u003eIf the argument is NaN or less than -1, then the result is NaN. \u003cli\u003eIf the argument is positive infinity, then the result is positive infinity. \u003cli\u003eIf the argument is negative one, then the result is negative infinity. \u003cli\u003eIf the argument is zero, then the result is a zero with the same sign as the argument. \u003c/ul\u003e \u003cp\u003eThe computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.\n * @param x   a value\n * @return the value ln({@code x}\u0026nbsp;+\u0026nbsp;1), the natural log of  {@code x}\u0026nbsp;+\u0026nbsp;1\n * @since 1.5\n */\n","tf":{"freq":{"result":9,"infin":3,"one":1,"sum":1,"natur":2,"zero":2,"closer":1,"must":2,"exact":1,"valu":3,"note":1,"less":1,"nbsp":4,"argument":6,"ulp":1,"true":1,"semi":1,"evalu":1,"log":4,"much":1,"monoton":1,"sign":1,"point":1,"logarithm":1,"comput":1,"special":1,"negat":2,"within":1,"small":1,"posit":2},"maxFreq":9,"totalTerms":58},"loc":3}