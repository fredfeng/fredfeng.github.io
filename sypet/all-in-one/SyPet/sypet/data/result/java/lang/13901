{"id":13901,"className":"java.lang.Thread","methodName":"yield","signature":"\u003cjava.lang.Thread: void yield()\u003e","javadoc":"/** \n * A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint. \u003cp\u003e Yield is a heuristic attempt to improve relative progression between threads that would otherwise over-utilise a CPU. Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect. \u003cp\u003e It is rarely appropriate to use this method. It may be useful for debugging or testing purposes, where it may help to reproduce bugs due to race conditions. It may also be useful when designing concurrency control constructs such as the ones in the {@link java.util.concurrent.locks} package.\n */\n","tf":{"freq":{"attempt":1,"progress":1,"otherwis":1,"detail":1,"test":1,"yield":3,"concurr":2,"link":1,"one":1,"use":5,"schedul":2,"reproduc":1,"debug":1,"desir":1,"race":1,"ensur":1,"help":1,"free":1,"rare":1,"thread":2,"utilis":1,"current":2,"relat":1,"combin":1,"purpos":1,"processor":1,"heurist":1,"profil":1,"condit":1,"control":1,"may":3,"ignor":1,"lock":1,"hint":2,"effect":1,"benchmark":1,"appropri":1,"will":1,"due":1,"bug":1,"actual":1,"java":1,"method":1,"improv":1,"construct":1,"also":1,"util":1,"design":1},"maxFreq":5,"totalTerms":61},"loc":0}