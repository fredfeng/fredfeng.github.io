{"id":13666,"className":"java.lang.Integer","methodName":"rotateLeft","signature":"\u003cjava.lang.Integer: int rotateLeft(int,int)\u003e","javadoc":"/** \n * Returns the value obtained by rotating the two\u0027s complement binary representation of the specified  {@code int} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) \u003cp\u003eNote that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) \u003d\u003d rotateRight(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:  {@code rotateLeft(val,distance) \u003d\u003d rotateLeft(val, distance \u0026 0x1F)}.\n * @return the value obtained by rotating the two\u0027s complement binaryrepresentation of the specified  {@code int} value left by thespecified number of bits.\n * @since 1.5\n */\n","tf":{"freq":{"val":4,"binari":1,"last":1,"specifi":2,"complement":2,"hand":1,"order":2,"side":1,"equival":1,"reenter":1,"thespecifi":2,"valu":4,"left":8,"binaryrepresent":1,"right":3,"note":2,"ignor":1,"five":1,"multipl":1,"rotat":11,"number":2,"represent":1,"bit":4,"two":2,"obtain":2,"distanc":7,"even":1,"negat":2,"high":1,"low":1,"also":1,"shift":1},"maxFreq":11,"totalTerms":75},"loc":3}