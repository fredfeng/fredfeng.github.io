{"id":14111,"className":"java.lang.management.ManagementFactory","methodName":"newPlatformMXBeanProxy","signature":"\u003cjava.lang.management.ManagementFactory: T newPlatformMXBeanProxy(javax.management.MBeanServerConnection,java.lang.String,java.lang.Class)\u003e","javadoc":"/** \n * Returns a proxy for a platform MXBean interface of a given \u003ca href\u003d\"#MXBeanNames\"\u003eMXBean name\u003c/a\u003e that forwards its method calls through the given \u003ctt\u003eMBeanServerConnection\u003c/tt\u003e. \u003cp\u003eThis method is equivalent to: \u003cblockquote\u003e {@link java.lang.reflect.Proxy#newProxyInstance Proxy.newProxyInstance}\u003ctt\u003e(mxbeanInterface.getClassLoader(), new Class[] { mxbeanInterface }, handler)\u003c/tt\u003e \u003c/blockquote\u003e where \u003ctt\u003ehandler\u003c/tt\u003e is an  {@link java.lang.reflect.InvocationHandler InvocationHandler} to which method invocations to the MXBean interfaceare dispatched. This \u003ctt\u003ehandler\u003c/tt\u003e converts an input parameter from an MXBean data type to its mapped open type before forwarding to the \u003ctt\u003eMBeanServer\u003c/tt\u003e and converts a return value from an MXBean method call through the \u003ctt\u003eMBeanServer\u003c/tt\u003e from an open type to the corresponding return type declared in the MXBean interface. \u003cp\u003e If the MXBean is a notification emitter (i.e., it implements {@link javax.management.NotificationEmitter NotificationEmitter}), both the \u003ctt\u003emxbeanInterface\u003c/tt\u003e and \u003ctt\u003eNotificationEmitter\u003c/tt\u003e will be implemented by this proxy. \u003cp\u003e \u003cb\u003eNotes:\u003c/b\u003e \u003col\u003e \u003cli\u003eUsing an MXBean proxy is a convenience remote access to a platform MXBean of a running virtual machine.  All method calls to the MXBean proxy are forwarded to an \u003ctt\u003eMBeanServerConnection\u003c/tt\u003e where {@link java.io.IOException IOException} may be thrownwhen the communication problem occurs with the connector server. An application remotely accesses the platform MXBeans using proxy should prepare to catch \u003ctt\u003eIOException\u003c/tt\u003e as if accessing with the \u003ctt\u003eMBeanServerConnector\u003c/tt\u003e interface.\u003c/li\u003e \u003cli\u003eWhen a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch {@link java.io.InvalidObjectException InvalidObjectException}which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application. \u003c/li\u003e \u003cli\u003e {@link javax.management.MBeanServerInvocationHandler MBeanServerInvocationHandler} or its{@link javax.management.MBeanServerInvocationHandler#newProxyInstance newProxyInstance} method cannot be used to createa proxy for a platform MXBean. The proxy object created by \u003ctt\u003eMBeanServerInvocationHandler\u003c/tt\u003e does not handle the properties of the platform MXBeans described in the \u003ca href\u003d\"#MXBean\"\u003eclass specification\u003c/a\u003e. \u003c/li\u003e \u003c/ol\u003e\n * @param connection the \u003ctt\u003eMBeanServerConnection\u003c/tt\u003e to forward to.\n * @param mxbeanName the name of a platform MXBean within\u003ctt\u003econnection\u003c/tt\u003e to forward to. \u003ctt\u003emxbeanName\u003c/tt\u003e must be in the format of  {@link ObjectName ObjectName}.\n * @param mxbeanInterface the MXBean interface to be implementedby the proxy.\n * @throws IllegalArgumentException if\u003cul\u003e \u003cli\u003e\u003ctt\u003emxbeanName\u003c/tt\u003e is not with a valid {@link ObjectName ObjectName} format, or\u003c/li\u003e\u003cli\u003ethe named MXBean in the \u003ctt\u003econnection\u003c/tt\u003e is not a MXBean provided by the platform, or\u003c/li\u003e \u003cli\u003ethe named MXBean is not registered in the \u003ctt\u003eMBeanServerConnection\u003c/tt\u003e, or\u003c/li\u003e \u003cli\u003ethe named MXBean is not an instance of the given \u003ctt\u003emxbeanInterface\u003c/tt\u003e\u003c/li\u003e \u003c/ul\u003e\n * @throws java.io.IOException if a communication problemoccurred when accessing the \u003ctt\u003eMBeanServerConnection\u003c/tt\u003e.\n */\n","tf":{"freq":{"mbean":12,"implementedbi":1,"client":2,"type":4,"must":1,"open":2,"notif":4,"invalid":2,"thrownwhen":1,"given":3,"equival":1,"forward":5,"blockquot":2,"javax":3,"createa":1,"href":2,"argument":1,"platform":8,"problemoccur":1,"thrown":1,"except":7,"creat":1,"whose":1,"loader":1,"describ":1,"format":2,"interfacear":1,"provid":1,"prepar":2,"invoc":7,"instanc":5,"input":1,"machin":2,"remot":3,"will":1,"connector":2,"load":1,"properti":1,"virtual":2,"valid":1,"call":3,"connect":8,"correspond":1,"link":9,"data":1,"convert":2,"use":3,"object":7,"run":3,"lang":2,"applic":4,"version":2,"mxbean":8,"declar":1,"name":14,"map":1,"regist":1,"dispatch":1,"valu":1,"note":1,"conveni":1,"may":1,"emitt":4,"constant":1,"bean":24,"proxi":16,"manag":3,"paramet":1,"receiv":1,"problem":1,"access":5,"illeg":1,"handl":1,"differ":1,"specif":1,"communic":2,"java":5,"method":6,"server":13,"within":1,"miss":1,"design":1,"reflect":2,"occur":1,"handler":9},"maxFreq":24,"totalTerms":276},"loc":36}