{"id":13799,"className":"java.lang.CharSequence","methodName":"subSequence","signature":"\u003cjava.lang.CharSequence: java.lang.CharSequence subSequence(int,int)\u003e","javadoc":"/** \n * Returns a new \u003ccode\u003eCharSequence\u003c/code\u003e that is a subsequence of this sequence. The subsequence starts with the \u003ccode\u003echar\u003c/code\u003e value at the specified index and ends with the \u003ccode\u003echar\u003c/code\u003e value at index \u003ctt\u003eend - 1\u003c/tt\u003e.  The length (in \u003ccode\u003echar\u003c/code\u003es) of the returned sequence is \u003ctt\u003eend - start\u003c/tt\u003e, so if \u003ctt\u003estart \u003d\u003d end\u003c/tt\u003e then an empty sequence is returned. \u003c/p\u003e\n * @param start   the start index, inclusive\n * @param end     the end index, exclusive\n * @return  the specified subsequence\n * @throws IndexOutOfBoundsException if \u003ctt\u003estart\u003c/tt\u003e or \u003ctt\u003eend\u003c/tt\u003e are negative, if \u003ctt\u003eend\u003c/tt\u003e is greater than \u003ctt\u003elength()\u003c/tt\u003e, or if \u003ctt\u003estart\u003c/tt\u003e is greater than \u003ctt\u003eend\u003c/tt\u003e\n */\n","tf":{"freq":{"except":1,"sub":1,"index":5,"greater":2,"specifi":2,"empti":1,"inclus":1,"start":7,"sequenc":5,"length":2,"negat":1,"valu":2,"exclus":1,"subsequ":3,"bound":1,"end":9},"maxFreq":9,"totalTerms":44},"loc":0}