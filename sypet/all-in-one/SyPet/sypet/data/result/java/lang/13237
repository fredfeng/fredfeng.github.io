{"id":13237,"className":"java.lang.Float","methodName":"compareTo","signature":"\u003cjava.lang.Float: int compareTo(java.lang.Float)\u003e","javadoc":"/** \n * Compares two  {@code Float} objects numerically.  There aretwo ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators ( {@code \u003c, \u003c\u003d, \u003d\u003d, \u003e\u003d, \u003e}) when applied to primitive  {@code float} values:\u003cul\u003e\u003cli\u003e {@code Float.NaN} is considered by this method tobe equal to itself and greater than all other {@code float} values(including  {@code Float.POSITIVE_INFINITY}). \u003cli\u003e {@code 0.0f} is considered by this method to be greaterthan  {@code -0.0f}. \u003c/ul\u003e This ensures that the \u003ci\u003enatural ordering\u003c/i\u003e of  {@code Float}objects imposed by this method is \u003ci\u003econsistent with equals\u003c/i\u003e.\n * @param anotherFloat   the {@code Float} to be compared.\n * @return  the value {@code 0} if {@code anotherFloat} isnumerically equal to this  {@code Float}; a value less than  {@code 0} if this {@code Float}is numerically less than  {@code anotherFloat}; and a value greater than  {@code 0} if this{@code Float} is numerically greater than{@code anotherFloat}.\n * @since   1.2\n * @see Comparable#compareTo(Object)\n */\n","tf":{"freq":{"primit":1,"greater":3,"way":1,"natur":1,"languag":1,"perform":2,"anoth":4,"object":3,"consid":2,"ensur":1,"order":1,"oper":1,"valu":5,"tobe":1,"less":2,"aretwo":1,"includ":1,"consist":1,"numer":4,"equal":3,"comparison":2,"greaterthan":1,"impos":1,"differ":1,"two":1,"appli":1,"isnumer":1,"java":1,"method":4,"compar":5},"maxFreq":5,"totalTerms":57},"loc":3}