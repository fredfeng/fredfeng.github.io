{"id":14478,"className":"java.lang.invoke.MethodHandles","methodName":"catchException","signature":"\u003cjava.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)\u003e","javadoc":"/** \n * Makes a method handle which adapts a target method handle, by running it inside an exception handler. If the target returns normally, the adapter returns that value. If an exception matching the specified type is thrown, the fallback handle is called instead on the exception, plus the original arguments. \u003cp\u003e The target and handler must have the same corresponding argument and return types, except that handler may omit trailing arguments (similarly to the predicate in  {@link #guardWithTest guardWithTest}). Also, the handler must have an extra leading parameter of  {@code exType} or a supertype.\u003cp\u003e Here is pseudocode for the resulting adapter: \u003cblockquote\u003e\u003cpre\u003e T target(A..., B...); T handler(ExType, A...); T adapter(A... a, B... b) { try { return target(a..., b...); } catch (ExType ex) { return handler(ex, a...); } } \u003c/pre\u003e\u003c/blockquote\u003e Note that the saved arguments ( {@code a...} in the pseudocode) cannotbe modified by execution of the target, and so are passed unchanged from the caller to the handler, if the handler is invoked. \u003cp\u003e The target and handler must return the same type, even if the handler always throws.  (This might happen, for instance, because the handler is simulating a  {@code finally} clause).To create such a throwing handler, compose the handler creation logic with  {@link #throwException throwException}, in order to create a method handle of the correct return type.\n * @param target method handle to call\n * @param exType the type of exception which the handler will catch\n * @param handler method handle to call if a matching exception is thrown\n * @return method handle which incorporates the specified try/catch logic\n * @throws NullPointerException if any argument is null\n * @throws IllegalArgumentException if {@code handler} does not acceptthe given exception type, or if the method handle types do not match in their return types and their corresponding parameters\n */\n","tf":{"freq":{"save":1,"test":2,"incorpor":1,"normal":1,"lead":1,"type":12,"must":3,"specifi":2,"given":1,"correct":1,"blockquot":2,"trail":1,"happen":1,"argument":6,"plus":1,"thrown":2,"except":12,"unchang":1,"cannotb":1,"creat":2,"alway":1,"invok":1,"extra":1,"logic":2,"instanc":1,"fallback":1,"simul":1,"will":1,"pointer":1,"even":1,"match":3,"execut":1,"make":1,"caller":1,"creation":1,"might":1,"call":3,"result":1,"correspond":2,"link":2,"adapt":4,"run":1,"pseudocod":2,"order":1,"guard":2,"valu":1,"acceptth":1,"note":1,"similar":1,"may":1,"supertyp":1,"compos":1,"origin":1,"paramet":2,"predic":1,"claus":1,"illeg":1,"handl":8,"pass":1,"omit":1,"pre":2,"instead":1,"target":8,"modifi":1,"method":7,"insid":1,"also":1,"handler":16},"maxFreq":16,"totalTerms":151},"loc":20}