{"id":13482,"className":"java.lang.Long","methodName":"parseLong","signature":"\u003cjava.lang.Long: long parseLong(java.lang.String,int)\u003e","javadoc":"/** \n * Parses the string argument as a signed  {@code long} in theradix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether  {@link java.lang.Character#digit(char,int)} returnsa nonnegative value), except that the first character may be an ASCII minus sign  {@code \u0027-\u0027} (\u003ccode\u003e\u0027\u0026#92;u002D\u0027\u003c/code\u003e) toindicate a negative value or an ASCII plus sign  {@code \u0027+\u0027}(\u003ccode\u003e\u0027\u0026#92;u002B\u0027\u003c/code\u003e) to indicate a positive value. The resulting  {@code long} value is returned.\u003cp\u003eNote that neither the character  {@code L}(\u003ccode\u003e\u0027\u0026#92;u004C\u0027\u003c/code\u003e) nor  {@code l}(\u003ccode\u003e\u0027\u0026#92;u006C\u0027\u003c/code\u003e) is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code - except that either {@code L} or {@code l} may appear as a digit for aradix greater than 22. \u003cp\u003eAn exception of type  {@code NumberFormatException} isthrown if any of the following situations occurs: \u003cul\u003e \u003cli\u003eThe first argument is  {@code null} or is a string oflength zero. \u003cli\u003eThe  {@code radix} is either smaller than {@link java.lang.Character#MIN_RADIX} or larger than {@link java.lang.Character#MAX_RADIX}. \u003cli\u003eAny character of the string is not a digit of the specified radix, except that the first character may be a minus sign {@code \u0027-\u0027} (\u003ccode\u003e\u0027\u0026#92;u002d\u0027\u003c/code\u003e) or plus sign {@code \u0027+\u0027} (\u003ccode\u003e\u0027\u0026#92;u002B\u0027\u003c/code\u003e) provided that the string islonger than length 1. \u003cli\u003eThe value represented by the string is not a value of type {@code long}. \u003c/ul\u003e \u003cp\u003eExamples: \u003cblockquote\u003e\u003cpre\u003e parseLong(\"0\", 10) returns 0L parseLong(\"473\", 10) returns 473L parseLong(\"+42\", 10) returns 42L parseLong(\"-0\", 10) returns 0L parseLong(\"-FF\", 16) returns -255L parseLong(\"1100110\", 2) returns 102L parseLong(\"99\", 8) throws a NumberFormatException parseLong(\"Hazelnut\", 10) throws a NumberFormatException parseLong(\"Hazelnut\", 36) returns 1356099454469L \u003c/pre\u003e\u003c/blockquote\u003e\n * @param s       the {@code String} containing the{@code long} representation to be parsed.\n * @param radix   the radix to be used while parsing {@code s}.\n * @return     the {@code long} represented by the string argument inthe specified radix.\n * @throws NumberFormatException  if the string does not contain aparsable  {@code long}.\n */\n","tf":{"freq":{"appear":2,"greater":1,"second":1,"permit":2,"languag":1,"zero":1,"type":3,"whether":1,"must":1,"situat":1,"specifi":4,"toindic":1,"blockquot":2,"follow":1,"argument":4,"plus":2,"except":8,"minus":2,"charact":8,"apars":1,"number":4,"format":4,"provid":1,"sign":5,"digit":4,"aradix":1,"program":1,"contain":2,"determin":1,"negat":1,"sourc":1,"posit":1,"result":1,"link":3,"use":1,"hazelnut":2,"lang":3,"smaller":1,"isthrown":1,"inth":1,"theradix":1,"indic":2,"length":1,"valu":6,"note":1,"end":1,"may":3,"returnsa":1,"islong":1,"repres":2,"larger":1,"represent":1,"neither":1,"either":2,"pre":2,"nonneg":1,"radix":6,"string":10,"exampl":1,"oflength":1,"java":4,"first":3,"pars":13,"occur":1},"maxFreq":13,"totalTerms":152},"loc":55}