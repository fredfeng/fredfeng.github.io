{"id":14485,"className":"java.lang.invoke.MutableCallSite","methodName":"syncAll","signature":"\u003cjava.lang.invoke.MutableCallSite: void syncAll(java.lang.invoke.MutableCallSite[])\u003e","javadoc":"/** \n * Performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites. \u003cp\u003e This operation does not reverse any calls that have already started on an old target value. (Java supports  {@linkplain java.lang.Object#wait() forward time travel} only.)\u003cp\u003e The overall effect is to force all future readers of each call site\u0027s target to accept the most recently stored value. (\"Most recently\" is reckoned relative to the  {@code syncAll} itself.)Conversely, the  {@code syncAll} call may block until all readers have(somehow) decached all previous versions of each call site\u0027s target. \u003cp\u003e To avoid race conditions, calls to  {@code setTarget} and {@code syncAll}should generally be performed under some sort of mutual exclusion. Note that reader threads may observe an updated target as early as the  {@code setTarget} call that install the value(and before the  {@code syncAll} that confirms the value).On the other hand, reader threads may observe previous versions of the target until the  {@code syncAll} call returns(and after the  {@code setTarget} that attempts to convey the updated version).\u003cp\u003e This operation is likely to be expensive and should be used sparingly. If possible, it should be buffered for batch processing on sets of call sites. \u003cp\u003e If  {@code sites} contains a null element,a  {@code NullPointerException} will be raised.In this case, some non-null elements in the array may be processed before the method returns abnormally. Which elements these are (if any) is implementation-dependent. \u003ch3\u003eJava Memory Model details\u003c/h3\u003e In terms of the Java Memory Model, this operation performs a synchronization action which is comparable in effect to the writing of a volatile variable by the current thread, and an eventual volatile read by every other thread that may access one of the affected call sites. \u003cp\u003e The following effects are apparent, for each individual call site  {@code S}: \u003cul\u003e \u003cli\u003eA new volatile variable  {@code V} is created, and written by the current thread.As defined by the JMM, this write is a global synchronization event. \u003cli\u003eAs is normal with thread-local ordering of write events, every action already performed by the current thread is taken to happen before the volatile write to  {@code V}. (In some implementations, this means that the current thread performs a global release operation.) \u003cli\u003eSpecifically, the write to the current target of  {@code S} istaken to happen before the volatile write to  {@code V}. \u003cli\u003eThe volatile write to  {@code V} is placed(in an implementation specific manner) in the global synchronization order. \u003cli\u003eConsider an arbitrary thread  {@code T} (other than the current thread).If  {@code T} executes a synchronization action {@code A}after the volatile write to  {@code V} (in the global synchronization order),it is therefore required to see either the current target of  {@code S}, or a later write to that target, if it executes a read on the target of  {@code S}. (This constraint is called \"synchronization-order consistency\".) \u003cli\u003eThe JMM specifically allows optimizing compilers to elide reads or writes of variables that are known to be useless. Such elided reads and writes have no effect on the happens-before relation.  Regardless of this fact, the volatile  {@code V}will not be elided, even though its written value is indeterminate and its read value is not used. \u003c/ul\u003e Because of the last point, the implementation behaves as if a volatile read of  {@code V} were performed by {@code T}immediately after its action  {@code A}.  In the local ordering of actions in  {@code T}, this read happens before any future read of the target of  {@code S}.  It is as if the implementation arbitrarily picked a read of  {@code S}\u0027s target by  {@code T}, and forced a read of  {@code V} to precede it,thereby ensuring communication of the new target value. \u003cp\u003e As long as the constraints of the Java Memory Model are obeyed, implementations may delay the completion of a  {@code syncAll}operation while other threads ( {@code T} above) continue touse previous values of  {@code S}\u0027s target. However, implementations are (as always) encouraged to avoid livelock, and to eventually require all threads to take account of the updated target. \u003cp style\u003d\"font-size:smaller;\"\u003e \u003cem\u003eDiscussion:\u003c/em\u003e For performance reasons,  {@code syncAll} is not a virtual methodon a single call site, but rather applies to a set of call sites. Some implementations may incur a large fixed overhead cost for processing one or more synchronization operations, but a small incremental cost for each additional call site. In any case, this operation is likely to be costly, since other threads may have to be somehow interrupted in order to make them notice the updated target value. However, it may be observed that a single call to synchronize several sites has the same formal effect as many calls, each on just one of the sites. \u003cp style\u003d\"font-size:smaller;\"\u003e \u003cem\u003eImplementation Note:\u003c/em\u003e Simple implementations of  {@code MutableCallSite} may usea volatile variable for the target of a mutable call site. In such an implementation, the  {@code syncAll} method can be a no-op,and yet it will conform to the JMM behavior documented above.\n * @param sites an array of call sites to be synchronized\n * @throws NullPointerException if the {@code sites} array reference is nullor the array contains a null\n */\n","tf":{"freq":{"memori":3,"store":1,"singl":2,"reason":1,"somehow":2,"behav":1,"accept":1,"variabl":4,"therebi":1,"elid":3,"wait":1,"nullor":1,"avoid":2,"convey":1,"time":1,"overhead":1,"observ":3,"given":1,"refer":1,"forward":1,"oper":8,"event":2,"encourag":1,"thread":14,"relat":2,"place":1,"happen":4,"mani":1,"increment":1,"element":3,"support":1,"alway":1,"like":2,"non":1,"obey":1,"istaken":1,"start":1,"discuss":1,"will":3,"pointer":2,"load":1,"delay":1,"small":1,"compil":1,"array":5,"virtual":1,"linkplain":1,"sort":1,"eventu":2,"behavior":1,"constraint":2,"block":1,"use":2,"therefor":1,"useless":1,"consid":1,"ensur":1,"version":3,"document":1,"revers":1,"sync":9,"written":2,"write":11,"current":7,"rather":1,"pick":1,"forc":3,"note":2,"complet":1,"regardless":1,"individu":1,"just":1,"site":18,"addit":1,"may":10,"previous":4,"later":1,"access":1,"process":3,"abnorm":1,"preced":1,"point":1,"either":1,"fact":1,"mutual":1,"communic":1,"conform":1,"incur":1,"larg":1,"account":1,"alreadi":2,"method":2,"tous":1,"confirm":1,"yet":1,"old":1,"detail":1,"simpl":1,"last":1,"mutabl":2,"normal":1,"possibl":1,"perform":7,"usea":1,"travel":1,"notic":1,"race":1,"earli":1,"though":1,"buffer":1,"arbitrari":1,"requir":2,"arbitrarili":1,"action":5,"taken":1,"howev":2,"everi":2,"follow":1,"except":2,"consist":1,"creat":1,"font":2,"global":4,"spare":1,"methodon":1,"cost":3,"continu":1,"size":2,"formal":1,"appli":1,"reader":4,"updat":4,"batch":1,"contain":2,"even":1,"known":1,"execut":2,"make":1,"compar":1,"attempt":1,"defin":1,"decach":1,"call":21,"model":3,"allow":1,"one":3,"convers":1,"object":1,"recent":2,"lang":1,"affect":1,"smaller":2,"hand":1,"rais":1,"style":2,"releas":1,"order":6,"fix":1,"indetermin":1,"mean":1,"read":10,"immedi":1,"valu":10,"exclus":1,"condit":1,"futur":2,"optim":1,"depend":1,"instal":1,"livelock":1,"appar":1,"cach":1,"sever":1,"interrupt":1,"general":1,"away":1,"specif":3,"reckon":1,"effect":5,"term":1,"take":1,"target":20,"expens":1,"manner":1,"java":5,"local":2},"maxFreq":21,"totalTerms":410},"loc":8}