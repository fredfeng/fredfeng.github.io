{"id":13423,"className":"java.lang.String","methodName":"compareToIgnoreCase","signature":"\u003cjava.lang.String: int compareToIgnoreCase(java.lang.String)\u003e","javadoc":"/** \n * Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of calling \u003ccode\u003ecompareTo\u003c/code\u003e with normalized versions of the strings where case differences have been eliminated by calling \u003ccode\u003eCharacter.toLowerCase(Character.toUpperCase(character))\u003c/code\u003e on each character. \u003cp\u003e Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides \u003cem\u003ecollators\u003c/em\u003e to allow locale-sensitive ordering.\n * @param str   the \u003ccode\u003eString\u003c/code\u003e to be compared.\n * @return  a negative integer, zero, or a positive integer as thespecified String is greater than, equal to, or less than this String, ignoring case considerations.\n * @see java.text.Collator#compare(String,String)\n * @since   1.2\n */\n","tf":{"freq":{"call":2,"result":1,"greater":1,"lower":1,"allow":1,"collat":2,"normal":1,"zero":1,"version":1,"upper":1,"order":2,"consider":1,"unsatisfactori":1,"thespecifi":1,"less":1,"note":1,"sensit":1,"text":2,"ignor":3,"whose":1,"charact":4,"equal":1,"lexicograph":1,"provid":1,"elimin":1,"sign":1,"differ":2,"two":1,"str":1,"take":1,"string":7,"will":1,"account":1,"negat":1,"java":2,"method":2,"certain":1,"local":3,"posit":1,"integ":3,"compar":5},"maxFreq":7,"totalTerms":67},"loc":3}