{"id":13891,"className":"java.lang.Object","methodName":"equals","signature":"\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Indicates whether some other object is \"equal to\" this one. \u003cp\u003e The  {@code equals} method implements an equivalence relationon non-null object references: \u003cul\u003e \u003cli\u003eIt is \u003ci\u003ereflexive\u003c/i\u003e: for any non-null reference value {@code x},  {@code x.equals(x)} should return{@code true}. \u003cli\u003eIt is \u003ci\u003esymmetric\u003c/i\u003e: for any non-null reference values {@code x} and {@code y},  {@code x.equals(y)}should return  {@code true} if and only if{@code y.equals(x)} returns {@code true}. \u003cli\u003eIt is \u003ci\u003etransitive\u003c/i\u003e: for any non-null reference values {@code x},  {@code y}, and  {@code z}, if {@code x.equals(y)} returns {@code true} and{@code y.equals(z)} returns {@code true}, then {@code x.equals(z)} should return {@code true}. \u003cli\u003eIt is \u003ci\u003econsistent\u003c/i\u003e: for any non-null reference values {@code x} and {@code y}, multiple invocations of {@code x.equals(y)} consistently return {@code true}or consistently return  {@code false}, provided no information used in  {@code equals} comparisons on theobjects is modified. \u003cli\u003eFor any non-null reference value  {@code x}, {@code x.equals(null)} should return {@code false}. \u003c/ul\u003e \u003cp\u003e The  {@code equals} method for class {@code Object} implementsthe most discriminating possible equivalence relation on objects; that is, for any non-null reference values  {@code x} and{@code y}, this method returns  {@code true} if and onlyif  {@code x} and {@code y} refer to the same object( {@code x \u003d\u003d y} has the value {@code true}). \u003cp\u003e Note that it is generally necessary to override the  {@code hashCode}method whenever this method is overridden, so as to maintain the general contract for the  {@code hashCode} method, which statesthat equal objects must have equal hash codes.\n * @param obj   the reference object with which to compare.\n * @return  {@code true} if this object is the same as the objargument;  {@code false} otherwise.\n * @see #hashCode()\n * @see java.util.HashMap\n */\n","tf":{"freq":{"otherwis":1,"fals":3,"overridden":1,"maintain":1,"one":1,"symmetr":1,"possibl":1,"use":1,"object":8,"necessari":1,"transit":1,"must":1,"whether":1,"implementsth":1,"indic":1,"refer":9,"equival":2,"map":1,"relat":1,"valu":7,"note":1,"whenev":1,"relationon":1,"multipl":1,"contract":1,"hash":5,"consist":3,"onlyif":1,"true":10,"objargu":1,"equal":15,"discrimin":1,"provid":1,"general":2,"invoc":1,"comparison":1,"statesthat":1,"non":7,"inform":1,"modifi":1,"java":1,"obj":1,"method":6,"theobject":1,"compar":1,"util":1,"reflex":1},"maxFreq":15,"totalTerms":112},"loc":3}