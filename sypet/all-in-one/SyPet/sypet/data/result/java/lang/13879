{"id":13879,"className":"java.lang.Runtime","methodName":"loadLibrary","signature":"\u003cjava.lang.Runtime: void loadLibrary(java.lang.String)\u003e","javadoc":"/** \n * Loads the dynamic library with the specified library name. A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner. \u003cp\u003e First, if there is a security manager, its \u003ccode\u003echeckLink\u003c/code\u003e method is called with the \u003ccode\u003elibname\u003c/code\u003e as its argument. This may result in a security exception. \u003cp\u003e The method  {@link System#loadLibrary(String)} is the conventionaland convenient means of invoking this method. If native methods are to be used in the implementation of a class, a standard strategy is to put the native code in a library file (call it \u003ccode\u003eLibFile\u003c/code\u003e) and then to put a static initializer: \u003cblockquote\u003e\u003cpre\u003e static { System.loadLibrary(\"LibFile\"); } \u003c/pre\u003e\u003c/blockquote\u003e within the class declaration. When the class is loaded and initialized, the necessary native code implementation for the native methods will then be loaded as well. \u003cp\u003e If this method is called more than once with the same library name, the second and subsequent calls are ignored.\n * @param libname   the name of the library.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckLink\u003c/code\u003e method doesn\u0027t allow loading of the specified dynamic library\n * @exception UnsatisfiedLinkError  if the library does not exist.\n * @exception NullPointerException if \u003ccode\u003elibname\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n * @see java.lang.SecurityException\n * @see java.lang.SecurityManager#checkLink(java.lang.String)\n */\n","tf":{"freq":{"detail":1,"second":1,"necessari":1,"specifi":2,"file":6,"blockquot":2,"place":1,"libnam":3,"dynam":2,"argument":1,"ignor":1,"except":7,"invok":1,"done":1,"system":4,"obtain":1,"contain":1,"will":1,"pointer":1,"load":8,"unsatisfi":1,"call":4,"result":1,"put":2,"allow":1,"convent":1,"link":5,"use":1,"well":1,"lang":3,"declar":1,"conventionaland":1,"name":4,"map":1,"mean":1,"initi":2,"subsequ":1,"exist":2,"conveni":1,"may":1,"error":1,"check":3,"standard":1,"manag":3,"depend":1,"filenam":1,"librari":12,"process":1,"specif":2,"secur":6,"lib":2,"pre":2,"string":2,"strategi":1,"java":3,"manner":1,"method":7,"local":1,"within":1,"first":1},"maxFreq":12,"totalTerms":133},"loc":3}