{"id":13285,"className":"java.lang.SecurityManager","methodName":"checkPackageDefinition","signature":"\u003cjava.lang.SecurityManager: void checkPackageDefinition(java.lang.String)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to define classes in the package specified by the argument. \u003cp\u003e This method is used by the \u003ccode\u003eloadClass\u003c/code\u003e method of some class loaders. \u003cp\u003e This method first gets a list of restricted packages by obtaining a comma-separated list from a call to \u003ccode\u003ejava.security.Security.getProperty(\"package.definition\")\u003c/code\u003e, and checks to see if \u003ccode\u003epkg\u003c/code\u003e starts with or equals any of the restricted packages. If it does, then \u003ccode\u003echeckPermission\u003c/code\u003e gets called with the \u003ccode\u003eRuntimePermission(\"defineClassInPackage.\"+pkg)\u003c/code\u003e permission. \u003cp\u003e If this method is overridden, then \u003ccode\u003esuper.checkPackageDefinition\u003c/code\u003e should be called as the first line in the overridden method.\n * @param pkg   the package name.\n * @exception SecurityException  if the calling thread does not havepermission to define classes in the specified package.\n * @see java.lang.ClassLoader#loadClass(java.lang.String,boolean)\n * @see java.security.Security#getProperty getProperty\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"defin":3,"call":5,"allow":1,"overridden":2,"line":1,"use":1,"lang":2,"specifi":2,"name":1,"thread":2,"permiss":6,"argument":1,"except":3,"comma":1,"check":6,"loader":2,"runtim":1,"pkg":3,"equal":1,"list":2,"restrict":2,"havepermiss":1,"obtain":1,"secur":7,"separ":1,"start":1,"string":1,"definit":3,"method":5,"load":2,"java":5,"properti":3,"first":2},"maxFreq":7,"totalTerms":80},"loc":39}