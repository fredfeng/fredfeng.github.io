{"id":14464,"className":"java.lang.invoke.MethodHandles","methodName":"spreadInvoker","signature":"\u003cjava.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType,int)\u003e","javadoc":"/** \n * Produces a method handle which will invoke any method handle of the given  {@code type}, with a given number of trailing arguments replaced by a single trailing  {@code Object[]} array.The resulting invoker will be a method handle with the following arguments: \u003cul\u003e \u003cli\u003ea single  {@code MethodHandle} target\u003cli\u003ezero or more leading values (counted by  {@code leadingArgCount}) \u003cli\u003ean  {@code Object[]} array containing trailing arguments\u003c/ul\u003e \u003cp\u003e The invoker will invoke its target like a call to  {@link MethodHandle#invoke invoke} withthe indicated  {@code type}. That is, if the target is exactly of the given  {@code type}, it will behave like  {@code invokeExact}; otherwise it behave as if  {@link MethodHandle#asType asType}is used to convert the target to the required  {@code type}. \u003cp\u003e The type of the returned invoker will not be the given  {@code type}, but rather will have all parameters except the first  {@code leadingArgCount}replaced by a single array of type  {@code Object[]}, which will be the final parameter. \u003cp\u003e Before invoking its target, the invoker will spread the final array, apply reference casts as necessary, and unbox and widen primitive arguments. \u003cp\u003e This method is equivalent to the following code (though it may be more efficient): \u003cp\u003e\u003cblockquote\u003e\u003cpre\u003e MethodHandle invoker \u003d MethodHandles.invoker(type); int spreadArgCount \u003d type.parameterCount() - leadingArgCount; invoker \u003d invoker.asSpreader(Object[].class, spreadArgCount); return invoker; \u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e This method throws no reflective or security exceptions.\n * @param type the desired target type\n * @param leadingArgCount number of fixed arguments, to be passed unchanged to the target\n * @return a method handle suitable for invoking any method handle of the given type\n * @throws NullPointerException if {@code type} is null\n * @throws IllegalArgumentException if {@code leadingArgCount} is not inthe range from 0 to  {@code type.parameterCount()} inclusive\n */\n","tf":{"freq":{"count":10,"singl":3,"behav":2,"suitabl":1,"lead":6,"desir":1,"zero":1,"type":16,"necessari":1,"though":1,"arg":7,"requir":1,"given":5,"refer":1,"equival":1,"rang":1,"blockquot":2,"trail":3,"exact":2,"effici":1,"follow":2,"argument":6,"except":4,"unchang":1,"invok":17,"number":2,"like":2,"appli":1,"withth":1,"cast":1,"contain":1,"will":8,"pointer":1,"spreader":1,"array":4,"otherwis":1,"result":1,"call":1,"primit":1,"link":2,"use":1,"convert":1,"object":4,"inclus":1,"inth":1,"indic":1,"fix":1,"rather":1,"valu":1,"may":1,"paramet":4,"produc":1,"illeg":1,"pass":1,"handl":10,"secur":1,"widen":1,"pre":2,"replac":2,"target":7,"method":12,"spread":4,"first":1,"unbox":1,"reflect":1},"maxFreq":17,"totalTerms":186},"loc":5}