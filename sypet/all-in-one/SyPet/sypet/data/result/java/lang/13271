{"id":13271,"className":"java.lang.SecurityManager","methodName":"checkConnect","signature":"\u003cjava.lang.SecurityManager: void checkConnect(java.lang.String,int)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to open a socket connection to the specified host and port number. \u003cp\u003e A port number of \u003ccode\u003e-1\u003c/code\u003e indicates that the calling method is attempting to determine the IP address of the specified host name. \u003cp\u003e This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eSocketPermission(host+\":\"+port,\"connect\")\u003c/code\u003e permission if the port is not equal to -1. If the port is equal to -1, then it calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eSocketPermission(host,\"resolve\")\u003c/code\u003e permission. \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkConnect\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param host   the host name port to connect to.\n * @param port   the protocol port to connect to.\n * @exception SecurityException  if the calling thread does not havepermission to open a socket connection to the specified \u003ccode\u003ehost\u003c/code\u003e and \u003ccode\u003eport\u003c/code\u003e.\n * @exception NullPointerException if the \u003ccode\u003ehost\u003c/code\u003e argument is\u003ccode\u003enull\u003c/code\u003e.\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"port":9,"attempt":1,"call":6,"allow":1,"connect":7,"overridden":1,"normal":1,"specifi":3,"open":2,"indic":1,"thread":2,"name":2,"permiss":9,"socket":4,"argument":1,"protocol":1,"except":6,"host":8,"check":6,"resolv":1,"number":2,"equal":2,"havepermiss":1,"point":1,"secur":3,"address":1,"determin":1,"pointer":1,"java":1,"method":4,"make":1},"maxFreq":9,"totalTerms":90},"loc":15}