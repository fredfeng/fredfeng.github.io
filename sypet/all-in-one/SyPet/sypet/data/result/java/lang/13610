{"id":13610,"className":"java.lang.ClassLoader","methodName":"getParent","signature":"\u003cjava.lang.ClassLoader: java.lang.ClassLoader getParent()\u003e","javadoc":"/** \n * Returns the parent class loader for delegation. Some implementations may use \u003ctt\u003enull\u003c/tt\u003e to represent the bootstrap class loader. This method will return \u003ctt\u003enull\u003c/tt\u003e in such implementations if this class loader\u0027s parent is the bootstrap class loader. \u003cp\u003e If a security manager is present, and the invoker\u0027s class loader is not \u003ctt\u003enull\u003c/tt\u003e and is not an ancestor of this class loader, then this method invokes the security manager\u0027s  {@link SecurityManager#checkPermission(java.security.Permission) \u003ctt\u003echeckPermission\u003c/tt\u003e} method with a {@link RuntimePermission#RuntimePermission(String) \u003ctt\u003eRuntimePermission(\"getClassLoader\")\u003c/tt\u003e} permission to verifyaccess to the parent class loader is permitted.  If not, a \u003ctt\u003eSecurityException\u003c/tt\u003e will be thrown.  \u003c/p\u003e\n * @return  The parent \u003ctt\u003eClassLoader\u003c/tt\u003e\n * @throws SecurityException If a security manager exists and its \u003ctt\u003echeckPermission\u003c/tt\u003e method doesn\u0027t allow access to this class loader\u0027s parent class loader.\n * @since  1.2\n */\n","tf":{"freq":{"bootstrap":2,"allow":1,"link":2,"permit":1,"use":1,"verifyaccess":1,"deleg":1,"permiss":8,"exist":1,"ancestor":1,"may":1,"except":2,"thrown":1,"check":3,"repres":1,"manag":4,"loader":11,"invok":2,"runtim":3,"parent":6,"access":1,"present":1,"secur":7,"string":1,"will":2,"method":4,"java":1},"maxFreq":11,"totalTerms":70},"loc":12}