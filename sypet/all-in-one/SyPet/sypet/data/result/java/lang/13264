{"id":13264,"className":"java.lang.SecurityManager","methodName":"checkLink","signature":"\u003cjava.lang.SecurityManager: void checkLink(java.lang.String)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to dynamic link the library code specified by the string argument file. The argument is either a simple library name or a complete filename. \u003cp\u003e This method is invoked for the current security manager by methods \u003ccode\u003eload\u003c/code\u003e and \u003ccode\u003eloadLibrary\u003c/code\u003e of class \u003ccode\u003eRuntime\u003c/code\u003e. \u003cp\u003e This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eRuntimePermission(\"loadLibrary.\"+lib)\u003c/code\u003e permission. \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkLink\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param lib   the name of the library.\n * @exception SecurityException if the calling thread does not havepermission to dynamically link the library.\n * @exception NullPointerException if the \u003ccode\u003elib\u003c/code\u003e argument is\u003ccode\u003enull\u003c/code\u003e.\n * @see java.lang.Runtime#load(java.lang.String)\n * @see java.lang.Runtime#loadLibrary(java.lang.String)\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"call":4,"allow":1,"simpl":1,"overridden":1,"normal":1,"link":4,"lang":4,"specifi":1,"file":1,"thread":2,"name":2,"permiss":6,"current":1,"dynam":2,"complet":1,"argument":3,"except":6,"check":5,"invok":1,"manag":1,"runtim":4,"filenam":1,"librari":7,"havepermiss":1,"point":1,"either":1,"lib":3,"secur":4,"string":3,"pointer":1,"java":5,"method":5,"load":5,"make":1},"maxFreq":7,"totalTerms":90},"loc":6}