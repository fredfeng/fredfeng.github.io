{"id":13582,"className":"java.lang.Throwable","methodName":"getCause","signature":"\u003cjava.lang.Throwable: java.lang.Throwable getCause()\u003e","javadoc":"/** \n * Returns the cause of this throwable or  {@code null} if thecause is nonexistent or unknown.  (The cause is the throwable that caused this throwable to get thrown.) \u003cp\u003eThis implementation returns the cause that was supplied via one of the constructors requiring a  {@code Throwable}, or that was set after creation with the  {@link #initCause(Throwable)} method.  While it istypically unnecessary to override this method, a subclass can override it to return a cause set by some other means.  This is appropriate for a \"legacy chained throwable\" that predates the addition of chained exceptions to  {@code Throwable}.  Note that it is \u003ci\u003enot\u003c/i\u003e necessary to override any of the  {@code PrintStackTrace} methods,all of which invoke the  {@code getCause} method to determine thecause of a throwable.\n * @return  the cause of this throwable or {@code null} if thecause is nonexistent or unknown.\n * @since 1.4\n */\n","tf":{"freq":{"creation":1,"via":1,"one":1,"link":1,"legaci":1,"predat":1,"necessari":1,"requir":1,"mean":1,"note":1,"constructor":1,"thecaus":3,"addit":1,"except":1,"thrown":1,"nonexist":2,"invok":1,"trace":1,"init":1,"suppli":1,"unknown":2,"istyp":1,"print":1,"caus":9,"chain":2,"appropri":1,"determin":1,"unnecessari":1,"subclass":1,"method":4,"throwabl":9,"stack":1},"maxFreq":9,"totalTerms":56},"loc":3}