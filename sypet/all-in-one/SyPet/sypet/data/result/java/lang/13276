{"id":13276,"className":"java.lang.SecurityManager","methodName":"checkMulticast","signature":"\u003cjava.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to use (join/leave/send/receive) IP multicast. \u003cp\u003e This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003ejava.net.SocketPermission(maddr.getHostAddress(), \"accept,connect\")\u003c/code\u003e permission. \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkMulticast\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param maddr  Internet group address to be used.\n * @param ttl        value in use, if it is multicast send.Note: this particular implementation does not use the ttl parameter.\n * @exception SecurityException  if the calling thread is not allowed touse (join/leave/send/receive) IP multicast.\n * @exception NullPointerException if the address argument is\u003ccode\u003enull\u003c/code\u003e.\n * @since      JDK1.1\n * @deprecated Use #checkPermission(java.security.Permission) instead\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"call":4,"deprec":1,"send":3,"allow":2,"connect":1,"overridden":1,"accept":1,"normal":1,"particular":1,"use":5,"multicast":5,"net":1,"thread":2,"permiss":8,"socket":1,"valu":1,"note":1,"argument":1,"except":6,"host":1,"check":6,"paramet":1,"receiv":2,"join":2,"ttl":2,"maddr":2,"point":1,"secur":4,"address":3,"instead":1,"leav":2,"pointer":1,"method":3,"java":3,"group":1,"tous":1,"internet":1,"make":1},"maxFreq":8,"totalTerms":84},"loc":8}