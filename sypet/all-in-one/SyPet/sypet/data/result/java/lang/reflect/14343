{"id":14343,"className":"java.lang.reflect.AccessibleObject","methodName":"setAccessible","signature":"\u003cjava.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)\u003e","javadoc":"/** \n * Convenience method to set the  {@code accessible} flag for anarray of objects with a single security check (for efficiency). \u003cp\u003eFirst, if there is a security manager, its {@code checkPermission} method is called with a{@code ReflectPermission(\"suppressAccessChecks\")} permission.\u003cp\u003eA  {@code SecurityException} is raised if {@code flag} is{@code true} but accessibility of any of the elements of the input{@code array} may not be changed (for example, if the elementobject is a  {@link Constructor} object for the class {@link java.lang.Class}).  In the event of such a SecurityException, the accessibility of objects is set to  {@code flag} for array elementsupto (and excluding) the element for which the exception occurred; the accessibility of elements beyond (and including) the element for which the exception occurred is unchanged.\n * @param array the array of AccessibleObjects\n * @param flag  the new value for the {@code accessible} flagin each object\n * @throws SecurityException if the request is denied.\n * @see SecurityManager#checkPermission\n * @see java.lang.RuntimePermission\n */\n","tf":{"freq":{"call":1,"singl":1,"link":2,"exclud":1,"object":5,"lang":2,"beyond":1,"rais":1,"event":1,"request":1,"permiss":5,"valu":1,"effici":1,"flagin":1,"deni":1,"conveni":1,"constructor":1,"element":4,"except":5,"may":1,"unchang":1,"includ":1,"anarray":1,"check":4,"manag":2,"runtim":1,"true":1,"access":8,"elementsupto":1,"elementobject":1,"input":1,"secur":6,"flag":4,"exampl":1,"java":2,"method":2,"chang":1,"first":1,"reflect":1,"suppress":1,"occur":2,"array":4},"maxFreq":8,"totalTerms":84},"loc":7}