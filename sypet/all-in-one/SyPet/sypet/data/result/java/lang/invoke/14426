{"id":14426,"className":"java.lang.invoke.MethodHandle","methodName":"invoke","signature":"\u003cjava.lang.invoke.MethodHandle: java.lang.Object invoke(java.lang.Object[])\u003e","javadoc":"/** \n * Invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values. \u003cp\u003e If the call site\u0027s symbolic type descriptor exactly matches this method handle\u0027s  {@link #type type}, the call proceeds as if by  {@link #invokeExact invokeExact}. \u003cp\u003e Otherwise, the call proceeds as if this method handle were first adjusted by calling  {@link #asType asType} to adjust this method handleto the required type, and then the call proceeds as if by {@link #invokeExact invokeExact} on the adjusted method handle.\u003cp\u003e There is no guarantee that the  {@code asType} call is actually made.If the JVM can predict the results of making the call, it may perform adaptations directly on the caller\u0027s arguments, and call the target method handle according to its own exact type. \u003cp\u003e The resolved type descriptor at the call site of  {@code invoke} mustbe a valid argument to the receivers  {@code asType} method.In particular, the caller must specify the same argument arity as the callee\u0027s type, if the callee is not a  {@linkplain #asVarargsCollector variable arity collector}. \u003cp\u003e When this method is observed via the Core Reflection API, it will appear as a single native method, taking an object array and returning an object. If this native method is invoked directly via {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}, via JNI, or indirectly via  {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}, it will throw an  {@code UnsupportedOperationException}.\n * @throws WrongMethodTypeException if the target\u0027s type cannot be adjusted to the caller\u0027s symbolic type descriptor\n * @throws ClassCastException if the target\u0027s type can be adjusted to the caller, but a reference cast fails\n * @throws Throwable anything thrown by the underlying method propagates unchanged through the method handle call\n */\n","tf":{"freq":{"anyth":1,"unsupport":1,"appear":1,"via":4,"vararg":1,"singl":1,"variabl":1,"particular":1,"perform":2,"type":16,"lookup":2,"must":1,"specifi":1,"observ":1,"requir":1,"fail":1,"refer":1,"oper":1,"exact":6,"propag":1,"proceed":3,"option":1,"argument":4,"thrown":1,"except":3,"unchang":1,"symbol":2,"invok":11,"resolv":1,"mustb":1,"cast":2,"will":2,"match":1,"make":1,"calle":2,"array":1,"otherwis":1,"caller":5,"call":10,"result":1,"valid":1,"linkplain":1,"allow":1,"descriptor":4,"link":6,"handleto":1,"convers":1,"made":1,"object":2,"adapt":1,"lang":3,"indirect":1,"collector":2,"unreflect":2,"adjust":5,"valu":1,"site":2,"direct":2,"ariti":2,"may":1,"guarante":1,"receiv":1,"accord":1,"handl":7,"take":1,"predict":1,"target":3,"actual":1,"wrong":1,"java":3,"core":1,"method":16,"throwabl":1,"first":1,"reflect":3},"maxFreq":16,"totalTerms":181},"loc":0}