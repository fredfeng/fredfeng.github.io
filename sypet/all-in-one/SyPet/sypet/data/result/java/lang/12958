{"id":12958,"className":"java.lang.System","methodName":"getenv","signature":"\u003cjava.lang.System: java.lang.String getenv(java.lang.String)\u003e","javadoc":"/** \n * Gets the value of the specified environment variable. An environment variable is a system-dependent external named value. \u003cp\u003eIf a security manager exists, its {@link SecurityManager#checkPermission checkPermission}method is called with a \u003ccode\u003e {@link RuntimePermission}(\"getenv.\"+name)\u003c/code\u003e permission.  This may result in a  {@link SecurityException}being thrown.  If no exception is thrown the value of the variable \u003ccode\u003ename\u003c/code\u003e is returned. \u003cp\u003e\u003ca name\u003d\"EnvironmentVSSystemProperties\"\u003e\u003ci\u003eSystem properties\u003c/i\u003e and \u003ci\u003eenvironment variables\u003c/i\u003e\u003c/a\u003e are both conceptually mappings between names and values.  Both mechanisms can be used to pass user-defined information to a Java process.  Environment variables have a more global effect, because they are visible to all descendants of the process which defines them, not just the immediate Java subprocess. They can have subtly different semantics, such as case insensitivity, on different operating systems.  For these reasons, environment variables are more likely to have unintended side effects.  It is best to use system properties where possible.  Environment variables should be used when a global effect is desired, or when an external system interface requires an environment variable (such as \u003ccode\u003ePATH\u003c/code\u003e). \u003cp\u003eOn UNIX systems the alphabetic case of \u003ccode\u003ename\u003c/code\u003e is typically significant, while on Microsoft Windows systems it is typically not.  For example, the expression \u003ccode\u003eSystem.getenv(\"FOO\").equals(System.getenv(\"foo\"))\u003c/code\u003e is likely to be true on Microsoft Windows.\n * @param name the name of the environment variable\n * @return the string value of the variable, or \u003ccode\u003enull\u003c/code\u003eif the variable is not defined in the system environment\n * @throws NullPointerException if \u003ccode\u003ename\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @throws SecurityException if a security manager exists and its {@link SecurityManager#checkPermission checkPermission}method doesn\u0027t allow access to the environment variable \u003ccode\u003ename\u003c/code\u003e\n * @see #getenv()\n * @see ProcessBuilder#environment()\n */\n","tf":{"freq":{"subprocess":1,"reason":1,"variabl":12,"possibl":1,"foo":1,"desir":1,"specifi":1,"requir":1,"oper":1,"permiss":6,"thrown":2,"except":4,"runtim":1,"global":2,"builder":1,"signific":1,"environ":12,"like":2,"inform":1,"system":11,"window":2,"pointer":1,"alphabet":1,"properti":3,"result":1,"call":1,"defin":3,"allow":1,"visibl":1,"link":4,"typic":2,"use":3,"unintend":1,"express":1,"microsoft":2,"subt":1,"side":1,"extern":2,"name":10,"semant":1,"map":1,"best":1,"valu":5,"immedi":1,"exist":2,"getenv":5,"just":1,"may":1,"check":4,"depend":1,"manag":4,"true":1,"equal":1,"conceptu":1,"access":1,"pass":1,"process":3,"differ":2,"insensit":1,"secur":6,"effect":3,"mechan":1,"string":1,"exampl":1,"method":2,"java":2,"descend":1,"user":1},"maxFreq":12,"totalTerms":160},"loc":8}