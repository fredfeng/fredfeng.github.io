{"id":13270,"className":"java.lang.SecurityManager","methodName":"checkDelete","signature":"\u003cjava.lang.SecurityManager: void checkDelete(java.lang.String)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to delete the specified file. \u003cp\u003e This method is invoked for the current security manager by the \u003ccode\u003edelete\u003c/code\u003e method of class \u003ccode\u003eFile\u003c/code\u003e. \u003cp\u003e This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eFilePermission(file,\"delete\")\u003c/code\u003e permission. \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkDelete\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param file   the system-dependent filename.\n * @exception SecurityException if the calling thread does nothave permission to delete the file.\n * @exception NullPointerException if the \u003ccode\u003efile\u003c/code\u003e argument is\u003ccode\u003enull\u003c/code\u003e.\n * @see java.io.File#delete()\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"call":4,"allow":1,"delet":7,"overridden":1,"normal":1,"specifi":1,"file":8,"thread":2,"current":1,"permiss":7,"argument":1,"except":6,"check":5,"nothav":1,"invok":1,"manag":1,"depend":1,"filenam":1,"point":1,"system":1,"secur":4,"pointer":1,"java":2,"method":5,"make":1},"maxFreq":8,"totalTerms":65},"loc":4}