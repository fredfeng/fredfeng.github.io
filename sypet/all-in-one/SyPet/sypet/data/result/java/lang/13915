{"id":13915,"className":"java.lang.Thread","methodName":"stop","signature":"\u003cjava.lang.Thread: void stop(java.lang.Throwable)\u003e","javadoc":"/** \n * Forces the thread to stop executing. \u003cp\u003e If there is a security manager installed, the \u003ccode\u003echeckAccess\u003c/code\u003e method of this thread is called, which may result in a \u003ccode\u003eSecurityException\u003c/code\u003e being raised (in the current thread). \u003cp\u003e If this thread is different from the current thread (that is, the current thread is trying to stop a thread other than itself) or \u003ccode\u003eobj\u003c/code\u003e is not an instance of \u003ccode\u003eThreadDeath\u003c/code\u003e, the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method (with the \u003ccode\u003eRuntimePermission(\"stopThread\")\u003c/code\u003e argument) is called in addition. Again, this may result in throwing a \u003ccode\u003eSecurityException\u003c/code\u003e (in the current thread). \u003cp\u003e If the argument \u003ccode\u003eobj\u003c/code\u003e is null, a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown (in the current thread). \u003cp\u003e The thread represented by this thread is forced to stop whatever it is doing abnormally and to throw the \u003ccode\u003eThrowable\u003c/code\u003e object \u003ccode\u003eobj\u003c/code\u003e as an exception. This is an unusual action to take; normally, the \u003ccode\u003estop\u003c/code\u003e method that takes no arguments should be used. \u003cp\u003e It is permitted to stop a thread that has not yet been started. If the thread is eventually started, it immediately terminates.\n * @param obj   the Throwable object to be thrown.\n * @exception SecurityException  if the current thread cannot modifythis thread.\n * @throws NullPointerException if obj is \u003ctt\u003enull\u003c/tt\u003e.\n * @see #interrupt()\n * @see #checkAccess()\n * @see #run()\n * @see #start()\n * @see #stop()\n * @see SecurityManager#checkAccess(Thread)\n * @see SecurityManager#checkPermission\n * @deprecated This method is inherently unsafe.  See {@link #stop()}for details.  An additional danger of this method is that it may be used to generate exceptions that the target thread is unprepared to handle (including checked exceptions that the thread could not possibly throw, were it not for this method). For more information, see \u003ca href\u003d\" {@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html\"\u003eWhy are Thread.stop, Thread.suspend and Thread.resume Deprecated?\u003c/a\u003e.\n */\n","tf":{"freq":{"suspend":1,"detail":1,"deprec":3,"root":1,"normal":1,"permit":1,"possibl":1,"danger":1,"thread":24,"permiss":3,"action":1,"unsaf":1,"href":1,"whatev":1,"argument":3,"except":9,"thrown":2,"death":1,"runtim":1,"instanc":1,"inform":1,"start":3,"pointer":2,"execut":1,"primit":1,"result":2,"stop":10,"call":2,"eventu":1,"concurr":1,"link":1,"unusu":1,"use":2,"object":2,"run":1,"resum":1,"technot":1,"rais":1,"current":6,"immedi":1,"unprepar":1,"forc":2,"addit":2,"may":3,"includ":1,"check":6,"repres":1,"manag":4,"instal":1,"access":3,"modifythi":1,"interrupt":1,"handl":1,"inher":1,"guid":1,"abnorm":1,"differ":1,"termin":1,"secur":7,"take":2,"generat":1,"target":1,"html":1,"obj":5,"method":6,"throwabl":2,"yet":1},"maxFreq":24,"totalTerms":157},"loc":21}