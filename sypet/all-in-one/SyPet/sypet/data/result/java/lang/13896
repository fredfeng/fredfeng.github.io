{"id":13896,"className":"java.lang.Object","methodName":"wait","signature":"\u003cjava.lang.Object: void wait(long,int)\u003e","javadoc":"/** \n * Causes the current thread to wait until another thread invokes the {@link java.lang.Object#notify()} method or the{@link java.lang.Object#notifyAll()} method for this object, orsome other thread interrupts the current thread, or a certain amount of real time has elapsed. \u003cp\u003e This method is similar to the  {@code wait} method of oneargument, but it allows finer control over the amount of time to wait for a notification before giving up. The amount of real time, measured in nanoseconds, is given by: \u003cblockquote\u003e \u003cpre\u003e 1000000*timeout+nanos\u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e In all other respects, this method does the same thing as the method  {@link #wait(long)} of one argument. In particular,{@code wait(0, 0)} means the same thing as {@code wait(0)}. \u003cp\u003e The current thread must own this object\u0027s monitor. The thread releases ownership of this monitor and waits until either of the following two conditions has occurred: \u003cul\u003e \u003cli\u003eAnother thread notifies threads waiting on this object\u0027s monitor to wake up either through a call to the  {@code notify} methodor the  {@code notifyAll} method.\u003cli\u003eThe timeout period, specified by  {@code timeout}milliseconds plus  {@code nanos} nanoseconds arguments, haselapsed. \u003c/ul\u003e \u003cp\u003e The thread then waits until it can re-obtain ownership of the monitor and resumes execution. \u003cp\u003e As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop: \u003cpre\u003e synchronized (obj) { while (\u0026lt;condition does not hold\u0026gt;) obj.wait(timeout, nanos); ... // Perform action appropriate to condition } \u003c/pre\u003e This method should only be called by a thread that is the owner of this object\u0027s monitor. See the  {@code notify} method for adescription of the ways in which a thread can become the owner of a monitor.\n * @param timeout   the maximum time to wait in milliseconds.\n * @param nanos      additional time, in nanoseconds range0-999999.\n * @exception IllegalArgumentException      if the value of timeout isnegative or the value of nanos is not in the range 0-999999.\n * @exception IllegalMonitorStateException  if the current thread is notthe owner of this object\u0027s monitor.\n * @exception InterruptedException if any thread interrupted thecurrent thread before or while the current thread was waiting for a notification.  The \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is cleared when this exception is thrown.\n */\n","tf":{"freq":{"possibl":1,"particular":1,"perform":1,"wait":13,"isneg":1,"must":1,"specifi":1,"amount":3,"elaps":1,"notif":2,"time":5,"becom":1,"given":1,"rang":2,"blockquot":2,"wakeup":1,"thread":16,"action":1,"follow":1,"notifi":6,"argument":4,"plus":1,"control":1,"thrown":1,"except":7,"spurious":1,"monitor":8,"status":1,"alway":1,"finer":1,"invok":1,"hold":1,"orsom":1,"period":1,"methodor":1,"obtain":1,"ownership":2,"maximum":1,"thecurr":1,"owner":3,"oneargu":1,"execut":1,"thing":2,"call":2,"allow":1,"give":1,"link":3,"one":2,"state":1,"haselaps":1,"way":1,"use":1,"anoth":2,"object":7,"nanosecond":3,"resum":1,"lang":2,"version":1,"clear":1,"real":2,"releas":1,"millisecond":2,"wake":1,"loop":1,"current":6,"mean":1,"valu":2,"similar":1,"condit":3,"addit":1,"notth":1,"nano":5,"illeg":2,"interrupt":5,"two":1,"either":2,"adescript":1,"caus":1,"appropri":1,"pre":4,"obj":2,"java":2,"method":10,"measur":1,"certain":1,"timeout":6,"respect":1,"occur":1},"maxFreq":16,"totalTerms":202},"loc":16}