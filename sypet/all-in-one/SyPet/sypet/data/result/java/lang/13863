{"id":13863,"className":"java.lang.Runtime","methodName":"runFinalizersOnExit","signature":"\u003cjava.lang.Runtime: void runFinalizersOnExit(boolean)\u003e","javadoc":"/** \n * Enable or disable finalization on exit; doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits. By default, finalization on exit is disabled. \u003cp\u003eIf there is a security manager, its \u003ccode\u003echeckExit\u003c/code\u003e method is first called with 0 as its argument to ensure the exit is allowed. This could result in a SecurityException.\n * @param value true to enable finalization on exit, false to disable\n * @deprecated  This method is inherently unsafe.  It may result infinalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.\n * @throws SecurityException if a security manager exists and its \u003ccode\u003echeckExit\u003c/code\u003e method doesn\u0027t allow the exit.\n * @see java.lang.Runtime#exit(int)\n * @see java.lang.Runtime#gc()\n * @see java.lang.SecurityManager#checkExit(int)\n * @since   JDK1.1\n */\n","tf":{"freq":{"fals":1,"call":2,"result":3,"manipul":1,"deprec":1,"allow":2,"behavior":1,"concurr":1,"infin":1,"object":3,"run":2,"lang":3,"automat":1,"specifi":1,"ensur":1,"errat":1,"thread":1,"unsaf":1,"valu":1,"exist":1,"deadlock":1,"live":1,"argument":1,"may":1,"except":2,"check":3,"invok":1,"enabl":2,"manag":3,"runtim":3,"true":1,"exit":11,"inher":1,"secur":5,"disabl":3,"java":4,"method":3,"first":1,"yet":1},"maxFreq":11,"totalTerms":77},"loc":11}