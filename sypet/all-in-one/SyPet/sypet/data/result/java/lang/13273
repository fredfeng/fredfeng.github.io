{"id":13273,"className":"java.lang.SecurityManager","methodName":"checkListen","signature":"\u003cjava.lang.SecurityManager: void checkListen(int)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to wait for a connection request on the specified local port number. \u003cp\u003e If port is not 0, this method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eSocketPermission(\"localhost:\"+port,\"listen\")\u003c/code\u003e. If port is zero, this method calls \u003ccode\u003echeckPermission\u003c/code\u003e with \u003ccode\u003eSocketPermission(\"localhost:1024-\",\"listen\").\u003c/code\u003e \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkListen\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param port   the local port.\n * @exception SecurityException  if the calling thread does not havepermission to listen on the specified port.\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"port":7,"call":5,"connect":1,"allow":1,"overridden":1,"normal":1,"wait":1,"zero":1,"localhost":2,"specifi":2,"request":1,"thread":2,"permiss":7,"socket":2,"listen":5,"except":4,"check":6,"number":1,"havepermiss":1,"point":1,"secur":3,"java":1,"method":4,"local":2,"make":1},"maxFreq":7,"totalTerms":63},"loc":8}