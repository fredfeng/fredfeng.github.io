{"id":13235,"className":"java.lang.Float","methodName":"floatToRawIntBits","signature":"\u003cjava.lang.Float: int floatToRawIntBits(float)\u003e","javadoc":"/** \n * Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"single format\" bit layout, preserving Not-a-Number (NaN) values. \u003cp\u003eBit 31 (the bit that is selected by the mask {@code 0x80000000}) represents the sign of the floating-point number. Bits 30-23 (the bits that are selected by the mask {@code 0x7f800000}) represent the exponent. Bits 22-0 (the bits that are selected by the mask {@code 0x007fffff}) represent the significand (sometimes called the mantissa) of the floating-point number. \u003cp\u003eIf the argument is positive infinity, the result is {@code 0x7f800000}. \u003cp\u003eIf the argument is negative infinity, the result is {@code 0xff800000}. \u003cp\u003eIf the argument is NaN, the result is the integer representing the actual NaN value.  Unlike the  {@code floatToIntBits}method,  {@code floatToRawIntBits} does not collapse all thebit patterns encoding a NaN to a single \"canonical\" NaN value. \u003cp\u003eIn all cases, the result is an integer that, when given to the {@link #intBitsToFloat(int)} method, will produce afloating-point value the same as the argument to {@code floatToRawIntBits}.\n * @param value   a floating-point number.\n * @return the bits that represent the floating-point number.\n * @since 1.3\n */\n","tf":{"freq":{"canon":1,"raw":3,"result":4,"call":1,"singl":2,"significand":1,"infin":2,"link":1,"xff":1,"mask":3,"mantissa":1,"afloat":1,"specifi":1,"given":1,"layout":1,"thebit":1,"unlik":1,"valu":6,"sometim":1,"expon":1,"argument":4,"collaps":1,"repres":5,"select":3,"preserv":1,"produc":1,"number":5,"format":1,"accord":1,"represent":1,"sign":1,"point":7,"bit":13,"encod":1,"pattern":1,"will":1,"actual":1,"method":2,"negat":1,"fffff":1,"integ":2,"posit":1},"maxFreq":13,"totalTerms":89},"loc":0}