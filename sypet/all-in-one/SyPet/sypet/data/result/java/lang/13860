{"id":13860,"className":"java.lang.Runtime","methodName":"addShutdownHook","signature":"\u003cjava.lang.Runtime: void addShutdownHook(java.lang.Thread)\u003e","javadoc":"/** \n * Registers a new virtual-machine shutdown hook. \u003cp\u003e The Java virtual machine \u003ci\u003eshuts down\u003c/i\u003e in response to two kinds of events: \u003cul\u003e \u003cp\u003e \u003cli\u003e The program \u003ci\u003eexits\u003c/i\u003e normally, when the last non-daemon thread exits or when the \u003ctt\u003e {@link #exit exit}\u003c/tt\u003e (equivalently, \u003ctt\u003e {@link System#exit(int) System.exit}\u003c/tt\u003e) method is invoked, or \u003cp\u003e \u003cli\u003e The virtual machine is \u003ci\u003eterminated\u003c/i\u003e in response to a user interrupt, such as typing \u003ctt\u003e^C\u003c/tt\u003e, or a system-wide event, such as user logoff or system shutdown. \u003c/ul\u003e \u003cp\u003e A \u003ci\u003eshutdown hook\u003c/i\u003e is simply an initialized but unstarted thread.  When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently.  When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt.  Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the \u003ctt\u003e {@link #exit exit}\u003c/tt\u003e method. \u003cp\u003e Once the shutdown sequence has begun it can be stopped only by invoking the \u003ctt\u003e {@link #halt halt}\u003c/tt\u003e method, which forcibly terminates the virtual machine. \u003cp\u003e Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an \u003ctt\u003e {@link IllegalStateException}\u003c/tt\u003e to be thrown. \u003cp\u003e Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively.  They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible.  They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down.  Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks. \u003cp\u003e Shutdown hooks should also finish their work quickly.  When a program invokes \u003ctt\u003e {@link #exit exit}\u003c/tt\u003e the expectation is that the virtual machine will promptly shut down and exit.  When the virtual machine is terminated due to user logoff or system shutdown the underlying operating system may only allow a fixed amount of time in which to shut down and exit.  It is therefore inadvisable to attempt any user interaction or to perform a long-running computation in a shutdown hook. \u003cp\u003e Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the \u003ctt\u003e {@link ThreadGroup#uncaughtException uncaughtException}\u003c/tt\u003e method of the thread\u0027s \u003ctt\u003e {@link ThreadGroup}\u003c/tt\u003e object.  The default implementation of this method prints the exception\u0027s stack trace to \u003ctt\u003e {@link System#err}\u003c/tt\u003e and terminates the thread; it does not cause the virtual machine to exit or halt. \u003cp\u003e In rare circumstances the virtual machine may \u003ci\u003eabort\u003c/i\u003e, that is, stop running without shutting down cleanly.  This occurs when the virtual machine is terminated externally, for example with the \u003ctt\u003eSIGKILL\u003c/tt\u003e signal on Unix or the \u003ctt\u003eTerminateProcess\u003c/tt\u003e call on Microsoft Windows.  The virtual machine may also abort if a native method goes awry by, for example, corrupting internal data structures or attempting to access nonexistent memory.  If the virtual machine aborts then no guarantee can be made about whether or not any shutdown hooks will be run. \u003cp\u003e\n * @param hook An initialized but unstarted \u003ctt\u003e {@link Thread}\u003c/tt\u003e object\n * @throws IllegalArgumentException If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run\n * @throws IllegalStateException If the virtual machine is already in the process of shutting down\n * @throws SecurityException If a security manager is present and it denies \u003ctt\u003e {@link RuntimePermission}(\"shutdownHooks\")\u003c/tt\u003e\n * @see #removeShutdownHook\n * @see #halt(int)\n * @see #exit(int)\n * @since 1.3\n */\n","tf":{"freq":{"memori":1,"servic":2,"cycl":1,"particular":1,"corrupt":1,"whether":1,"specifi":1,"defens":1,"expect":1,"avoid":1,"time":2,"oper":2,"sequenc":4,"event":3,"thread":13,"deni":1,"respons":2,"invok":5,"runtim":1,"remov":1,"wide":1,"without":1,"exit":15,"non":2,"present":1,"system":7,"start":1,"will":8,"logoff":2,"upon":1,"virtual":15,"goe":1,"simpli":1,"structur":1,"concurr":1,"link":11,"made":1,"data":1,"use":1,"therefor":3,"run":9,"kind":1,"life":1,"clean":1,"forcibl":1,"extern":1,"written":1,"initi":3,"note":1,"shutdown":20,"just":1,"uninvok":1,"safe":1,"may":6,"previous":1,"inadvis":1,"uncaught":3,"access":1,"process":3,"either":1,"begun":2,"insofar":1,"intern":1,"base":1,"exampl":3,"unstart":2,"alreadi":4,"method":6,"imposs":1,"interact":1,"prompt":1,"abort":3,"last":1,"normal":1,"possibl":1,"lead":1,"perform":1,"type":1,"reli":1,"amount":1,"rare":1,"equival":1,"permiss":1,"awri":1,"argument":1,"work":1,"hook":18,"except":8,"thrown":1,"nonexist":1,"enabl":1,"circumst":1,"continu":1,"finish":2,"machin":15,"window":1,"program":2,"determin":1,"comput":1,"due":1,"stack":1,"attempt":4,"call":1,"unspecifi":1,"stop":2,"allow":1,"state":2,"quick":1,"signal":1,"object":2,"add":1,"microsoft":1,"order":1,"shut":6,"fix":1,"regist":7,"dispatch":1,"deadlock":2,"delic":1,"manag":1,"guarante":1,"trace":1,"illeg":3,"print":1,"interrupt":1,"handl":1,"begin":1,"two":1,"termin":6,"secur":2,"caus":2,"err":1,"java":1,"daemon":3,"group":2,"halt":5,"unix":1,"user":4,"also":3,"blind":1,"occur":1},"maxFreq":20,"totalTerms":352},"loc":7}