{"id":14149,"className":"java.lang.management.ThreadMXBean","methodName":"getThreadInfo","signature":"\u003cjava.lang.management.ThreadMXBean: java.lang.management.ThreadInfo getThreadInfo(long,int)\u003e","javadoc":"/** \n * Returns a thread info for a thread of the specified \u003ctt\u003eid\u003c/tt\u003e, with stack trace of a specified number of stack trace elements. The \u003ctt\u003emaxDepth\u003c/tt\u003e parameter indicates the maximum number of {@link StackTraceElement} to be retrieved from the stack trace.If \u003ctt\u003emaxDepth \u003d\u003d Integer.MAX_VALUE\u003c/tt\u003e, the entire stack trace of the thread will be dumped. If \u003ctt\u003emaxDepth \u003d\u003d 0\u003c/tt\u003e, no stack trace of the thread will be dumped. This method does not obtain the locked monitors and locked synchronizers of the thread. \u003cp\u003e When the Java virtual machine has no stack trace information about a thread or \u003ctt\u003emaxDepth \u003d\u003d 0\u003c/tt\u003e, the stack trace in the \u003ctt\u003eThreadInfo\u003c/tt\u003e object will be an empty array of \u003ctt\u003eStackTraceElement\u003c/tt\u003e. \u003cp\u003e If a thread of the given ID is not alive or does not exist, this method will return \u003ctt\u003enull\u003c/tt\u003e.  A thread is alive if it has been started and has not yet died. \u003cp\u003e \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e The mapped type of \u003ctt\u003eThreadInfo\u003c/tt\u003e is \u003ctt\u003eCompositeData\u003c/tt\u003e with attributes as specified in the {@link ThreadInfo#from ThreadInfo.from} method.\n * @param id the thread ID of the thread. Must be positive.\n * @param maxDepth the maximum number of entries in the stack traceto be dumped. \u003ctt\u003eInteger.MAX_VALUE\u003c/tt\u003e could be used to request the entire stack to be dumped.\n * @return a {@link ThreadInfo} of the thread of the given IDwith no locked monitor and synchronizer info. \u003ctt\u003enull\u003c/tt\u003e if the thread of the given ID is not alive or it does not exist.\n * @throws IllegalArgumentException if \u003ctt\u003eid \u0026lt\u003d 0\u003c/tt\u003e.\n * @throws IllegalArgumentException if \u003ctt\u003emaxDepth is negative\u003c/tt\u003e.\n * @throws java.lang.SecurityException if a security managerexists and the caller does not have ManagementPermission(\"monitor\").\n */\n","tf":{"freq":{"mbean":1,"type":1,"must":1,"info":8,"specifi":3,"traceto":1,"idwith":1,"given":3,"request":1,"thread":18,"permiss":1,"argument":2,"element":3,"except":3,"monitor":3,"composit":1,"number":3,"managerexist":1,"depth":6,"inform":1,"obtain":1,"machin":1,"aliv":3,"start":1,"maximum":2,"will":4,"negat":1,"stack":11,"entir":2,"posit":1,"array":1,"caller":1,"virtual":1,"dump":4,"link":3,"data":1,"use":1,"object":1,"lang":1,"attribut":1,"indic":1,"die":1,"map":1,"exist":2,"max":6,"manag":1,"trace":9,"entri":1,"lock":3,"paramet":1,"access":1,"illeg":2,"empti":1,"secur":2,"retriev":1,"java":2,"method":3,"server":1,"integ":2,"yet":1},"maxFreq":18,"totalTerms":146},"loc":0}