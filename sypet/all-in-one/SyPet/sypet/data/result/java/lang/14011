{"id":14011,"className":"java.lang.Double","methodName":"doubleToLongBits","signature":"\u003cjava.lang.Double: long doubleToLongBits(double)\u003e","javadoc":"/** \n * Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout. \u003cp\u003eBit 63 (the bit that is selected by the mask {@code 0x8000000000000000L}) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask {@code 0x7ff0000000000000L}) represent the exponent. Bits 51-0 (the bits that are selected by the mask {@code 0x000fffffffffffffL}) represent the significand (sometimes called the mantissa) of the floating-point number. \u003cp\u003eIf the argument is positive infinity, the result is {@code 0x7ff0000000000000L}. \u003cp\u003eIf the argument is negative infinity, the result is {@code 0xfff0000000000000L}. \u003cp\u003eIf the argument is NaN, the result is {@code 0x7ff8000000000000L}. \u003cp\u003eIn all cases, the result is a  {@code long} integer that, whengiven to the  {@link #longBitsToDouble(long)} method, will produce afloating-point value the same as the argument to {@code doubleToLongBits} (except all NaN values arecollapsed to a single \"canonical\" NaN value).\n * @param value   a {@code double} precision floating-point number.\n * @return the bits that represent the floating-point number.\n */\n","tf":{"freq":{"canon":1,"call":1,"result":4,"singl":1,"significand":1,"infin":2,"link":1,"mask":3,"mantissa":1,"whengiven":1,"afloat":1,"fffffffffffff":1,"arecollaps":1,"specifi":1,"layout":1,"precis":1,"valu":5,"sometim":1,"expon":1,"argument":4,"xfff":1,"except":1,"repres":4,"select":3,"produc":1,"number":4,"format":1,"accord":1,"represent":1,"sign":1,"point":7,"bit":11,"will":1,"method":1,"negat":1,"integ":1,"posit":1},"maxFreq":11,"totalTerms":74},"loc":10}