{"id":13854,"className":"java.lang.ProcessBuilder","methodName":"start","signature":"\u003cjava.lang.ProcessBuilder: java.lang.Process start()\u003e","javadoc":"/** \n * Starts a new process using the attributes of this process builder. \u003cp\u003eThe new process will invoke the command and arguments given by  {@link #command()}, in a working directory as given by  {@link #directory()}, with a process environment as given by  {@link #environment()}. \u003cp\u003eThis method checks that the command is a valid operating system command.  Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings. \u003cp\u003eA minimal set of system dependent environment variables may be required to start a process on some operating systems. As a result, the subprocess may inherit additional environment variable settings beyond those in the process builder\u0027s  {@link #environment()}. \u003cp\u003eIf there is a security manager, its {@link SecurityManager#checkExec checkExec}method is called with the first component of this object\u0027s {@code command} array as its argument. This may result ina  {@link SecurityException} being thrown.\u003cp\u003eStarting an operating system process is highly system-dependent. Among the many things that can go wrong are: \u003cul\u003e \u003cli\u003eThe operating system program file was not found. \u003cli\u003eAccess to the program file was denied. \u003cli\u003eThe working directory does not exist. \u003c/ul\u003e \u003cp\u003eIn such cases an exception will be thrown.  The exact nature of the exception is system-dependent, but it will always be a subclass of  {@link IOException}. \u003cp\u003eSubsequent modifications to this process builder will not affect the returned  {@link Process}.\n * @return a new {@link Process} object for managing the subprocess\n * @throws NullPointerException if an element of the command list is null\n * @throws IndexOutOfBoundsException if the command is an empty list (has size  {@code 0})\n * @throws SecurityException if a security manager exists and \u003cul\u003e \u003cli\u003eits {@link SecurityManager#checkExec checkExec}method doesn\u0027t allow creation of the subprocess, or \u003cli\u003ethe standard input to the subprocess was {@linkplain #redirectInput redirected from a file}and the security manager\u0027s {@link SecurityManager#checkRead checkRead} methoddenies read access to the file, or \u003cli\u003ethe standard output or standard error of the subprocess was {@linkplain #redirectOutput redirected to a file}and the security manager\u0027s {@link SecurityManager#checkWrite checkWrite} methoddenies write access to the file \u003c/ul\u003e\n * @throws IOException if an I/O error occurs\n * @see Runtime#exec(String[],String[],java.io.File)\n */\n","tf":{"freq":{"subprocess":5,"least":1,"variabl":2,"natur":1,"must":1,"beyond":1,"requir":1,"given":3,"oper":4,"file":7,"ina":1,"among":1,"exact":1,"deni":1,"argument":2,"work":2,"element":1,"mani":1,"index":1,"except":8,"thrown":2,"alway":1,"invok":1,"runtim":1,"environ":5,"builder":3,"size":1,"non":2,"input":2,"system":8,"start":4,"program":2,"subclass":1,"will":4,"pointer":1,"exec":5,"output":2,"thing":1,"array":1,"linkplain":2,"creation":1,"valid":2,"result":2,"call":1,"allow":1,"directori":3,"link":12,"use":1,"object":2,"affect":1,"minim":1,"methoddeni":2,"attribut":1,"write":3,"command":9,"read":3,"redirect":4,"subsequ":1,"exist":2,"addit":1,"may":3,"error":2,"standard":3,"check":9,"depend":4,"manag":9,"list":3,"access":3,"empti":2,"process":10,"secur":10,"compon":1,"string":3,"java":1,"wrong":1,"method":3,"high":1,"first":1,"bound":1,"modif":1,"occur":1,"found":1},"maxFreq":12,"totalTerms":220},"loc":34}