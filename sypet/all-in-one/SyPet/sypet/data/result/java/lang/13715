{"id":13715,"className":"java.lang.Class","methodName":"getDeclaredField","signature":"\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e","javadoc":"/** \n * Returns a  {@code Field} object that reflects the specified declaredfield of the class or interface represented by this  {@code Class}object. The  {@code name} parameter is a {@code String} thatspecifies the simple name of the desired field.  Note that this method will not reflect the  {@code length} field of an array class.\n * @param name the name of the field\n * @return the {@code Field} object for the specified field in thisclass\n * @exception NoSuchFieldException if a field with the specified name isnot found.\n * @exception NullPointerException if {@code name} is {@code null}\n * @exception SecurityException If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \u003cul\u003e \u003cli\u003e invocation of {@link SecurityManager#checkMemberAccess s.checkMemberAccess(this, Member.DECLARED)} deniesaccess to the declared field \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class \u003c/ul\u003e\n * @since JDK1.1\n */\n","tf":{"freq":{"caller":1,"simpl":1,"packageof":1,"link":2,"deniesaccess":1,"object":3,"desir":1,"specifi":3,"met":1,"declar":2,"isnot":1,"name":6,"current":1,"length":1,"declaredfield":1,"ancestor":1,"deni":1,"note":1,"follow":1,"member":3,"condit":1,"except":6,"check":4,"thatspecifi":1,"repres":1,"loader":2,"manag":3,"paramet":1,"access":5,"invoc":2,"field":10,"present":1,"secur":4,"string":1,"will":1,"thisclass":1,"pointer":1,"method":1,"reflect":2,"array":1,"found":1},"maxFreq":10,"totalTerms":83},"loc":11}