{"id":13421,"className":"java.lang.String","methodName":"compareTo","signature":"\u003cjava.lang.String: int compareTo(java.lang.String)\u003e","javadoc":"/** \n * Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by this \u003ccode\u003eString\u003c/code\u003e object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this \u003ccode\u003eString\u003c/code\u003e object lexicographically precedes the argument string. The result is a positive integer if this \u003ccode\u003eString\u003c/code\u003e object lexicographically follows the argument string. The result is zero if the strings are equal; \u003ccode\u003ecompareTo\u003c/code\u003e returns \u003ccode\u003e0\u003c/code\u003e exactly when the  {@link #equals(Object)} method would return \u003ccode\u003etrue\u003c/code\u003e.\u003cp\u003e This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as determined by using the \u0026lt; operator, lexicographically precedes the other string. In this case, \u003ccode\u003ecompareTo\u003c/code\u003e returns the difference of the two character values at position \u003ccode\u003ek\u003c/code\u003e in the two string -- that is, the value: \u003cblockquote\u003e\u003cpre\u003e this.charAt(k)-anotherString.charAt(k) \u003c/pre\u003e\u003c/blockquote\u003e If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, \u003ccode\u003ecompareTo\u003c/code\u003e returns the difference of the lengths of the strings -- that is, the value: \u003cblockquote\u003e\u003cpre\u003e this.length()-anotherString.length() \u003c/pre\u003e\u003c/blockquote\u003e\n * @param anotherString   the \u003ccode\u003eString\u003c/code\u003e to be compared.\n * @return  the value \u003ccode\u003e0\u003c/code\u003e if the argument string is equal tothis string; a value less than \u003ccode\u003e0\u003c/code\u003e if this string is lexicographically less than the string argument; and a value greater than \u003ccode\u003e0\u003c/code\u003e if this string is lexicographically greater than the string argument.\n */\n","tf":{"freq":{"valid":1,"result":3,"greater":2,"one":1,"link":1,"use":1,"anoth":3,"object":4,"zero":1,"smaller":1,"order":1,"oper":1,"blockquot":4,"sequenc":2,"exact":1,"length":4,"longer":1,"valu":8,"less":2,"follow":1,"argument":6,"index":5,"tothi":1,"whose":1,"repres":2,"charact":7,"smallest":1,"true":1,"lexicograph":9,"equal":3,"comparison":1,"differ":7,"two":4,"preced":3,"either":1,"pre":4,"determin":1,"definit":1,"string":27,"unicod":1,"base":1,"negat":1,"method":1,"compar":7,"integ":2,"posit":5,"shorter":1},"maxFreq":27,"totalTerms":147},"loc":31}