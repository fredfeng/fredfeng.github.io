{"id":13991,"className":"java.lang.Double","methodName":"toString","signature":"\u003cjava.lang.Double: java.lang.String toString(double)\u003e","javadoc":"/** \n * Returns a string representation of the  {@code double}argument. All characters mentioned below are ASCII characters. \u003cul\u003e \u003cli\u003eIf the argument is NaN, the result is the string \" {@code NaN}\". \u003cli\u003eOtherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is \u0027 {@code -}\u0027 (\u003ccode\u003e\u0027\u0026#92;u002D\u0027\u003c/code\u003e); if the sign is positive, no sign character appears in the result. As for the magnitude \u003ci\u003em\u003c/i\u003e: \u003cul\u003e \u003cli\u003eIf \u003ci\u003em\u003c/i\u003e is infinity, it is represented by the characters {@code \"Infinity\"}; thus, positive infinity produces the result {@code \"Infinity\"} and negative infinity produces the result{@code \"-Infinity\"}. \u003cli\u003eIf \u003ci\u003em\u003c/i\u003e is zero, it is represented by the characters {@code \"0.0\"}; thus, negative zero produces the result {@code \"-0.0\"} and positive zero produces the result{@code \"0.0\"}. \u003cli\u003eIf \u003ci\u003em\u003c/i\u003e is greater than or equal to 10\u003csup\u003e-3\u003c/sup\u003e but less than 10\u003csup\u003e7\u003c/sup\u003e, then it is represented as the integer part of \u003ci\u003em\u003c/i\u003e, in decimal form with no leading zeroes, followed by \u0027 {@code .}\u0027 (\u003ccode\u003e\u0027\u0026#92;u002E\u0027\u003c/code\u003e), followed by one or more decimal digits representing the fractional part of \u003ci\u003em\u003c/i\u003e. \u003cli\u003eIf \u003ci\u003em\u003c/i\u003e is less than 10\u003csup\u003e-3\u003c/sup\u003e or greater than or equal to 10\u003csup\u003e7\u003c/sup\u003e, then it is represented in so-called \"computerized scientific notation.\" Let \u003ci\u003en\u003c/i\u003e be the unique integer such that 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e \u0026le; \u003ci\u003em\u003c/i\u003e  {@literal \u003c}10\u003csup\u003e\u003ci\u003en\u003c/i\u003e+1\u003c/sup\u003e; then let \u003ci\u003ea\u003c/i\u003e be the mathematically exact quotient of \u003ci\u003em\u003c/i\u003e and 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e so that 1 \u0026le; \u003ci\u003ea\u003c/i\u003e  {@literal \u003c} 10. Themagnitude is then represented as the integer part of \u003ci\u003ea\u003c/i\u003e, as a single decimal digit, followed by \u0027 {@code .}\u0027 (\u003ccode\u003e\u0027\u0026#92;u002E\u0027\u003c/code\u003e), followed by decimal digits representing the fractional part of \u003ci\u003ea\u003c/i\u003e, followed by the letter \u0027 {@code E}\u0027 (\u003ccode\u003e\u0027\u0026#92;u0045\u0027\u003c/code\u003e), followed by a representation of \u003ci\u003en\u003c/i\u003e as a decimal integer, as produced by the method  {@link Integer#toString(int)}. \u003c/ul\u003e \u003c/ul\u003e How many digits must be printed for the fractional part of \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type  {@code double}. That is, suppose that \u003ci\u003ex\u003c/i\u003e is the exact mathematical value represented by the decimal representation produced by this method for a finite nonzero argument \u003ci\u003ed\u003c/i\u003e. Then \u003ci\u003ed\u003c/i\u003e must be the  {@code double} value nearestto \u003ci\u003ex\u003c/i\u003e; or if two  {@code double} values are equally closeto \u003ci\u003ex\u003c/i\u003e, then \u003ci\u003ed\u003c/i\u003e must be one of them and the least significant bit of the significand of \u003ci\u003ed\u003c/i\u003e must be  {@code 0}. \u003cp\u003eTo create localized string representations of a floating-point value, use subclasses of  {@link java.text.NumberFormat}.\n * @param d   the {@code double} to be converted.\n * @return a string representation of the argument.\n */\n","tf":{"freq":{"need":1,"quotient":1,"greater":2,"appear":1,"singl":1,"least":2,"infin":6,"lead":1,"type":1,"zero":4,"must":5,"beyond":1,"nearestto":1,"uniqu":2,"finit":1,"exact":2,"nonzero":1,"follow":6,"adjac":1,"argument":6,"mani":3,"text":1,"liter":2,"form":1,"creat":1,"charact":6,"letter":1,"scientif":1,"signific":1,"number":1,"format":1,"absolut":1,"sign":4,"digit":6,"bit":1,"closeto":1,"subclass":1,"distinguish":1,"negat":3,"posit":3,"otherwis":1,"computer":1,"result":8,"call":1,"significand":1,"one":3,"link":2,"convert":1,"use":1,"sup":14,"decim":6,"mention":1,"valu":7,"less":2,"fraction":4,"themagnitud":1,"thus":2,"repres":10,"mathemat":2,"suppos":1,"magnitud":2,"equal":3,"produc":6,"print":1,"represent":5,"point":1,"two":1,"notat":1,"string":7,"java":1,"method":2,"local":1,"part":6,"first":1,"integ":5},"maxFreq":14,"totalTerms":198},"loc":3}