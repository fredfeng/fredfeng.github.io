{"id":14434,"className":"java.lang.invoke.MethodHandle","methodName":"asFixedArity","signature":"\u003cjava.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asFixedArity()\u003e","javadoc":"/** \n * Makes a \u003cem\u003efixed arity\u003c/em\u003e method handle which is otherwise equivalent to the the current method handle. \u003cp\u003e If the current method handle is not of {@linkplain #asVarargsCollector variable arity}, the current method handle is returned. This is true even if the current method handle could not be a valid input to  {@code asVarargsCollector}. \u003cp\u003e Otherwise, the resulting fixed-arity method handle has the same type and behavior of the current method handle, except that  {@link #isVarargsCollector isVarargsCollector}will be false. The fixed-arity method handle may (or may not) be the a previous argument to  {@code asVarargsCollector}. \u003cp\u003e Here is an example, of a list-making variable arity method handle: \u003cblockquote\u003e\u003cpre\u003e MethodHandle asListVar \u003d publicLookup() .findStatic(Arrays.class, \"asList\", methodType(List.class, Object[].class)) .asVarargsCollector(Object[].class); MethodHandle asListFix \u003d asListVar.asFixedArity(); assertEquals(\"[1]\", asListVar.invoke(1).toString()); Exception caught \u003d null; try { asListFix.invoke((Object)1); } catch (Exception ex) { caught \u003d ex; } assert(caught instanceof ClassCastException); assertEquals(\"[two, too]\", asListVar.invoke(\"two\", \"too\").toString()); try { asListFix.invoke(\"two\", \"too\"); } catch (Exception ex) { caught \u003d ex; } assert(caught instanceof WrongMethodTypeException); Object[] argv \u003d { \"three\", \"thee\", \"tee\" }; assertEquals(\"[three, thee, tee]\", asListVar.invoke(argv).toString()); assertEquals(\"[three, thee, tee]\", asListFix.invoke(argv).toString()); assertEquals(1, ((List) asListVar.invoke((Object)argv)).size()); assertEquals(\"[three, thee, tee]\", asListFix.invoke((Object)argv).toString()); \u003c/pre\u003e\u003c/blockquote\u003e\n * @return a new method handle which accepts only a fixed number of arguments\n * @see #asVarargsCollector\n * @see #isVarargsCollector\n */\n","tf":{"freq":{"fals":1,"vararg":8,"accept":1,"variabl":2,"tee":4,"type":3,"lookup":1,"equival":1,"blockquot":2,"three":4,"argument":2,"except":6,"invok":8,"number":1,"size":1,"input":1,"cast":1,"will":1,"argv":5,"even":1,"make":2,"thee":4,"array":1,"otherwis":2,"result":1,"valid":1,"linkplain":1,"behavior":1,"var":6,"link":1,"object":6,"collector":8,"fix":11,"current":5,"caught":5,"find":1,"ariti":7,"may":2,"previous":1,"true":1,"list":15,"equal":6,"handl":12,"two":3,"pre":2,"string":5,"exampl":1,"method":14,"wrong":1},"maxFreq":15,"totalTerms":180},"loc":4}