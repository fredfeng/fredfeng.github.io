{"id":14253,"className":"java.lang.reflect.Constructor","methodName":"getGenericParameterTypes","signature":"\u003cjava.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()\u003e","javadoc":"/** \n * Returns an array of  {@code Type} objects that represent the formalparameter types, in declaration order, of the method represented by this  {@code Constructor} object. Returns an array of length 0 if theunderlying method takes no parameters. \u003cp\u003eIf a formal parameter type is a parameterized type, the  {@code Type} object returned for it must accurately reflectthe actual type parameters used in the source code. \u003cp\u003eIf a formal parameter type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.\n * @return an array of {@code Type}s that represent the formal parameter types of the underlying method, in declaration order\n * @throws GenericSignatureFormatError if the generic method signature does not conform to the format specified in \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n * @throws TypeNotPresentException if any of the parametertypes of the underlying method refers to a non-existent type declaration\n * @throws MalformedParameterizedTypeException if any ofthe underlying method\u0027s parameter types refer to a parameterized type that cannot be instantiated for any reason\n * @since 1.5\n */\n","tf":{"freq":{"virtual":1,"otherwis":1,"generic":3,"reason":1,"trade":1,"instanti":1,"parametertyp":1,"variabl":1,"use":1,"theunder":1,"object":3,"type":17,"signatur":2,"must":1,"specifi":1,"parameter":4,"order":2,"declar":3,"refer":2,"ofth":1,"length":1,"accur":1,"exist":1,"constructor":1,"except":2,"error":1,"repres":3,"creat":1,"paramet":7,"resolv":1,"format":2,"non":1,"cite":2,"present":1,"malform":1,"specif":1,"machin":1,"formal":3,"formalparamet":1,"conform":1,"take":1,"reflectth":1,"actual":1,"java":1,"method":6,"sourc":1,"array":3},"maxFreq":17,"totalTerms":95},"loc":6}