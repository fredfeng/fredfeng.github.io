{"id":13690,"className":"java.lang.Class","methodName":"getGenericInterfaces","signature":"\u003cjava.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()\u003e","javadoc":"/** \n * Returns the  {@code Type}s representing the interfaces directly implemented by the class or interface represented by this object. \u003cp\u003eIf a superinterface is a parameterized type, the {@code Type} object returned for it must accurately reflectthe actual type parameters used in the source code. The parameterized type representing each superinterface is created if it had not been created before. See the declaration of {@link java.lang.reflect.ParameterizedType ParameterizedType}for the semantics of the creation process for parameterized types. \u003cp\u003e If this object represents a class, the return value is an array containing objects representing all interfaces implemented by the class. The order of the interface objects in the array corresponds to the order of the interface names in the  {@code implements} clause of the declaration of the classrepresented by this object.  In the case of an array class, the interfaces  {@code Cloneable} and {@code Serializable} arereturned in that order. \u003cp\u003eIf this object represents an interface, the array contains objects representing all interfaces directly extended by the interface.  The order of the interface objects in the array corresponds to the order of the interface names in the {@code extends} clause of the declaration of the interfacerepresented by this object. \u003cp\u003eIf this object represents a class or interface that implements no interfaces, the method returns an array of length 0. \u003cp\u003eIf this object represents a primitive type or void, the method returns an array of length 0.\n * @throws java.lang.reflect.GenericSignatureFormatError if the generic class signature does not conform to the format specified in \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n * @throws TypeNotPresentException if any of the genericsuperinterfaces refers to a non-existent type declaration\n * @throws java.lang.reflect.MalformedParameterizedTypeException if any of the generic superinterfaces refer to a parameterized type that cannot be instantiated for any reason\n * @return an array of interfaces implemented by this class\n * @since 1.5\n */\n","tf":{"freq":{"reason":1,"instanti":1,"type":13,"must":1,"specifi":1,"superinterfac":3,"refer":2,"accur":1,"except":2,"creat":2,"format":2,"non":1,"cite":2,"present":1,"malform":1,"machin":1,"contain":2,"sourc":1,"classrepres":1,"cloneabl":1,"array":8,"generic":4,"virtual":1,"creation":1,"primit":1,"genericsuperinterfac":1,"trade":1,"correspond":2,"link":1,"serializ":1,"use":1,"object":12,"lang":3,"signatur":2,"interfacerepres":1,"parameter":7,"declar":4,"order":5,"semant":1,"name":2,"length":2,"valu":1,"exist":1,"direct":2,"error":1,"repres":9,"paramet":1,"claus":2,"process":1,"specif":1,"conform":1,"reflectth":1,"actual":1,"java":4,"arereturn":1,"method":2,"reflect":3},"maxFreq":13,"totalTerms":133},"loc":6}