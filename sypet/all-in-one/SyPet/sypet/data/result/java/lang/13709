{"id":13709,"className":"java.lang.Class","methodName":"getMethod","signature":"\u003cjava.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class\u003c?\u003e[])\u003e","javadoc":"/** \n * Returns a  {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} specifying the simple name of the desired method. The{@code parameterTypes} parameter is an array of {@code Class}objects that identify the method\u0027s formal parameter types, in declared order. If  {@code parameterTypes} is {@code null}, it is treated as if it were an empty array. \u003cp\u003e If the  {@code name} is \"{@code \u003cinit\u003e};\"or \" {@code \u003cclinit\u003e}\" a {@code NoSuchMethodException} is raised. Otherwise, the method tobe reflected is determined by the algorithm that follows.  Let C be the class represented by this object: \u003cOL\u003e \u003cLI\u003e C is searched for any \u003cI\u003ematching methods\u003c/I\u003e. If no matching method is found, the algorithm of step 1 is invoked recursively on the superclass of C.\u003c/LI\u003e \u003cLI\u003e If no method was found in step 1 above, the superinterfaces of C are searched for a matching method. If any such method is found, it is reflected.\u003c/LI\u003e \u003c/OL\u003e To find a matching method in a class C:\u0026nbsp; If C declares exactly one public method with the specified name and exactly the same formal parameter types, that is the method reflected. If more than one such method is found in C, and one of these methods has a return type that is more specific than any of the others, that method is reflected; otherwise one of the methods is chosen arbitrarily. \u003cp\u003eNote that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.  This increased flexibility in the virtual machine can be used to implement various language features.  For example, covariant returns can be implemented with  {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge method and the method being overridden would have the same signature but different return types. \u003cp\u003e See \u003cem\u003eThe Java Language Specification\u003c/em\u003e, sections 8.2 and 8.4.\n * @param name the name of the method\n * @param parameterTypes the list of parameters\n * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes}\n * @exception NoSuchMethodException if a matching method is not foundor if the name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\".\n * @exception NullPointerException if {@code name} is {@code null}\n * @exception SecurityException If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \u003cul\u003e \u003cli\u003e invocation of {@link SecurityManager#checkMemberAccess s.checkMemberAccess(this, Member.PUBLIC)} deniesaccess to the method \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class \u003c/ul\u003e\n * @since JDK1.1\n */\n","tf":{"freq":{"simpl":1,"overridden":1,"languag":3,"desir":1,"type":9,"specifi":4,"superinterfac":1,"clinit":2,"search":2,"exact":2,"arbitrarili":1,"tobe":1,"deni":1,"follow":2,"nbsp":1,"except":7,"multipl":1,"loader":2,"invok":1,"init":2,"invoc":2,"flexibl":1,"foundor":1,"present":1,"machin":2,"formal":2,"superclass":1,"determin":1,"pointer":1,"covari":1,"match":7,"forbid":1,"recurs":1,"treat":1,"array":2,"caller":1,"increas":1,"virtual":2,"otherwis":2,"linkplain":1,"packageof":1,"link":2,"one":5,"use":1,"identifi":1,"deniesaccess":1,"object":5,"chosen":1,"lang":1,"signatur":2,"algorithm":2,"met":1,"rais":1,"order":1,"declar":3,"name":9,"current":1,"bridg":3,"various":1,"ancestor":1,"publicmemb":1,"find":1,"note":1,"member":3,"condit":1,"may":1,"check":4,"repres":2,"manag":3,"paramet":9,"list":1,"access":5,"section":1,"empti":1,"differ":2,"specif":2,"secur":4,"string":1,"exampl":1,"featur":1,"method":30,"java":4,"reflect":6,"step":2,"found":4},"maxFreq":30,"totalTerms":211},"loc":11}