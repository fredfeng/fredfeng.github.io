{"id":14412,"className":"java.lang.instrument.Instrumentation","methodName":"appendToBootstrapClassLoaderSearch","signature":"\u003cjava.lang.instrument.Instrumentation: void appendToBootstrapClassLoaderSearch(java.util.jar.JarFile)\u003e","javadoc":"/** \n * Specifies a JAR file with instrumentation classes to be defined by the bootstrap class loader. \u003cp\u003e When the virtual machine\u0027s built-in class loader, known as the \"bootstrap class loader\", unsuccessfully searches for a class, the entries in the  {@link java.util.jar.JarFile JAR file} will be searched as well.\u003cp\u003e This method may be used multiple times to add multiple JAR files to be searched in the order that this method was invoked. \u003cp\u003e The agent should take care to ensure that the JAR does not contain any classes or resources other than those to be defined by the bootstrap class loader for the purpose of instrumentation. Failure to observe this warning could result in unexpected behavior that is difficult to diagnose. For example, suppose there is a loader L, and L\u0027s parent for delegation is the bootstrap class loader. Furthermore, a method in class C, a class defined by L, makes reference to a non-public accessor class C$1. If the JAR file contains a class C$1 then the delegation to the bootstrap class loader will cause C$1 to be defined by the bootstrap class loader. In this example an \u003ccode\u003eIllegalAccessError\u003c/code\u003e will be thrown that may cause the application to fail. One approach to avoiding these types of issues, is to use a unique package name for the instrumentation classes. \u003cp\u003e \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e specifies that a subsequent attempt to resolve a symbolic reference that the Java virtual machine has previously unsuccessfully attempted to resolve always fails with the same error that was thrown as a result of the initial resolution attempt. Consequently, if the JAR file contains an entry that corresponds to a class for which the Java virtual machine has unsuccessfully attempted to resolve a reference, then subsequent attempts to resolve that reference will fail with the same error as the initial attempt.\n * @param jarfile The JAR file to be searched when the bootstrap class loader unsuccessfully searches for a class.\n * @throws NullPointerException If \u003ccode\u003ejarfile\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see #appendToSystemClassLoaderSearch\n * @see java.lang.ClassLoader\n * @see java.util.jar.JarFile\n * @since 1.6\n */\n","tf":{"freq":{"consequ":1,"jarfil":2,"type":1,"specifi":2,"avoid":1,"uniqu":1,"time":1,"observ":1,"fail":3,"refer":4,"search":7,"jar":4,"file":8,"care":1,"purpos":1,"append":2,"except":1,"thrown":2,"symbol":1,"multipl":2,"alway":1,"loader":12,"invok":1,"resolv":4,"parent":1,"agent":1,"non":1,"cite":2,"system":1,"machin":4,"contain":3,"will":4,"pointer":1,"known":1,"make":1,"util":2,"attempt":6,"virtual":4,"warn":1,"defin":4,"result":2,"furthermor":1,"bootstrap":8,"unexpect":1,"trade":1,"unsuccess":4,"correspond":1,"behavior":1,"one":1,"link":1,"use":2,"well":1,"add":1,"difficult":1,"lang":1,"issu":1,"applic":1,"ensur":1,"resolut":1,"resourc":1,"deleg":2,"order":1,"name":1,"initi":2,"subsequ":2,"built":1,"may":2,"previous":1,"error":3,"failur":1,"entri":2,"suppos":1,"instrument":3,"access":1,"illeg":1,"specif":1,"caus":2,"accessor":1,"take":1,"exampl":2,"approach":1,"method":3,"java":6,"diagnos":1},"maxFreq":12,"totalTerms":175},"loc":0}