{"id":13751,"className":"java.lang.AbstractStringBuilder","methodName":"charAt","signature":"\u003cjava.lang.AbstractStringBuilder: char charAt(int)\u003e","javadoc":"/** \n * Returns the \u003ccode\u003echar\u003c/code\u003e value in this sequence at the specified index. The first \u003ccode\u003echar\u003c/code\u003e value is at index \u003ccode\u003e0\u003c/code\u003e, the next at index \u003ccode\u003e1\u003c/code\u003e, and so on, as in array indexing. \u003cp\u003e The index argument must be greater than or equal to \u003ccode\u003e0\u003c/code\u003e, and less than the length of this sequence. \u003cp\u003eIf the \u003ccode\u003echar\u003c/code\u003e value specified by the index is a \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate value is returned.\n * @param index   the index of the desired \u003ccode\u003echar\u003c/code\u003e value.\n * @return     the \u003ccode\u003echar\u003c/code\u003e value at the specified index.\n * @throws IndexOutOfBoundsException  if \u003ccode\u003eindex\u003c/code\u003e isnegative or greater than or equal to \u003ccode\u003elength()\u003c/code\u003e.\n */\n","tf":{"freq":{"argument":1,"except":1,"index":11,"greater":2,"surrog":2,"charact":1,"next":1,"equal":2,"desir":1,"isneg":1,"must":1,"specifi":3,"sequenc":2,"unicod":1,"length":2,"html":1,"valu":6,"href":1,"first":1,"bound":1,"less":1,"array":1},"maxFreq":11,"totalTerms":44},"loc":5}