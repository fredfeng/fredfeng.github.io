{"id":14474,"className":"java.lang.invoke.MethodHandles","methodName":"filterArguments","signature":"\u003cjava.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle[])\u003e","javadoc":"/** \n * Adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function. \u003cp\u003e The pre-processing is performed by one or more method handles, specified in the elements of the  {@code filters} array.The first element of the filter array corresponds to the  {@code pos}argument of the target, and so on in sequence. \u003cp\u003e Null arguments in the array are treated as identity functions, and the corresponding arguments left unchanged. (If there are no non-null elements in the array, the original target is returned.) Each filter is applied to the corresponding argument of the adapter. \u003cp\u003e If a filter  {@code F} applies to the {@code N}th argument of the target, then  {@code F} must be a method handle whichtakes exactly one argument.  The type of  {@code F}\u0027s sole argument replaces the corresponding argument type of the target in the resulting adapted method handle. The return type of  {@code F} must be identical to the correspondingparameter type of the target. \u003cp\u003e It is an error if there are elements of  {@code filters}(null or not) which do not correspond to argument positions in the target. \u003cb\u003eExample:\u003c/b\u003e \u003cp\u003e\u003cblockquote\u003e\u003cpre\u003e import static java.lang.invoke.MethodHandles.*; import static java.lang.invoke.MethodType.*; ... MethodHandle cat \u003d lookup().findVirtual(String.class, \"concat\", methodType(String.class, String.class)); MethodHandle upcase \u003d lookup().findVirtual(String.class, \"toUpperCase\", methodType(String.class)); assertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\")); MethodHandle f0 \u003d filterArguments(cat, 0, upcase); assertEquals(\"Xy\", (String) f0.invokeExact(\"x\", \"y\")); // Xy MethodHandle f1 \u003d filterArguments(cat, 1, upcase); assertEquals(\"xY\", (String) f1.invokeExact(\"x\", \"y\")); // xY MethodHandle f2 \u003d filterArguments(cat, 0, upcase, upcase); assertEquals(\"XY\", (String) f2.invokeExact(\"x\", \"y\")); // XY \u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e Here is pseudocode for the resulting adapter: \u003cblockquote\u003e\u003cpre\u003e V target(P... p, A[i]... a[i], B... b); A[i] filter[i](V[i]); T adapter(P... p, V[i]... v[i], B... b) { return target(p..., f[i](v[i])..., b...); } \u003c/pre\u003e\u003c/blockquote\u003e\n * @param target the method handle to invoke after arguments are filtered\n * @param pos the position of the first argument to filter\n * @param filters method handles to call initially on filtered arguments\n * @return method handle which incorporates the specified argument filtering logic\n * @throws NullPointerException if the target is nullor if the  {@code filters} array is null\n * @throws IllegalArgumentException if a non-null element of {@code filters}does not match a corresponding argument type of target as described above, or if the  {@code pos+filters.length} is greater than {@code target.type().parameterCount()}\n */\n","tf":{"freq":{"greater":1,"count":1,"incorpor":1,"perform":1,"type":9,"lookup":2,"must":2,"nullor":1,"pos":3,"specifi":2,"function":3,"correspondingparamet":1,"sequenc":1,"blockquot":4,"exact":5,"sole":1,"argument":21,"element":5,"except":2,"unari":1,"unchang":1,"invok":7,"describ":1,"logic":1,"upcas":5,"non":2,"appli":2,"whichtak":1,"pointer":1,"match":1,"posit":2,"filter":20,"treat":1,"array":5,"virtual":2,"result":3,"call":2,"cat":5,"correspond":7,"one":3,"adapt":5,"pseudocod":1,"lang":2,"upper":1,"ident":2,"length":1,"left":1,"initi":1,"find":2,"error":1,"paramet":1,"origin":1,"equal":4,"illeg":1,"concat":1,"handl":13,"process":3,"pre":7,"replac":2,"string":9,"target":14,"exampl":1,"method":16,"java":2,"first":2},"maxFreq":21,"totalTerms":233},"loc":18}