{"id":12944,"className":"java.lang.System","methodName":"setSecurityManager","signature":"\u003cjava.lang.System: void setSecurityManager(java.lang.SecurityManager)\u003e","javadoc":"/** \n * Sets the System security. \u003cp\u003e If there is a security manager already installed, this method first calls the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method with a \u003ccode\u003eRuntimePermission(\"setSecurityManager\")\u003c/code\u003e permission to ensure it\u0027s ok to replace the existing security manager. This may result in throwing a \u003ccode\u003eSecurityException\u003c/code\u003e. \u003cp\u003e Otherwise, the argument is established as the current security manager. If the argument is \u003ccode\u003enull\u003c/code\u003e and no security manager has been established, then no action is taken and the method simply returns.\n * @param s   the security manager.\n * @exception SecurityException  if the security manager has alreadybeen set and its \u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow it to be replaced.\n * @see #getSecurityManager\n * @see SecurityManager#checkPermission\n * @see java.lang.RuntimePermission\n */\n","tf":{"freq":{"otherwis":1,"call":1,"result":1,"simpli":1,"allow":1,"alreadybeen":1,"lang":1,"ensur":1,"permiss":6,"current":1,"action":1,"taken":1,"exist":1,"argument":2,"may":1,"except":3,"check":3,"manag":11,"runtim":2,"instal":1,"establish":2,"system":1,"secur":14,"replac":2,"java":1,"method":4,"alreadi":1,"first":1},"maxFreq":14,"totalTerms":67},"loc":8}