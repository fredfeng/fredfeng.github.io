{"id":13611,"className":"java.lang.ClassLoader","methodName":"getSystemClassLoader","signature":"\u003cjava.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()\u003e","javadoc":"/** \n * Returns the system class loader for delegation.  This is the default delegation parent for new \u003ctt\u003eClassLoader\u003c/tt\u003e instances, and is typically the class loader used to start the application. \u003cp\u003e This method is first invoked early in the runtime\u0027s startup sequence, at which point it creates the system class loader and sets it as the context class loader of the invoking \u003ctt\u003eThread\u003c/tt\u003e. \u003cp\u003e The default system class loader is an implementation-dependent instance of this class. \u003cp\u003e If the system property \"\u003ctt\u003ejava.system.class.loader\u003c/tt\u003e\" is defined when this method is first invoked then the value of that property is taken to be the name of a class that will be returned as the system class loader.  The class is loaded using the default system class loader and must define a public constructor that takes a single parameter of type \u003ctt\u003eClassLoader\u003c/tt\u003e which is used as the delegation parent.  An instance is then created using this constructor with the default system class loader as the parameter.  The resulting class loader is defined to be the system class loader. \u003cp\u003e If a security manager is present, and the invoker\u0027s class loader is not \u003ctt\u003enull\u003c/tt\u003e and the invoker\u0027s class loader is not the same as or an ancestor of the system class loader, then this method invokes the security manager\u0027s  {@link SecurityManager#checkPermission(java.security.Permission) \u003ctt\u003echeckPermission\u003c/tt\u003e} method with a {@link RuntimePermission#RuntimePermission(String) \u003ctt\u003eRuntimePermission(\"getClassLoader\")\u003c/tt\u003e} permission to verifyaccess to the system class loader.  If not, a \u003ctt\u003eSecurityException\u003c/tt\u003e will be thrown.  \u003c/p\u003e\n * @return  The system \u003ctt\u003eClassLoader\u003c/tt\u003e for delegation, or\u003ctt\u003enull\u003c/tt\u003e if none\n * @throws SecurityException If a security manager exists and its \u003ctt\u003echeckPermission\u003c/tt\u003e method doesn\u0027t allow access to the system class loader.\n * @throws IllegalStateException If invoked recursively during the construction of the class loader specified by the \"\u003ctt\u003ejava.system.class.loader\u003c/tt\u003e\" property.\n * @throws Error If the system property \"\u003ctt\u003ejava.system.class.loader\u003c/tt\u003e\" is defined but the named class could not be loaded, the provider class does not define the required constructor, or an exception is thrown by that constructor when it is invoked. The underlying cause of the error can be retrieved via the {@link Throwable#getCause()} method.\n * @revised  1.4\n */\n","tf":{"freq":{"via":1,"singl":1,"type":1,"earli":1,"must":1,"specifi":1,"requir":1,"sequenc":1,"thread":1,"permiss":8,"none":1,"taken":1,"except":4,"thrown":2,"creat":2,"loader":24,"invok":8,"runtim":4,"parent":2,"provid":1,"startup":1,"instanc":3,"present":1,"system":17,"start":1,"will":2,"load":2,"properti":4,"recurs":1,"defin":5,"result":1,"allow":1,"link":3,"state":1,"typic":1,"use":4,"applic":1,"verifyaccess":1,"deleg":4,"name":2,"valu":1,"exist":1,"ancestor":1,"constructor":4,"error":2,"check":3,"depend":1,"manag":4,"paramet":2,"access":1,"illeg":1,"point":1,"caus":2,"secur":7,"revis":1,"retriev":1,"take":1,"string":1,"context":1,"java":4,"method":6,"throwabl":1,"construct":1,"first":2},"maxFreq":24,"totalTerms":172},"loc":14}