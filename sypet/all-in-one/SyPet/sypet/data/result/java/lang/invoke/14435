{"id":14435,"className":"java.lang.invoke.MethodHandle","methodName":"bindTo","signature":"\u003cjava.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle bindTo(java.lang.Object)\u003e","javadoc":"/** \n * Binds a value  {@code x} to the first argument of a method handle, without invoking it.The new method handle adapts, as its \u003ci\u003etarget\u003c/i\u003e, the current method handle by binding it to the given argument. The type of the bound handle will be the same as the type of the target, except that a single leading reference parameter will be omitted. \u003cp\u003e When called, the bound handle inserts the given value  {@code x}as a new leading argument to the target.  The other arguments are also passed unchanged. What the target eventually returns is returned unchanged by the bound handle. \u003cp\u003e The reference  {@code x} must be convertible to the first parametertype of the target. \u003cp\u003e (\u003cem\u003eNote:\u003c/em\u003e  Because method handles are immutable, the target method handle retains its original type and behavior.)\n * @param x  the value to bind to the first argument of the target\n * @return a new method handle which prepends the given value to the incomingargument list, before calling the original method handle\n * @throws IllegalArgumentException if the target does not have aleading parameter type that is a reference type\n * @throws ClassCastException if {@code x} cannot be convertedto the leading parameter type of the target\n * @see MethodHandles#insertArguments\n */\n","tf":{"freq":{"call":2,"eventu":1,"singl":1,"behavior":1,"parametertyp":1,"convert":1,"lead":3,"adapt":1,"type":6,"must":1,"given":3,"refer":3,"current":1,"valu":4,"note":1,"argument":7,"except":3,"unchang":2,"prepend":1,"invok":1,"origin":2,"immut":1,"paramet":3,"list":1,"convertedto":1,"illeg":1,"without":1,"pass":1,"handl":11,"cast":1,"omit":1,"target":9,"will":2,"retain":1,"method":8,"insert":2,"alead":1,"first":3,"bind":4,"also":1,"incomingargu":1,"bound":3},"maxFreq":11,"totalTerms":103},"loc":11}