{"id":14645,"className":"java.lang.annotation.Annotation","methodName":"equals","signature":"\u003cjava.lang.annotation.Annotation: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Returns true if the specified object represents an annotation that is logically equivalent to this one.  In other words, returns true if the specified object is an instance of the same annotation type as this instance, all of whose members are equal to the corresponding member of this annotation, as defined below: \u003cul\u003e \u003cli\u003eTwo corresponding primitive typed members whose values are \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e are considered equal if \u003ctt\u003ex \u003d\u003d y\u003c/tt\u003e, unless their type is \u003ctt\u003efloat\u003c/tt\u003e or \u003ctt\u003edouble\u003c/tt\u003e. \u003cli\u003eTwo corresponding \u003ctt\u003efloat\u003c/tt\u003e members whose values are \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e are considered equal if \u003ctt\u003eFloat.valueOf(x).equals(Float.valueOf(y))\u003c/tt\u003e. (Unlike the \u003ctt\u003e\u003d\u003d\u003c/tt\u003e operator, NaN is considered equal to itself, and \u003ctt\u003e0.0f\u003c/tt\u003e unequal to \u003ctt\u003e-0.0f\u003c/tt\u003e.) \u003cli\u003eTwo corresponding \u003ctt\u003edouble\u003c/tt\u003e members whose values are \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e are considered equal if \u003ctt\u003eDouble.valueOf(x).equals(Double.valueOf(y))\u003c/tt\u003e. (Unlike the \u003ctt\u003e\u003d\u003d\u003c/tt\u003e operator, NaN is considered equal to itself, and \u003ctt\u003e0.0\u003c/tt\u003e unequal to \u003ctt\u003e-0.0\u003c/tt\u003e.) \u003cli\u003eTwo corresponding \u003ctt\u003eString\u003c/tt\u003e, \u003ctt\u003eClass\u003c/tt\u003e, enum, or annotation typed members whose values are \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e are considered equal if \u003ctt\u003ex.equals(y)\u003c/tt\u003e.  (Note that this definition is recursive for annotation typed members.) \u003cli\u003eTwo corresponding array typed members \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e are considered equal if \u003ctt\u003eArrays.equals(x, y)\u003c/tt\u003e, for the appropriate overloading of  {@link java.util.Arrays#equals}. \u003c/ul\u003e\n * @return true if the specified object represents an annotationthat is logically equivalent to this one, otherwise false\n */\n","tf":{"freq":{"fals":1,"otherwis":1,"defin":1,"primit":1,"correspond":6,"link":1,"one":2,"object":3,"type":6,"consid":7,"specifi":3,"unless":1,"equival":2,"oper":2,"annot":5,"unlik":2,"unequ":2,"valu":8,"note":1,"member":8,"repres":2,"whose":5,"true":3,"overload":1,"equal":14,"logic":2,"instanc":2,"two":5,"annotationthat":1,"appropri":1,"definit":1,"string":1,"java":1,"word":1,"util":1,"recurs":1,"array":3},"maxFreq":14,"totalTerms":108},"loc":0}