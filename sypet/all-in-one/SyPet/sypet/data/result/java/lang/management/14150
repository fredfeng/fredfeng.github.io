{"id":14150,"className":"java.lang.management.ThreadMXBean","methodName":"getThreadInfo","signature":"\u003cjava.lang.management.ThreadMXBean: java.lang.management.ThreadInfo[] getThreadInfo(long[],int)\u003e","javadoc":"/** \n * Returns the thread info for each thread whose ID is in the input array \u003ctt\u003eids\u003c/tt\u003e, with stack trace of a specified number of stack trace elements. The \u003ctt\u003emaxDepth\u003c/tt\u003e parameter indicates the maximum number of {@link StackTraceElement} to be retrieved from the stack trace.If \u003ctt\u003emaxDepth \u003d\u003d Integer.MAX_VALUE\u003c/tt\u003e, the entire stack trace of the thread will be dumped. If \u003ctt\u003emaxDepth \u003d\u003d 0\u003c/tt\u003e, no stack trace of the thread will be dumped. This method does not obtain the locked monitors and locked synchronizers of the threads. \u003cp\u003e When the Java virtual machine has no stack trace information about a thread or \u003ctt\u003emaxDepth \u003d\u003d 0\u003c/tt\u003e, the stack trace in the \u003ctt\u003eThreadInfo\u003c/tt\u003e object will be an empty array of \u003ctt\u003eStackTraceElement\u003c/tt\u003e. \u003cp\u003e This method returns an array of the \u003ctt\u003eThreadInfo\u003c/tt\u003e objects, each is the thread information about the thread with the same index as in the \u003ctt\u003eids\u003c/tt\u003e array. If a thread of the given ID is not alive or does not exist, \u003ctt\u003enull\u003c/tt\u003e will be set in the corresponding element in the returned array.  A thread is alive if it has been started and has not yet died. \u003cp\u003e \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e The mapped type of \u003ctt\u003eThreadInfo\u003c/tt\u003e is \u003ctt\u003eCompositeData\u003c/tt\u003e with attributes as specified in the {@link ThreadInfo#from ThreadInfo.from} method.\n * @param ids an array of thread IDs\n * @param maxDepth the maximum number of entries in the stack traceto be dumped. \u003ctt\u003eInteger.MAX_VALUE\u003c/tt\u003e could be used to request the entire stack to be dumped.\n * @return an array of the {@link ThreadInfo} objects, each containinginformation about a thread whose ID is in the corresponding element of the input array of IDs with no locked monitor and synchronizer info.\n * @throws IllegalArgumentException if \u003ctt\u003emaxDepth is negative\u003c/tt\u003e.\n * @throws IllegalArgumentException if any element in the input array\u003ctt\u003eids\u003c/tt\u003e is \u003ctt\u003e\u0026lt\u003d 0\u003c/tt\u003e.\n * @throws java.lang.SecurityException if a security managerexists and the caller does not have ManagementPermission(\"monitor\").\n */\n","tf":{"freq":{"mbean":1,"type":1,"info":9,"specifi":2,"traceto":1,"given":1,"request":1,"thread":19,"permiss":1,"argument":2,"element":6,"except":3,"index":1,"monitor":3,"whose":2,"composit":1,"number":3,"managerexist":1,"depth":6,"inform":2,"obtain":1,"input":3,"machin":1,"aliv":2,"start":1,"maximum":2,"will":4,"negat":1,"stack":11,"entir":2,"array":9,"caller":1,"virtual":1,"dump":4,"correspond":2,"link":3,"data":1,"use":1,"object":3,"lang":1,"id":6,"attribut":1,"indic":1,"die":1,"map":1,"exist":1,"max":6,"manag":1,"entri":1,"trace":9,"paramet":1,"lock":3,"access":1,"illeg":2,"containinginform":1,"empti":1,"secur":2,"retriev":1,"method":3,"java":2,"server":1,"integ":2,"yet":1},"maxFreq":19,"totalTerms":169},"loc":0}