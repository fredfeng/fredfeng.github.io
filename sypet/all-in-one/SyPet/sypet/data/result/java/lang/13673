{"id":13673,"className":"java.lang.Class","methodName":"forName","signature":"\u003cjava.lang.Class: java.lang.Class\u003c?\u003e forName(java.lang.String,boolean,java.lang.ClassLoader)\u003e","javadoc":"/** \n * Returns the  {@code Class} object associated with the class orinterface with the given string name, using the given class loader. Given the fully qualified name for a class or interface (in the same format returned by  {@code getName}) this method attempts to locate, load, and link the class or interface.  The specified class loader is used to load the class or interface.  If the parameter {@code loader} is null, the class is loaded through the bootstrapclass loader.  The class is initialized only if the {@code initialize} parameter is {@code true} and if it hasnot been initialized earlier. \u003cp\u003e If  {@code name} denotes a primitive type or void, an attemptwill be made to locate a user-defined class in the unnamed package whose name is  {@code name}. Therefore, this method cannot be used to obtain any of the  {@code Class} objects representing primitivetypes or void. \u003cp\u003e If  {@code name} denotes an array class, the component type ofthe array class is loaded but not initialized. \u003cp\u003e For example, in an instance method the expression: \u003cblockquote\u003e {@code Class.forName(\"Foo\")}\u003c/blockquote\u003e is equivalent to: \u003cblockquote\u003e {@code Class.forName(\"Foo\", true, this.getClass().getClassLoader())}\u003c/blockquote\u003e Note that this method throws errors related to loading, linking or initializing as specified in Sections 12.2, 12.3 and 12.4 of \u003cem\u003eThe Java Language Specification\u003c/em\u003e. Note that this method does not check whether the requested class is accessible to its caller. \u003cp\u003e If the  {@code loader} is {@code null}, and a security manager is present, and the caller\u0027s class loader is not null, then this method calls the security manager\u0027s  {@code checkPermission} methodwith a  {@code RuntimePermission(\"getClassLoader\")} permission toensure it\u0027s ok to access the bootstrap class loader.\n * @param name       fully qualified name of the desired class\n * @param initialize whether the class must be initialized\n * @param loader     class loader from which the class must be loaded\n * @return           class object representing the desired class\n * @exception LinkageError if the linkage fails\n * @exception ExceptionInInitializerError if the initialization provokedby this method fails\n * @exception ClassNotFoundException if the class cannot be located bythe specified class loader\n * @see java.lang.Class#forName(String)\n * @see java.lang.ClassLoader\n * @since     1.2\n */\n","tf":{"freq":{"methodwith":1,"attemptwil":1,"languag":1,"unnam":1,"foo":2,"desir":2,"type":2,"must":2,"whether":2,"specifi":3,"fail":2,"given":3,"equival":1,"byth":1,"blockquot":4,"request":1,"linkag":2,"permiss":3,"relat":1,"except":5,"primitivetyp":1,"whose":1,"loader":13,"runtim":1,"format":1,"provokedbi":1,"hasnot":1,"instanc":1,"present":1,"obtain":1,"earlier":1,"load":6,"toensur":1,"array":2,"caller":2,"bootstrapclass":1,"attempt":1,"call":1,"primit":1,"defin":1,"bootstrap":1,"link":2,"denot":2,"made":1,"use":3,"object":3,"therefor":1,"express":1,"lang":2,"associ":1,"name":13,"ofth":1,"initi":9,"note":2,"locat":3,"check":2,"error":3,"repres":2,"manag":2,"paramet":2,"true":2,"orinterfac":1,"fulli":2,"access":2,"section":1,"specif":1,"secur":2,"compon":1,"string":2,"exampl":1,"java":3,"method":7,"user":1,"qualifi":2,"found":1},"maxFreq":13,"totalTerms":164},"loc":13}