{"id":13261,"className":"java.lang.SecurityManager","methodName":"checkAccess","signature":"\u003cjava.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to modify the thread group argument. \u003cp\u003e This method is invoked for the current security manager when a new child thread or child thread group is created, and by the \u003ccode\u003esetDaemon\u003c/code\u003e, \u003ccode\u003esetMaxPriority\u003c/code\u003e, \u003ccode\u003estop\u003c/code\u003e, \u003ccode\u003esuspend\u003c/code\u003e, \u003ccode\u003eresume\u003c/code\u003e, and \u003ccode\u003edestroy\u003c/code\u003e methods of class \u003ccode\u003eThreadGroup\u003c/code\u003e. \u003cp\u003e If the thread group argument is the system thread group ( has a \u003ccode\u003enull\u003c/code\u003e parent) then this method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eRuntimePermission(\"modifyThreadGroup\")\u003c/code\u003e permission. If the thread group argument is \u003ci\u003enot\u003c/i\u003e the system thread group, this method just returns silently. \u003cp\u003e Applications that want a stricter policy should override this method. If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the \u003ccode\u003eRuntimePermission(\"modifyThreadGroup\")\u003c/code\u003e permission, and if so, return silently. This is to ensure that code granted that permission (such as the JDK itself) is allowed to manipulate any thread. \u003cp\u003e If this method is overridden, then \u003ccode\u003esuper.checkAccess\u003c/code\u003e should be called by the first statement in the overridden method, or the equivalent security check should be placed in the overridden method.\n * @param g   the thread group to be checked.\n * @exception SecurityException  if the calling thread does not havepermission to modify the thread group.\n * @exception NullPointerException if the thread group argument is\u003ccode\u003enull\u003c/code\u003e.\n * @see java.lang.ThreadGroup#destroy() destroy\n * @see java.lang.ThreadGroup#resume() resume\n * @see java.lang.ThreadGroup#setDaemon(boolean) setDaemon\n * @see java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority\n * @see java.lang.ThreadGroup#stop() stop\n * @see java.lang.ThreadGroup#suspend() suspend\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"silent":2,"suspend":3,"call":5,"stop":3,"manipul":1,"grant":1,"allow":2,"overridden":4,"lang":6,"resum":3,"applic":1,"ensur":1,"child":2,"destroy":3,"equival":1,"thread":23,"permiss":9,"current":1,"place":1,"want":1,"just":1,"argument":4,"addit":1,"except":5,"max":3,"check":8,"creat":1,"prioriti":3,"invok":1,"manag":1,"runtim":2,"parent":1,"polici":1,"access":2,"havepermiss":1,"statement":1,"system":2,"secur":5,"modifi":4,"pointer":1,"java":7,"method":10,"daemon":3,"group":18,"first":1,"stricter":1},"maxFreq":23,"totalTerms":161},"loc":10}