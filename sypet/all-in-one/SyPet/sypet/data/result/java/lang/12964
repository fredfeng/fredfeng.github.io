{"id":12964,"className":"java.lang.System","methodName":"load","signature":"\u003cjava.lang.System: void load(java.lang.String)\u003e","javadoc":"/** \n * Loads a code file with the specified filename from the local file system as a dynamic library. The filename argument must be a complete path name. \u003cp\u003e The call \u003ccode\u003eSystem.load(name)\u003c/code\u003e is effectively equivalent to the call: \u003cblockquote\u003e\u003cpre\u003e Runtime.getRuntime().load(name) \u003c/pre\u003e\u003c/blockquote\u003e\n * @param filename   the file to load.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckLink\u003c/code\u003e method doesn\u0027t allow loading of the specified dynamic library\n * @exception UnsatisfiedLinkError  if the file does not exist.\n * @exception NullPointerException if \u003ccode\u003efilename\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n * @see java.lang.Runtime#load(java.lang.String)\n * @see java.lang.SecurityManager#checkLink(java.lang.String)\n */\n","tf":{"freq":{"unsatisfi":1,"call":2,"allow":1,"link":3,"lang":4,"must":1,"specifi":2,"equival":1,"file":4,"blockquot":2,"name":3,"path":1,"exist":2,"dynam":2,"complet":1,"argument":1,"except":5,"error":1,"check":2,"manag":2,"runtim":3,"filenam":4,"librari":2,"system":2,"secur":3,"effect":1,"pre":2,"string":2,"pointer":1,"java":4,"method":1,"load":7,"local":1},"maxFreq":7,"totalTerms":74},"loc":3}