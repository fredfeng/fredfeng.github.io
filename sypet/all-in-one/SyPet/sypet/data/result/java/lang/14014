{"id":14014,"className":"java.lang.Double","methodName":"compareTo","signature":"\u003cjava.lang.Double: int compareTo(java.lang.Double)\u003e","javadoc":"/** \n * Compares two  {@code Double} objects numerically.  Thereare two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators ( {@code \u003c, \u003c\u003d, \u003d\u003d, \u003e\u003d, \u003e}) when applied to primitive  {@code double} values:\u003cul\u003e\u003cli\u003e {@code Double.NaN} is considered by this methodto be equal to itself and greater than all other {@code double} values (including{@code Double.POSITIVE_INFINITY}). \u003cli\u003e {@code 0.0d} is considered by this method to be greaterthan  {@code -0.0d}. \u003c/ul\u003e This ensures that the \u003ci\u003enatural ordering\u003c/i\u003e of {@code Double} objects imposed by this method is \u003ci\u003econsistentwith equals\u003c/i\u003e.\n * @param anotherDouble   the {@code Double} to be compared.\n * @return  the value {@code 0} if {@code anotherDouble} isnumerically equal to this  {@code Double}; a value less than  {@code 0} if this {@code Double}is numerically less than  {@code anotherDouble}; and a value greater than  {@code 0} if this{@code Double} is numerically greater than{@code anotherDouble}.\n * @since   1.2\n */\n","tf":{"freq":{"primit":1,"greater":3,"way":1,"natur":1,"languag":1,"perform":2,"anoth":4,"object":2,"consid":2,"ensur":1,"order":1,"oper":1,"valu":5,"less":2,"includ":1,"numer":4,"equal":3,"comparison":2,"methodto":1,"greaterthan":1,"impos":1,"differ":1,"two":2,"appli":1,"therear":1,"consistentwith":1,"isnumer":1,"java":1,"method":3,"compar":3},"maxFreq":5,"totalTerms":54},"loc":3}