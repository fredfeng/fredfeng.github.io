{"id":12948,"className":"java.lang.System","methodName":"nanoTime","signature":"\u003cjava.lang.System: long nanoTime()\u003e","javadoc":"/** \n * Returns the current value of the running Java Virtual Machine\u0027s high-resolution time source, in nanoseconds. \u003cp\u003eThis method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary \u003ci\u003eorigin\u003c/i\u003e time (perhaps in the future, so values may be negative).  The same origin is used by all invocations of this method in an instance of a Java virtual machine; other virtual machine instances are likely to use a different origin. \u003cp\u003eThis method provides nanosecond precision, but not necessarily nanosecond resolution (that is, how frequently the value changes) - no guarantees are made except that the resolution is at least as good as that of  {@link #currentTimeMillis()}. \u003cp\u003eDifferences in successive calls that span greater than approximately 292 years (2\u003csup\u003e63\u003c/sup\u003e nanoseconds) will not correctly compute elapsed time due to numerical overflow. \u003cp\u003eThe values returned by this method become meaningful only when the difference between two such values, obtained within the same instance of a Java virtual machine, is computed. \u003cp\u003e For example, to measure how long some code takes to execute: \u003cpre\u003e  {@code long startTime \u003d System.nanoTime(); // ... the code being measured ... long estimatedTime \u003d System.nanoTime() - startTime;}\u003c/pre\u003e \u003cp\u003eTo compare two nanoTime values \u003cpre\u003e  {@code long t0 \u003d System.nanoTime(); ... long t1 \u003d System.nanoTime();}\u003c/pre\u003e one should use  {@code t1 - t0 \u003c 0}, not  {@code t1 \u003c t0}, because of the possibility of numerical overflow.\n * @return the current value of the running Java Virtual Machine\u0027shigh-resolution time source, in nanoseconds\n * @since 1.5\n */\n","tf":{"freq":{"greater":1,"least":1,"possibl":1,"milli":1,"good":1,"approxim":1,"arbitrari":1,"elaps":2,"estim":1,"time":16,"becom":1,"correct":1,"relat":1,"precis":1,"year":1,"except":1,"notion":1,"numer":2,"like":1,"provid":1,"invoc":1,"instanc":3,"obtain":1,"system":5,"machin":5,"start":2,"overflow":2,"will":1,"due":1,"comput":2,"sourc":2,"negat":1,"execut":1,"compar":1,"wall":1,"span":1,"virtual":5,"call":1,"one":1,"link":1,"made":1,"use":4,"nanosecond":6,"sup":2,"run":2,"resolut":4,"fix":1,"current":3,"valu":8,"may":1,"futur":1,"repres":1,"clock":1,"perhap":1,"guarante":1,"shigh":1,"origin":3,"meaning":1,"nano":6,"frequent":1,"two":2,"differ":3,"pre":4,"take":1,"exampl":1,"measur":3,"method":4,"java":4,"within":1,"high":1,"chang":1,"necessarili":1,"success":1},"maxFreq":16,"totalTerms":151},"loc":0}