{"id":13862,"className":"java.lang.Runtime","methodName":"halt","signature":"\u003cjava.lang.Runtime: void halt(int)\u003e","javadoc":"/** \n * Forcibly terminates the currently running Java virtual machine.  This method never returns normally. \u003cp\u003e This method should be used with extreme caution.  Unlike the \u003ctt\u003e {@link #exit exit}\u003c/tt\u003e method, this method does not cause shutdown hooks to be started and does not run uninvoked finalizers if finalization-on-exit has been enabled.  If the shutdown sequence has already been initiated then this method does not wait for any running shutdown hooks or finalizers to finish their work. \u003cp\u003e\n * @param status Termination status.  By convention, a nonzero status code indicates abnormal termination.  If the \u003ctt\u003e {@link Runtime#exit exit}\u003c/tt\u003e (equivalently, \u003ctt\u003e {@link System#exit(int) System.exit}\u003c/tt\u003e) method has already been invoked then this status code will override the status code passed to that method.\n * @throws SecurityException If a security manager is present and its \u003ctt\u003e {@link SecurityManager#checkExit checkExit}\u003c/tt\u003e method does not permit an exit with the specified status\n * @see #exit\n * @see #addShutdownHook\n * @see #removeShutdownHook\n * @since 1.3\n */\n","tf":{"freq":{"virtual":1,"convent":1,"caution":1,"permit":1,"normal":1,"link":4,"use":1,"wait":1,"add":1,"run":3,"specifi":1,"indic":1,"forcibl":1,"equival":1,"sequenc":1,"current":1,"unlik":1,"initi":1,"nonzero":1,"extrem":1,"shutdown":5,"work":1,"uninvok":1,"hook":4,"except":1,"check":2,"status":6,"manag":2,"invok":1,"enabl":1,"runtim":1,"remov":1,"exit":11,"pass":1,"abnorm":1,"present":1,"finish":1,"system":2,"never":1,"machin":1,"termin":3,"secur":3,"caus":1,"start":1,"will":1,"alreadi":2,"method":8,"java":1,"halt":1},"maxFreq":11,"totalTerms":91},"loc":7}