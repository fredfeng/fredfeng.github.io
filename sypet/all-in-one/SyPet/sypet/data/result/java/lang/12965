{"id":12965,"className":"java.lang.System","methodName":"loadLibrary","signature":"\u003cjava.lang.System: void loadLibrary(java.lang.String)\u003e","javadoc":"/** \n * Loads the system library specified by the \u003ccode\u003elibname\u003c/code\u003e argument. The manner in which a library name is mapped to the actual system library is system dependent. \u003cp\u003e The call \u003ccode\u003eSystem.loadLibrary(name)\u003c/code\u003e is effectively equivalent to the call \u003cblockquote\u003e\u003cpre\u003e Runtime.getRuntime().loadLibrary(name) \u003c/pre\u003e\u003c/blockquote\u003e\n * @param libname   the name of the library.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckLink\u003c/code\u003e method doesn\u0027t allow loading of the specified dynamic library\n * @exception UnsatisfiedLinkError  if the library does not exist.\n * @exception NullPointerException if \u003ccode\u003elibname\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n * @see java.lang.Runtime#loadLibrary(java.lang.String)\n * @see java.lang.SecurityManager#checkLink(java.lang.String)\n */\n","tf":{"freq":{"unsatisfi":1,"call":2,"allow":1,"link":3,"lang":4,"specifi":2,"equival":1,"blockquot":2,"name":4,"map":1,"libnam":3,"exist":2,"dynam":1,"argument":1,"except":5,"error":1,"check":2,"depend":1,"manag":2,"runtim":3,"librari":10,"system":4,"secur":3,"effect":1,"pre":2,"string":2,"pointer":1,"actual":1,"java":4,"manner":1,"load":6,"method":1},"maxFreq":10,"totalTerms":78},"loc":3}