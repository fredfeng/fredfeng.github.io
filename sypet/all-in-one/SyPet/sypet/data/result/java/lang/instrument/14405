{"id":14405,"className":"java.lang.instrument.Instrumentation","methodName":"retransformClasses","signature":"\u003cjava.lang.instrument.Instrumentation: void retransformClasses(java.lang.Class\u003c?\u003e[])\u003e","javadoc":"/** \n * Retransform the supplied set of classes. \u003cP\u003e This function facilitates the instrumentation of already loaded classes. When classes are initially loaded or when they are {@linkplain #redefineClasses redefined}, the initial class file bytes can be transformed with the {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer}. This function reruns the transformation process (whether or not a transformation has previously occurred). This retransformation follows these steps: \u003cul\u003e \u003cli\u003estarting from the initial class file bytes \u003c/li\u003e \u003cli\u003efor each transformer that was added with \u003ccode\u003ecanRetransform\u003c/code\u003e false, the bytes returned by {@link java.lang.instrument.ClassFileTransformer#transform transform}during the last class load or redefine are reused as the output of the transformation; note that this is equivalent to reapplying the previous transformation, unaltered; except that {@link java.lang.instrument.ClassFileTransformer#transform transform}is not called \u003c/li\u003e \u003cli\u003efor each transformer that was added with \u003ccode\u003ecanRetransform\u003c/code\u003e true, the {@link java.lang.instrument.ClassFileTransformer#transform transform}method is called in these transformers \u003c/li\u003e \u003cli\u003ethe transformed class file bytes are installed as the new definition of the class \u003c/li\u003e \u003c/ul\u003e \u003cP\u003e The order of transformation is described in the {@link java.lang.instrument.ClassFileTransformer#transform transform} method.This same order is used in the automatic reapplication of retransformation incapable transforms. \u003cP\u003e The initial class file bytes represent the bytes passed to {@link java.lang.ClassLoader#defineClass ClassLoader.defineClass} or{@link #redefineClasses redefineClasses}(before any transformations were applied), however they might not exactly match them. The constant pool might not have the same layout or contents. The constant pool may have more or fewer entries. Constant pool entries may be in a different order; however, constant pool indices in the bytecodes of methods will correspond. Some attributes may not be present. Where order is not meaningful, for example the order of methods, order might not be preserved. \u003cP\u003e This method operates on a set in order to allow interdependent changes to more than one class at the same time (a retransformation of class A can require a retransformation of class B). \u003cP\u003e If a retransformed method has active stack frames, those active frames continue to run the bytecodes of the original method. The retransformed method will be used on new invokes. \u003cP\u003e This method does not cause any initialization except that which would occur under the customary JVM semantics. In other words, redefining a class does not cause its initializers to be run. The values of static variables will remain as they were prior to the call. \u003cP\u003e Instances of the retransformed class are not affected. \u003cP\u003e The retransformation may change method bodies, the constant pool and attributes. The retransformation must not add, remove or rename fields or methods, change the signatures of methods, or change inheritance.  These restrictions maybe be lifted in future versions.  The class file bytes are not checked, verified and installed until after the transformations have been applied, if the resultant bytes are in error this method will throw an exception. \u003cP\u003e If this method throws an exception, no classes have been retransformed. \u003cP\u003e This method is intended for use in instrumentation, as described in the {@linkplain Instrumentation class specification}.\n * @param classes array of classes to retransform;a zero-length array is allowed, in this case, this method does nothing\n * @throws java.lang.instrument.UnmodifiableClassException if a specified class cannot be modified( {@link #isModifiableClass} would return \u003ccode\u003efalse\u003c/code\u003e)\n * @throws java.lang.UnsupportedOperationException if the current configuration of the JVM does not allowretransformation ( {@link #isRetransformClassesSupported} is false) or the retransformation attemptedto make unsupported changes\n * @throws java.lang.ClassFormatError if the data did not contain a valid class\n * @throws java.lang.NoClassDefFoundError if the name in the class file is not equal to the name of the class\n * @throws java.lang.UnsupportedClassVersionError if the class file version numbers are not supported\n * @throws java.lang.ClassCircularityError if the new classes contain a circularity\n * @throws java.lang.LinkageError if a linkage error occurs\n * @throws java.lang.NullPointerException if the supplied classes  array or any of its componentsis \u003ccode\u003enull\u003c/code\u003e.\n * @see #isRetransformClassesSupported\n * @see #addTransformer\n * @see java.lang.instrument.ClassFileTransformer\n * @since 1.6\n */\n","tf":{"freq":{"variabl":1,"renam":1,"zero":1,"reus":1,"whether":1,"specifi":1,"circular":2,"time":1,"oper":2,"file":14,"verifi":1,"linkag":2,"incap":1,"support":3,"loader":2,"invok":1,"remov":1,"describ":2,"number":1,"instanc":1,"content":1,"present":1,"configur":1,"start":1,"will":4,"pointer":1,"load":3,"bytecod":2,"array":3,"linkplain":2,"rerun":1,"might":3,"correspond":1,"link":9,"data":1,"allowretransform":1,"use":3,"run":2,"version":3,"transform":29,"retransform":18,"interdepend":1,"attribut":2,"def":1,"indic":1,"semant":1,"current":1,"length":1,"noth":1,"initi":6,"note":1,"may":4,"previous":2,"repres":1,"true":1,"meaning":1,"field":1,"process":1,"redefin":6,"differ":1,"unmodifi":1,"remain":1,"exampl":1,"method":16,"alreadi":1,"componentsi":1,"fals":3,"unsupport":3,"last":1,"facilit":1,"must":1,"function":2,"prior":1,"requir":1,"equival":1,"exact":1,"howev":2,"follow":1,"except":7,"preserv":1,"format":1,"restrict":1,"continu":1,"appli":2,"bodi":1,"frame":2,"contain":2,"definit":1,"lift":1,"fewer":1,"word":1,"match":1,"output":1,"stack":1,"make":1,"valid":1,"result":1,"defin":2,"call":3,"attemptedto":1,"allow":2,"one":1,"add":2,"activ":2,"customari":1,"signatur":1,"automat":1,"lang":15,"affect":1,"order":7,"pool":5,"name":2,"layout":1,"unalt":1,"reapplic":1,"valu":1,"futur":1,"constant":5,"error":7,"check":1,"entri":2,"instal":2,"origin":1,"equal":1,"suppli":2,"instrument":10,"mayb":1,"pass":1,"specif":1,"caus":2,"modifi":2,"ad":2,"java":15,"chang":5,"intend":1,"reappli":1,"step":1,"found":1,"occur":3},"maxFreq":29,"totalTerms":349},"loc":0}