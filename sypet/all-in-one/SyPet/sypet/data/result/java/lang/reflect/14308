{"id":14308,"className":"java.lang.reflect.Field","methodName":"getGenericType","signature":"\u003cjava.lang.reflect.Field: java.lang.reflect.Type getGenericType()\u003e","javadoc":"/** \n * Returns a  {@code Type} object that represents the declared type forthe field represented by this  {@code Field} object.\u003cp\u003eIf the  {@code Type} is a parameterized type, the{@code Type} object returned must accurately reflect theactual type parameters used in the source code. \u003cp\u003eIf the type of the underlying field is a type variable or a parameterized type, it is created. Otherwise, it is resolved.\n * @return a {@code Type} object that represents the declared type forthe field represented by this  {@code Field} object\n * @throws GenericSignatureFormatError if the generic fieldsignature does not conform to the format specified in \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n * @throws TypeNotPresentException if the generic typesignature of the underlying field refers to a non-existent type declaration\n * @throws MalformedParameterizedTypeException if the genericsignature of the underlying field refers to a parameterized type that cannot be instantiated for any reason\n * @since 1.5\n */\n","tf":{"freq":{"virtual":1,"forth":2,"generic":4,"otherwis":1,"fieldsignatur":1,"reason":1,"trade":1,"instanti":1,"variabl":1,"use":1,"object":5,"type":16,"signatur":1,"must":1,"specifi":1,"typesignatur":1,"parameter":4,"declar":3,"refer":2,"accur":1,"exist":1,"except":2,"error":1,"repres":4,"creat":1,"paramet":1,"resolv":1,"format":2,"non":1,"cite":2,"field":7,"present":1,"malform":1,"specif":1,"machin":1,"conform":1,"java":1,"sourc":1,"genericsignatur":1,"reflect":1,"theactual":1},"maxFreq":16,"totalTerms":82},"loc":6}