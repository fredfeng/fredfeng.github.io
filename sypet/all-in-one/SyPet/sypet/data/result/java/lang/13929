{"id":13929,"className":"java.lang.Thread","methodName":"enumerate","signature":"\u003cjava.lang.Thread: int enumerate(java.lang.Thread[])\u003e","javadoc":"/** \n * Copies into the specified array every active thread in the current thread\u0027s thread group and its subgroups. This method simply invokes the  {@link java.lang.ThreadGroup#enumerate(Thread[])}method of the current thread\u0027s thread group. \u003cp\u003e An application might use the  {@linkplain #activeCount activeCount}method to get an estimate of how big the array should be, however \u003ci\u003eif the array is too short to hold all the threads, the extra threads are silently ignored.\u003c/i\u003e  If it is critical to obtain every active thread in the current thread\u0027s thread group and its subgroups, the invoker should verify that the returned int value is strictly less than the length of  {@code tarray}. \u003cp\u003e Due to the inherent race condition in this method, it is recommended that the method only be used for debugging and monitoring purposes.\n * @param tarray an array into which to put the list of threads\n * @return  the number of threads put into the array\n * @throws SecurityException if  {@link java.lang.ThreadGroup#checkAccess} determines thatthe current thread cannot access its thread group\n */\n","tf":{"freq":{"count":2,"race":1,"copi":1,"specifi":1,"estim":1,"thread":17,"verifi":1,"purpos":1,"howev":1,"everi":2,"subgroup":2,"ignor":1,"except":1,"monitor":1,"invok":2,"extra":1,"hold":1,"number":1,"obtain":1,"determin":1,"due":1,"big":1,"strict":1,"array":5,"critic":1,"silent":1,"linkplain":1,"might":1,"simpli":1,"put":2,"link":2,"use":2,"debug":1,"activ":4,"lang":2,"recommend":1,"applic":1,"current":4,"length":1,"valu":1,"less":1,"condit":1,"check":1,"tarray":2,"list":1,"access":2,"inher":1,"secur":1,"thatth":1,"java":2,"method":5,"group":6},"maxFreq":17,"totalTerms":98},"loc":3}