{"id":14245,"className":"java.lang.reflect.TypeVariable","methodName":"getBounds","signature":"\u003cjava.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()\u003e","javadoc":"/** \n * Returns an array of  {@code Type} objects representing theupper bound(s) of this type variable.  Note that if no upper bound is explicitly declared, the upper bound is  {@code Object}. \u003cp\u003eFor each upper bound B: \u003cul\u003e \u003cli\u003eif B is a parameterized type or a type variable, it is created, (see  {@link java.lang.reflect.ParameterizedType ParameterizedType} for thedetails of the creation process for parameterized types). \u003cli\u003eOtherwise, B is resolved.  \u003c/ul\u003e\n * @throws TypeNotPresentException  if any of thebounds refers to a non-existent type declaration\n * @throws MalformedParameterizedTypeException if any of thebounds refer to a parameterized type that cannot be instantiated for any reason\n * @return an array of {@code Type}s representing the upper bound(s) of this type variable\n */\n","tf":{"freq":{"otherwis":1,"creation":1,"reason":1,"instanti":1,"variabl":3,"link":1,"object":2,"type":13,"lang":1,"upper":4,"parameter":6,"declar":2,"refer":2,"exist":1,"note":1,"theupper":1,"except":2,"repres":2,"creat":1,"resolv":1,"thebound":2,"non":1,"process":1,"present":1,"malform":1,"explicit":1,"java":1,"thedetail":1,"bound":6,"reflect":1,"array":2},"maxFreq":13,"totalTerms":65},"loc":0}