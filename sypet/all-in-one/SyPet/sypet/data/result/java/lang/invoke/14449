{"id":14449,"className":"java.lang.invoke.MethodHandles$Lookup","methodName":"findVirtual","signature":"\u003cjava.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)\u003e","javadoc":"/** \n * Produces a method handle for a virtual method. The type of the method handle will be that of the method, with the receiver type (usually  {@code refc}) prepended. The method and all its argument types must be accessible to the lookup class. \u003cp\u003e When called, the handle will treat the first argument as a receiver and dispatch on the receiver\u0027s type to determine which method implementation to enter. (The dispatching action is identical with that performed by an {@code invokevirtual} or {@code invokeinterface} instruction.)\u003cp\u003e The returned method handle will have {@linkplain MethodHandle#asVarargsCollector variable arity} if and only ifthe method\u0027s variable arity modifier bit ( {@code 0x0080}) is set. \u003cp\u003e Because of the general equivalence between  {@code invokevirtual}instructions and method handles produced by  {@code findVirtual}, if the class is  {@code MethodHandle} and the name string is{@code invokeExact} or {@code invoke}, the resulting method handle is equivalent to one produced by {@link java.lang.invoke.MethodHandles#exactInvoker MethodHandles.exactInvoker} or{@link java.lang.invoke.MethodHandles#invoker MethodHandles.invoker}with the same  {@code type} argument.\n * @param refc the class or interface from which the method is accessed\n * @param name the name of the method\n * @param type the type of the method, with the receiver argument omitted\n * @return the desired method handle\n * @throws NoSuchMethodException if the method does not exist\n * @throws IllegalAccessException if access checking fails,or if the method is  {@code static}or if the method\u0027s variable arity modifier bit is set and  {@code asVarargsCollector} fails\n * @exception SecurityException if a security manager is present and it\u003ca href\u003d\"MethodHandles.Lookup.html#secmgr\"\u003erefuses access\u003c/a\u003e\n * @throws NullPointerException if any argument is null\n */\n","tf":{"freq":{"vararg":2,"variabl":3,"perform":1,"type":7,"desir":1,"lookup":2,"must":1,"fail":2,"instruct":2,"equival":2,"exact":3,"action":1,"href":1,"argument":5,"except":5,"secmgr":1,"invok":8,"enter":1,"present":1,"bit":2,"determin":1,"will":3,"pointer":1,"invokevirtu":2,"treat":1,"virtual":3,"call":1,"linkplain":1,"result":1,"refc":2,"one":1,"link":2,"lang":2,"refus":1,"collector":2,"ident":1,"name":3,"dispatch":2,"exist":1,"find":2,"usual":1,"ariti":3,"check":1,"ifth":1,"manag":1,"prepend":1,"produc":3,"receiv":4,"access":5,"illeg":1,"general":1,"handl":14,"secur":2,"omit":1,"string":1,"modifi":2,"html":1,"method":25,"java":2,"invokeinterfac":1,"first":1},"maxFreq":25,"totalTerms":156},"loc":5}