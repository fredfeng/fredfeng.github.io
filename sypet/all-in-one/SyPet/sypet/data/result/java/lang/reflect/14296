{"id":14296,"className":"java.lang.reflect.Proxy","methodName":"getProxyClass","signature":"\u003cjava.lang.reflect.Proxy: java.lang.Class\u003c?\u003e getProxyClass(java.lang.ClassLoader,java.lang.Class\u003c?\u003e[])\u003e","javadoc":"/** \n * Returns the  {@code java.lang.Class} object for a proxy classgiven a class loader and an array of interfaces.  The proxy class will be defined by the specified class loader and will implement all of the supplied interfaces.  If a proxy class for the same permutation of interfaces has already been defined by the class loader, then the existing proxy class will be returned; otherwise, a proxy class for those interfaces will be generated dynamically and defined by the class loader. \u003cp\u003eThere are several restrictions on the parameters that may be passed to  {@code Proxy.getProxyClass}: \u003cul\u003e \u003cli\u003eAll of the  {@code Class} objects in the{@code interfaces} array must represent interfaces, notclasses or primitive types. \u003cli\u003eNo two elements in the  {@code interfaces} array mayrefer to identical  {@code Class} objects.\u003cli\u003eAll of the interface types must be visible by name through the specified class loader.  In other words, for class loader {@code cl} and every interface {@code i}, the following expression must be true: \u003cpre\u003e Class.forName(i.getName(), false, cl) \u003d\u003d i \u003c/pre\u003e \u003cli\u003eAll non-public interfaces must be in the same package; otherwise, it would not be possible for the proxy class to implement all of the interfaces, regardless of what package it is defined in. \u003cli\u003eFor any set of member methods of the specified interfaces that have the same signature: \u003cul\u003e \u003cli\u003eIf the return type of any of the methods is a primitive type or void, then all of the methods must have that same return type. \u003cli\u003eOtherwise, one of the methods must have a return type that is assignable to all of the return types of the rest of the methods. \u003c/ul\u003e \u003cli\u003eThe resulting proxy class must not exceed any limits imposed on classes by the virtual machine.  For example, the VM may limit the number of interfaces that a class may implement to 65535; in that case, the size of the  {@code interfaces} array must notexceed 65535. \u003c/ul\u003e \u003cp\u003eIf any of these restrictions are violated, {@code Proxy.getProxyClass} will throw an{@code IllegalArgumentException}.  If the  {@code interfaces}array argument or any of its elements are  {@code null}, a {@code NullPointerException} will be thrown.\u003cp\u003eNote that the order of the specified proxy interfaces is significant: two requests for a proxy class with the same combination of interfaces but in a different order will result in two distinct proxy classes.\n * @param loader the class loader to define the proxy class\n * @param interfaces the list of interfaces for the proxy classto implement\n * @return  a proxy class that is defined in the specified class loaderand that implements the specified interfaces\n * @throws IllegalArgumentException if any of the restrictions on theparameters that may be passed to  {@code getProxyClass}are violated\n * @throws NullPointerException if the {@code interfaces} arrayargument or any of its elements are  {@code null}\n */\n","tf":{"freq":{"fals":1,"arrayargu":1,"assign":1,"notexce":1,"permut":1,"possibl":1,"violat":2,"type":7,"must":8,"distinct":1,"specifi":6,"request":1,"combin":1,"everi":1,"dynam":1,"follow":1,"argument":3,"limit":2,"element":3,"thrown":1,"except":4,"loader":8,"signific":1,"number":1,"notclass":1,"classto":1,"restrict":3,"size":1,"non":1,"machin":1,"loaderand":1,"mayref":1,"will":7,"pointer":2,"word":1,"rest":1,"array":5,"virtual":1,"otherwis":3,"result":2,"defin":6,"primit":2,"visibl":1,"one":1,"theparamet":1,"object":3,"express":1,"lang":1,"signatur":1,"order":2,"ident":1,"name":3,"exist":1,"note":1,"regardless":1,"member":1,"may":4,"proxi":19,"repres":1,"exceed":1,"paramet":1,"true":1,"list":1,"suppli":1,"illeg":2,"sever":1,"impos":1,"pass":2,"differ":1,"two":3,"pre":2,"generat":1,"exampl":1,"alreadi":1,"java":1,"method":5,"classgiven":1},"maxFreq":19,"totalTerms":168},"loc":211}