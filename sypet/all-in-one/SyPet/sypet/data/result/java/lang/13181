{"id":13181,"className":"java.lang.Character","methodName":"toLowerCase","signature":"\u003cjava.lang.Character: int toLowerCase(int)\u003e","javadoc":"/** \n * Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file. \u003cp\u003e Note that {@code Character.isLowerCase(Character.toLowerCase(codePoint))}does not always return  {@code true} for some ranges ofcharacters, particularly those that are symbols or ideographs. \u003cp\u003eIn general,  {@link String#toLowerCase()} should be used to mapcharacters to lowercase.  {@code String} case mapping methodshave several benefits over  {@code Character} case mapping methods.{@code String} case mapping methods can perform locale-sensitivemappings, context-sensitive mappings, and 1:M character mappings, whereas the  {@code Character} case mapping methods cannot.\n * @param codePoint   the character (Unicode code point) to be converted.\n * @return  the lowercase equivalent of the character (Unicode codepoint), if any; otherwise, the character itself.\n * @see Character#isLowerCase(int)\n * @see String#toLowerCase()\n * @since   1.5\n */\n","tf":{"freq":{"otherwis":1,"lower":6,"benefit":1,"link":1,"data":1,"use":2,"convert":2,"particular":1,"perform":1,"codepoint":1,"equival":1,"file":1,"rang":1,"map":7,"ofcharact":1,"methodshav":1,"note":1,"sensitivemap":1,"argument":1,"wherea":1,"sensit":1,"lowercas":3,"symbol":1,"charact":10,"alway":1,"true":1,"sever":1,"general":1,"inform":1,"point":4,"ideograph":1,"mapcharact":1,"string":4,"context":1,"unicod":4,"method":3,"local":1},"maxFreq":10,"totalTerms":72},"loc":3}