{"id":13043,"className":"java.lang.StrictMath","methodName":"IEEEremainder","signature":"\u003cjava.lang.StrictMath: double IEEEremainder(double,double)\u003e","javadoc":"/** \n * Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to \u003ccode\u003ef1\u0026nbsp;-\u0026nbsp;f2\u003c/code\u003e\u0026nbsp;\u0026times;\u0026nbsp;\u003ci\u003en\u003c/i\u003e, where \u003ci\u003en\u003c/i\u003e is the mathematical integer closest to the exact mathematical value of the quotient  {@code f1/f2}, and if two mathematical integers are equally close to  {@code f1/f2}, then \u003ci\u003en\u003c/i\u003e is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases: \u003cul\u003e\u003cli\u003eIf either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. \u003cli\u003eIf the first argument is finite and the second argument is infinite, then the result is the same as the first argument.\u003c/ul\u003e\n * @param f1   the dividend.\n * @param f2   the divisor.\n * @return  the remainder when {@code f1} is divided by{@code f2}.\n */\n","tf":{"freq":{"result":2,"quotient":1,"second":2,"zero":3,"close":1,"infinit":2,"time":1,"oper":1,"finit":1,"exact":1,"closest":1,"valu":2,"nbsp":4,"argument":8,"standard":1,"dividend":1,"mathemat":4,"divid":1,"equal":2,"divisor":1,"prescrib":1,"sign":2,"two":2,"either":1,"remaind":4,"eremaind":1,"comput":1,"negat":1,"even":1,"special":1,"posit":1,"integ":3,"first":4},"maxFreq":8,"totalTerms":63},"loc":0}