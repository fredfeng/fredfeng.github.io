{"id":13113,"className":"java.lang.Comparable","methodName":"compareTo","signature":"\u003cjava.lang.Comparable: int compareTo(T)\u003e","javadoc":"/** \n * Compares this object with the specified object for order.  Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. \u003cp\u003eThe implementor must ensure \u003ctt\u003esgn(x.compareTo(y)) \u003d\u003d -sgn(y.compareTo(x))\u003c/tt\u003e for all \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e.  (This implies that \u003ctt\u003ex.compareTo(y)\u003c/tt\u003e must throw an exception iff \u003ctt\u003ey.compareTo(x)\u003c/tt\u003e throws an exception.) \u003cp\u003eThe implementor must also ensure that the relation is transitive: \u003ctt\u003e(x.compareTo(y)\u0026gt;0 \u0026amp;\u0026amp; y.compareTo(z)\u0026gt;0)\u003c/tt\u003e implies \u003ctt\u003ex.compareTo(z)\u0026gt;0\u003c/tt\u003e. \u003cp\u003eFinally, the implementor must ensure that \u003ctt\u003ex.compareTo(y)\u003d\u003d0\u003c/tt\u003e implies that \u003ctt\u003esgn(x.compareTo(z)) \u003d\u003d sgn(y.compareTo(z))\u003c/tt\u003e, for all \u003ctt\u003ez\u003c/tt\u003e. \u003cp\u003eIt is strongly recommended, but \u003ci\u003enot\u003c/i\u003e strictly required that \u003ctt\u003e(x.compareTo(y)\u003d\u003d0) \u003d\u003d (x.equals(y))\u003c/tt\u003e.  Generally speaking, any class that implements the \u003ctt\u003eComparable\u003c/tt\u003e interface and violates this condition should clearly indicate this fact.  The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" \u003cp\u003eIn the foregoing description, the notation \u003ctt\u003esgn(\u003c/tt\u003e\u003ci\u003eexpression\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e designates the mathematical \u003ci\u003esignum\u003c/i\u003e function, which is defined to return one of \u003ctt\u003e-1\u003c/tt\u003e, \u003ctt\u003e0\u003c/tt\u003e, or \u003ctt\u003e1\u003c/tt\u003e according to whether the value of \u003ci\u003eexpression\u003c/i\u003e is negative, zero or positive.\n * @param o the object to be compared.\n * @return  a negative integer, zero, or a positive integer as this objectis less than, equal to, or greater than the specified object.\n * @throws NullPointerException if the specified object is null\n * @throws ClassCastException if the specified object\u0027s type prevents itfrom being compared to this object.\n */\n","tf":{"freq":{"objecti":1,"greater":2,"natur":1,"languag":1,"type":1,"zero":3,"violat":1,"transit":1,"whether":1,"must":4,"specifi":5,"function":1,"requir":1,"relat":1,"impli":3,"implementor":3,"except":4,"descript":1,"prevent":1,"sgn":5,"iff":1,"signum":1,"cast":1,"strong":1,"pointer":1,"negat":3,"strict":1,"amp":2,"compar":16,"posit":3,"inconsist":1,"defin":1,"one":1,"itfrom":1,"object":9,"express":2,"recommend":2,"ensur":3,"clear":1,"order":2,"indic":1,"valu":1,"less":2,"note":1,"condit":1,"mathemat":1,"speak":1,"equal":4,"accord":1,"general":1,"notat":1,"fact":1,"forego":1,"also":1,"integ":4,"design":1},"maxFreq":16,"totalTerms":117},"loc":0}