{"id":14467,"className":"java.lang.invoke.MethodHandles","methodName":"explicitCastArguments","signature":"\u003cjava.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)\u003e","javadoc":"/** \n * Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion. The original type and new type must have the same number of arguments. The resulting method handle is guaranteed to report a type which is equal to the desired new type. \u003cp\u003e If the original type and new type are equal, returns target. \u003cp\u003e The same conversions are allowed as for  {@link MethodHandle#asType MethodHandle.asType}, and some additional conversions are also applied if those conversions fail. Given types \u003cem\u003eT0\u003c/em\u003e, \u003cem\u003eT1\u003c/em\u003e, one of the following conversions is applied if possible, before or instead of any conversions done by  {@code asType}: \u003cul\u003e \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e and \u003cem\u003eT1\u003c/em\u003e are references, and \u003cem\u003eT1\u003c/em\u003e is an interface type, then the value of type \u003cem\u003eT0\u003c/em\u003e is passed as a \u003cem\u003eT1\u003c/em\u003e without a cast. (This treatment of interfaces follows the usage of the bytecode verifier.) \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e is boolean and \u003cem\u003eT1\u003c/em\u003e is another primitive, the boolean is converted to a byte value, 1 for true, 0 for false. (This treatment follows the usage of the bytecode verifier.) \u003cli\u003eIf \u003cem\u003eT1\u003c/em\u003e is boolean and \u003cem\u003eT0\u003c/em\u003e is another primitive, \u003cem\u003eT0\u003c/em\u003e is converted to byte via Java casting conversion (JLS 5.5), and the low order bit of the result is tested, as if by  {@code (x \u0026 1) !\u003d 0}. \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e and \u003cem\u003eT1\u003c/em\u003e are primitives other than boolean, then a Java casting conversion (JLS 5.5) is applied. (Specifically, \u003cem\u003eT0\u003c/em\u003e will convert to \u003cem\u003eT1\u003c/em\u003e by widening and/or narrowing.) \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e is a reference and \u003cem\u003eT1\u003c/em\u003e a primitive, an unboxing conversion will be applied at runtime, possibly followed by a Java casting conversion (JLS 5.5) on the primitive value, possibly followed by a conversion from byte to boolean by testing the low-order bit. \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e is a reference and \u003cem\u003eT1\u003c/em\u003e a primitive, and if the reference is null at runtime, a zero value is introduced. \u003c/ul\u003e\n * @param target the method handle to invoke after arguments are retyped\n * @param newType the expected type of the new method handle\n * @return a method handle which delegates to the target after performingany necessary argument conversions, and arranges for any necessary return value conversions\n * @throws NullPointerException if either argument is null\n * @throws WrongMethodTypeException if the conversion cannot be made\n * @see MethodHandle#asType\n */\n","tf":{"freq":{"fals":1,"via":1,"test":2,"treatment":2,"possibl":3,"zero":1,"desir":1,"type":19,"necessari":2,"must":1,"expect":1,"given":2,"fail":1,"refer":4,"verifi":2,"report":1,"follow":5,"argument":6,"except":2,"invok":1,"runtim":2,"done":1,"number":1,"without":1,"bit":2,"retyp":1,"appli":4,"cast":5,"explicit":1,"will":2,"pointer":1,"bytecod":2,"low":2,"result":2,"primit":6,"allow":1,"link":1,"one":1,"made":1,"performingani":1,"convers":14,"pairwis":1,"convert":3,"adapt":1,"anoth":2,"introduc":1,"deleg":1,"order":2,"valu":5,"addit":1,"guarante":1,"origin":2,"true":1,"equal":2,"produc":1,"arrang":1,"handl":9,"pass":1,"either":1,"narrow":1,"specif":1,"widen":1,"target":3,"instead":1,"wrong":1,"method":10,"java":3,"usag":2,"unbox":1,"also":1},"maxFreq":19,"totalTerms":171},"loc":3}