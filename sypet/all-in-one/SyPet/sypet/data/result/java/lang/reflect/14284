{"id":14284,"className":"java.lang.reflect.Method","methodName":"invoke","signature":"\u003cjava.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])\u003e","javadoc":"/** \n * Invokes the underlying method represented by this  {@code Method}object, on the specified object with the specified parameters. Individual parameters are automatically unwrapped to match primitive formal parameters, and both primitive and reference parameters are subject to method invocation conversions as necessary. \u003cp\u003eIf the underlying method is static, then the specified  {@code obj}argument is ignored. It may be null. \u003cp\u003eIf the number of formal parameters required by the underlying method is 0, the supplied  {@code args} array may be of length 0 or null.\u003cp\u003eIf the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, Second Edition, section 15.12.4.4; in particular, overriding based on the runtime type of the target object will occur. \u003cp\u003eIf the underlying method is static, the class that declared the method is initialized if it has not already been initialized. \u003cp\u003eIf the method completes normally, the value it returns is returned to the caller of invoke; if the value has a primitive type, it is first appropriately wrapped in an object. However, if the value has the type of an array of a primitive type, the elements of the array are \u003ci\u003enot\u003c/i\u003e wrapped in objects; in other words, an array of primitive type is returned.  If the underlying method return type is void, the invocation returns null.\n * @param obj  the object the underlying method is invoked from\n * @param args the arguments used for the method call\n * @return the result of dispatching the method represented bythis object on  {@code obj} with parameters{@code args}\n * @exception IllegalAccessException    if this {@code Method} objectis enforcing Java language access control and the underlying method is inaccessible.\n * @exception IllegalArgumentException  if the method is aninstance method and the specified object argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if the number of actual and formal parameters differ; if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion.\n * @exception InvocationTargetException if the underlying methodthrows an exception.\n * @exception NullPointerException      if the specified object is nulland the method is an instance method.\n * @exception ExceptionInInitializerError if the initializationprovoked by this method fails.\n */\n","tf":{"freq":{"inaccess":1,"objecti":1,"unwrap":3,"second":1,"normal":1,"nulland":1,"possibl":1,"particular":1,"languag":2,"type":7,"aninst":1,"necessari":1,"lookup":1,"specifi":5,"arg":3,"requir":1,"fail":2,"refer":1,"bythi":1,"howev":1,"dynam":1,"implementor":1,"argument":5,"control":1,"element":1,"wrap":2,"except":11,"ignor":1,"enforc":1,"invok":5,"runtim":1,"number":2,"invoc":4,"instanc":3,"formal":4,"thereof":1,"subclass":1,"will":1,"pointer":1,"word":1,"match":1,"array":4,"caller":1,"result":1,"call":1,"primit":6,"correspond":1,"subject":1,"convers":3,"methodthrow":1,"convert":1,"use":2,"object":9,"automat":1,"document":1,"declar":2,"length":1,"dispatch":1,"valu":4,"initi":3,"complet":1,"individu":1,"may":2,"initializationprovok":1,"error":1,"repres":2,"paramet":9,"edit":1,"suppli":1,"access":2,"illeg":2,"section":1,"differ":1,"specif":1,"appropri":1,"base":1,"target":2,"actual":1,"obj":3,"method":24,"java":2,"alreadi":1,"first":1,"occur":1},"maxFreq":24,"totalTerms":192},"loc":14}