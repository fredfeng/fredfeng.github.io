{"id":13794,"className":"java.lang.AbstractStringBuilder","methodName":"reverse","signature":"\u003cjava.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder reverse()\u003e","javadoc":"/** \n * Causes this character sequence to be replaced by the reverse of the sequence. If there are any surrogate pairs included in the sequence, these are treated as single characters for the reverse operation. Thus, the order of the high-low surrogates is never reversed. Let \u003ci\u003en\u003c/i\u003e be the character length of this character sequence (not the length in \u003ccode\u003echar\u003c/code\u003e values) just prior to execution of the \u003ccode\u003ereverse\u003c/code\u003e method. Then the character at index \u003ci\u003ek\u003c/i\u003e in the new character sequence is equal to the character at index \u003ci\u003en-k-1\u003c/i\u003e in the old character sequence. \u003cp\u003eNote that the reverse operation may result in producing surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation. For example, reversing \"\u0026#92;uDC00\u0026#92;uD800\" produces \"\u0026#92;uD800\u0026#92;uDC00\" which is a valid surrogate pair.\n * @return  a reference to this object.\n */\n","tf":{"freq":{"valid":1,"result":1,"old":1,"singl":1,"pair":3,"object":1,"unpair":1,"prior":1,"revers":7,"order":1,"refer":1,"oper":3,"sequenc":6,"length":2,"valu":1,"note":1,"just":1,"may":1,"index":2,"includ":1,"surrog":6,"thus":1,"charact":8,"produc":2,"equal":1,"never":1,"caus":1,"replac":1,"exampl":1,"method":1,"high":2,"low":2,"execut":1,"treat":1},"maxFreq":8,"totalTerms":66},"loc":28}