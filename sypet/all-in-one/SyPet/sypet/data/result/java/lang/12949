{"id":12949,"className":"java.lang.System","methodName":"arraycopy","signature":"\u003cjava.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)\u003e","javadoc":"/** \n * Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array. A subsequence of array components are copied from the source array referenced by \u003ccode\u003esrc\u003c/code\u003e to the destination array referenced by \u003ccode\u003edest\u003c/code\u003e. The number of components copied is equal to the \u003ccode\u003elength\u003c/code\u003e argument. The components at positions \u003ccode\u003esrcPos\u003c/code\u003e through \u003ccode\u003esrcPos+length-1\u003c/code\u003e in the source array are copied into positions \u003ccode\u003edestPos\u003c/code\u003e through \u003ccode\u003edestPos+length-1\u003c/code\u003e, respectively, of the destination array. \u003cp\u003e If the \u003ccode\u003esrc\u003c/code\u003e and \u003ccode\u003edest\u003c/code\u003e arguments refer to the same array object, then the copying is performed as if the components at positions \u003ccode\u003esrcPos\u003c/code\u003e through \u003ccode\u003esrcPos+length-1\u003c/code\u003e were first copied to a temporary array with \u003ccode\u003elength\u003c/code\u003e components and then the contents of the temporary array were copied into positions \u003ccode\u003edestPos\u003c/code\u003e through \u003ccode\u003edestPos+length-1\u003c/code\u003e of the destination array. \u003cp\u003e If \u003ccode\u003edest\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, then a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown. \u003cp\u003e If \u003ccode\u003esrc\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, then a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown and the destination array is not modified. \u003cp\u003e Otherwise, if any of the following is true, an \u003ccode\u003eArrayStoreException\u003c/code\u003e is thrown and the destination is not modified: \u003cul\u003e \u003cli\u003eThe \u003ccode\u003esrc\u003c/code\u003e argument refers to an object that is not an array. \u003cli\u003eThe \u003ccode\u003edest\u003c/code\u003e argument refers to an object that is not an array. \u003cli\u003eThe \u003ccode\u003esrc\u003c/code\u003e argument and \u003ccode\u003edest\u003c/code\u003e argument refer to arrays whose component types are different primitive types. \u003cli\u003eThe \u003ccode\u003esrc\u003c/code\u003e argument refers to an array with a primitive component type and the \u003ccode\u003edest\u003c/code\u003e argument refers to an array with a reference component type. \u003cli\u003eThe \u003ccode\u003esrc\u003c/code\u003e argument refers to an array with a reference component type and the \u003ccode\u003edest\u003c/code\u003e argument refers to an array with a primitive component type. \u003c/ul\u003e \u003cp\u003e Otherwise, if any of the following is true, an \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e is thrown and the destination is not modified: \u003cul\u003e \u003cli\u003eThe \u003ccode\u003esrcPos\u003c/code\u003e argument is negative. \u003cli\u003eThe \u003ccode\u003edestPos\u003c/code\u003e argument is negative. \u003cli\u003eThe \u003ccode\u003elength\u003c/code\u003e argument is negative. \u003cli\u003e\u003ccode\u003esrcPos+length\u003c/code\u003e is greater than \u003ccode\u003esrc.length\u003c/code\u003e, the length of the source array. \u003cli\u003e\u003ccode\u003edestPos+length\u003c/code\u003e is greater than \u003ccode\u003edest.length\u003c/code\u003e, the length of the destination array. \u003c/ul\u003e \u003cp\u003e Otherwise, if any actual component of the source array from position \u003ccode\u003esrcPos\u003c/code\u003e through \u003ccode\u003esrcPos+length-1\u003c/code\u003e cannot be converted to the component type of the destination array by assignment conversion, an \u003ccode\u003eArrayStoreException\u003c/code\u003e is thrown. In this case, let \u003cb\u003e\u003ci\u003ek\u003c/i\u003e\u003c/b\u003e be the smallest nonnegative integer less than length such that \u003ccode\u003esrc[srcPos+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e]\u003c/code\u003e cannot be converted to the component type of the destination array; when the exception is thrown, source array components from positions \u003ccode\u003esrcPos\u003c/code\u003e through \u003ccode\u003esrcPos+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e-1\u003c/code\u003e will already have been copied to destination array positions \u003ccode\u003edestPos\u003c/code\u003e through \u003ccode\u003edestPos+\u003c/code\u003e\u003ci\u003ek\u003c/I\u003e\u003ccode\u003e-1\u003c/code\u003e and no other positions of the destination array will have been modified. (Because of the restrictions already itemized, this paragraph effectively applies only to the situation where both arrays have component types that are reference types.)\n * @param src      the source array.\n * @param srcPos   starting position in the source array.\n * @param dest     the destination array.\n * @param destPos  starting position in the destination data.\n * @param length   the number of array elements to be copied.\n * @exception IndexOutOfBoundsException  if copying would causeaccess of data outside array bounds.\n * @exception ArrayStoreException  if an element in the \u003ccode\u003esrc\u003c/code\u003earray could not be stored into the \u003ccode\u003edest\u003c/code\u003e array because of a type mismatch.\n * @exception NullPointerException if either \u003ccode\u003esrc\u003c/code\u003e or\u003ccode\u003edest\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n */\n","tf":{"freq":{"assign":1,"greater":2,"paragraph":1,"store":4,"arraycopi":1,"perform":1,"type":11,"situat":1,"copi":10,"pos":21,"specifi":3,"referenc":2,"causeaccess":1,"refer":11,"follow":2,"argument":13,"element":2,"except":12,"thrown":6,"index":2,"whose":1,"number":2,"restrict":1,"content":1,"appli":1,"outsid":1,"start":2,"will":2,"pointer":3,"sourc":8,"negat":3,"posit":12,"array":39,"otherwis":3,"primit":3,"data":2,"convers":1,"convert":2,"object":3,"length":16,"temporari":2,"src":24,"subsequ":1,"less":1,"smallest":1,"true":2,"equal":1,"begin":1,"differ":1,"either":1,"dest":20,"effect":1,"compon":15,"nonneg":1,"item":1,"modifi":4,"actual":1,"alreadi":2,"mismatch":1,"first":1,"integ":1,"respect":1,"bound":3,"destin":14},"maxFreq":39,"totalTerms":314},"loc":0}