{"id":13958,"className":"java.lang.ClassValue","methodName":"get","signature":"\u003cjava.lang.ClassValue: T get(java.lang.Class)\u003e","javadoc":"/** \n * Returns the value for the given class. If no value has yet been computed, it is obtained by an invocation of the  {@link #computeValue computeValue} method.\u003cp\u003e The actual installation of the value on the class is performed atomically. At that point, if several racing threads have computed values, one is chosen, and returned to all the racing threads. \u003cp\u003e The  {@code type} parameter is typically a class, but it may be any type,such as an interface, a primitive type (like  {@code int.class}), or  {@code void.class}. \u003cp\u003e In the absence of  {@code remove} calls, a class value has a simplestate diagram:  uninitialized and initialized. When  {@code remove} calls are made,the rules for value observation are more complex. See the documentation for  {@link #remove remove} for more information.\n * @param type the type whose class value must be computed or retrieved\n * @return the current value associated with this {@code ClassValue}, for the given class or interface\n * @throws NullPointerException if the argument is null\n * @see #remove\n * @see #computeValue\n */\n","tf":{"freq":{"call":2,"atom":1,"primit":1,"complex":1,"link":2,"one":1,"made":1,"simplest":1,"typic":1,"perform":1,"chosen":1,"type":5,"race":2,"must":1,"document":1,"observ":1,"given":2,"associ":1,"rule":1,"thread":2,"current":1,"absenc":1,"valu":12,"initi":1,"argument":1,"except":1,"may":1,"whose":1,"instal":1,"remov":5,"paramet":1,"like":1,"invoc":1,"sever":1,"inform":1,"point":1,"obtain":1,"uniniti":1,"retriev":1,"pointer":1,"actual":1,"comput":6,"method":1,"diagram":1,"yet":1},"maxFreq":12,"totalTerms":74},"loc":10}