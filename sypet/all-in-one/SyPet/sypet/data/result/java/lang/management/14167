{"id":14167,"className":"java.lang.management.ThreadMXBean","methodName":"getThreadInfo","signature":"\u003cjava.lang.management.ThreadMXBean: java.lang.management.ThreadInfo[] getThreadInfo(long[],boolean,boolean)\u003e","javadoc":"/** \n * Returns the thread info for each thread whose ID is in the input array \u003ctt\u003eids\u003c/tt\u003e, with stack trace and synchronization information. \u003cp\u003e This method obtains a snapshot of the thread information for each thread including: \u003cul\u003e \u003cli\u003ethe entire stack trace,\u003c/li\u003e \u003cli\u003ethe object monitors currently locked by the thread if \u003ctt\u003elockedMonitors\u003c/tt\u003e is \u003ctt\u003etrue\u003c/tt\u003e, and\u003c/li\u003e \u003cli\u003ethe \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003e ownable synchronizers\u003c/a\u003e currently locked by the thread if \u003ctt\u003elockedSynchronizers\u003c/tt\u003e is \u003ctt\u003etrue\u003c/tt\u003e.\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e This method returns an array of the \u003ctt\u003eThreadInfo\u003c/tt\u003e objects, each is the thread information about the thread with the same index as in the \u003ctt\u003eids\u003c/tt\u003e array. If a thread of the given ID is not alive or does not exist, \u003ctt\u003enull\u003c/tt\u003e will be set in the corresponding element in the returned array.  A thread is alive if it has been started and has not yet died. \u003cp\u003e If a thread does not lock any object monitor or \u003ctt\u003elockedMonitors\u003c/tt\u003e is \u003ctt\u003efalse\u003c/tt\u003e, the returned \u003ctt\u003eThreadInfo\u003c/tt\u003e object will have an empty \u003ctt\u003eMonitorInfo\u003c/tt\u003e array.  Similarly, if a thread does not lock any synchronizer or \u003ctt\u003elockedSynchronizers\u003c/tt\u003e is \u003ctt\u003efalse\u003c/tt\u003e, the returned \u003ctt\u003eThreadInfo\u003c/tt\u003e object will have an empty \u003ctt\u003eLockInfo\u003c/tt\u003e array. \u003cp\u003e When both \u003ctt\u003elockedMonitors\u003c/tt\u003e and \u003ctt\u003elockedSynchronizers\u003c/tt\u003e parameters are \u003ctt\u003efalse\u003c/tt\u003e, it is equivalent to calling: \u003cblockquote\u003e\u003cpre\u003e {@link #getThreadInfo(long[],int)  getThreadInfo(ids, Integer.MAX_VALUE)}\u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e This method is designed for troubleshooting use, but not for synchronization control.  It might be an expensive operation. \u003cp\u003e \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e The mapped type of \u003ctt\u003eThreadInfo\u003c/tt\u003e is \u003ctt\u003eCompositeData\u003c/tt\u003e with attributes as specified in the {@link ThreadInfo#from ThreadInfo.from} method.\n * @param ids an array of thread IDs.\n * @param lockedMonitors if \u003ctt\u003etrue\u003c/tt\u003e, retrieves all locked monitors.\n * @param lockedSynchronizers if \u003ctt\u003etrue\u003c/tt\u003e, retrieves all lockedownable synchronizers.\n * @return an array of the {@link ThreadInfo} objects, each containinginformation about a thread whose ID is in the corresponding element of the input array of IDs.\n * @throws java.lang.SecurityException if a security managerexists and the caller does not have ManagementPermission(\"monitor\").\n * @throws java.lang.UnsupportedOperationException \u003cul\u003e \u003cli\u003eif \u003ctt\u003elockedMonitors\u003c/tt\u003e is \u003ctt\u003etrue\u003c/tt\u003e but the Java virtual machine does not support monitoring of  {@linkplain #isObjectMonitorUsageSupported object monitor usage}; or\u003c/li\u003e \u003cli\u003eif \u003ctt\u003elockedSynchronizers\u003c/tt\u003e is \u003ctt\u003etrue\u003c/tt\u003e but the Java virtual machine does not support monitoring of  {@linkplain #isSynchronizerUsageSupported ownable synchronizer usage}.\u003c/li\u003e \u003c/ul\u003e\n * @see #isObjectMonitorUsageSupported\n * @see #isSynchronizerUsageSupported\n * @since 1.6\n */\n","tf":{"freq":{"fals":3,"mbean":1,"unsupport":1,"lockedown":1,"type":1,"specifi":1,"info":14,"given":1,"oper":2,"equival":1,"blockquot":2,"thread":24,"permiss":1,"href":1,"element":2,"control":1,"except":2,"index":1,"support":6,"monitor":15,"composit":1,"ownabl":3,"whose":2,"managerexist":1,"inform":3,"machin":2,"input":2,"obtain":1,"aliv":2,"start":1,"will":3,"troubleshoot":1,"stack":2,"entir":1,"array":9,"virtual":2,"caller":1,"linkplain":2,"call":1,"might":1,"correspond":2,"link":3,"data":1,"use":1,"object":9,"lang":2,"id":6,"attribut":1,"map":1,"current":2,"die":1,"exist":1,"similar":1,"includ":1,"manag":1,"trace":2,"snapshot":1,"lock":17,"paramet":1,"true":6,"access":1,"containinginform":1,"empti":2,"secur":2,"retriev":2,"pre":2,"expens":1,"java":4,"server":1,"html":1,"method":4,"usag":6,"integ":1,"design":1,"yet":1},"maxFreq":24,"totalTerms":212},"loc":0}