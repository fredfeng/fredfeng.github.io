{"id":13288,"className":"java.lang.SecurityManager","methodName":"checkMemberAccess","signature":"\u003cjava.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to access members. \u003cp\u003e The default policy is to allow access to PUBLIC members, as well as access to classes that have the same class loader as the caller. In all other cases, this method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\") \u003c/code\u003e permission. \u003cp\u003e If this method is overridden, then a call to \u003ccode\u003esuper.checkMemberAccess\u003c/code\u003e cannot be made, as the default implementation of \u003ccode\u003echeckMemberAccess\u003c/code\u003e relies on the code being checked being at a stack depth of 4.\n * @param clazz the class that reflection is to be performed on.\n * @param which type of access, PUBLIC or DECLARED.\n * @exception SecurityException if the caller does not havepermission to access members.\n * @exception NullPointerException if the \u003ccode\u003eclazz\u003c/code\u003e argument is\u003ccode\u003enull\u003c/code\u003e.\n * @see java.lang.reflect.Member\n * @since JDK1.1\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"caller":2,"call":3,"allow":2,"overridden":1,"made":1,"perform":1,"well":1,"type":1,"lang":1,"reli":1,"declar":1,"thread":1,"permiss":6,"argument":1,"member":8,"except":5,"check":7,"loader":1,"runtim":1,"polici":1,"access":9,"depth":1,"havepermiss":1,"secur":3,"pointer":1,"java":2,"method":2,"stack":1,"clazz":2,"reflect":2},"maxFreq":9,"totalTerms":70},"loc":23}