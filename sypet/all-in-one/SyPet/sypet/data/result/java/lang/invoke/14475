{"id":14475,"className":"java.lang.invoke.MethodHandles","methodName":"filterReturnValue","signature":"\u003cjava.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)\u003e","javadoc":"/** \n * Adapts a target method handle by post-processing its return value (if any) with a filter (another method handle). The result of the filter is returned from the adapter. \u003cp\u003e If the target returns a value, the filter must accept that value as its only argument. If the target returns void, the filter must accept no arguments. \u003cp\u003e The return type of the filter replaces the return type of the target in the resulting adapted method handle. The argument type of the filter (if any) must be identical to the return type of the target. \u003cb\u003eExample:\u003c/b\u003e \u003cp\u003e\u003cblockquote\u003e\u003cpre\u003e import static java.lang.invoke.MethodHandles.*; import static java.lang.invoke.MethodType.*; ... MethodHandle cat \u003d lookup().findVirtual(String.class, \"concat\", methodType(String.class, String.class)); MethodHandle length \u003d lookup().findVirtual(String.class, \"length\", methodType(int.class)); System.out.println((String) cat.invokeExact(\"x\", \"y\")); // xy MethodHandle f0 \u003d filterReturnValue(cat, length); System.out.println((int) f0.invokeExact(\"x\", \"y\")); // 2 \u003c/pre\u003e\u003c/blockquote\u003e \u003cp\u003e Here is pseudocode for the resulting adapter: \u003cblockquote\u003e\u003cpre\u003e V target(A...); T filter(V); T adapter(A... a) { V v \u003d target(a...); return filter(v); } // and if the target has a void return: void target2(A...); T filter2(); T adapter2(A... a) { target2(a...); return filter2(); } // and if the filter has a void return: V target3(A...); void filter3(V); void adapter3(A... a) { V v \u003d target3(a...); filter3(v); } \u003c/pre\u003e\u003c/blockquote\u003e\n * @param target the method handle to invoke before filtering the return value\n * @param filter method handle to call on the return value\n * @return method handle which incorporates the specified return value filtering logic\n * @throws NullPointerException if either argument is null\n * @throws IllegalArgumentException if the argument list of {@code filter}does not match the return type of target as described above\n */\n","tf":{"freq":{"virtual":2,"call":1,"result":3,"cat":3,"incorpor":1,"accept":2,"anoth":1,"adapt":7,"type":8,"pseudocod":1,"lang":2,"lookup":2,"must":3,"specifi":1,"ident":1,"println":2,"blockquot":4,"exact":2,"length":3,"valu":8,"find":2,"argument":6,"except":2,"post":1,"invok":5,"describ":1,"list":1,"illeg":1,"concat":1,"logic":1,"handl":10,"process":1,"either":1,"system":2,"pre":4,"string":5,"replac":1,"target":14,"exampl":1,"pointer":1,"method":13,"java":2,"match":1,"filter":19},"maxFreq":19,"totalTerms":153},"loc":24}