{"id":13932,"className":"java.lang.Thread","methodName":"join","signature":"\u003cjava.lang.Thread: void join(long,int)\u003e","javadoc":"/** \n * Waits at most  {@code millis} milliseconds plus{@code nanos} nanoseconds for this thread to die.\u003cp\u003e This implementation uses a loop of  {@code this.wait} callsconditioned on  {@code this.isAlive}. As a thread terminates the {@code this.notifyAll} method is invoked. It is recommended thatapplications not use  {@code wait},  {@code notify}, or {@code notifyAll} on {@code Thread} instances.\n * @param millis the time to wait in milliseconds\n * @param nanos {@code 0-999999} additional nanoseconds to wait\n * @throws IllegalArgumentException if the value of  {@code millis} is negative, or the valueof  {@code nanos} is not in the range {@code 0-999999}\n * @throws InterruptedException if any thread has interrupted the current thread. The \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is cleared when this exception is thrown.\n */\n","tf":{"freq":{"use":2,"milli":3,"nanosecond":2,"wait":5,"recommend":1,"clear":1,"time":1,"rang":1,"millisecond":2,"thread":6,"current":2,"loop":1,"die":1,"valu":1,"notifi":3,"argument":1,"plus":1,"addit":1,"thrown":1,"except":3,"status":1,"invok":1,"nano":3,"join":1,"illeg":1,"interrupt":3,"instanc":1,"valueof":1,"callscondit":1,"termin":1,"aliv":1,"thatappl":1,"negat":1,"method":1},"maxFreq":6,"totalTerms":57},"loc":17}