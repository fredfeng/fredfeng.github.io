{"id":13396,"className":"java.lang.String","methodName":"String","signature":"\u003cjava.lang.String: void String(byte[],int)\u003e","javadoc":"/** \n * Allocates a new  {@code String} containing characters constructed froman array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003ein the resulting string is constructed from the corresponding component \u003ci\u003eb\u003c/i\u003e in the byte array such that: \u003cblockquote\u003e\u003cpre\u003e \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8) | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff)) \u003c/pre\u003e\u003c/blockquote\u003e\n * @deprecated  This method does not properly convert bytes intocharacters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the {@code String} constructors that take a {@link java.nio.charset.Charset}, charset name, or that use the platform\u0027s default charset.\n * @param ascii The bytes to be converted to characters\n * @param hibyte The top 8 bits of each 16-bit Unicode code unit\n * @see #String(byte[],int,int,java.lang.String)\n * @see #String(byte[],int,int,java.nio.charset.Charset)\n * @see #String(byte[],int,int)\n * @see #String(byte[],java.lang.String)\n * @see #String(byte[],java.nio.charset.Charset)\n * @see #String(byte[])\n */\n","tf":{"freq":{"result":1,"deprec":1,"via":1,"correspond":1,"link":1,"xff":2,"use":1,"way":1,"convert":2,"lang":2,"ascii":1,"hibyt":2,"blockquot":2,"name":1,"intocharact":1,"valu":1,"proper":1,"top":1,"constructor":1,"nbsp":1,"platform":1,"charact":3,"charset":8,"unit":1,"bit":3,"compon":1,"take":1,"pre":2,"contain":1,"string":12,"unicod":1,"nio":3,"java":5,"method":1,"construct":2,"prefer":1,"integ":1,"froman":1,"amp":2,"array":2,"alloc":1},"maxFreq":12,"totalTerms":78},"loc":3}