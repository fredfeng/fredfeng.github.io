{"id":14275,"className":"java.lang.reflect.Method","methodName":"getGenericReturnType","signature":"\u003cjava.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()\u003e","javadoc":"/** \n * Returns a  {@code Type} object that represents the formal returntype of the method represented by this  {@code Method} object.\u003cp\u003eIf the return type is a parameterized type, the  {@code Type} object returned must accurately reflectthe actual type parameters used in the source code. \u003cp\u003eIf the return type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.\n * @return  a {@code Type} object that represents the formal returntype of the underlying  method\n * @throws GenericSignatureFormatError if the generic method signature does not conform to the format specified in \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n * @throws TypeNotPresentException if the underlying method\u0027sreturn type refers to a non-existent type declaration\n * @throws MalformedParameterizedTypeException if theunderlying method\u0027s return typed refers to a parameterized type that cannot be instantiated for any reason\n * @since 1.5\n */\n","tf":{"freq":{"virtual":1,"generic":3,"otherwis":1,"returntyp":2,"reason":1,"trade":1,"instanti":1,"variabl":1,"use":1,"theunder":1,"object":4,"type":16,"signatur":2,"must":1,"specifi":1,"parameter":4,"declar":1,"refer":2,"accur":1,"exist":1,"sreturn":1,"except":2,"error":1,"repres":3,"creat":1,"paramet":1,"resolv":1,"format":2,"non":1,"cite":2,"present":1,"malform":1,"specif":1,"machin":1,"formal":2,"conform":1,"reflectth":1,"actual":1,"java":1,"method":6,"sourc":1},"maxFreq":16,"totalTerms":78},"loc":5}