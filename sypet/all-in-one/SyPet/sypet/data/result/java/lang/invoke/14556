{"id":14556,"className":"java.lang.invoke.SwitchPoint","methodName":"invalidateAll","signature":"\u003cjava.lang.invoke.SwitchPoint: void invalidateAll(java.lang.invoke.SwitchPoint[])\u003e","javadoc":"/** \n * Sets all of the given switch points into the invalid state. After this call executes, no thread will observe any of the switch points to be in a valid state. \u003cp\u003e This operation is likely to be expensive and should be used sparingly. If possible, it should be buffered for batch processing on sets of switch points. \u003cp\u003e If  {@code switchPoints} contains a null element,a  {@code NullPointerException} will be raised.In this case, some non-null elements in the array may be processed before the method returns abnormally. Which elements these are (if any) is implementation-dependent. \u003cp style\u003d\"font-size:smaller;\"\u003e \u003cem\u003eDiscussion:\u003c/em\u003e For performance reasons,  {@code invalidateAll} is not a virtual methodon a single switch point, but rather applies to a set of switch points. Some implementations may incur a large fixed overhead cost for processing one or more invalidation operations, but a small incremental cost for each additional invalidation. In any case, this operation is likely to be costly, since other threads may have to be somehow interrupted in order to make them notice the updated switch point state. However, it may be observed that a single call to invalidate several switch points has the same formal effect as many calls, each on just one of the switch points. \u003cp style\u003d\"font-size:smaller;\"\u003e \u003cem\u003eImplementation Note:\u003c/em\u003e Simple implementations of  {@code SwitchPoint} may usea private  {@link MutableCallSite} to publish the state of a switch point.In such an implementation, the  {@code invalidateAll} method cansimply change the call site\u0027s target, and issue one call to {@linkplain MutableCallSite#syncAll synchronize} all theprivate call sites.\n * @param switchPoints an array of call sites to be synchronized\n * @throws NullPointerException if the {@code switchPoints} array reference is nullor the array contains a null\n */\n","tf":{"freq":{"simpl":1,"somehow":1,"reason":1,"singl":2,"mutabl":2,"possibl":1,"perform":1,"usea":1,"notic":1,"nullor":1,"buffer":1,"observ":2,"overhead":1,"invalid":7,"given":1,"refer":1,"oper":3,"thread":2,"howev":1,"mani":1,"increment":1,"element":3,"except":2,"font":2,"spare":1,"methodon":1,"like":2,"cost":3,"non":1,"size":2,"formal":1,"appli":1,"updat":1,"batch":1,"discuss":1,"contain":2,"will":2,"pointer":2,"execut":1,"make":1,"small":1,"array":4,"cansimpli":1,"virtual":1,"linkplain":1,"call":9,"valid":1,"link":1,"one":3,"state":4,"use":1,"issu":1,"smaller":2,"rais":1,"order":1,"style":2,"sync":1,"fix":1,"rather":1,"publish":1,"thepriv":1,"note":1,"site":5,"just":1,"addit":1,"may":5,"depend":1,"sever":1,"interrupt":1,"process":3,"abnorm":1,"point":13,"effect":1,"incur":1,"larg":1,"target":1,"expens":1,"method":2,"chang":1},"maxFreq":13,"totalTerms":143},"loc":11}