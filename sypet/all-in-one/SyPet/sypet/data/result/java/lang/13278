{"id":13278,"className":"java.lang.SecurityManager","methodName":"checkPropertyAccess","signature":"\u003cjava.lang.SecurityManager: void checkPropertyAccess(java.lang.String)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to access the system property with the specified \u003ccode\u003ekey\u003c/code\u003e name. \u003cp\u003e This method is used by the \u003ccode\u003egetProperty\u003c/code\u003e method of class \u003ccode\u003eSystem\u003c/code\u003e. \u003cp\u003e This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003ePropertyPermission(key, \"read\")\u003c/code\u003e permission. \u003cp\u003e \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkPropertyAccess\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param key   a system property key.\n * @exception SecurityException  if the calling thread does not havepermission to access the specified system property.\n * @exception NullPointerException if the \u003ccode\u003ekey\u003c/code\u003e argument is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is empty.\n * @see java.lang.System#getProperty(java.lang.String)\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"call":4,"allow":1,"overridden":1,"normal":1,"use":1,"lang":2,"specifi":2,"name":1,"thread":2,"permiss":6,"read":1,"key":6,"argument":2,"except":8,"check":5,"access":4,"illeg":1,"empti":1,"havepermiss":1,"point":1,"system":5,"secur":3,"string":1,"pointer":1,"java":3,"method":5,"properti":8,"make":1},"maxFreq":8,"totalTerms":78},"loc":4}