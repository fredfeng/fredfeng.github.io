{"id":13878,"className":"java.lang.Runtime","methodName":"load","signature":"\u003cjava.lang.Runtime: void load(java.lang.String)\u003e","javadoc":"/** \n * Loads the specified filename as a dynamic library. The filename argument must be a complete path name, (for example \u003ccode\u003eRuntime.getRuntime().load(\"/home/avh/lib/libX11.so\");\u003c/code\u003e). \u003cp\u003e First, if there is a security manager, its \u003ccode\u003echeckLink\u003c/code\u003e method is called with the \u003ccode\u003efilename\u003c/code\u003e as its argument. This may result in a security exception. \u003cp\u003e This is similar to the method  {@link #loadLibrary(String)}, but it accepts a general file name as an argument rather than just a library name, allowing any file of native code to be loaded. \u003cp\u003e The method  {@link System#load(String)} is the conventional andconvenient means of invoking this method.\n * @param filename   the file to load.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckLink\u003c/code\u003e method doesn\u0027t allow loading of the specified dynamic library\n * @exception UnsatisfiedLinkError  if the file does not exist.\n * @exception NullPointerException if \u003ccode\u003efilename\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n * @see java.lang.Runtime#getRuntime()\n * @see java.lang.SecurityException\n * @see java.lang.SecurityManager#checkLink(java.lang.String)\n */\n","tf":{"freq":{"unsatisfi":1,"home":1,"call":1,"result":1,"convent":1,"allow":2,"accept":1,"link":6,"lang":4,"must":1,"specifi":2,"file":4,"name":3,"path":1,"mean":1,"rather":1,"exist":2,"avh":1,"dynam":2,"similar":1,"complet":1,"just":1,"argument":3,"except":7,"may":1,"error":1,"check":3,"invok":1,"manag":3,"runtim":4,"filenam":5,"librari":4,"andconveni":1,"general":1,"system":1,"lib":2,"secur":6,"string":3,"exampl":1,"pointer":1,"java":4,"load":8,"method":5,"first":1},"maxFreq":8,"totalTerms":105},"loc":3}