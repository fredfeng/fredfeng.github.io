{"id":13274,"className":"java.lang.SecurityManager","methodName":"checkAccept","signature":"\u003cjava.lang.SecurityManager: void checkAccept(java.lang.String,int)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not permitted to accept a socket connection from the specified host and port number. \u003cp\u003e This method is invoked for the current security manager by the \u003ccode\u003eaccept\u003c/code\u003e method of class \u003ccode\u003eServerSocket\u003c/code\u003e. \u003cp\u003e This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eSocketPermission(host+\":\"+port,\"accept\")\u003c/code\u003e permission. \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkAccept\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param host   the host name of the socket connection.\n * @param port   the port number of the socket connection.\n * @exception SecurityException  if the calling thread does not havepermission to accept the connection.\n * @exception NullPointerException if the \u003ccode\u003ehost\u003c/code\u003e argument is\u003ccode\u003enull\u003c/code\u003e.\n * @see java.net.ServerSocket#accept()\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"port":4,"call":4,"connect":4,"overridden":1,"accept":7,"permit":1,"normal":1,"net":1,"specifi":1,"thread":2,"name":1,"current":1,"permiss":6,"socket":6,"argument":1,"except":6,"host":5,"check":5,"invok":1,"manag":1,"number":2,"havepermiss":1,"point":1,"secur":4,"pointer":1,"java":2,"method":5,"server":2,"make":1},"maxFreq":7,"totalTerms":78},"loc":10}