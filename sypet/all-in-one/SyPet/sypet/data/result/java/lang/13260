{"id":13260,"className":"java.lang.SecurityManager","methodName":"checkAccess","signature":"\u003cjava.lang.SecurityManager: void checkAccess(java.lang.Thread)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to modify the thread argument. \u003cp\u003e This method is invoked for the current security manager by the \u003ccode\u003estop\u003c/code\u003e, \u003ccode\u003esuspend\u003c/code\u003e, \u003ccode\u003eresume\u003c/code\u003e, \u003ccode\u003esetPriority\u003c/code\u003e, \u003ccode\u003esetName\u003c/code\u003e, and \u003ccode\u003esetDaemon\u003c/code\u003e methods of class \u003ccode\u003eThread\u003c/code\u003e. \u003cp\u003e If the thread argument is a system thread (belongs to the thread group with a \u003ccode\u003enull\u003c/code\u003e parent) then this method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eRuntimePermission(\"modifyThread\")\u003c/code\u003e permission. If the thread argument is \u003ci\u003enot\u003c/i\u003e a system thread, this method just returns silently. \u003cp\u003e Applications that want a stricter policy should override this method. If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the \u003ccode\u003eRuntimePermission(\"modifyThread\")\u003c/code\u003e permission, and if so, return silently. This is to ensure that code granted that permission (such as the JDK itself) is allowed to manipulate any thread. \u003cp\u003e If this method is overridden, then \u003ccode\u003esuper.checkAccess\u003c/code\u003e should be called by the first statement in the overridden method, or the equivalent security check should be placed in the overridden method.\n * @param t   the thread to be checked.\n * @exception SecurityException  if the calling thread does not havepermission to modify the thread.\n * @exception NullPointerException if the thread argument is\u003ccode\u003enull\u003c/code\u003e.\n * @see java.lang.Thread#resume() resume\n * @see java.lang.Thread#setDaemon(boolean) setDaemon\n * @see java.lang.Thread#setName(java.lang.String) setName\n * @see java.lang.Thread#setPriority(int) setPriority\n * @see java.lang.Thread#stop() stop\n * @see java.lang.Thread#suspend() suspend\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"silent":2,"suspend":3,"call":5,"stop":3,"manipul":1,"grant":1,"allow":2,"belong":1,"overridden":4,"lang":7,"resum":3,"applic":1,"ensur":1,"equival":1,"thread":22,"name":3,"current":1,"permiss":9,"place":1,"want":1,"just":1,"argument":4,"addit":1,"except":5,"check":8,"prioriti":3,"invok":1,"manag":1,"runtim":2,"parent":1,"polici":1,"access":2,"havepermiss":1,"statement":1,"system":2,"secur":5,"string":1,"modifi":4,"pointer":1,"java":8,"method":10,"daemon":3,"group":1,"first":1,"stricter":1},"maxFreq":22,"totalTerms":141},"loc":10}