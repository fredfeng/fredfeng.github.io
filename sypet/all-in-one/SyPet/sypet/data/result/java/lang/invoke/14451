{"id":14451,"className":"java.lang.invoke.MethodHandles$Lookup","methodName":"findSpecial","signature":"\u003cjava.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findSpecial(java.lang.Class,java.lang.String,java.lang.invoke.MethodType,java.lang.Class)\u003e","javadoc":"/** \n * Produces an early-bound method handle for a virtual method, as if called from an  {@code invokespecial}instruction from  {@code caller}. The type of the method handle will be that of the method, with a suitably restricted receiver type (such as  {@code caller}) prepended. The method and all its argument types must be accessible to the caller. \u003cp\u003e When called, the handle will treat the first argument as a receiver, but will not dispatch on the receiver\u0027s type. (This direct invocation action is identical with that performed by an {@code invokespecial} instruction.)\u003cp\u003e If the explicitly specified caller class is not identical with the lookup class, or if this lookup object does not have private access privileges, the access fails. \u003cp\u003e The returned method handle will have {@linkplain MethodHandle#asVarargsCollector variable arity} if and only ifthe method\u0027s variable arity modifier bit ( {@code 0x0080}) is set.\n * @param refc the class or interface from which the method is accessed\n * @param name the name of the method (which must not be \"\u0026lt;init\u0026gt;\")\n * @param type the type of the method, with the receiver argument omitted\n * @param specialCaller the proposed calling class to perform the {@code invokespecial}\n * @return the desired method handle\n * @throws NoSuchMethodException if the method does not exist\n * @throws IllegalAccessException if access checking failsor if the method\u0027s variable arity modifier bit is set and  {@code asVarargsCollector} fails\n * @exception SecurityException if a security manager is present and it\u003ca href\u003d\"MethodHandles.Lookup.html#secmgr\"\u003erefuses access\u003c/a\u003e\n * @throws NullPointerException if any argument is null\n */\n","tf":{"freq":{"vararg":2,"suitabl":1,"variabl":3,"perform":2,"desir":1,"type":6,"earli":1,"lookup":3,"must":2,"specifi":1,"instruct":2,"fail":2,"action":1,"href":1,"argument":4,"except":5,"secmgr":1,"init":1,"restrict":1,"invoc":1,"present":1,"bit":2,"failsor":1,"explicit":1,"will":4,"pointer":1,"propos":1,"treat":1,"virtual":1,"caller":5,"call":3,"linkplain":1,"refc":1,"object":1,"refus":1,"collector":2,"ident":2,"name":2,"dispatch":1,"exist":1,"find":1,"privileg":1,"direct":1,"ariti":3,"check":1,"ifth":1,"manag":1,"prepend":1,"receiv":4,"produc":1,"access":7,"illeg":1,"handl":7,"secur":2,"omit":1,"modifi":2,"html":1,"special":2,"method":16,"invokespeci":3,"first":1,"bound":1},"maxFreq":16,"totalTerms":133},"loc":6}