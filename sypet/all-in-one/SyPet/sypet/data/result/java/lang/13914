{"id":13914,"className":"java.lang.Thread","methodName":"stop","signature":"\u003cjava.lang.Thread: void stop()\u003e","javadoc":"/** \n * Forces the thread to stop executing. \u003cp\u003e If there is a security manager installed, its \u003ccode\u003echeckAccess\u003c/code\u003e method is called with \u003ccode\u003ethis\u003c/code\u003e as its argument. This may result in a \u003ccode\u003eSecurityException\u003c/code\u003e being raised (in the current thread). \u003cp\u003e If this thread is different from the current thread (that is, the current thread is trying to stop a thread other than itself), the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method (with a \u003ccode\u003eRuntimePermission(\"stopThread\")\u003c/code\u003e argument) is called in addition. Again, this may result in throwing a \u003ccode\u003eSecurityException\u003c/code\u003e (in the current thread). \u003cp\u003e The thread represented by this thread is forced to stop whatever it is doing abnormally and to throw a newly created \u003ccode\u003eThreadDeath\u003c/code\u003e object as an exception. \u003cp\u003e It is permitted to stop a thread that has not yet been started. If the thread is eventually started, it immediately terminates. \u003cp\u003e An application should not normally try to catch \u003ccode\u003eThreadDeath\u003c/code\u003e unless it must do some extraordinary cleanup operation (note that the throwing of \u003ccode\u003eThreadDeath\u003c/code\u003e causes \u003ccode\u003efinally\u003c/code\u003e clauses of \u003ccode\u003etry\u003c/code\u003e statements to be executed before the thread officially dies).  If a \u003ccode\u003ecatch\u003c/code\u003e clause catches a \u003ccode\u003eThreadDeath\u003c/code\u003e object, it is important to rethrow the object so that the thread actually dies. \u003cp\u003e The top-level error handler that reacts to otherwise uncaught exceptions does not print out a message or otherwise notify the application if the uncaught exception is an instance of \u003ccode\u003eThreadDeath\u003c/code\u003e.\n * @exception SecurityException  if the current thread cannotmodify this thread.\n * @see #interrupt()\n * @see #checkAccess()\n * @see #run()\n * @see #start()\n * @see ThreadDeath\n * @see ThreadGroup#uncaughtException(Thread,Throwable)\n * @see SecurityManager#checkAccess(Thread)\n * @see SecurityManager#checkPermission\n * @deprecated This method is inherently unsafe.  Stopping a thread withThread.stop causes it to unlock all of the monitors that it has locked (as a natural consequence of the unchecked \u003ccode\u003eThreadDeath\u003c/code\u003e exception propagating up the stack).  If any of the objects previously protected by these monitors were in an inconsistent state, the damaged objects become visible to other threads, potentially resulting in arbitrary behavior.  Many uses of \u003ccode\u003estop\u003c/code\u003e should be replaced by code that simply modifies some variable to indicate that the target thread should stop running.  The target thread should check this variable regularly, and return from its run method in an orderly fashion if the variable indicates that it is to stop running.  If the target thread waits for long periods (on a condition variable, for example), the \u003ccode\u003einterrupt\u003c/code\u003e method should be used to interrupt the wait. For more information, see \u003ca href\u003d\" {@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html\"\u003eWhy are Thread.stop, Thread.suspend and Thread.resume Deprecated?\u003c/a\u003e.\n */\n","tf":{"freq":{"cleanup":1,"deprec":3,"variabl":4,"wait":2,"becom":1,"oper":1,"thread":36,"propag":1,"href":1,"mani":1,"unlock":1,"death":7,"runtim":1,"instanc":1,"newli":1,"start":3,"primit":1,"inconsist":1,"simpli":1,"fashion":1,"eventu":1,"cannotmodifi":1,"concurr":1,"visibl":1,"behavior":1,"use":2,"run":4,"resum":1,"applic":2,"technot":1,"unless":1,"indic":2,"current":5,"forc":2,"note":1,"addit":1,"may":2,"previous":1,"repres":1,"messag":1,"claus":2,"uncaught":3,"access":3,"potenti":1,"inher":1,"abnorm":1,"damag":1,"differ":1,"exampl":1,"method":5,"throwabl":1,"extraordinari":1,"yet":1,"suspend":1,"root":1,"normal":1,"permit":1,"consequ":1,"natur":1,"uncheck":1,"must":1,"arbitrari":1,"level":1,"permiss":3,"unsaf":1,"offici":1,"whatev":1,"rethrow":1,"argument":2,"notifi":1,"except":9,"monitor":2,"creat":1,"period":1,"statement":1,"inform":1,"execut":2,"stack":1,"otherwis":2,"call":2,"stop":12,"result":3,"state":1,"object":5,"rais":1,"order":1,"die":2,"immedi":1,"react":1,"top":1,"condit":1,"check":6,"error":1,"regular":1,"manag":4,"instal":1,"lock":1,"print":1,"interrupt":3,"guid":1,"termin":1,"caus":2,"secur":7,"replac":1,"modifi":1,"target":3,"actual":1,"html":1,"group":1,"handler":1},"maxFreq":36,"totalTerms":232},"loc":3}