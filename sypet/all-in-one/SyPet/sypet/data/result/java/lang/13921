{"id":13921,"className":"java.lang.Thread","methodName":"suspend","signature":"\u003cjava.lang.Thread: void suspend()\u003e","javadoc":"/** \n * Suspends this thread. \u003cp\u003e First, the \u003ccode\u003echeckAccess\u003c/code\u003e method of this thread is called with no arguments. This may result in throwing a \u003ccode\u003eSecurityException \u003c/code\u003e(in the current thread). \u003cp\u003e If the thread is alive, it is suspended and makes no further progress unless and until it is resumed.\n * @exception SecurityException  if the current thread cannot modifythis thread.\n * @see #checkAccess\n * @deprecated   This method has been deprecated, as it isinherently deadlock-prone.  If the target thread holds a lock on the monitor protecting a critical system resource when it is suspended, no thread can access this resource until the target thread is resumed. If the thread that would resume the target thread attempts to lock this monitor prior to calling \u003ccode\u003eresume\u003c/code\u003e, deadlock results.  Such deadlocks typically manifest themselves as \"frozen\" processes. For more information, see \u003ca href\u003d\" {@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html\"\u003eWhy are Thread.stop, Thread.suspend and Thread.resume Deprecated?\u003c/a\u003e.\n */\n","tf":{"freq":{"attempt":1,"suspend":5,"progress":1,"stop":1,"primit":1,"result":2,"call":2,"deprec":4,"root":1,"concurr":1,"manifest":1,"typic":1,"frozen":1,"resum":5,"technot":1,"prior":1,"resourc":2,"unless":1,"thread":15,"current":2,"href":1,"deadlock":3,"argument":1,"except":3,"may":1,"monitor":2,"check":2,"hold":1,"isinher":1,"lock":2,"access":3,"modifythi":1,"prone":1,"guid":1,"process":1,"inform":1,"system":1,"secur":2,"aliv":1,"target":3,"html":1,"method":2,"first":1,"make":1,"critic":1},"maxFreq":15,"totalTerms":87},"loc":4}