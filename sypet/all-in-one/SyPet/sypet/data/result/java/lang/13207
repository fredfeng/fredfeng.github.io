{"id":13207,"className":"java.lang.Character","methodName":"getName","signature":"\u003cjava.lang.Character: java.lang.String getName(int)\u003e","javadoc":"/** \n * Returns the Unicode name of the specified character {@code codePoint}, or null if the code point is {@link #UNASSIGNED unassigned}. \u003cp\u003e Note: if the specified character is not assigned a name by the \u003ci\u003eUnicodeData\u003c/i\u003e file (part of the Unicode Character Database maintained by the Unicode Consortium), the returned name is the same as the result of expression. \u003cblockquote\u003e {@code Character.UnicodeBlock.of(codePoint).toString().replace(\u0027_\u0027, \u0027 \u0027) + \" \" + Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH);}\u003c/blockquote\u003e\n * @param codePoint the character (Unicode code point)\n * @return the Unicode name of the specified character, or null ifthe code point is unassigned.\n * @exception IllegalArgumentException if the specified{@code codePoint} is not a valid Unicodecode point.\n * @since 1.7\n */\n","tf":{"freq":{"valid":1,"result":1,"assign":1,"link":1,"maintain":1,"data":1,"block":1,"unassign":2,"express":1,"specifi":4,"unicodecod":1,"consortium":1,"upper":1,"hex":1,"file":1,"blockquot":2,"name":5,"note":1,"argument":1,"except":2,"ifth":1,"charact":6,"illeg":1,"databas":1,"point":9,"string":2,"replac":1,"unicod":7,"local":1,"part":1,"integ":1},"maxFreq":9,"totalTerms":61},"loc":16}