{"id":13510,"className":"java.lang.Long","methodName":"rotateRight","signature":"\u003cjava.lang.Long: long rotateRight(long,int)\u003e","javadoc":"/** \n * Returns the value obtained by rotating the two\u0027s complement binary representation of the specified  {@code long} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) \u003cp\u003eNote that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) \u003d\u003d rotateLeft(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:  {@code rotateRight(val,distance) \u003d\u003d rotateRight(val, distance \u0026 0x3F)}.\n * @return the value obtained by rotating the two\u0027s complement binaryrepresentation of the specified  {@code long} value right by thespecified number of bits.\n * @since 1.5\n */\n","tf":{"freq":{"val":4,"binari":1,"last":1,"six":1,"specifi":2,"complement":2,"hand":1,"order":2,"side":1,"equival":1,"reenter":1,"thespecifi":2,"valu":4,"left":3,"binaryrepresent":1,"right":8,"note":2,"ignor":1,"multipl":1,"rotat":11,"number":2,"represent":1,"bit":4,"two":2,"obtain":2,"distanc":7,"even":1,"negat":2,"high":1,"low":1,"also":1,"shift":1},"maxFreq":11,"totalTerms":75},"loc":3}