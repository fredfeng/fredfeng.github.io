{"id":14468,"className":"java.lang.invoke.MethodHandles","methodName":"permuteArguments","signature":"\u003cjava.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int[])\u003e","javadoc":"/** \n * Produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments. The resulting method handle is guaranteed to report a type which is equal to the desired new type. \u003cp\u003e The given array controls the reordering. Call  {@code #I} the number of incoming parameters (the value{@code newType.parameterCount()}, and call  {@code #O} the numberof outgoing parameters (the value  {@code target.type().parameterCount()}). Then the length of the reordering array must be  {@code #O}, and each element must be a non-negative number less than  {@code #I}. For every  {@code N} less than {@code #O}, the  {@code N}-th outgoing argument will be taken from the  {@code I}-th incoming argument, where  {@code I} is {@code reorder[N]}. \u003cp\u003e No argument or return value conversions are applied. The type of each incoming argument, as determined by  {@code newType}, must be identical to the type of the corresponding outgoing parameter or parameters in the target method handle. The return type of  {@code newType} must be identical to the returntype of the original target. \u003cp\u003e The reordering array need not specify an actual permutation. An incoming argument will be duplicated if its index appears more than once in the array, and an incoming argument will be dropped if its index does not appear in the array. As in the case of  {@link #dropArguments(MethodHandle,int,List) dropArguments}, incoming arguments which are not mentioned in the reordering array are may be any type, as determined only by  {@code newType}. \u003cblockquote\u003e\u003cpre\u003e import static java.lang.invoke.MethodHandles.*; import static java.lang.invoke.MethodType.*; ... MethodType intfn1 \u003d methodType(int.class, int.class); MethodType intfn2 \u003d methodType(int.class, int.class, int.class); MethodHandle sub \u003d ... {int x, int y \u003d\u003e x-y} ...; assert(sub.type().equals(intfn2)); MethodHandle sub1 \u003d permuteArguments(sub, intfn2, 0, 1); MethodHandle rsub \u003d permuteArguments(sub, intfn2, 1, 0); assert((int)rsub.invokeExact(1, 100) \u003d\u003d 99); MethodHandle add \u003d ... {int x, int y \u003d\u003e x+y} ...; assert(add.type().equals(intfn2)); MethodHandle twice \u003d permuteArguments(add, intfn1, 0, 0); assert(twice.type().equals(intfn1)); assert((int)twice.invokeExact(21) \u003d\u003d 42); \u003c/pre\u003e\u003c/blockquote\u003e\n * @param target the method handle to invoke after arguments are reordered\n * @param newType the expected type of the new method handle\n * @param reorder an index array which controls the reordering\n * @return a method handle which delegates to the target after itdrops unused arguments and moves and/or duplicates the other arguments\n * @throws NullPointerException if any argument is null\n * @throws IllegalArgumentException if the index array length is not equal tothe arity of the target, or if any index array element not a valid index for a parameter of  {@code newType}, or if two corresponding parameter types in {@code target.type()} and {@code newType} are not identical,\n */\n","tf":{"freq":{"need":1,"returntyp":1,"appear":2,"count":2,"drop":3,"permut":5,"toth":1,"desir":1,"type":26,"must":4,"specifi":1,"expect":1,"given":2,"blockquot":2,"sequenc":1,"exact":2,"report":1,"taken":1,"everi":1,"move":1,"argument":19,"control":2,"element":2,"except":2,"index":6,"invok":5,"number":2,"non":1,"appli":1,"unus":1,"outgo":3,"determin":2,"will":3,"duplic":2,"pointer":1,"negat":1,"incom":6,"array":9,"valid":1,"call":3,"result":1,"sub":5,"correspond":2,"link":1,"convers":1,"adapt":1,"add":3,"lang":2,"rsub":2,"numberof":1,"deleg":1,"twice":3,"ident":3,"length":2,"intfn":8,"mention":1,"valu":3,"less":2,"ariti":1,"may":1,"guarante":1,"paramet":8,"origin":1,"list":1,"equal":5,"produc":1,"illeg":1,"reorder":9,"handl":14,"two":1,"pre":2,"itdrop":1,"target":7,"actual":1,"java":2,"method":19},"maxFreq":26,"totalTerms":249},"loc":7}