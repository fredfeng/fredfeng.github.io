{"id":13425,"className":"java.lang.String","methodName":"regionMatches","signature":"\u003cjava.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)\u003e","javadoc":"/** \n * Tests if two string regions are equal. \u003cp\u003e A substring of this \u003ctt\u003eString\u003c/tt\u003e object is compared to a substring of the argument \u003ctt\u003eother\u003c/tt\u003e. The result is \u003ctt\u003etrue\u003c/tt\u003e if these substrings represent character sequences that are the same, ignoring case if and only if \u003ctt\u003eignoreCase\u003c/tt\u003e is true. The substring of this \u003ctt\u003eString\u003c/tt\u003e object to be compared begins at index \u003ctt\u003etoffset\u003c/tt\u003e and has length \u003ctt\u003elen\u003c/tt\u003e. The substring of \u003ctt\u003eother\u003c/tt\u003e to be compared begins at index \u003ctt\u003eooffset\u003c/tt\u003e and has length \u003ctt\u003elen\u003c/tt\u003e. The result is \u003ctt\u003efalse\u003c/tt\u003e if and only if at least one of the following is true: \u003cul\u003e\u003cli\u003e\u003ctt\u003etoffset\u003c/tt\u003e is negative. \u003cli\u003e\u003ctt\u003eooffset\u003c/tt\u003e is negative. \u003cli\u003e\u003ctt\u003etoffset+len\u003c/tt\u003e is greater than the length of this \u003ctt\u003eString\u003c/tt\u003e object. \u003cli\u003e\u003ctt\u003eooffset+len\u003c/tt\u003e is greater than the length of the other argument. \u003cli\u003e\u003ctt\u003eignoreCase\u003c/tt\u003e is \u003ctt\u003efalse\u003c/tt\u003e and there is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than \u003ctt\u003elen\u003c/tt\u003e such that: \u003cblockquote\u003e\u003cpre\u003e this.charAt(toffset+k) !\u003d other.charAt(ooffset+k) \u003c/pre\u003e\u003c/blockquote\u003e \u003cli\u003e\u003ctt\u003eignoreCase\u003c/tt\u003e is \u003ctt\u003etrue\u003c/tt\u003e and there is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than \u003ctt\u003elen\u003c/tt\u003e such that: \u003cblockquote\u003e\u003cpre\u003e Character.toLowerCase(this.charAt(toffset+k)) !\u003d Character.toLowerCase(other.charAt(ooffset+k)) \u003c/pre\u003e\u003c/blockquote\u003e and: \u003cblockquote\u003e\u003cpre\u003e Character.toUpperCase(this.charAt(toffset+k)) !\u003d Character.toUpperCase(other.charAt(ooffset+k)) \u003c/pre\u003e\u003c/blockquote\u003e \u003c/ul\u003e\n * @param ignoreCase   if \u003ccode\u003etrue\u003c/code\u003e, ignore case when comparingcharacters.\n * @param toffset      the starting offset of the subregion in thisstring.\n * @param other        the string argument.\n * @param ooffset      the starting offset of the subregion in the stringargument.\n * @param len          the number of characters to compare.\n * @return  \u003ccode\u003etrue\u003c/code\u003e if the specified subregion of this stringmatches the specified subregion of the string argument; \u003ccode\u003efalse\u003c/code\u003e otherwise. Whether the matching is exact or case insensitive depends on the \u003ccode\u003eignoreCase\u003c/code\u003e argument.\n */\n","tf":{"freq":{"otherwis":1,"region":2,"fals":3,"result":2,"stringargu":1,"lower":2,"greater":2,"thisstr":1,"test":1,"least":1,"one":1,"object":3,"whether":1,"specifi":2,"subregion":4,"upper":2,"blockquot":6,"sequenc":1,"exact":1,"toffset":7,"length":4,"offset":2,"substr":5,"less":2,"follow":1,"argument":5,"ignor":7,"index":2,"comparingcharact":1,"repres":1,"charact":6,"depend":1,"true":6,"number":1,"equal":1,"len":7,"begin":2,"two":1,"insensit":1,"start":2,"pre":6,"nonneg":2,"string":6,"negat":2,"match":2,"ooffset":7,"stringmatch":1,"integ":2,"compar":4},"maxFreq":7,"totalTerms":134},"loc":38}