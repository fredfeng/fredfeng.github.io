{"id":13420,"className":"java.lang.String","methodName":"equalsIgnoreCase","signature":"\u003cjava.lang.String: boolean equalsIgnoreCase(java.lang.String)\u003e","javadoc":"/** \n * Compares this  {@code String} to another {@code String}, ignoring case considerations.  Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. \u003cp\u003e Two characters  {@code c1} and {@code c2} are considered the sameignoring case if at least one of the following is true: \u003cul\u003e \u003cli\u003e The two characters are the same (as compared by the {@code \u003d\u003d} operator)\u003cli\u003e Applying the method  {@link java.lang.Character#toUpperCase(char)} to each characterproduces the same result \u003cli\u003e Applying the method  {@link java.lang.Character#toLowerCase(char)} to each characterproduces the same result \u003c/ul\u003e\n * @param anotherString The  {@code String} to compare this {@code String} against\n * @return  {@code true} if the argument is not {@code null} and itrepresents an equivalent  {@code String} ignoring case; {@code false} otherwise\n * @see #equals(Object)\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"result":2,"lower":1,"correspond":1,"least":1,"one":1,"link":2,"object":1,"anoth":2,"lang":2,"itrepres":1,"consid":2,"upper":1,"equival":1,"oper":1,"consider":1,"length":1,"follow":1,"argument":1,"ignor":5,"characterproduc":2,"charact":5,"true":2,"equal":4,"two":4,"appli":2,"string":8,"method":2,"java":2,"sameignor":1,"compar":3},"maxFreq":8,"totalTerms":65},"loc":5}