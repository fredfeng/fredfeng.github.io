{"id":13262,"className":"java.lang.SecurityManager","methodName":"checkExit","signature":"\u003cjava.lang.SecurityManager: void checkExit(int)\u003e","javadoc":"/** \n * Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code. \u003cp\u003e This method is invoked for the current security manager by the \u003ccode\u003eexit\u003c/code\u003e method of class \u003ccode\u003eRuntime\u003c/code\u003e. A status of \u003ccode\u003e0\u003c/code\u003e indicates success; other values indicate various errors. \u003cp\u003e This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the \u003ccode\u003eRuntimePermission(\"exitVM.\"+status)\u003c/code\u003e permission. \u003cp\u003e If you override this method, then you should make a call to \u003ccode\u003esuper.checkExit\u003c/code\u003e at the point the overridden method would normally throw an exception.\n * @param status   the exit status.\n * @exception SecurityException if the calling thread does not havepermission to halt the Java Virtual Machine with the specified status.\n * @see java.lang.Runtime#exit(int) exit\n * @see #checkPermission(java.security.Permission) checkPermission\n */\n","tf":{"freq":{"virtual":2,"call":4,"allow":1,"overridden":1,"normal":1,"lang":1,"specifi":2,"indic":2,"thread":2,"permiss":6,"current":1,"valu":1,"various":1,"except":4,"check":5,"error":1,"status":6,"invok":1,"manag":1,"runtim":3,"exit":7,"havepermiss":1,"point":1,"machin":2,"caus":1,"secur":4,"java":4,"method":5,"halt":2,"make":1,"success":1},"maxFreq":7,"totalTerms":75},"loc":3}