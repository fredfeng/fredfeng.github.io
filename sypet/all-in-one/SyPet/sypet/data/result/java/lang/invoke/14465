{"id":14465,"className":"java.lang.invoke.MethodHandles","methodName":"exactInvoker","signature":"\u003cjava.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle exactInvoker(java.lang.invoke.MethodType)\u003e","javadoc":"/** \n * Produces a special \u003cem\u003einvoker method handle\u003c/em\u003e which can be used to invoke any method handle of the given type, as if by  {@link MethodHandle#invokeExact invokeExact}. The resulting invoker will have a type which is exactly equal to the desired type, except that it will accept an additional leading argument of type  {@code MethodHandle}. \u003cp\u003e This method is equivalent to the following code (though it may be more efficient): \u003cp\u003e\u003cblockquote\u003e\u003cpre\u003e publicLookup().findVirtual(MethodHandle.class, \"invokeExact\", type) \u003c/pre\u003e\u003c/blockquote\u003e \u003cp style\u003d\"font-size:smaller;\"\u003e \u003cem\u003eDiscussion:\u003c/em\u003e Invoker method handles can be useful when working with variable method handles of unknown types. For example, to emulate an  {@code invokeExact} call to a variable methodhandle  {@code M}, extract its type  {@code T}, look up the invoker method  {@code X} for {@code T}, and call the invoker method, as  {@code X.invoke(T, A...)}. (It would not work to call  {@code X.invokeExact}, since the type  {@code T}is unknown.) If spreading, collecting, or other argument transformations are required, they can be applied once to the invoker  {@code X} and reused on many {@code M}method handle values, as long as they are compatible with the type of  {@code X}. \u003cp\u003e \u003cem\u003e(Note:  The invoker method is not available via the Core Reflection API. An attempt to call  {@linkplain java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}on the declared  {@code invokeExact} or {@code invoke} method will raise an{@link java.lang.UnsupportedOperationException UnsupportedOperationException}.)\u003c/em\u003e \u003cp\u003e This method throws no reflective or security exceptions.\n * @param type the desired target type\n * @return a method handle suitable for invoking any method handle of the given type\n */\n","tf":{"freq":{"unsupport":2,"via":1,"accept":1,"suitabl":1,"variabl":2,"lead":1,"desir":2,"type":12,"reus":1,"lookup":1,"though":1,"requir":1,"given":2,"oper":2,"equival":1,"blockquot":2,"exact":8,"effici":1,"follow":1,"argument":2,"work":2,"mani":1,"except":4,"invok":20,"font":1,"avail":1,"extract":1,"size":1,"appli":1,"discuss":1,"will":3,"compat":1,"collect":1,"attempt":1,"virtual":1,"linkplain":1,"result":1,"call":4,"link":2,"methodhandl":1,"use":2,"lang":3,"smaller":1,"transform":1,"rais":1,"declar":1,"style":1,"valu":1,"note":1,"find":1,"emul":1,"look":1,"addit":1,"may":1,"equal":1,"produc":1,"unknown":2,"handl":10,"secur":1,"pre":2,"target":1,"exampl":1,"java":3,"core":1,"special":1,"method":18,"spread":1,"reflect":4},"maxFreq":20,"totalTerms":158},"loc":3}