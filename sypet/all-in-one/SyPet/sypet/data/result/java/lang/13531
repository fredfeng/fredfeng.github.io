{"id":13531,"className":"java.lang.Math","methodName":"atan2","signature":"\u003cjava.lang.Math: double atan2(double,double)\u003e","javadoc":"/** \n * Returns the angle \u003ci\u003etheta\u003c/i\u003e from the conversion of rectangular coordinates ( {@code x},\u0026nbsp; {@code y}) to polar coordinates (r,\u0026nbsp;\u003ci\u003etheta\u003c/i\u003e). This method computes the phase \u003ci\u003etheta\u003c/i\u003e by computing an arc tangent of  {@code y/x} in the range of -\u003ci\u003epi\u003c/i\u003e to \u003ci\u003epi\u003c/i\u003e. Specialcases: \u003cul\u003e\u003cli\u003eIf either argument is NaN, then the result is NaN. \u003cli\u003eIf the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. \u003cli\u003eIf the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. \u003cli\u003eIf the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the {@code double} value closest to \u003ci\u003epi\u003c/i\u003e.\u003cli\u003eIf the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the {@code double} value closest to -\u003ci\u003epi\u003c/i\u003e.\u003cli\u003eIf the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the {@code double} value closest to \u003ci\u003epi\u003c/i\u003e/2.\u003cli\u003eIf the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the {@code double} value closest to -\u003ci\u003epi\u003c/i\u003e/2.\u003cli\u003eIf both arguments are positive infinity, then the result is the {@code double} value closest to \u003ci\u003epi\u003c/i\u003e/4.\u003cli\u003eIf the first argument is positive infinity and the second argument is negative infinity, then the result is the  {@code double}value closest to 3*\u003ci\u003epi\u003c/i\u003e/4. \u003cli\u003eIf the first argument is negative infinity and the second argument is positive infinity, then the result is the  {@code double} valueclosest to -\u003ci\u003epi\u003c/i\u003e/4. \u003cli\u003eIf both arguments are negative infinity, then the result is the {@code double} value closest to -3*\u003ci\u003epi\u003c/i\u003e/4.\u003c/ul\u003e\u003cp\u003eThe computed result must be within 2 ulps of the exact result. Results must be semi-monotonic.\n * @param y   the ordinate coordinate\n * @param x   the abscissa coordinate\n * @return  the \u003ci\u003etheta\u003c/i\u003e component of the point(\u003ci\u003er\u003c/i\u003e,\u0026nbsp;\u003ci\u003etheta\u003c/i\u003e) in polar coordinates that corresponds to the point (\u003ci\u003ex\u003c/i\u003e,\u0026nbsp;\u003ci\u003ey\u003c/i\u003e) in Cartesian coordinates.\n */\n","tf":{"freq":{"rectangular":1,"result":14,"atan":1,"theta":5,"second":14,"correspond":1,"infin":12,"convers":1,"zero":10,"must":2,"specialcas":1,"cartesian":1,"ordin":1,"arc":1,"valueclosest":1,"rang":1,"exact":1,"finit":6,"closest":7,"valu":7,"nbsp":4,"polar":2,"coordin":6,"argument":31,"abscissa":1,"ulp":1,"semi":1,"monoton":1,"point":2,"either":1,"compon":1,"tangent":1,"comput":3,"negat":16,"method":1,"angl":1,"within":1,"phase":1,"first":14,"posit":16},"maxFreq":31,"totalTerms":193},"loc":3}