{"id":13256,"className":"java.lang.SecurityManager","methodName":"getSecurityContext","signature":"\u003cjava.lang.SecurityManager: java.lang.Object getSecurityContext()\u003e","javadoc":"/** \n * Creates an object that encapsulates the current execution environment. The result of this method is used, for example, by the three-argument \u003ccode\u003echeckConnect\u003c/code\u003e method and by the two-argument \u003ccode\u003echeckRead\u003c/code\u003e method. These methods are needed because a trusted method may be called on to read a file or open a socket on behalf of another method. The trusted method needs to determine if the other (possibly untrusted) method would be allowed to perform the operation on its own. \u003cp\u003e The default implementation of this method is to return an \u003ccode\u003eAccessControlContext\u003c/code\u003e object.\n * @return  an implementation-dependent object that encapsulatessufficient information about the current execution environment to perform some security checks later.\n * @see java.lang.SecurityManager#checkConnect(java.lang.String,int,java.lang.Object) checkConnect\n * @see java.lang.SecurityManager#checkRead(java.lang.String,java.lang.Object) checkRead\n * @see java.security.AccessControlContext AccessControlContext\n */\n","tf":{"freq":{"behalf":1,"need":2,"result":1,"call":1,"allow":1,"connect":3,"possibl":1,"use":1,"perform":2,"anoth":1,"object":5,"lang":6,"open":1,"oper":1,"file":1,"current":2,"three":1,"socket":1,"read":4,"argument":2,"control":3,"may":1,"check":7,"creat":1,"manag":2,"later":1,"depend":1,"trust":2,"environ":2,"access":3,"encapsulatessuffici":1,"inform":1,"two":1,"secur":5,"string":2,"determin":1,"exampl":1,"encapsul":1,"context":4,"java":7,"method":9,"execut":2,"untrust":1},"maxFreq":9,"totalTerms":97},"loc":3}