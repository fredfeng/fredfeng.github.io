{"id":13776,"className":"java.lang.AbstractStringBuilder","methodName":"subSequence","signature":"\u003cjava.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)\u003e","javadoc":"/** \n * Returns a new character sequence that is a subsequence of this sequence. \u003cp\u003e An invocation of this method of the form \u003cblockquote\u003e\u003cpre\u003e sb.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e behaves in exactly the same way as the invocation \u003cblockquote\u003e\u003cpre\u003e sb.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e This method is provided so that this class can implement the  {@link CharSequence} interface. \u003c/p\u003e\n * @param start   the start index, inclusive.\n * @param end     the end index, exclusive.\n * @return     the specified subsequence.\n * @throws IndexOutOfBoundsException if \u003ctt\u003estart\u003c/tt\u003e or \u003ctt\u003eend\u003c/tt\u003e are negative, if \u003ctt\u003eend\u003c/tt\u003e is greater than \u003ctt\u003elength()\u003c/tt\u003e, or if \u003ctt\u003estart\u003c/tt\u003e is greater than \u003ctt\u003eend\u003c/tt\u003e\n * @spec JSR-51\n */\n","tf":{"freq":{"spec":1,"sub":2,"greater":2,"behav":1,"link":1,"way":1,"specifi":1,"inclus":1,"blockquot":4,"sequenc":5,"exact":1,"length":1,"exclus":1,"subsequ":2,"substr":1,"end":7,"nbsp":2,"except":1,"index":3,"form":1,"charact":1,"provid":1,"invoc":2,"begin":2,"start":4,"pre":4,"negat":1,"method":2,"bound":1},"maxFreq":7,"totalTerms":57},"loc":3}