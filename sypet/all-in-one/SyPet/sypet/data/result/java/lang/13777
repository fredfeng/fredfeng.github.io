{"id":13777,"className":"java.lang.AbstractStringBuilder","methodName":"substring","signature":"\u003cjava.lang.AbstractStringBuilder: java.lang.String substring(int,int)\u003e","javadoc":"/** \n * Returns a new \u003ccode\u003eString\u003c/code\u003e that contains a subsequence of characters currently contained in this sequence. The substring begins at the specified \u003ccode\u003estart\u003c/code\u003e and extends to the character at index \u003ccode\u003eend - 1\u003c/code\u003e.\n * @param start    The beginning index, inclusive.\n * @param end      The ending index, exclusive.\n * @return     The new string.\n * @throws StringIndexOutOfBoundsException  if \u003ccode\u003estart\u003c/code\u003eor \u003ccode\u003eend\u003c/code\u003e are negative or greater than \u003ccode\u003elength()\u003c/code\u003e, or \u003ccode\u003estart\u003c/code\u003e is greater than \u003ccode\u003eend\u003c/code\u003e.\n */\n","tf":{"freq":{"except":1,"index":4,"greater":2,"charact":2,"begin":2,"specifi":1,"inclus":1,"start":4,"sequenc":1,"string":3,"contain":2,"length":1,"current":1,"negat":1,"exclus":1,"subsequ":1,"substr":2,"bound":1,"end":5},"maxFreq":5,"totalTerms":36},"loc":9}