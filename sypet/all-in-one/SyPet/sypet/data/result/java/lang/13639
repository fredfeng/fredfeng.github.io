{"id":13639,"className":"java.lang.Integer","methodName":"parseInt","signature":"\u003cjava.lang.Integer: int parseInt(java.lang.String,int)\u003e","javadoc":"/** \n * Parses the string argument as a signed integer in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether  {@link java.lang.Character#digit(char,int)} returns anonnegative value), except that the first character may be an ASCII minus sign  {@code \u0027-\u0027} (\u003ccode\u003e\u0027\u0026#92;u002D\u0027\u003c/code\u003e) toindicate a negative value or an ASCII plus sign  {@code \u0027+\u0027}(\u003ccode\u003e\u0027\u0026#92;u002B\u0027\u003c/code\u003e) to indicate a positive value. The resulting integer value is returned. \u003cp\u003eAn exception of type  {@code NumberFormatException} isthrown if any of the following situations occurs: \u003cul\u003e \u003cli\u003eThe first argument is  {@code null} or is a string oflength zero. \u003cli\u003eThe radix is either smaller than {@link java.lang.Character#MIN_RADIX} orlarger than  {@link java.lang.Character#MAX_RADIX}. \u003cli\u003eAny character of the string is not a digit of the specified radix, except that the first character may be a minus sign {@code \u0027-\u0027} (\u003ccode\u003e\u0027\u0026#92;u002D\u0027\u003c/code\u003e) or plus sign{@code \u0027+\u0027} (\u003ccode\u003e\u0027\u0026#92;u002B\u0027\u003c/code\u003e) provided that thestring is longer than length 1. \u003cli\u003eThe value represented by the string is not a value of type {@code int}. \u003c/ul\u003e \u003cp\u003eExamples: \u003cblockquote\u003e\u003cpre\u003e parseInt(\"0\", 10) returns 0 parseInt(\"473\", 10) returns 473 parseInt(\"+42\", 10) returns 42 parseInt(\"-0\", 10) returns 0 parseInt(\"-FF\", 16) returns -255 parseInt(\"1100110\", 2) returns 102 parseInt(\"2147483647\", 10) returns 2147483647 parseInt(\"-2147483648\", 10) returns -2147483648 parseInt(\"2147483648\", 10) throws a NumberFormatException parseInt(\"99\", 8) throws a NumberFormatException parseInt(\"Kona\", 10) throws a NumberFormatException parseInt(\"Kona\", 27) returns 411787 \u003c/pre\u003e\u003c/blockquote\u003e\n * @param s   the {@code String} containing the integerrepresentation to be parsed\n * @param radix   the radix to be used while parsing {@code s}.\n * @return     the integer represented by the string argument in thespecified radix.\n * @exception NumberFormatException if the {@code String}does not contain a parsable  {@code int}.\n */\n","tf":{"freq":{"kona":2,"second":1,"type":2,"zero":1,"parsabl":1,"whether":1,"must":1,"situat":1,"specifi":3,"toindic":1,"blockquot":2,"orlarg":1,"thespecifi":1,"longer":1,"follow":1,"argument":4,"thestr":1,"plus":2,"except":9,"minus":2,"charact":7,"number":5,"format":5,"provid":1,"sign":5,"digit":3,"contain":2,"determin":1,"negat":1,"posit":1,"result":1,"link":3,"use":1,"anonneg":1,"lang":3,"smaller":1,"isthrown":1,"indic":1,"length":1,"valu":6,"may":2,"repres":2,"integerrepresent":1,"either":1,"radix":7,"pre":2,"string":8,"oflength":1,"exampl":1,"java":3,"first":3,"pars":16,"integ":3,"occur":1},"maxFreq":16,"totalTerms":139},"loc":62}