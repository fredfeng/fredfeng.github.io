{"id":13048,"className":"java.lang.StrictMath","methodName":"pow","signature":"\u003cjava.lang.StrictMath: double pow(double,double)\u003e","javadoc":"/** \n * Returns the value of the first argument raised to the power of the second argument. Special cases: \u003cul\u003e\u003cli\u003eIf the second argument is positive or negative zero, then the result is 1.0. \u003cli\u003eIf the second argument is 1.0, then the result is the same as the first argument. \u003cli\u003eIf the second argument is NaN, then the result is NaN. \u003cli\u003eIf the first argument is NaN and the second argument is nonzero, then the result is NaN. \u003cli\u003eIf \u003cul\u003e \u003cli\u003ethe absolute value of the first argument is greater than 1 and the second argument is positive infinity, or \u003cli\u003ethe absolute value of the first argument is less than 1 and the second argument is negative infinity, \u003c/ul\u003e then the result is positive infinity. \u003cli\u003eIf \u003cul\u003e \u003cli\u003ethe absolute value of the first argument is greater than 1 and the second argument is negative infinity, or \u003cli\u003ethe absolute value of the first argument is less than 1 and the second argument is positive infinity, \u003c/ul\u003e then the result is positive zero. \u003cli\u003eIf the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. \u003cli\u003eIf \u003cul\u003e \u003cli\u003ethe first argument is positive zero and the second argument is greater than zero, or \u003cli\u003ethe first argument is positive infinity and the second argument is less than zero, \u003c/ul\u003e then the result is positive zero. \u003cli\u003eIf \u003cul\u003e \u003cli\u003ethe first argument is positive zero and the second argument is less than zero, or \u003cli\u003ethe first argument is positive infinity and the second argument is greater than zero, \u003c/ul\u003e then the result is positive infinity. \u003cli\u003eIf \u003cul\u003e \u003cli\u003ethe first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or \u003cli\u003ethe first argument is negative infinity and the second argument is less than zero but not a finite odd integer, \u003c/ul\u003e then the result is positive zero. \u003cli\u003eIf \u003cul\u003e \u003cli\u003ethe first argument is negative zero and the second argument is a positive finite odd integer, or \u003cli\u003ethe first argument is negative infinity and the second argument is a negative finite odd integer, \u003c/ul\u003e then the result is negative zero. \u003cli\u003eIf \u003cul\u003e \u003cli\u003ethe first argument is negative zero and the second argument is less than zero but not a finite odd integer, or \u003cli\u003ethe first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, \u003c/ul\u003e then the result is positive infinity. \u003cli\u003eIf \u003cul\u003e \u003cli\u003ethe first argument is negative zero and the second argument is a negative finite odd integer, or \u003cli\u003ethe first argument is negative infinity and the second argument is a positive finite odd integer, \u003c/ul\u003e then the result is negative infinity. \u003cli\u003eIf the first argument is finite and less than zero \u003cul\u003e \u003cli\u003e if the second argument is a finite even integer, the result is equal to the result of raising the absolute value of the first argument to the power of the second argument \u003cli\u003eif the second argument is a finite odd integer, the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument \u003cli\u003eif the second argument is finite and not an integer, then the result is NaN. \u003c/ul\u003e \u003cli\u003eIf both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a  {@code double} value.\u003c/ul\u003e\u003cp\u003e(In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is finite and a fixed point of the method  {@link #ceil ceil} or,equivalently, a fixed point of the method  {@link #floor floor}. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.)\n * @param a   base.\n * @param b   the exponent.\n * @return  the value {@code a}\u003csup\u003e {@code b}\u003c/sup\u003e.\n */\n","tf":{"freq":{"result":22,"pow":1,"greater":6,"second":28,"ceil":2,"infin":14,"one":1,"link":2,"sup":2,"zero":20,"consid":1,"infinit":1,"rais":4,"equival":1,"fix":3,"finit":13,"exact":2,"power":4,"valu":14,"nonzero":1,"less":7,"expon":1,"argument":54,"repres":1,"mathemat":1,"descript":1,"equal":5,"absolut":7,"point":4,"appli":1,"fact":1,"floor":2,"forego":1,"base":1,"method":4,"negat":16,"special":1,"even":1,"odd":9,"posit":15,"first":24,"integ":13},"maxFreq":54,"totalTerms":312},"loc":0}