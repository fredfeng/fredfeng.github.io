{"id":14200,"className":"java.lang.management.RuntimeMXBean","methodName":"getInputArguments","signature":"\u003cjava.lang.management.RuntimeMXBean: java.util.List\u003cjava.lang.String\u003e getInputArguments()\u003e","javadoc":"/** \n * Returns the input arguments passed to the Java virtual machine which does not include the arguments to the \u003ctt\u003emain\u003c/tt\u003e method. This method returns an empty list if there is no input argument to the Java virtual machine. \u003cp\u003e Some Java virtual machine implementations may take input arguments from multiple different sources: for examples, arguments passed from the application that launches the Java virtual machine such as the \u0027java\u0027 command, environment variables, configuration files, etc. \u003cp\u003e Typically, not all command-line options to the \u0027java\u0027 command are passed to the Java virtual machine. Thus, the returned input arguments may not include all command-line options. \u003cp\u003e \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e The mapped type of \u003ctt\u003eList\u003cString\u003e\u003c/tt\u003e is \u003ctt\u003eString[]\u003c/tt\u003e.\n * @return a list of \u003ctt\u003eString\u003c/tt\u003e objects; each elementis an argument passed to the Java virtual machine.\n * @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(\"monitor\").\n */\n","tf":{"freq":{"caller":1,"virtual":6,"mbean":1,"elementi":1,"etc":1,"variabl":1,"typic":1,"launch":1,"line":2,"object":1,"type":1,"lang":1,"applic":1,"file":1,"permiss":1,"map":1,"command":4,"exist":1,"option":2,"argument":8,"except":1,"may":2,"monitor":1,"includ":2,"multipl":1,"thus":1,"manag":2,"environ":1,"list":3,"access":1,"empti":1,"main":1,"pass":4,"differ":1,"machin":6,"input":5,"configur":1,"secur":2,"take":1,"string":3,"exampl":1,"server":1,"method":2,"java":9,"sourc":1},"maxFreq":9,"totalTerms":91},"loc":0}