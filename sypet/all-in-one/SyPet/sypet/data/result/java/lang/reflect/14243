{"id":14243,"className":"java.lang.reflect.InvocationHandler","methodName":"invoke","signature":"\u003cjava.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])\u003e","javadoc":"/** \n * Processes a method invocation on a proxy instance and returns the result.  This method will be invoked on an invocation handler when a method is invoked on a proxy instance that it is associated with.\n * @param proxy the proxy instance that the method was invoked on\n * @param method the {@code Method} instance corresponding tothe interface method invoked on the proxy instance.  The declaring class of the  {@code Method} object will be the interface thatthe method was declared in, which may be a superinterface of the proxy interface that the proxy class inherits the method through.\n * @param args an array of objects containing the values of thearguments passed in the method invocation on the proxy instance, or  {@code null} if interface method takes no arguments.Arguments of primitive types are wrapped in instances of the appropriate primitive wrapper class, such as {@code java.lang.Integer} or {@code java.lang.Boolean}.\n * @return  the value to return from the method invocation on theproxy instance.  If the declared return type of the interface method is a primitive type, then the value returned by this method must be an instance of the corresponding primitive wrapper class; otherwise, it must be a type assignable to the declared return type.  If the value returned by this method is {@code null} and the interface method\u0027s return type isprimitive, then a  {@code NullPointerException} will bethrown by the method invocation on the proxy instance.  If the value returned by this method is otherwise not compatible with the interface method\u0027s declared return type as described above, a  {@code ClassCastException} will be thrown by the methodinvocation on the proxy instance.\n * @throws Throwable the exception to throw from the methodinvocation on the proxy instance.  The exception\u0027s type must be assignable either to any of the exception types declared in the {@code throws} clause of the interface method or to theunchecked exception types  {@code java.lang.RuntimeException}or  {@code java.lang.Error}.  If a checked exception is thrown by this method that is not assignable to any of the exception types declared in the  {@code throws} clause ofthe interface method, then an {@link UndeclaredThrowableException} containing theexception that was thrown by this method will be thrown by the method invocation on the proxy instance.\n * @see UndeclaredThrowableException\n */\n","tf":{"freq":{"assign":3,"theargument":1,"undeclar":2,"toth":1,"type":11,"must":3,"arg":1,"superinterfac":1,"wrapper":2,"argument":2,"theproxi":1,"wrap":1,"except":11,"bethrown":1,"thrown":4,"invok":5,"runtim":1,"describ":1,"invoc":6,"instanc":13,"cast":1,"contain":2,"will":5,"pointer":1,"array":1,"compat":1,"otherwis":2,"result":1,"primit":4,"theexcept":1,"correspond":2,"link":1,"object":2,"lang":4,"declar":7,"associ":1,"methodinvoc":2,"ofth":1,"isprimit":1,"valu":5,"may":1,"check":1,"error":1,"proxi":12,"claus":2,"pass":1,"process":1,"either":1,"take":1,"appropri":1,"thatth":1,"theuncheck":1,"method":25,"java":4,"throwabl":3,"integ":1,"handler":1},"maxFreq":25,"totalTerms":174},"loc":0}