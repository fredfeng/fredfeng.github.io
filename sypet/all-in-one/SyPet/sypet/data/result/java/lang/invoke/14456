{"id":14456,"className":"java.lang.invoke.MethodHandles$Lookup","methodName":"bind","signature":"\u003cjava.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle bind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)\u003e","javadoc":"/** \n * Produces an early-bound method handle for a non-static method. The receiver must have a supertype  {@code defc} in which a methodof the given name and type is accessible to the lookup class. The method and all its argument types must be accessible to the lookup class. The type of the method handle will be that of the method, without any insertion of an additional receiver parameter. The given receiver will be bound into the method handle, so that every call to the method handle will invoke the requested method on the given receiver. \u003cp\u003e The returned method handle will have {@linkplain MethodHandle#asVarargsCollector variable arity} if and only ifthe method\u0027s variable arity modifier bit ( {@code 0x0080}) is set \u003cem\u003eand\u003c/em\u003e the trailing array argument is not the only argument. (If the trailing array argument is the only argument, the given receiver value will be bound to it.) \u003cp\u003e This is equivalent to the following code: \u003cblockquote\u003e\u003cpre\u003e import static java.lang.invoke.MethodHandles.*; import static java.lang.invoke.MethodType.*; ... MethodHandle mh0 \u003d lookup(). {@link #findVirtual findVirtual}(defc, name, type); MethodHandle mh1 \u003d mh0. {@link MethodHandle#bindTo bindTo}(receiver); MethodType mt1 \u003d mh1.type(); if (mh0.isVarargsCollector()) mh1 \u003d mh1.asVarargsCollector(mt1.parameterType(mt1.parameterCount()-1)); return mh1; \u003c/pre\u003e\u003c/blockquote\u003e where  {@code defc} is either {@code receiver.getClass()} or a supertype of that class, in which the requested method is accessible to the lookup class. (Note that  {@code bindTo} does not preserve variable arity.)\n * @param receiver the object from which the method is accessed\n * @param name the name of the method\n * @param type the type of the method, with the receiver argument omitted\n * @return the desired method handle\n * @throws NoSuchMethodException if the method does not exist\n * @throws IllegalAccessException if access checking failsor if the method\u0027s variable arity modifier bit is set and  {@code asVarargsCollector} fails\n * @exception SecurityException if a security manager is present and it\u003ca href\u003d\"MethodHandles.Lookup.html#secmgr\"\u003erefuses access\u003c/a\u003e\n * @throws NullPointerException if any argument is null\n */\n","tf":{"freq":{"vararg":4,"count":1,"variabl":4,"desir":1,"type":10,"lookup":5,"earli":1,"must":2,"defc":3,"fail":1,"given":4,"equival":1,"blockquot":2,"request":2,"trail":2,"href":1,"everi":1,"follow":1,"argument":7,"except":5,"secmgr":1,"invok":3,"preserv":1,"without":1,"non":1,"present":1,"bit":2,"failsor":1,"will":5,"pointer":1,"array":2,"virtual":2,"call":1,"linkplain":1,"link":2,"object":1,"lang":2,"refus":1,"collector":4,"name":4,"valu":1,"exist":1,"note":1,"methodof":1,"find":2,"addit":1,"ariti":4,"check":1,"supertyp":2,"ifth":1,"manag":1,"paramet":3,"produc":1,"receiv":9,"access":7,"illeg":1,"handl":12,"either":1,"secur":2,"omit":1,"pre":2,"modifi":2,"html":1,"method":26,"java":2,"insert":1,"bind":4,"bound":3},"maxFreq":26,"totalTerms":189},"loc":11}