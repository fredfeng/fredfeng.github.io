{"id":13663,"className":"java.lang.Integer","methodName":"numberOfLeadingZeros","signature":"\u003cjava.lang.Integer: int numberOfLeadingZeros(int)\u003e","javadoc":"/** \n * Returns the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two\u0027s complement binary representation of the specified  {@code int} value.  Returns 32 if thespecified value has no one-bits in its two\u0027s complement representation, in other words if it is equal to zero. \u003cp\u003eNote that this method is closely related to the logarithm base 2. For all positive  {@code int} values x:\u003cul\u003e \u003cli\u003efloor(log\u003csub\u003e2\u003c/sub\u003e(x)) \u003d  {@code 31 - numberOfLeadingZeros(x)}\u003cli\u003eceil(log\u003csub\u003e2\u003c/sub\u003e(x)) \u003d  {@code 32 - numberOfLeadingZeros(x - 1)}\u003c/ul\u003e\n * @return the number of zero bits preceding the highest-order(\"leftmost\") one-bit in the two\u0027s complement binary representation of the specified  {@code int} value, or 32 if the valueis equal to zero.\n * @since 1.5\n */\n","tf":{"freq":{"sub":4,"binari":2,"ceil":1,"highest":2,"one":3,"lead":3,"zero":7,"specifi":2,"close":1,"complement":3,"order":2,"relat":1,"thespecifi":1,"valu":4,"note":1,"valuei":1,"number":5,"equal":2,"log":2,"represent":3,"two":3,"preced":2,"bit":5,"floor":1,"logarithm":1,"leftmost":2,"base":1,"word":1,"method":1,"posit":1},"maxFreq":7,"totalTerms":68},"loc":12}