{"id":13189,"className":"java.lang.Character","methodName":"getNumericValue","signature":"\u003cjava.lang.Character: int getNumericValue(int)\u003e","javadoc":"/** \n * Returns the  {@code int} value that the specifiedcharacter (Unicode code point) represents. For example, the character {@code \u0027\\u005Cu216C\u0027} (the Roman numeral fifty) will returnan  {@code int} with a value of 50.\u003cp\u003e The letters A-Z in their uppercase ( {@code \u0027\\u005Cu0041\u0027} through{@code \u0027\\u005Cu005A\u0027}), lowercase ( {@code \u0027\\u005Cu0061\u0027} through {@code \u0027\\u005Cu007A\u0027}), and full width variant ( {@code \u0027\\u005CuFF21\u0027} through{@code \u0027\\u005CuFF3A\u0027} and {@code \u0027\\u005CuFF41\u0027} through{@code \u0027\\u005CuFF5A\u0027}) forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these  {@code char}values. \u003cp\u003e If the character does not have a numeric value, then -1 is returned. If the character has a numeric value that cannot be represented as a nonnegative integer (for example, a fractional value), then -2 is returned.\n * @param codePoint the character (Unicode code point) to be converted.\n * @return  the numeric value of the character, as a nonnegative {@code int}value; -2 if the character has a numeric value that is not a nonnegative integer; -1 if the character has no numeric value.\n * @see Character#forDigit(int,int)\n * @see Character#isDigit(int)\n * @since   1.5\n */\n","tf":{"freq":{"assign":1,"convert":1,"specifiedcharact":1,"variant":1,"independ":1,"full":1,"uppercas":1,"valu":13,"fraction":1,"lowercas":1,"form":1,"charact":9,"repres":2,"numer":9,"letter":1,"returnan":1,"width":1,"fifti":1,"digit":2,"point":3,"specif":1,"nonneg":3,"will":1,"exampl":2,"unicod":3,"roman":1,"integ":2},"maxFreq":13,"totalTerms":65},"loc":3}