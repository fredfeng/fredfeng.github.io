{"id":12479,"className":"java.net.URL","methodName":"URL","signature":"\u003cjava.net.URL: void URL(java.lang.String,java.lang.String,int,java.lang.String)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eURL\u003c/code\u003e object from the specified \u003ccode\u003eprotocol\u003c/code\u003e, \u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003eport\u003c/code\u003e number, and \u003ccode\u003efile\u003c/code\u003e.\u003cp\u003e \u003ccode\u003ehost\u003c/code\u003e can be expressed as a host name or a literal IP address. If IPv6 literal address is used, it should be enclosed in square brackets (\u003ctt\u003e\u0027[\u0027\u003c/tt\u003e and \u003ctt\u003e\u0027]\u0027\u003c/tt\u003e), as specified by \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003eRFC\u0026nbsp;2732\u003c/a\u003e; However, the literal IPv6 address format defined in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2373.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2373: IP Version 6 Addressing Architecture\u003c/i\u003e\u003c/a\u003e is also accepted.\u003cp\u003e Specifying a \u003ccode\u003eport\u003c/code\u003e number of \u003ccode\u003e-1\u003c/code\u003e indicates that the URL should use the default port for the protocol.\u003cp\u003e If this is the first URL object being created with the specified protocol, a \u003ci\u003estream protocol handler\u003c/i\u003e object, an instance of class \u003ccode\u003eURLStreamHandler\u003c/code\u003e, is created for that protocol: \u003col\u003e \u003cli\u003eIf the application has previously set up an instance of \u003ccode\u003eURLStreamHandlerFactory\u003c/code\u003e as the stream handler factory, then the \u003ccode\u003ecreateURLStreamHandler\u003c/code\u003e method of that instance is called with the protocol string as an argument to create the stream protocol handler. \u003cli\u003eIf no \u003ccode\u003eURLStreamHandlerFactory\u003c/code\u003e has yet been set up, or if the factory\u0027s \u003ccode\u003ecreateURLStreamHandler\u003c/code\u003e method returns \u003ccode\u003enull\u003c/code\u003e, then the constructor finds the value of the system property: \u003cblockquote\u003e\u003cpre\u003e java.protocol.handler.pkgs \u003c/pre\u003e\u003c/blockquote\u003e If the value of that system property is not \u003ccode\u003enull\u003c/code\u003e, it is interpreted as a list of packages separated by a vertical slash character \u0027\u003ccode\u003e|\u003c/code\u003e\u0027. The constructor tries to load the class named: \u003cblockquote\u003e\u003cpre\u003e \u0026lt;\u003ci\u003epackage\u003c/i\u003e\u0026gt;.\u0026lt;\u003ci\u003eprotocol\u003c/i\u003e\u0026gt;.Handler \u003c/pre\u003e\u003c/blockquote\u003e where \u0026lt;\u003ci\u003epackage\u003c/i\u003e\u0026gt; is replaced by the name of the package and \u0026lt;\u003ci\u003eprotocol\u003c/i\u003e\u0026gt; is replaced by the name of the protocol. If this class does not exist, or if the class exists but it is not a subclass of \u003ccode\u003eURLStreamHandler\u003c/code\u003e, then the next package in the list is tried. \u003cli\u003eIf the previous step fails to find a protocol handler, then the constructor tries to load from a system default package. \u003cblockquote\u003e\u003cpre\u003e \u0026lt;\u003ci\u003esystem default package\u003c/i\u003e\u0026gt;.\u0026lt;\u003ci\u003eprotocol\u003c/i\u003e\u0026gt;.Handler \u003c/pre\u003e\u003c/blockquote\u003e If this class does not exist, or if the class exists but it is not a subclass of \u003ccode\u003eURLStreamHandler\u003c/code\u003e, then a \u003ccode\u003eMalformedURLException\u003c/code\u003e is thrown. \u003c/ol\u003e \u003cp\u003eProtocol handlers for the following protocols are guaranteed to exist on the search path :- \u003cblockquote\u003e\u003cpre\u003e http, https, ftp, file, and jar \u003c/pre\u003e\u003c/blockquote\u003e Protocol handlers for additional protocols may also be available. \u003cp\u003eNo validation of the inputs is performed by this constructor.\n * @param protocol   the name of the protocol to use.\n * @param host       the name of the host.\n * @param port       the port number on the host.\n * @param file       the file on the host\n * @exception MalformedURLException  if an unknown protocol is specified.\n * @see java.lang.System#getProperty(java.lang.String)\n * @see java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)\n * @see java.net.URLStreamHandler\n * @see java.net.URLStreamHandlerFactory#createURLStreamHandler(java.lang.String)\n */\n","tf":{"freq":{"squar":1,"ipv":2,"accept":1,"lexcept":2,"perform":1,"bracket":1,"specifi":5,"fail":1,"search":1,"jar":1,"blockquot":8,"file":4,"howev":1,"href":2,"follow":1,"nbsp":2,"argument":1,"except":1,"thrown":1,"liter":3,"host":7,"vertic":1,"charact":1,"creat":7,"avail":1,"number":3,"format":1,"instanc":3,"input":1,"malform":2,"system":5,"separ":1,"http":3,"ftp":1,"enclos":1,"subclass":2,"load":2,"properti":3,"port":5,"valid":1,"defin":1,"call":1,"stream":3,"next":1,"interpret":1,"www":2,"use":3,"object":3,"net":4,"pkgs":1,"org":2,"express":1,"lang":3,"txt":2,"rfc":4,"applic":1,"version":1,"indic":1,"lstream":12,"factori":7,"name":6,"path":1,"valu":2,"exist":5,"find":2,"constructor":4,"https":1,"addit":1,"may":1,"protocol":20,"slash":1,"previous":2,"guarante":1,"list":2,"unknown":1,"ietf":2,"address":4,"architectur":1,"pre":8,"replac":2,"string":3,"java":8,"method":2,"also":2,"first":1,"step":1,"handler":21,"yet":1},"maxFreq":21,"totalTerms":251},"loc":3}