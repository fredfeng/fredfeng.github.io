{"id":12226,"className":"java.net.URLConnection","methodName":"connect","signature":"\u003cjava.net.URLConnection: void connect()\u003e","javadoc":"/** \n * Opens a communications link to the resource referenced by this URL, if such a connection has not already been established. \u003cp\u003e If the \u003ccode\u003econnect\u003c/code\u003e method is called when the connection has already been opened (indicated by the \u003ccode\u003econnected\u003c/code\u003e field having the value \u003ccode\u003etrue\u003c/code\u003e), the call is ignored. \u003cp\u003e URLConnection objects go through two phases: first they are created, then they are connected.  After being created, and before being connected, various options can be specified (e.g., doInput and UseCaches).  After connecting, it is an error to try to set them.  Operations that depend on being connected, like getContentLength, will implicitly perform the connection, if necessary.\n * @throws SocketTimeoutException if the timeout expires beforethe connection can be established\n * @exception IOException  if an I/O error occurs while opening theconnection.\n * @see java.net.URLConnection#connected\n * @see #getConnectTimeout()\n * @see #setConnectTimeout(int)\n */\n","tf":{"freq":{"call":2,"connect":14,"link":1,"implicit":1,"use":1,"theconnect":1,"perform":1,"object":1,"net":1,"necessari":1,"specifi":1,"expir":1,"referenc":1,"open":3,"resourc":1,"indic":1,"oper":1,"length":1,"socket":1,"valu":1,"various":1,"lconnect":2,"option":1,"except":3,"ignor":1,"error":2,"creat":2,"depend":1,"establish":2,"true":1,"cach":1,"beforeth":1,"like":1,"content":1,"field":1,"two":1,"input":1,"communic":1,"will":1,"java":1,"method":1,"alreadi":2,"phase":1,"first":1,"timeout":4,"occur":1},"maxFreq":14,"totalTerms":72},"loc":0}