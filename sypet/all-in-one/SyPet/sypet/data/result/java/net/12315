{"id":12315,"className":"java.net.URI","methodName":"compareTo","signature":"\u003cjava.net.URI: int compareTo(java.net.URI)\u003e","javadoc":"/** \n * Compares this URI to another object, which must be a URI. \u003cp\u003e When comparing corresponding components of two URIs, if one component is undefined but the other is defined then the first is considered to be less than the second.  Unless otherwise noted, string components are ordered according to their natural, case-sensitive ordering as defined by the  {@link java.lang.String#compareTo(Object) String.compareTo} method.  String components that are subject toencoding are compared by comparing their raw forms rather than their encoded forms. \u003cp\u003e The ordering of URIs is defined as follows: \u003c/p\u003e \u003cul type\u003ddisc\u003e \u003cli\u003e\u003cp\u003e Two URIs with different schemes are ordered according the ordering of their schemes, without regard to case. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e A hierarchical URI is considered to be less than an opaque URI with an identical scheme. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e Two opaque URIs with identical schemes are ordered according to the ordering of their scheme-specific parts. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e Two opaque URIs with identical schemes and scheme-specific parts are ordered according to the ordering of their fragments. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e Two hierarchical URIs with identical schemes are ordered according to the ordering of their authority components: \u003c/p\u003e \u003cul type\u003ddisc\u003e \u003cli\u003e\u003cp\u003e If both authority components are server-based then the URIs are ordered according to their user-information components; if these components are identical then the URIs are ordered according to the ordering of their hosts, without regard to case; if the hosts are identical then the URIs are ordered according to the ordering of their ports. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e If one or both authority components are registry-based then the URIs are ordered according to the ordering of their authority components. \u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e Finally, two hierarchical URIs with identical schemes and authority components are ordered according to the ordering of their paths; if their paths are identical then they are ordered according to the ordering of their queries; if the queries are identical then they are ordered according to the order of their fragments. \u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e This method satisfies the general contract of the  {@link java.lang.Comparable#compareTo(Object) Comparable.compareTo}method. \u003c/p\u003e\n * @param that The object to which this URI is to be compared\n * @return  A negative integer, zero, or a positive integer as this URI isless than, equal to, or greater than the given URI\n * @throws ClassCastException If the given object is not a URI\n */\n","tf":{"freq":{"greater":1,"second":1,"natur":1,"zero":1,"type":2,"must":1,"disc":2,"toencod":1,"given":2,"scheme":9,"undefin":1,"follow":1,"except":1,"sensit":1,"host":2,"form":2,"contract":1,"registri":1,"regard":2,"without":2,"queri":2,"inform":1,"encod":1,"cast":1,"negat":1,"isless":1,"posit":1,"compar":12,"port":1,"otherwis":1,"raw":1,"defin":3,"correspond":1,"subject":1,"link":2,"one":2,"anoth":1,"object":5,"lang":2,"consid":2,"opaqu":3,"author":5,"order":24,"unless":1,"ident":9,"path":2,"rather":1,"fragment":2,"note":1,"less":2,"hierarch":3,"equal":1,"accord":12,"general":1,"two":6,"differ":1,"specif":2,"compon":11,"satisfi":1,"string":4,"base":2,"java":2,"method":3,"server":1,"part":2,"integ":2,"user":1,"first":1},"maxFreq":24,"totalTerms":183},"loc":42}