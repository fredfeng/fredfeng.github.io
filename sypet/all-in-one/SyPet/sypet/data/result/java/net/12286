{"id":12286,"className":"java.net.URI","methodName":"URI","signature":"\u003cjava.net.URI: void URI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Constructs a hierarchical URI from the given components. \u003cp\u003e If a scheme is given then the path, if also given, must either be empty or begin with a slash character (\u003ctt\u003e\u0027/\u0027\u003c/tt\u003e).  Otherwise a component of the new URI may be left undefined by passing \u003ctt\u003enull\u003c/tt\u003e for the corresponding parameter. \u003cp\u003e This constructor first builds a URI string from the given components according to the rules specified in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e, section\u0026nbsp;5.2, step\u0026nbsp;7: \u003c/p\u003e \u003col\u003e \u003cli\u003e\u003cp\u003e Initially, the result string is empty.  \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e If a scheme is given then it is appended to the result, followed by a colon character (\u003ctt\u003e\u0027:\u0027\u003c/tt\u003e).  \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e If an authority is given then the string \u003ctt\u003e\"//\"\u003c/tt\u003e is appended, followed by the authority.  If the authority contains a literal IPv6 address then the address must be enclosed in square brackets (\u003ctt\u003e\u0027[\u0027\u003c/tt\u003e and \u003ctt\u003e\u0027]\u0027\u003c/tt\u003e).  Any character not in the \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, or \u003ci\u003eother\u003c/i\u003e categories, and not equal to the commercial-at character (\u003ctt\u003e\u0027@\u0027\u003c/tt\u003e), is \u003ca href\u003d\"#quote\"\u003equoted\u003c/a\u003e.  \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e If a path is given then it is appended.  Any character not in the \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, or \u003ci\u003eother\u003c/i\u003e categories, and not equal to the slash character (\u003ctt\u003e\u0027/\u0027\u003c/tt\u003e) or the commercial-at character (\u003ctt\u003e\u0027@\u0027\u003c/tt\u003e), is quoted.  \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e If a query is given then a question-mark character (\u003ctt\u003e\u0027?\u0027\u003c/tt\u003e) is appended, followed by the query.  Any character that is not a \u003ca href\u003d\"#legal-chars\"\u003elegal URI character\u003c/a\u003e is quoted. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e Finally, if a fragment is given then a hash character (\u003ctt\u003e\u0027#\u0027\u003c/tt\u003e) is appended, followed by the fragment.  Any character that is not a legal URI character is quoted.  \u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e \u003cp\u003e The resulting URI string is then parsed as if by invoking the  {@link #URI(String)} constructor and then invoking the {@link #parseServerAuthority()} method upon the result; this may cause a {@link URISyntaxException} to be thrown.  \u003c/p\u003e\n * @param scheme     Scheme name\n * @param authority  Authority\n * @param path       Path\n * @param query      Query\n * @param fragment   Fragment\n * @throws URISyntaxException If both a scheme and a path are given but the path is relative, if the URI string constructed from the given components violates RFC\u0026nbsp;2396, or if the authority component of the string is present but cannot be parsed as a server-based authority\n */\n","tf":{"freq":{"squar":1,"ipv":1,"violat":1,"bracket":1,"must":2,"specifi":1,"given":11,"scheme":5,"relat":1,"unreserv":2,"undefin":1,"quot":5,"href":3,"nbsp":4,"follow":4,"append":5,"thrown":1,"except":2,"liter":1,"categori":2,"hash":1,"charact":13,"invok":2,"mark":1,"present":1,"queri":4,"punct":2,"http":1,"contain":1,"enclos":1,"upon":1,"legal":3,"otherwis":1,"result":4,"correspond":1,"link":3,"www":1,"commerci":2,"colon":1,"build":1,"org":1,"escap":2,"rfc":2,"txt":1,"author":8,"name":1,"rule":1,"path":6,"left":1,"question":1,"initi":1,"fragment":4,"constructor":2,"hierarch":1,"may":2,"slash":2,"paramet":1,"equal":2,"accord":1,"section":1,"pass":1,"empti":2,"begin":1,"ietf":1,"either":1,"isyntax":2,"caus":1,"compon":5,"address":2,"string":7,"base":1,"method":1,"server":2,"construct":2,"pars":3,"first":1,"also":1,"step":1},"maxFreq":13,"totalTerms":175},"loc":7}