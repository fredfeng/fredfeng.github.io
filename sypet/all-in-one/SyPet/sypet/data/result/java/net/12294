{"id":12294,"className":"java.net.URI","methodName":"relativize","signature":"\u003cjava.net.URI: java.net.URI relativize(java.net.URI)\u003e","javadoc":"/** \n * Relativizes the given URI against this URI. \u003cp\u003e The relativization of the given URI against this URI is computed as follows: \u003c/p\u003e \u003col\u003e \u003cli\u003e\u003cp\u003e If either this URI or the given URI are opaque, or if the scheme and authority components of the two URIs are not identical, or if the path of this URI is not a prefix of the path of the given URI, then the given URI is returned. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e Otherwise a new relative hierarchical URI is constructed with query and fragment components taken from the given URI and with a path component computed by removing this URI\u0027s path from the beginning of the given URI\u0027s path. \u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\n * @param uri  The URI to be relativized against this URI\n * @return The resulting URI\n * @throws NullPointerException If \u003ctt\u003euri\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e\n */\n","tf":{"freq":{"otherwis":1,"result":1,"author":1,"opaqu":1,"ident":1,"scheme":1,"given":7,"relativ":4,"path":5,"relat":1,"taken":1,"fragment":1,"follow":1,"hierarch":1,"except":1,"remov":1,"uri":2,"begin":1,"two":1,"queri":1,"either":1,"compon":3,"prefix":1,"pointer":1,"comput":2,"construct":1},"maxFreq":7,"totalTerms":43},"loc":3}