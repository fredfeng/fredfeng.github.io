{"id":12289,"className":"java.net.URI","methodName":"create","signature":"\u003cjava.net.URI: java.net.URI create(java.lang.String)\u003e","javadoc":"/** \n * Creates a URI by parsing the given string. \u003cp\u003e This convenience factory method works as if by invoking the  {@link #URI(String)} constructor; any {@link URISyntaxException} thrown by theconstructor is caught and wrapped in a new  {@link IllegalArgumentException} object, which is then thrown.\u003cp\u003e This method is provided for use in situations where it is known that the given string is a legal URI, for example for URI constants declared within in a program, and so it would be considered a programming error for the string not to parse as such.  The constructors, which throw {@link URISyntaxException} directly, should be used situations where aURI is being constructed from user input or from some other source that may be prone to errors.  \u003c/p\u003e\n * @param str   The string to be parsed into a URI\n * @return The new URI\n * @throws NullPointerException If \u003ctt\u003estr\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e\n * @throws IllegalArgumentException If the given string violates RFC\u0026nbsp;2396\n */\n","tf":{"freq":{"legal":1,"link":4,"use":2,"theconstructor":1,"object":1,"violat":1,"consid":1,"situat":2,"declar":1,"given":3,"factori":1,"caught":1,"conveni":1,"nbsp":1,"constructor":2,"direct":1,"work":1,"argument":2,"wrap":1,"may":1,"except":5,"thrown":2,"constant":1,"error":2,"creat":2,"invok":1,"illeg":2,"provid":1,"prone":1,"input":1,"isyntax":2,"str":2,"program":2,"string":6,"exampl":1,"pointer":1,"sourc":1,"method":2,"construct":1,"within":1,"known":1,"user":1,"pars":3},"maxFreq":6,"totalTerms":71},"loc":7}