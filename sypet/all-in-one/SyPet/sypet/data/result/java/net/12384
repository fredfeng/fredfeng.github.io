{"id":12384,"className":"java.net.DatagramSocket","methodName":"DatagramSocket","signature":"\u003cjava.net.DatagramSocket: void DatagramSocket(java.net.SocketAddress)\u003e","javadoc":"/** \n * Creates a datagram socket, bound to the specified local socket address. \u003cp\u003e If, if the address is \u003ccode\u003enull\u003c/code\u003e, creates an unbound socket. \u003cp\u003e \u003cp\u003eIf there is a security manager, its \u003ccode\u003echeckListen\u003c/code\u003e method is first called with the port from the socket address as its argument to ensure the operation is allowed. This could result in a SecurityException.\n * @param bindaddr local socket address to bind, or \u003ccode\u003enull\u003c/code\u003efor an unbound socket.\n * @exception SocketException  if the socket could not be opened,or the socket could not bind to the specified local port.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.\n * @see SecurityManager#checkListen\n * @since   1.4\n */\n","tf":{"freq":{"port":2,"call":1,"result":1,"allow":2,"specifi":2,"ensur":1,"open":1,"unbound":2,"oper":2,"socket":10,"exist":1,"listen":3,"argument":1,"except":5,"check":3,"creat":2,"manag":3,"bindaddr":1,"datagram":2,"secur":5,"address":4,"method":2,"local":3,"first":1,"bind":2,"bound":1},"maxFreq":10,"totalTerms":63},"loc":7}