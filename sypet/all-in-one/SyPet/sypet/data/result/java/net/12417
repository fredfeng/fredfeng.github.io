{"id":12417,"className":"java.net.DatagramSocket","methodName":"setDatagramSocketImplFactory","signature":"\u003cjava.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)\u003e","javadoc":"/** \n * Sets the datagram socket implementation factory for the application. The factory can be specified only once. \u003cp\u003e When an application creates a new datagram socket, the socket implementation factory\u0027s \u003ccode\u003ecreateDatagramSocketImpl\u003c/code\u003e method is called to create the actual datagram socket implementation. \u003cp\u003e Passing \u003ccode\u003enull\u003c/code\u003e to the method is a no-op unless the factory was already set. \u003cp\u003eIf there is a security manager, this method first calls the security manager\u0027s \u003ccode\u003echeckSetFactory\u003c/code\u003e method to ensure the operation is allowed. This could result in a SecurityException.\n * @param fac   the desired factory.\n * @exception IOException  if an I/O error occurs when setting thedatagram socket factory.\n * @exception SocketException  if the factory is already defined.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckSetFactory\u003c/code\u003e method doesn\u0027t allow the operation.\n * @see java.net.DatagramSocketImplFactory#createDatagramSocketImpl()\n * @see SecurityManager#checkSetFactory\n * @since 1.3\n */\n","tf":{"freq":{"thedatagram":1,"defin":1,"call":2,"result":1,"allow":2,"net":1,"desir":1,"applic":2,"specifi":1,"ensur":1,"unless":1,"oper":2,"factori":12,"socket":10,"exist":1,"except":7,"error":1,"impl":4,"check":3,"creat":4,"manag":4,"pass":1,"datagram":7,"secur":6,"fac":1,"actual":1,"java":1,"method":5,"alreadi":2,"first":1,"occur":1},"maxFreq":12,"totalTerms":88},"loc":10}