{"id":12020,"className":"java.net.HttpCookie","methodName":"domainMatches","signature":"\u003cjava.net.HttpCookie: boolean domainMatches(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * The utility method to check whether a host name is in a domain or not. \u003cp\u003eThis concept is described in the cookie specification. To understand the concept, some terminologies need to be defined first: \u003cblockquote\u003e effective host name \u003d hostname if host name contains dot\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;or \u003d hostname.local if not \u003c/blockquote\u003e \u003cp\u003eHost A\u0027s name domain-matches host B\u0027s if: \u003cblockquote\u003e\u003cul\u003e \u003cli\u003etheir host name strings string-compare equal; or\u003c/li\u003e \u003cli\u003eA is a HDN string and has the form NB, where N is a non-empty name string, B has the form .B\u0027, and B\u0027 is a HDN string.  (So, x.y.com domain-matches .Y.com but not Y.com.)\u003c/li\u003e \u003c/ul\u003e\u003c/blockquote\u003e \u003cp\u003eA host isn\u0027t in a domain (RFC 2965 sec. 3.3.2) if: \u003cblockquote\u003e\u003cul\u003e \u003cli\u003eThe value for the Domain attribute contains no embedded dots, and the value is not .local.\u003c/li\u003e \u003cli\u003eThe effective host name that derives from the request-host does not domain-match the Domain attribute.\u003c/li\u003e \u003cli\u003eThe request-host is a HDN (not IP address) and has the form HD, where D is the value of the Domain attribute, and H is a string that contains one or more dots.\u003c/li\u003e \u003c/ul\u003e\u003c/blockquote\u003e \u003cp\u003eExamples: \u003cblockquote\u003e\u003cul\u003e \u003cli\u003eA Set-Cookie2 from request-host y.x.foo.com for Domain\u003d.foo.com would be rejected, because H is y.x and contains a dot.\u003c/li\u003e \u003cli\u003eA Set-Cookie2 from request-host x.foo.com for Domain\u003d.foo.com would be accepted.\u003c/li\u003e \u003cli\u003eA Set-Cookie2 with Domain\u003d.com or Domain\u003d.com., will always be rejected, because there is no embedded dot.\u003c/li\u003e \u003cli\u003eA Set-Cookie2 with Domain\u003dajax.com will be accepted, and the value for Domain will be taken to be .ajax.com, because a dot gets prepended to the value.\u003c/li\u003e \u003cli\u003eA Set-Cookie2 from request-host example for Domain\u003d.local will be accepted, because the effective host name for the request- host is example.local, and example.local domain-matches .local.\u003c/li\u003e \u003c/ul\u003e\u003c/blockquote\u003e\n * @param domain    the domain name to check host name with\n * @param host      the host name in question\n * @return          \u003ctt\u003etrue\u003c/tt\u003e if they domain-matches; \u003ctt\u003efalse\u003c/tt\u003e if not\n */\n","tf":{"freq":{"fals":1,"need":1,"terminolog":1,"understand":1,"com":11,"deriv":1,"accept":3,"foo":4,"dot":6,"whether":1,"blockquot":8,"request":6,"ajax":2,"taken":1,"nbsp":17,"host":18,"form":3,"alway":1,"describ":1,"embed":2,"non":1,"contain":4,"will":4,"match":6,"compar":1,"util":1,"defin":1,"concept":2,"reject":2,"one":1,"cooki":6,"attribut":3,"name":11,"domain":20,"valu":5,"question":1,"check":2,"prepend":1,"true":1,"equal":1,"empti":1,"specif":1,"hostnam":2,"effect":3,"address":1,"sec":1,"string":6,"exampl":4,"method":1,"local":6,"first":1},"maxFreq":20,"totalTerms":190},"loc":39}