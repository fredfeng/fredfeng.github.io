{"id":12398,"className":"java.net.DatagramSocket","methodName":"send","signature":"\u003cjava.net.DatagramSocket: void send(java.net.DatagramPacket)\u003e","javadoc":"/** \n * Sends a datagram packet from this socket. The \u003ccode\u003eDatagramPacket\u003c/code\u003e includes information indicating the data to be sent, its length, the IP address of the remote host, and the port number on the remote host. \u003cp\u003eIf there is a security manager, and the socket is not currently connected to a remote address, this method first performs some security checks. First, if \u003ccode\u003ep.getAddress().isMulticastAddress()\u003c/code\u003e is true, this method calls the security manager\u0027s \u003ccode\u003echeckMulticast\u003c/code\u003e method with \u003ccode\u003ep.getAddress()\u003c/code\u003e as its argument. If the evaluation of that expression is false, this method instead calls the security manager\u0027s \u003ccode\u003echeckConnect\u003c/code\u003e method with arguments \u003ccode\u003ep.getAddress().getHostAddress()\u003c/code\u003e and \u003ccode\u003ep.getPort()\u003c/code\u003e. Each call to a security manager method could result in a SecurityException if the operation is not allowed.\n * @param p   the \u003ccode\u003eDatagramPacket\u003c/code\u003e to be sent.\n * @exception IOException  if an I/O error occurs.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckMulticast\u003c/code\u003e or \u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the send.\n * @exception PortUnreachableException may be thrown if the socket is connectedto a currently unreachable destination. Note, there is no guarantee that the exception will be thrown.\n * @exception java.nio.channels.IllegalBlockingModeException if this socket has an associated channel, and the channel is in non-blocking mode.\n * @exception IllegalArgumentException if the socket is connected,and connected address and packet address differ.\n * @see java.net.DatagramPacket\n * @see SecurityManager#checkMulticast(InetAddress)\n * @see SecurityManager#checkConnect\n * @revised 1.4\n * @spec JSR-51\n */\n","tf":{"freq":{"fals":1,"send":3,"multicast":4,"perform":1,"sent":2,"oper":1,"unreach":2,"socket":5,"argument":3,"except":12,"thrown":2,"host":3,"number":1,"non":1,"inform":1,"inet":1,"remot":3,"connectedto":1,"will":1,"packet":5,"spec":1,"port":3,"call":3,"result":1,"connect":6,"allow":2,"data":1,"block":2,"net":1,"express":1,"mode":2,"indic":1,"associ":1,"current":2,"length":1,"exist":1,"note":1,"may":1,"includ":1,"check":7,"error":1,"manag":7,"guarante":1,"true":1,"evalu":1,"illeg":2,"differ":1,"datagram":4,"secur":10,"revis":1,"address":10,"instead":1,"method":7,"java":2,"nio":1,"channel":3,"first":2,"occur":1,"destin":1},"maxFreq":12,"totalTerms":149},"loc":42}