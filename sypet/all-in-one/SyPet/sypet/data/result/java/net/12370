{"id":12370,"className":"java.net.MulticastSocket","methodName":"send","signature":"\u003cjava.net.MulticastSocket: void send(java.net.DatagramPacket,byte)\u003e","javadoc":"/** \n * Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket.  This method need only be used in instances where a particular TTL is desired; otherwise it is preferable to set a TTL once on the socket, and use that default TTL for all packets.  This method does \u003cB\u003enot \u003c/B\u003e alter the default TTL for the socket. Its behavior may be affected by \u003ccode\u003esetInterface\u003c/code\u003e. \u003cp\u003eIf there is a security manager, this method first performs some security checks. First, if \u003ccode\u003ep.getAddress().isMulticastAddress()\u003c/code\u003e is true, this method calls the security manager\u0027s \u003ccode\u003echeckMulticast\u003c/code\u003e method with \u003ccode\u003ep.getAddress()\u003c/code\u003e and \u003ccode\u003ettl\u003c/code\u003e as its arguments. If the evaluation of that expression is false, this method instead calls the security manager\u0027s \u003ccode\u003echeckConnect\u003c/code\u003e method with arguments \u003ccode\u003ep.getAddress().getHostAddress()\u003c/code\u003e and \u003ccode\u003ep.getPort()\u003c/code\u003e. Each call to a security manager method could result in a SecurityException if the operation is not allowed.\n * @param p is the packet to be sent. The packet should containthe destination multicast ip address and the data to be sent. One does not need to be the member of the group to send packets to a destination multicast address.\n * @param ttl optional time to live for multicast packet.default ttl is 1.\n * @exception IOException is raised if an error occurs i.eerror while setting ttl.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckMulticast\u003c/code\u003e or \u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the send.\n * @deprecated Use the following code or its equivalent instead:...... int ttl \u003d mcastSocket.getTimeToLive(); mcastSocket.setTimeToLive(newttl); mcastSocket.send(p); mcastSocket.setTimeToLive(ttl); ......\n * @see DatagramSocket#send\n * @see DatagramSocket#receive\n * @see SecurityManager#checkMulticast(java.net.InetAddress,byte)\n * @see SecurityManager#checkConnect\n */\n","tf":{"freq":{"need":2,"fals":1,"deprec":1,"send":6,"particular":1,"perform":1,"multicast":7,"desir":1,"time":5,"sent":2,"equival":1,"oper":1,"socket":9,"option":1,"follow":1,"live":5,"argument":2,"except":5,"host":1,"instanc":1,"inet":1,"packet":6,"prefer":1,"newttl":1,"otherwis":1,"port":1,"call":3,"result":1,"connect":3,"allow":2,"behavior":1,"one":1,"data":1,"use":3,"net":1,"express":1,"affect":1,"rais":1,"containth":1,"exist":1,"member":1,"eerror":1,"may":1,"error":1,"check":7,"manag":7,"true":1,"receiv":1,"evalu":1,"mcast":4,"ttl":6,"alter":1,"datagram":3,"secur":10,"address":8,"instead":2,"java":1,"method":9,"group":1,"first":2,"occur":1,"destin":3},"maxFreq":10,"totalTerms":158},"loc":49}