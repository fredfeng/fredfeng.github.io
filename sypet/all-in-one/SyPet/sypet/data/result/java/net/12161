{"id":12161,"className":"java.net.ServerSocket","methodName":"ServerSocket","signature":"\u003cjava.net.ServerSocket: void ServerSocket(int,int)\u003e","javadoc":"/** \n * Creates a server socket and binds it to the specified local port number, with the specified backlog. A port number of \u003ccode\u003e0\u003c/code\u003e means that the port number is automatically allocated, typically from an ephemeral port range. This port number can then be retrieved by calling {@link #getLocalPort getLocalPort}. \u003cp\u003e The maximum queue length for incoming connection indications (a request to connect) is set to the \u003ccode\u003ebacklog\u003c/code\u003e parameter. If a connection indication arrives when the queue is full, the connection is refused. \u003cp\u003e If the application has specified a server socket factory, that factory\u0027s \u003ccode\u003ecreateSocketImpl\u003c/code\u003e method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. \u003cp\u003e If there is a security manager, its \u003ccode\u003echeckListen\u003c/code\u003e method is called with the \u003ccode\u003eport\u003c/code\u003e argument as its argument to ensure the operation is allowed. This could result in a SecurityException. The \u003ccode\u003ebacklog\u003c/code\u003e argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than \u003ccode\u003e0\u003c/code\u003e. If it is less than or equal to \u003ccode\u003e0\u003c/code\u003e, then an implementation specific default will be used. \u003cP\u003e\n * @param port     the port number, or \u003ccode\u003e0\u003c/code\u003e to use a portnumber that is automatically allocated.\n * @param backlog  requested maximum length of the queue of incomingconnections.\n * @exception IOException  if an I/O error occurs when opening the socket.\n * @exception SecurityException if a security manager exists and its \u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.\n * @exception IllegalArgumentException if the port parameter is outsidethe specified range of valid port values, which is between 0 and 65535, inclusive.\n * @see java.net.SocketImpl\n * @see java.net.SocketImplFactory#createSocketImpl()\n * @see java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)\n * @see SecurityManager#checkListen\n */\n","tf":{"freq":{"queue":3,"greater":1,"altogth":1,"outsideth":1,"particular":1,"specifi":4,"open":1,"oper":2,"rang":2,"ephemer":1,"request":3,"exact":1,"socket":14,"argument":4,"ignor":1,"except":7,"creat":5,"number":6,"provid":1,"backlog":4,"maximum":4,"will":1,"arriv":1,"incom":1,"alloc":2,"port":12,"otherwis":1,"valid":1,"call":3,"result":1,"connect":5,"allow":2,"link":1,"typic":1,"use":2,"net":4,"portnumb":1,"automat":2,"refus":1,"applic":1,"ensur":1,"inclus":1,"indic":2,"full":1,"factori":5,"semant":1,"length":3,"choos":1,"mean":1,"valu":2,"plain":1,"exist":1,"listen":3,"less":1,"pend":1,"may":2,"error":1,"impl":5,"check":3,"manag":3,"paramet":3,"equal":1,"illeg":1,"impos":1,"incomingconnect":1,"specif":2,"secur":5,"retriev":1,"actual":1,"java":4,"server":4,"method":3,"local":3,"bind":1,"occur":1},"maxFreq":14,"totalTerms":181},"loc":3}