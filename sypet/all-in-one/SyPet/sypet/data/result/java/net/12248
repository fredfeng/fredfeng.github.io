{"id":12248,"className":"java.net.URLConnection","methodName":"getPermission","signature":"\u003cjava.net.URLConnection: java.security.Permission getPermission()\u003e","javadoc":"/** \n * Returns a permission object representing the permission necessary to make the connection represented by this object. This method returns null if no permission is required to make the connection. By default, this method returns \u003ccode\u003ejava.security.AllPermission\u003c/code\u003e. Subclasses should override this method and return the permission that best represents the permission required to make a a connection to the URL. For example, a \u003ccode\u003eURLConnection\u003c/code\u003e representing a \u003ccode\u003efile:\u003c/code\u003e URL would return a \u003ccode\u003ejava.io.FilePermission\u003c/code\u003e object. \u003cp\u003eThe permission returned may dependent upon the state of the connection. For example, the permission before connecting may be different from that after connecting. For example, an HTTP sever, say foo.com, may redirect the connection to a different host, say bar.com. Before connecting the permission returned by the connection will represent the permission needed to connect to foo.com, while the permission returned after connecting will be to bar.com. \u003cp\u003ePermissions are generally used for two purposes: to protect caches of objects obtained through URLConnections, and to check the right of a recipient to learn about a particular URL. In the first case, the permission should be obtained \u003cem\u003eafter\u003c/em\u003e the object has been obtained. For example, in an HTTP connection, this will represent the permission to connect to the host from which the data was ultimately fetched. In the second case, the permission should be obtained and tested \u003cem\u003ebefore\u003c/em\u003e connecting.\n * @return the permission object representing the permissionnecessary to make the connection represented by this URLConnection.\n * @exception IOException if the computation of the permissionrequires network or file I/O and an exception occurs while computing it.\n */\n","tf":{"freq":{"need":1,"com":4,"second":1,"test":1,"particular":1,"foo":2,"necessari":1,"requir":2,"file":3,"permiss":18,"purpos":1,"right":1,"lconnect":3,"recipi":1,"fetch":1,"except":3,"host":2,"learn":1,"obtain":4,"say":2,"subclass":1,"will":3,"comput":2,"bar":2,"make":4,"upon":1,"connect":15,"ultim":1,"state":1,"data":1,"use":1,"permissionrequir":1,"object":6,"network":1,"best":1,"redirect":1,"may":3,"permissionnecessari":1,"check":1,"repres":8,"depend":1,"cach":1,"sever":1,"general":1,"differ":2,"two":1,"secur":1,"exampl":4,"method":3,"java":2,"first":1,"occur":1},"maxFreq":18,"totalTerms":127},"loc":3}