{"id":12389,"className":"java.net.DatagramSocket","methodName":"connect","signature":"\u003cjava.net.DatagramSocket: void connect(java.net.InetAddress,int)\u003e","javadoc":"/** \n * Connects the socket to a remote address for this socket. When a socket is connected to a remote address, packets may only be sent to or received from that address. By default a datagram socket is not connected. \u003cp\u003eIf the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown. \u003cp\u003e If a security manager has been installed then it is invoked to check access to the remote address. Specifically, if the given  {@code address}is a  {@link InetAddress#isMulticastAddress multicast address}, the security manager\u0027s  {@link java.lang.SecurityManager#checkMulticast(InetAddress) checkMulticast} method is invoked with the given {@code address}. Otherwise, the security manager\u0027s  {@link java.lang.SecurityManager#checkConnect(String,int) checkConnect}and  {@link java.lang.SecurityManager#checkAccept checkAccept} methodsare invoked, with the given  {@code address} and {@code port}, to verify that datagrams are permitted to be sent and received respectively. \u003cp\u003e When a socket is connected,  {@link #receive receive} and{@link #send send} \u003cb\u003ewill not perform any security checks\u003c/b\u003eon incoming and outgoing packets, other than matching the packet\u0027s and the socket\u0027s address and port. On a send operation, if the packet\u0027s address is set and the packet\u0027s address and the socket\u0027s address do not match, an  {@code IllegalArgumentException} will bethrown. A socket connected to a multicast address may only be used to send packets.\n * @param address the remote address for the socket\n * @param port the remote port for the socket.\n * @throws IllegalArgumentException if the address is null, or the port is out of range.\n * @throws SecurityException if a security manager has been installed and it does not permit access to the given remote address\n * @see #disconnect\n */\n","tf":{"freq":{"send":5,"accept":2,"methodsar":1,"permit":2,"multicast":5,"perform":1,"sent":2,"given":4,"unreach":3,"oper":1,"rang":1,"verifi":1,"socket":11,"argument":2,"bethrown":1,"thrown":1,"except":5,"invok":3,"outgo":1,"remot":7,"inet":2,"will":3,"packet":7,"match":2,"incom":1,"port":6,"otherwis":2,"call":1,"connect":9,"link":6,"use":1,"lang":3,"subsequ":1,"exist":1,"note":1,"may":3,"check":8,"manag":7,"guarante":1,"instal":2,"receiv":6,"access":2,"illeg":2,"datagram":2,"specif":1,"secur":9,"address":21,"string":1,"disconnect":1,"java":3,"method":1,"respect":1,"destin":2},"maxFreq":21,"totalTerms":178},"loc":7}