{"id":12157,"className":"java.net.Socket","methodName":"setSocketImplFactory","signature":"\u003cjava.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)\u003e","javadoc":"/** \n * Sets the client socket implementation factory for the application. The factory can be specified only once. \u003cp\u003e When an application creates a new client socket, the socket implementation factory\u0027s \u003ccode\u003ecreateSocketImpl\u003c/code\u003e method is called to create the actual socket implementation. \u003cp\u003e Passing \u003ccode\u003enull\u003c/code\u003e to the method is a no-op unless the factory was already set. \u003cp\u003eIf there is a security manager, this method first calls the security manager\u0027s \u003ccode\u003echeckSetFactory\u003c/code\u003e method to ensure the operation is allowed. This could result in a SecurityException.\n * @param fac   the desired factory.\n * @exception IOException  if an I/O error occurs when setting thesocket factory.\n * @exception SocketException  if the factory is already defined.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckSetFactory\u003c/code\u003e method doesn\u0027t allow the operation.\n * @see java.net.SocketImplFactory#createSocketImpl()\n * @see SecurityManager#checkSetFactory\n */\n","tf":{"freq":{"defin":1,"call":2,"result":1,"client":2,"allow":2,"net":1,"desir":1,"applic":2,"specifi":1,"ensur":1,"unless":1,"oper":2,"factori":12,"socket":9,"exist":1,"except":7,"error":1,"impl":4,"check":3,"creat":4,"manag":4,"thesocket":1,"pass":1,"secur":6,"fac":1,"actual":1,"java":1,"method":5,"alreadi":2,"first":1,"occur":1},"maxFreq":12,"totalTerms":82},"loc":10}