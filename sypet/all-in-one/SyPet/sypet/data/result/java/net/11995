{"id":11995,"className":"java.net.HttpCookie","methodName":"parse","signature":"\u003cjava.net.HttpCookie: java.util.List\u003cjava.net.HttpCookie\u003e parse(java.lang.String)\u003e","javadoc":"/** \n * Constructs cookies from set-cookie or set-cookie2 header string. RFC 2965 section 3.2.2 set-cookie2 syntax indicates that one header line may contain more than one cookie definitions, so this is a static utility method instead of another constructor.\n * @param header    a \u003ctt\u003eString\u003c/tt\u003e specifying the set-cookie header.The header should start with \"set-cookie\", or \"set-cookie2\" token; or it should have no leading token at all.\n * @return          a List of cookie parsed from header line string\n * @throws IllegalArgumentException if header string violates the cookiespecification\u0027s syntax, or the cookie name contains llegal characters, or the cookie name is one of the tokens reserved for use by the cookie protocol\n * @throws NullPointerException     if the header string is \u003ctt\u003enull\u003c/tt\u003e\n */\n","tf":{"freq":{"one":3,"cooki":12,"use":1,"line":2,"lead":1,"anoth":1,"violat":1,"specifi":1,"indic":1,"reserv":1,"token":3,"name":2,"constructor":1,"argument":1,"protocol":1,"except":2,"may":1,"charact":1,"list":1,"illeg":1,"section":1,"header":8,"syntax":2,"cookiespecif":1,"start":1,"contain":2,"string":5,"definit":1,"llegal":1,"instead":1,"pointer":1,"method":1,"construct":1,"pars":2,"util":1},"maxFreq":12,"totalTerms":67},"loc":34}