{"id":11994,"className":"java.net.HttpCookie","methodName":"HttpCookie","signature":"\u003cjava.net.HttpCookie: void HttpCookie(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Constructs a cookie with a specified name and value. \u003cp\u003eThe name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a $ character. The cookie\u0027s name cannot be changed after creation. \u003cp\u003eThe value can be anything the server chooses to send. Its value is probably of interest only to the server. The cookie\u0027s value can be changed after creation with the \u003ccode\u003esetValue\u003c/code\u003e method. \u003cp\u003eBy default, cookies are created according to the RFC 2965 cookie specification. The version can be changed with the \u003ccode\u003esetVersion\u003c/code\u003e method.\n * @param name                      a \u003ccode\u003eString\u003c/code\u003e specifying the name of the cookie\n * @param value                     a \u003ccode\u003eString\u003c/code\u003e specifying the value of the cookie\n * @throws IllegalArgumentException if the cookie name contains illegal charactersor it is one of the tokens reserved for use by the cookie protocol\n * @throws NullPointerException     if \u003ctt\u003ename\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e\n * @see #setValue\n * @see #setVersion\n */\n","tf":{"freq":{"creation":2,"anyth":1,"send":1,"one":1,"cooki":10,"use":1,"space":1,"must":1,"version":3,"specifi":3,"charactersor":1,"probabl":1,"reserv":1,"token":1,"interest":1,"name":7,"mean":1,"choos":1,"valu":8,"argument":1,"protocol":1,"except":2,"comma":1,"creat":1,"charact":2,"white":1,"accord":1,"illeg":2,"alphanumer":1,"begin":1,"specif":1,"conform":1,"http":1,"semicolon":1,"string":2,"contain":3,"pointer":1,"method":2,"server":2,"construct":1,"chang":3},"maxFreq":10,"totalTerms":78},"loc":14}