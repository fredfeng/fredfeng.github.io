{"id":12169,"className":"java.net.ServerSocket","methodName":"accept","signature":"\u003cjava.net.ServerSocket: java.net.Socket accept()\u003e","javadoc":"/** \n * Listens for a connection to be made to this socket and accepts it. The method blocks until a connection is made. \u003cp\u003eA new Socket \u003ccode\u003es\u003c/code\u003e is created and, if there is a security manager, the security manager\u0027s \u003ccode\u003echeckAccept\u003c/code\u003e method is called with \u003ccode\u003es.getInetAddress().getHostAddress()\u003c/code\u003e and \u003ccode\u003es.getPort()\u003c/code\u003e as its arguments to ensure the operation is allowed. This could result in a SecurityException.\n * @exception IOException  if an I/O error occurs when waiting for aconnection.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckAccept\u003c/code\u003e method doesn\u0027t allow the operation.\n * @exception SocketTimeoutException if a timeout was previously set with setSoTimeout andthe timeout has been reached.\n * @exception java.nio.channels.IllegalBlockingModeException if this socket has an associated channel, the channel is in non-blocking mode, and there is no connection ready to be accepted\n * @return the new Socket\n * @see SecurityManager#checkAccept\n * @revised 1.4\n * @spec JSR-51\n */\n","tf":{"freq":{"spec":1,"port":1,"call":1,"result":1,"connect":3,"allow":2,"accept":6,"made":2,"block":3,"wait":1,"mode":2,"ensur":1,"reach":1,"associ":1,"oper":2,"socket":5,"aconnect":1,"exist":1,"listen":1,"argument":1,"except":9,"host":1,"previous":1,"check":3,"error":1,"creat":1,"manag":4,"illeg":1,"non":1,"secur":6,"revis":1,"address":2,"inet":1,"nio":1,"java":1,"method":3,"channel":3,"readi":1,"andth":1,"timeout":4,"occur":1},"maxFreq":9,"totalTerms":84},"loc":9}