{"id":12434,"className":"java.net.URLClassLoader","methodName":"close","signature":"\u003cjava.net.URLClassLoader: void close()\u003e","javadoc":"/** \n * Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader. Classes and resources defined by any of this loader\u0027s parents in the delegation hierarchy are still accessible. Also, any classes or resources that are already loaded, are still accessible. \u003cp\u003e In the case of jar: and file: URLs, it also closes any files that were opened by it. If another thread is loading a class when the  {@code close} method is invoked, then the result ofthat load is undefined. \u003cp\u003e The method makes a best effort attempt to close all opened files, by catching  {@link IOException}s internally. Unchecked exceptions and errors are not caught. Calling close on an already closed loader has no effect. \u003cp\u003e\n * @throws IOException if closing any file opened by this class loaderresulted in an IOException. Any such exceptions are caught internally. If only one is caught, then it is re-thrown. If more than one exception is caught, then the second and following exceptions are added as suppressed exceptions of the first one caught, which is then re-thrown.\n * @throws SecurityException if a security manager is set, and it denies{@link RuntimePermission}\u003ctt\u003e(\"closeClassLoader\")\u003c/tt\u003e\n * @since 1.7\n */\n","tf":{"freq":{"attempt":1,"call":1,"defin":2,"result":1,"loaderresult":1,"second":1,"ofthat":1,"one":3,"link":2,"uncheck":1,"use":1,"hierarchi":1,"anoth":1,"close":9,"open":3,"resourc":3,"deleg":1,"jar":1,"file":4,"thread":1,"permiss":1,"best":1,"longer":1,"caught":5,"undefin":1,"deni":1,"follow":1,"thrown":2,"except":9,"error":1,"manag":1,"loader":5,"invok":1,"runtim":1,"effort":1,"parent":1,"still":2,"access":2,"secur":2,"effect":1,"lclass":1,"intern":2,"ad":1,"load":4,"alreadi":2,"method":2,"first":1,"make":1,"also":2,"suppress":1},"maxFreq":9,"totalTerms":96},"loc":34}