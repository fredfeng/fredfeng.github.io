{"id":12362,"className":"java.net.MulticastSocket","methodName":"joinGroup","signature":"\u003cjava.net.MulticastSocket: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)\u003e","javadoc":"/** \n * Joins the specified multicast group at the specified interface. \u003cp\u003eIf there is a security manager, this method first calls its \u003ccode\u003echeckMulticast\u003c/code\u003e method with the \u003ccode\u003emcastaddr\u003c/code\u003e argument as its argument.\n * @param mcastaddr is the multicast address to join\n * @param netIf specifies the local interface to receive multicastdatagram packets, or \u003ci\u003enull\u003c/i\u003e to defer to the interface set by {@link MulticastSocket#setInterface(InetAddress)} or{@link MulticastSocket#setNetworkInterface(NetworkInterface)}\n * @exception IOException if there is an error joiningor when the address is not a multicast address.\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckMulticast\u003c/code\u003e method doesn\u0027t allow the join.\n * @throws IllegalArgumentException if mcastaddr is null or is aSocketAddress subclass not supported by this socket\n * @see SecurityManager#checkMulticast(InetAddress)\n * @since 1.4\n */\n","tf":{"freq":{"call":1,"allow":1,"link":2,"mcastaddr":3,"multicast":8,"net":1,"network":2,"specifi":3,"defer":1,"socket":4,"exist":1,"argument":3,"except":5,"support":1,"error":1,"check":3,"manag":3,"multicastdatagram":1,"receiv":1,"join":4,"illeg":1,"joiningor":1,"secur":4,"address":6,"inet":2,"subclass":1,"method":3,"local":1,"packet":1,"group":2,"first":1},"maxFreq":8,"totalTerms":72},"loc":22}