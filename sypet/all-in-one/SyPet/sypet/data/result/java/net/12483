{"id":12483,"className":"java.net.URL","methodName":"URL","signature":"\u003cjava.net.URL: void URL(java.net.URL,java.lang.String)\u003e","javadoc":"/** \n * Creates a URL by parsing the given spec within a specified context. The new URL is created from the given context URL and the spec argument as described in RFC2396 \u0026quot;Uniform Resource Identifiers : Generic * Syntax\u0026quot; : \u003cblockquote\u003e\u003cpre\u003e \u0026lt;scheme\u0026gt;://\u0026lt;authority\u0026gt;\u0026lt;path\u0026gt;?\u0026lt;query\u0026gt;#\u0026lt;fragment\u0026gt; \u003c/pre\u003e\u003c/blockquote\u003e The reference is parsed into the scheme, authority, path, query and fragment parts. If the path component is empty and the scheme, authority, and query components are undefined, then the new URL is a reference to the current document. Otherwise, the fragment and query parts present in the spec are used in the new URL. \u003cp\u003e If the scheme component is defined in the given spec and does not match the scheme of the context, then the new URL is created as an absolute URL based on the spec alone. Otherwise the scheme component is inherited from the context URL. \u003cp\u003e If the authority component is present in the spec then the spec is treated as absolute and the spec authority and path will replace the context authority and path. If the authority component is absent in the spec then the authority of the new URL will be inherited from the context. \u003cp\u003e If the spec\u0027s path component begins with a slash character \u0026quot;/\u0026quot; then the path is treated as absolute and the spec path replaces the context path. \u003cp\u003e Otherwise, the path is treated as a relative path and is appended to the context path, as described in RFC2396. Also, in this case, the path is canonicalized through the removal of directory changes made by occurences of \u0026quot;..\u0026quot; and \u0026quot;.\u0026quot;. \u003cp\u003e For a more detailed description of URL parsing, refer to RFC2396.\n * @param context   the context in which to parse the specification.\n * @param spec      the \u003ccode\u003eString\u003c/code\u003e to parse as a URL.\n * @exception MalformedURLException  if no protocol is specified, or anunknown protocol is found, or \u003ctt\u003espec\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e.\n * @see java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)\n * @see java.net.URLStreamHandler\n * @see java.net.URLStreamHandler#parseURL(java.net.URL,java.lang.String,int,int)\n */\n","tf":{"freq":{"detail":1,"lexcept":1,"absent":1,"anunknown":1,"specifi":2,"scheme":6,"given":3,"refer":3,"blockquot":2,"relat":1,"undefin":1,"quot":8,"argument":1,"append":1,"except":1,"creat":3,"charact":1,"descript":1,"remov":1,"describ":2,"absolut":3,"queri":4,"present":2,"malform":1,"syntax":1,"will":2,"match":1,"treat":3,"generic":1,"spec":13,"otherwis":3,"defin":1,"directori":1,"made":1,"use":1,"identifi":1,"net":4,"lang":4,"author":8,"resourc":1,"document":1,"lstream":2,"path":13,"current":1,"fragment":3,"protocol":2,"slash":1,"uniform":1,"canonic":1,"empti":1,"begin":1,"specif":1,"compon":7,"pre":2,"string":5,"replac":2,"context":10,"base":1,"alon":1,"java":8,"chang":1,"within":1,"part":2,"pars":6,"also":1,"handler":2,"found":1,"occur":1},"maxFreq":13,"totalTerms":176},"loc":3}