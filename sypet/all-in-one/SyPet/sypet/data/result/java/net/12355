{"id":12355,"className":"java.net.MulticastSocket","methodName":"MulticastSocket","signature":"\u003cjava.net.MulticastSocket: void MulticastSocket(java.net.SocketAddress)\u003e","javadoc":"/** \n * Create a MulticastSocket bound to the specified socket address. \u003cp\u003e Or, if the address is \u003ccode\u003enull\u003c/code\u003e, create an unbound socket. \u003cp\u003e \u003cp\u003eIf there is a security manager, its \u003ccode\u003echeckListen\u003c/code\u003e method is first called with the SocketAddress port as its argument to ensure the operation is allowed. This could result in a SecurityException. \u003cp\u003e When the socket is created the {@link DatagramSocket#setReuseAddress(boolean)} method iscalled to enable the SO_REUSEADDR socket option.\n * @param bindaddr Socket address to bind to, or \u003ccode\u003enull\u003c/code\u003e foran unbound socket.\n * @exception IOException if an I/O exception occurswhile creating the MulticastSocket\n * @exception SecurityException  if a security manager exists and its\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.\n * @see SecurityManager#checkListen\n * @see java.net.DatagramSocket#setReuseAddress(boolean)\n * @since 1.4\n */\n","tf":{"freq":{"port":1,"call":1,"result":1,"allow":2,"link":1,"multicast":3,"net":1,"reus":2,"specifi":1,"ensur":1,"unbound":2,"oper":2,"iscal":1,"socket":12,"exist":1,"listen":3,"option":1,"argument":1,"except":6,"foran":1,"check":3,"creat":4,"enabl":1,"manag":3,"bindaddr":1,"datagram":2,"secur":5,"address":6,"occurswhil":1,"java":1,"method":3,"bind":1,"first":1,"bound":1},"maxFreq":12,"totalTerms":77},"loc":10}