{"id":12257,"className":"com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty","methodName":"solve","signature":"\u003ccom.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.function.Function1D)\u003e","javadoc":"/** \n * Use this when the model is given as a function of its parameters only (i.e. a function that takes a set of parameters and return a set of model values, so the measurement points are already known to the function), and analytic parameter sensitivity is not available\n * @param observedValues Set of measurement values\n * @param sigma Set of measurement errors\n * @param func The model as a function of its parameters only\n * @param startPos Initial value of the parameters\n * @param penalty Penalty matrix\n * @param allowedValue a function which returned true if the new trial position is allowed by the model. An examplewould be to enforce positive parameters without resorting to a non-linear parameter transform. In some circumstances this approach will lead to slow convergence.\n * @return value of the fitted parameters\n */\n","tf":{"freq":{"model":4,"allow":2,"lead":1,"use":1,"function":5,"pos":1,"fit":1,"transform":1,"observ":1,"given":1,"sigma":1,"resort":1,"valu":6,"func":1,"slow":1,"initi":1,"converg":1,"trial":1,"analyt":1,"linear":1,"sensit":1,"penalti":2,"error":1,"enforc":1,"matrix":1,"paramet":8,"true":1,"circumst":1,"avail":1,"without":1,"solv":1,"non":1,"point":1,"start":1,"take":1,"will":1,"approach":1,"alreadi":1,"measur":3,"examplewould":1,"known":1,"posit":2},"maxFreq":8,"totalTerms":66},"loc":4}