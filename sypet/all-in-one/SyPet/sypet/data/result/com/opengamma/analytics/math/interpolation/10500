{"id":10500,"className":"com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator","methodName":"getPenaltyMatrix","signature":"\u003ccom.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(int[],int[],double[])\u003e","javadoc":"/** \n * Assume a tensor has been flattened to a vector as {A_{0,0}, A_{0,1},...._A_{0,m}, A_{1,0}, A_{1,1},...._A_{1,m},...,A_{n,0}, A_{n,1},...._A_{n,m}} (see  {@link flattenMatrix}) that is, the \u003cb\u003elast\u003c/b\u003e index changes most rapidly.  This produces the sum of penalty matrices (or order given by k) with each scaled  by lambda. \n * @param numElements The range of each index. In the example above, this would be {n,m} \n * @param k The difference order for each dimension \n * @param lambda The scaling for each dimension \n * @return  A penalty matrix \n */\n","tf":{"freq":{"element":1,"scale":2,"penalti":3,"index":2,"assum":1,"last":1,"matrix":3,"link":1,"sum":1,"produc":1,"dimens":2,"matric":1,"rapid":1,"differ":1,"lambda":2,"num":1,"flatten":2,"given":1,"order":2,"rang":1,"vector":1,"exampl":1,"chang":1,"tensor":1},"maxFreq":3,"totalTerms":34},"loc":15}