{"id":10102,"className":"com.opengamma.analytics.math.function.ParameterizedCurve","methodName":"getYParameterSensitivity","signature":"\u003ccom.opengamma.analytics.math.function.ParameterizedCurve: com.opengamma.analytics.math.function.Function1D\u003cjava.lang.Double,com.opengamma.analytics.math.matrix.DoubleMatrix1D\u003e getYParameterSensitivity(com.opengamma.analytics.math.matrix.DoubleMatrix1D)\u003e","javadoc":"/** \n * For a scalar function (curve) that can be written as $y\u003df(x;\\boldsymbol{\\theta})$ where x \u0026 y are scalars and $\\boldsymbol{\\theta})$ is a vector of parameters (i.e. $x,y \\in \\mathbb{R}$ and $\\boldsymbol{\\theta} \\in \\mathbb{R}^n$) this returns the function $g : \\mathbb{R} \\to \\mathbb{R}^n; x \\mapsto g(x)$, which is the function\u0027s (curve\u0027s) sensitivity  to its parameters, i.e. $g(x) \u003d \\frac{\\partial f(x;\\boldsymbol{\\theta})}{\\partial \\boldsymbol{\\theta}}$\u003cp\u003e The default calculation is performed using finite difference (via  {@link ScalarFieldFirstOrderDifferentiator}) but it is expected that this will be overridden by concrete subclasses.  \n * @param params The value of the parameters ($\\boldsymbol{\\theta}$) at which the sensitivity is calculated \n * @return The sensitivity as a function with a Double (x) as its single argument and a vector as its return value.\n */\n","tf":{"freq":{"theta":6,"via":1,"singl":1,"overridden":1,"mathbb":4,"boldsymbol":6,"link":1,"use":1,"perform":1,"function":4,"expect":1,"order":1,"vector":2,"yparamet":1,"written":1,"finit":1,"concret":1,"valu":2,"curv":2,"argument":1,"sensit":4,"scalar":3,"mapsto":1,"calcul":2,"paramet":3,"partial":2,"frac":1,"field":1,"differ":1,"subclass":1,"will":1,"first":1,"differenti":1},"maxFreq":6,"totalTerms":61},"loc":13}