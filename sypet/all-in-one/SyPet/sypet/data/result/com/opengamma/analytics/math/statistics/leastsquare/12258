{"id":12258,"className":"com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty","methodName":"solve","signature":"\u003ccom.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)\u003e","javadoc":"/** \n * Use this when the model is given as a function of its parameters only (i.e. a function that takes a set of parameters and return a set of model values, so the measurement points are already known to the function), and analytic parameter sensitivity is available\n * @param observedValues Set of measurement values\n * @param sigma Set of measurement errors\n * @param func The model as a function of its parameters only\n * @param jac The model sensitivity to its parameters (i.e. the Jacobian matrix) as a function of its parameters only\n * @param startPos Initial value of the parameters\n * @param penalty Penalty matrix\n * @return the least-square results\n */\n","tf":{"freq":{"jac":1,"result":1,"squar":1,"model":4,"jacobian":1,"least":1,"use":1,"function":5,"pos":1,"observ":1,"given":1,"sigma":1,"valu":4,"func":1,"initi":1,"analyt":1,"penalti":2,"sensit":2,"error":1,"matrix":2,"paramet":7,"avail":1,"solv":1,"point":1,"start":1,"take":1,"alreadi":1,"measur":3,"known":1},"maxFreq":7,"totalTerms":50},"loc":3}