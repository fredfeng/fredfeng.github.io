{"id":15262,"className":"org.joda.money.Money","methodName":"withAmount","signature":"\u003corg.joda.money.Money: org.joda.money.Money withAmount(double,java.math.RoundingMode)\u003e","javadoc":"/** \n * Returns a copy of this monetary value with the specified amount using a well-defined conversion from a  {@code double}. \u003cp\u003e The returned instance will have this currency and the new amount. If the scale of the  {@code BigDecimal} needs to be adjusted, thenit will be rounded using the specified mode. \u003cp\u003e The amount is converted via  {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal \u00271.45d\u0027 will be converted to \u00271.45\u0027. \u003cp\u003e This instance is immutable and unaffected by this method.\n * @param amount  the monetary amount to set in the returned instance, not null\n * @param roundingMode  the rounding mode to adjust the scale, not null\n * @return the new instance with the input amount set, never null\n */\n","tf":{"freq":{"need":1,"defin":1,"scale":3,"via":1,"link":1,"currenc":1,"convers":1,"use":2,"convert":3,"round":3,"well":1,"monetari":2,"decim":3,"copi":1,"specifi":2,"mode":3,"expect":1,"amount":7,"adjust":2,"valu":2,"yieldsth":1,"liter":2,"thenit":1,"unaffect":1,"immut":1,"answer":1,"instanc":4,"toexact":1,"never":1,"input":1,"scenario":1,"program":1,"exampl":1,"will":4,"method":1,"big":3},"maxFreq":7,"totalTerms":66},"loc":3}