{"id":15214,"className":"org.joda.money.BigMoney","methodName":"convertRetainScale","signature":"\u003corg.joda.money.BigMoney: org.joda.money.BigMoney convertRetainScale(org.joda.money.CurrencyUnit,java.math.BigDecimal,java.math.RoundingMode)\u003e","javadoc":"/** \n * Returns a copy of this monetary value converted into another currency using the specified conversion rate, with a rounding mode used to adjust the decimal places in the result. \u003cp\u003e The result will have the same scale as this instance even though it will be in a different currency. \u003cp\u003e This instance is immutable and unaffected by this method.\n * @param currency  the new currency, not null\n * @param conversionMultipler  the conversion factor between the currencies, not null\n * @param roundingMode  the rounding mode to use to bring the decimal places back in line, not null\n * @return the new multiplied instance, never null\n * @throws IllegalArgumentException if the currency is the same as this currency\n * @throws IllegalArgumentException if the conversion multiplier is negative\n * @throws ArithmeticException if the rounding fails\n */\n","tf":{"freq":{"scale":2,"result":2,"arithmet":1,"convers":4,"currenc":7,"line":1,"use":3,"convert":2,"round":4,"bring":1,"anoth":1,"monetari":1,"decim":2,"copi":1,"though":1,"specifi":1,"mode":3,"rate":1,"fail":1,"adjust":1,"multipli":2,"valu":1,"place":2,"argument":2,"except":3,"multipl":1,"unaffect":1,"immut":1,"back":1,"factor":1,"illeg":2,"instanc":3,"differ":1,"never":1,"will":2,"retain":1,"negat":1,"method":1,"even":1},"maxFreq":7,"totalTerms":68},"loc":3}