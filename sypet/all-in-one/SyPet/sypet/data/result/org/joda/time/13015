{"id":13015,"className":"org.joda.time.LocalDate","methodName":"toDate","signature":"\u003corg.joda.time.LocalDate: java.util.Date toDate()\u003e","javadoc":"/** \n * Get the date time as a \u003ccode\u003ejava.util.Date\u003c/code\u003e. \u003cp\u003e The \u003ccode\u003eDate\u003c/code\u003e object created has exactly the same year, month and day as this date. The time will be set to the earliest valid time for that date. \u003cp\u003e Converting to a JDK Date is full of complications as the JDK Date constructor doesn\u0027t behave as you might expect around DST transitions. This method works by taking a first guess and then adjusting the JDK date until it has the earliest valid instant. This also handles the situation where the JDK time zone data differs from the Joda-Time time zone data.\n * @return a Date initialised with this date, never null\n * @since 2.0\n */\n","tf":{"freq":{"valid":2,"might":1,"behav":1,"data":2,"convert":1,"object":1,"date":11,"transit":1,"situat":1,"expect":1,"time":6,"earliest":2,"full":1,"exact":1,"adjust":1,"joda":1,"year":1,"instant":1,"constructor":1,"work":1,"initialis":1,"creat":1,"handl":1,"around":1,"differ":1,"never":1,"guess":1,"take":1,"will":1,"month":1,"java":1,"method":1,"day":1,"complic":1,"also":1,"first":1,"zone":2,"util":1},"maxFreq":11,"totalTerms":57},"loc":26}