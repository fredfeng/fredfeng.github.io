{"id":14207,"className":"org.joda.time.format.DateTimeFormatterBuilder","methodName":"appendTimeZoneOffset","signature":"\u003corg.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)\u003e","javadoc":"/** \n * Instructs the printer to emit text and numbers to display time zone offset from UTC. A parser will use the parsed time zone offset to adjust the datetime. \u003cp\u003e If zero offset text is supplied, then it will be printed when the zone is zero. During parsing, either the zero offset text, or the offset will be parsed.\n * @param zeroOffsetText  the text to use if time zone offset is zero. Ifnull, offset is always shown.\n * @param showSeparators  if true, prints \u0027:\u0027 separator before minute andsecond field and prints \u0027.\u0027 separator before fraction field.\n * @param minFields  minimum number of fields to print, stopping when nomore precision is required. 1\u003dhours, 2\u003dminutes, 3\u003dseconds, 4\u003dfraction\n * @param maxFields  maximum number of fields to print\n * @return this DateTimeFormatterBuilder, for chaining\n */\n","tf":{"freq":{"stop":1,"second":1,"minimum":1,"use":2,"andsecond":1,"show":1,"date":1,"zero":5,"formatt":1,"time":5,"requir":1,"instruct":1,"nomor":1,"precis":1,"adjust":1,"offset":9,"datetim":1,"min":1,"emit":1,"append":1,"fraction":2,"minut":2,"text":5,"max":1,"alway":1,"builder":1,"true":1,"shown":1,"display":1,"number":3,"suppli":1,"hour":1,"printer":1,"print":5,"ifnul":1,"field":6,"either":1,"chain":1,"separ":3,"maximum":1,"will":3,"parser":1,"pars":3,"zone":5},"maxFreq":9,"totalTerms":88},"loc":4}