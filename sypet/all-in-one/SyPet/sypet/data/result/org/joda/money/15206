{"id":15206,"className":"org.joda.money.BigMoney","methodName":"multiplyRetainScale","signature":"\u003corg.joda.money.BigMoney: org.joda.money.BigMoney multiplyRetainScale(double,java.math.RoundingMode)\u003e","javadoc":"/** \n * Returns a copy of this monetary value multiplied by the specified value using the specified rounding mode to adjust the scale of the result. \u003cp\u003e This multiplies this money by the specified value, retaining the scale of this money. This will frequently lose precision, hence the need for a rounding mode. For example, \u0027USD 1.13\u0027 multiplied by \u00272.5\u0027 and rounding down gives \u0027USD 2.82\u0027. \u003cp\u003e The amount is converted via  {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal \u00271.45d\u0027 will be converted to \u00271.45\u0027. \u003cp\u003e This instance is immutable and unaffected by this method.\n * @param valueToMultiplyBy  the scalar value to multiply by, not null\n * @param roundingMode  the rounding mode to use to bring the decimal places back in line, not null\n * @return the new multiplied instance, never null\n * @throws ArithmeticException if the rounding fails\n */\n","tf":{"freq":{"need":1,"result":1,"scale":4,"via":1,"give":1,"link":1,"arithmet":1,"line":1,"use":2,"convert":3,"round":6,"bring":1,"decim":3,"monetari":1,"copi":1,"mode":4,"specifi":3,"expect":1,"amount":1,"fail":1,"adjust":1,"money":2,"precis":1,"multipli":7,"valu":6,"yieldsth":1,"place":1,"except":1,"liter":2,"henc":1,"scalar":1,"unaffect":1,"immut":1,"answer":1,"back":1,"frequent":1,"instanc":2,"toexact":1,"lose":1,"never":1,"scenario":1,"program":1,"will":3,"exampl":2,"retain":2,"method":1,"big":2},"maxFreq":7,"totalTerms":84},"loc":3}