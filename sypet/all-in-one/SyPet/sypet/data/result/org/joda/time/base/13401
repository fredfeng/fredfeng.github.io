{"id":13401,"className":"org.joda.time.base.AbstractDateTime","methodName":"toGregorianCalendar","signature":"\u003corg.joda.time.base.AbstractDateTime: java.util.GregorianCalendar toGregorianCalendar()\u003e","javadoc":"/** \n * Get the date time as a \u003ccode\u003ejava.util.GregorianCalendar\u003c/code\u003e, assigning exactly the same millisecond instant. \u003cp\u003e The JDK and Joda-Time both have time zone implementations and these differ in accuracy. Joda-Time\u0027s implementation is generally more up to date and thus more accurate - for example JDK1.3 has no historical data. The effect of this is that the field values of the \u003ccode\u003eCalendar\u003c/code\u003e may differ from those of this object, even though the milliseond value is the same. Most of the time this just means that the JDK field values are wrong, as our time zone information is more up to date.\n * @return a GregorianCalendar initialised with this datetime\n */\n","tf":{"freq":{"assign":1,"histor":1,"data":1,"object":1,"date":3,"though":1,"time":6,"millisecond":1,"exact":1,"accur":1,"mean":1,"joda":2,"valu":3,"instant":1,"datetim":1,"calendar":4,"just":1,"may":1,"initialis":1,"milliseond":1,"thus":1,"accuraci":1,"general":1,"field":2,"inform":1,"differ":2,"effect":1,"exampl":1,"wrong":1,"even":1,"java":1,"gregorian":3,"zone":2,"util":1},"maxFreq":6,"totalTerms":52},"loc":6}