{"id":15287,"className":"org.joda.money.Money","methodName":"rounded","signature":"\u003corg.joda.money.Money: org.joda.money.Money rounded(int,java.math.RoundingMode)\u003e","javadoc":"/** \n * Returns a copy of this monetary value rounded to the specified scale without changing the current scale. \u003cp\u003e Scale has the same meaning as in  {@link BigDecimal}. A scale of 2 means round to 2 decimal places. \u003cul\u003e \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of -1 returns 40.00 or 50.00 depending on the rounding mode. \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of 0 returns 45.00 or 46.00 depending on the rounding mode. \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of 1 returns 45.20 or 45.30 depending on the rounding mode. \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of 2 has no effect (it already has that scale). \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of 3 has no effect (the scale is not increased). \u003c/ul\u003e \u003cp\u003e This instance is immutable and unaffected by this method.\n * @param scale  the new scale\n * @param roundingMode  the rounding mode to use, not null\n * @return the new instance with the amount converted to be positive, never null\n * @throws ArithmeticException if the rounding fails\n */\n","tf":{"freq":{"increas":1,"scale":13,"link":1,"arithmet":1,"convert":1,"use":1,"round":14,"monetari":1,"decim":2,"copi":1,"specifi":1,"mode":5,"amount":1,"fail":1,"current":1,"mean":2,"valu":1,"place":1,"except":1,"depend":3,"immut":1,"unaffect":1,"without":1,"instanc":2,"never":1,"effect":2,"alreadi":1,"method":1,"chang":1,"big":1,"posit":1},"maxFreq":14,"totalTerms":66},"loc":3}