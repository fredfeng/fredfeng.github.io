{"id":11962,"className":"org.joda.time.Period","methodName":"normalizedStandard","signature":"\u003corg.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)\u003e","javadoc":"/** \n * Normalizes this period using standard rules, assuming a 12 month year, 7 day week, 24 hour day, 60 minute hour and 60 second minute, providing control over how the result is split into fields. \u003cp\u003e This method allows you to normalize a period. However to achieve this it makes the assumption that all years are 12 months, all weeks are 7 days, all days are 24 hours, all hours are 60 minutes and all minutes are 60 seconds. This is not true when daylight savings time is considered, and may also not be true for some chronologies. However, it is included as it is a useful operation for many applications and business rules. \u003cp\u003e If the period contains years or months, then the months will be normalized to be between 0 and 11. The days field and below will be normalized as necessary, however this will not overflow into the months field. Thus a period of 1 year 15 months will normalize to 2 years 3 months. But a period of 1 month 40 days will remain as 1 month 40 days. \u003cp\u003e The PeriodType parameter controls how the result is created. It allows you to omit certain fields from the result if desired. For example, you may not want the result to include weeks, in which case you pass in \u003ccode\u003ePeriodType.yearMonthDayTime()\u003c/code\u003e.\n * @param type  the period type of the new period, null means standard type\n * @return a normalized period equivalent to this period\n * @throws ArithmeticException if any field is too large to be represented\n * @throws UnsupportedOperationException if this period contains non-zeroyears or months but the specified period type does not support them\n * @since 1.5\n */\n","tf":{"freq":{"unsupport":1,"second":2,"save":1,"normal":7,"arithmet":1,"desir":1,"type":6,"necessari":1,"specifi":1,"time":2,"equival":1,"oper":2,"chronolog":1,"busi":1,"year":6,"howev":3,"control":2,"mani":1,"except":2,"minut":4,"support":1,"creat":1,"zeroyear":1,"period":13,"provid":1,"non":1,"contain":2,"overflow":1,"month":11,"will":5,"split":1,"day":8,"make":1,"result":4,"allow":2,"use":2,"consid":1,"applic":1,"rule":2,"mean":1,"want":1,"may":2,"assum":1,"includ":2,"standard":3,"repres":1,"thus":1,"paramet":1,"true":2,"hour":4,"pass":1,"achiev":1,"field":5,"remain":1,"larg":1,"omit":1,"exampl":1,"method":1,"certain":1,"also":1,"assumpt":1,"daylight":1,"week":3},"maxFreq":13,"totalTerms":143},"loc":29}