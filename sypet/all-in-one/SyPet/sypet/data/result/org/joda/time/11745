{"id":11745,"className":"org.joda.time.DateTime","methodName":"plus","signature":"\u003corg.joda.time.DateTime: org.joda.time.DateTime plus(org.joda.time.ReadablePeriod)\u003e","javadoc":"/** \n * Returns a copy of this datetime with the specified period added. \u003cp\u003e This method will add each element of the period one by one, from largest to smallest, adjusting the datetime to be accurate between each. \u003cp\u003e Thus, adding a period of one month and one day to 2007-03-31 will work as follows: First add one month and adjust, resulting in 2007-04-30 Then add one day and adjust, resulting in 2007-05-01. \u003cp\u003e This method is typically used to add complex period instances. Adding one field is best achieved using methods like  {@link #plusYears(int)}. \u003cp\u003e If the amount is zero or null, then \u003ccode\u003ethis\u003c/code\u003e is returned. This datetime instance is immutable and unaffected by this method call.\n * @param period  the duration to add to this one, null means zero\n * @return a copy of this datetime with the period added\n * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n */\n","tf":{"freq":{"call":1,"result":2,"complex":1,"link":1,"one":8,"arithmet":1,"typic":1,"use":2,"zero":2,"add":5,"copi":2,"specifi":1,"durat":1,"amount":1,"adjust":3,"accur":1,"mean":1,"best":1,"year":1,"datetim":5,"follow":1,"work":1,"element":1,"plus":2,"except":1,"thus":1,"smallest":1,"exceed":1,"unaffect":1,"immut":1,"like":1,"period":6,"achiev":1,"instanc":2,"largest":1,"field":1,"will":2,"month":2,"ad":4,"method":4,"capac":1,"day":2,"first":1},"maxFreq":8,"totalTerms":80},"loc":3}