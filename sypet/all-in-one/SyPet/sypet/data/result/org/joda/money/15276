{"id":15276,"className":"org.joda.money.Money","methodName":"minus","signature":"\u003corg.joda.money.Money: org.joda.money.Money minus(double,java.math.RoundingMode)\u003e","javadoc":"/** \n * Returns a copy of this monetary value with the amount subtracted. \u003cp\u003e This subtracts the specified amount from this monetary amount, returning a new object. If the amount to subtract exceeds the scale of the currency, then the rounding mode will be used to adjust the result. \u003cp\u003e The amount is converted via  {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal \u00271.45d\u0027 will be converted to \u00271.45\u0027. \u003cp\u003e This instance is immutable and unaffected by this method.\n * @param amountToSubtract  the monetary value to subtract, not null\n * @param roundingMode  the rounding mode to use, not null\n * @return the new instance with the input amount subtracted, never null\n */\n","tf":{"freq":{"scale":2,"result":1,"via":1,"link":1,"currenc":1,"use":2,"convert":3,"round":3,"object":1,"monetari":3,"decim":2,"copi":1,"specifi":1,"mode":3,"amount":7,"expect":1,"adjust":1,"valu":3,"yieldsth":1,"liter":2,"minus":1,"unaffect":1,"immut":1,"answer":1,"exceed":1,"instanc":2,"toexact":1,"subtract":6,"never":1,"input":1,"scenario":1,"program":1,"exampl":1,"will":3,"method":1,"big":2},"maxFreq":7,"totalTerms":65},"loc":3}