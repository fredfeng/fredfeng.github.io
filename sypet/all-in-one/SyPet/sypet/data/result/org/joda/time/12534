{"id":12534,"className":"org.joda.time.DateTimeZone","methodName":"forTimeZone","signature":"\u003corg.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)\u003e","javadoc":"/** \n * Gets a time zone instance for a JDK TimeZone. \u003cp\u003e DateTimeZone only accepts a subset of the IDs from TimeZone. The excluded IDs are the short three letter form (except UTC). This  method will attempt to convert between time zones created using the short IDs and the full version. \u003cp\u003e This method is not designed to parse time zones with rules created by applications using \u003ccode\u003eSimpleTimeZone\u003c/code\u003e directly.\n * @param zone  the zone to convert, null means default\n * @return the DateTimeZone object for the zone\n * @throws IllegalArgumentException if the zone is not recognised\n */\n","tf":{"freq":{"attempt":1,"simpl":1,"accept":1,"convert":2,"use":2,"object":1,"exclud":1,"date":2,"applic":1,"version":1,"id":3,"subset":1,"time":9,"full":1,"rule":1,"three":1,"mean":1,"argument":1,"direct":1,"except":2,"form":1,"letter":1,"creat":2,"recognis":1,"illeg":1,"instanc":1,"will":1,"method":2,"pars":1,"zone":13,"design":1},"maxFreq":13,"totalTerms":59},"loc":42}