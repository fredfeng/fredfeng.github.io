{"id":14408,"className":"org.joda.time.format.PeriodParser","methodName":"parseInto","signature":"\u003corg.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)\u003e","javadoc":"/** \n * Parses a period from the given text, at the given position, saving the result into the fields of the given ReadWritablePeriod. If the parse succeeds, the return value is the new text position. Note that the parse may succeed without fully reading the text. \u003cp\u003e If it fails, the return value is negative, but the period may still be modified. To determine the position where the parse failed, apply the one\u0027s complement operator (~) on the return value.\n * @param period  a period that will be modified\n * @param periodStr  text to parse\n * @param position position to start parsing from\n * @param locale  the locale to use for parsing\n * @return new position, if negative, parse failed. Apply complementoperator (~) to get position of failure\n * @throws IllegalArgumentException if any field is out of range\n */\n","tf":{"freq":{"complementoper":1,"result":1,"save":1,"one":1,"use":1,"complement":1,"given":3,"fail":3,"oper":1,"rang":1,"read":2,"valu":3,"note":1,"argument":1,"except":1,"text":4,"may":2,"succeed":2,"failur":1,"writabl":1,"fulli":1,"still":1,"period":6,"illeg":1,"without":1,"field":2,"appli":2,"str":1,"start":1,"determin":1,"will":1,"modifi":2,"negat":2,"local":2,"posit":7,"pars":9},"maxFreq":9,"totalTerms":72},"loc":0}