{"id":15192,"className":"org.joda.money.BigMoney","methodName":"plusRetainScale","signature":"\u003corg.joda.money.BigMoney: org.joda.money.BigMoney plusRetainScale(double,java.math.RoundingMode)\u003e","javadoc":"/** \n * Returns a copy of this monetary value with the amount added retaining the scale by rounding the result. \u003cp\u003e The scale of the result will be the same as the scale of this instance. For example,\u0027USD 25.95\u0027 plus \u00273.021d\u0027 gives \u0027USD 28.97\u0027 with most rounding modes. \u003cp\u003e The amount is converted via  {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal \u00271.45d\u0027 will be converted to \u00271.45\u0027. \u003cp\u003e This instance is immutable and unaffected by this method.\n * @param amountToAdd  the monetary value to add, not null\n * @param roundingMode  the rounding mode to use to adjust the scale, not null\n * @return the new instance with the input amount added, never null\n */\n","tf":{"freq":{"result":2,"scale":6,"via":1,"give":1,"link":1,"use":1,"convert":3,"round":4,"add":2,"monetari":2,"decim":2,"copi":1,"mode":3,"amount":4,"expect":1,"adjust":1,"valu":3,"yieldsth":1,"plus":2,"liter":2,"unaffect":1,"immut":1,"answer":1,"instanc":3,"toexact":1,"never":1,"input":1,"scenario":1,"program":1,"will":3,"exampl":2,"ad":2,"retain":2,"method":1,"big":2},"maxFreq":6,"totalTerms":66},"loc":8}