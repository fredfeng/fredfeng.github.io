{"id":13093,"className":"org.joda.time.MutableDateTime","methodName":"MutableDateTime","signature":"\u003corg.joda.time.MutableDateTime: void MutableDateTime(java.lang.Object,org.joda.time.DateTimeZone)\u003e","javadoc":"/** \n * Constructs an instance from an Object that represents a datetime, forcing the time zone to that specified. \u003cp\u003e If the object implies a chronology (such as GregorianCalendar does), then that chronology will be used, but with the time zone adjusted. Otherwise, ISO is used in the specified time zone. If the specified time zone is null, the default zone is used. Thus if a GregorianCalendar is passed in, the chronology used will be GJ, but if a Date is passed in the chronology will be ISO. \u003cp\u003e The recognised object types are defined in {@link org.joda.time.convert.ConverterManager ConverterManager} andinclude ReadableInstant, String, Calendar and Date.\n * @param instant  the datetime object, null means now\n * @param zone  the time zone, null means default time zone\n * @throws IllegalArgumentException if the instant is invalid\n */\n","tf":{"freq":{"otherwis":1,"defin":1,"readabl":1,"link":1,"mutabl":1,"convert":3,"use":4,"object":4,"org":1,"date":3,"type":1,"specifi":3,"time":8,"invalid":1,"andinclud":1,"chronolog":4,"impli":1,"adjust":1,"mean":2,"joda":1,"instant":3,"forc":1,"datetim":2,"calendar":3,"argument":1,"except":1,"repres":1,"thus":1,"manag":2,"recognis":1,"illeg":1,"instanc":1,"pass":2,"now":1,"string":1,"will":3,"construct":1,"gregorian":2,"zone":8},"maxFreq":8,"totalTerms":79},"loc":3}