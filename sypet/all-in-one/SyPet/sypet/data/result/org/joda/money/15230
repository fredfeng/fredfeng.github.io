{"id":15230,"className":"org.joda.money.Money","methodName":"of","signature":"\u003corg.joda.money.Money: org.joda.money.Money of(org.joda.money.CurrencyUnit,double,java.math.RoundingMode)\u003e","javadoc":"/** \n * Obtains an instance of  {@code Money} from a {@code double} using awell-defined conversion, rounding as necessary. \u003cp\u003e This allows you to create an instance with a specific currency and amount. If the amount has a scale in excess of the scale of the currency then the excess fractional digits are rounded using the rounding mode. \u003cp\u003e The amount is converted via  {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal \u00271.45d\u0027 will be converted to \u00271.45\u0027.\n * @param currency  the currency, not null\n * @param amount  the amount of money, not null\n * @param roundingMode  the rounding mode to use, not null\n * @return the new instance, never null\n * @throws ArithmeticException if the rounding fails\n */\n","tf":{"freq":{"defin":1,"scale":3,"via":1,"allow":1,"link":1,"arithmet":1,"convers":1,"currenc":4,"excess":2,"use":3,"convert":3,"round":6,"decim":2,"necessari":1,"mode":3,"expect":1,"amount":5,"fail":1,"money":2,"valu":1,"awel":1,"yieldsth":1,"except":1,"liter":2,"fraction":1,"creat":1,"answer":1,"instanc":3,"digit":1,"toexact":1,"never":1,"specif":1,"obtain":1,"scenario":1,"program":1,"exampl":1,"will":2,"big":2},"maxFreq":6,"totalTerms":66},"loc":3}