{"id":11756,"className":"org.joda.time.DateTime","methodName":"minus","signature":"\u003corg.joda.time.DateTime: org.joda.time.DateTime minus(org.joda.time.ReadablePeriod)\u003e","javadoc":"/** \n * Returns a copy of this datetime with the specified period taken away. \u003cp\u003e This method will subtract each element of the period one by one, from largest to smallest, adjusting the datetime to be accurate between each. \u003cp\u003e Thus, subtracting a period of one month and one day from 2007-05-31 will work as follows: First subtract one month and adjust, resulting in 2007-04-30 Then subtract one day and adjust, resulting in 2007-04-29. Note that the day has been adjusted by two. \u003cp\u003e This method is typically used to subtract complex period instances. Subtracting one field is best achieved using methods like  {@link #minusYears(int)}. \u003cp\u003e If the amount is zero or null, then \u003ccode\u003ethis\u003c/code\u003e is returned. This datetime instance is immutable and unaffected by this method call.\n * @param period  the period to reduce this instant by\n * @return a copy of this datetime with the period taken away\n * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n */\n","tf":{"freq":{"call":1,"result":2,"complex":1,"link":1,"one":7,"arithmet":1,"typic":1,"use":2,"zero":1,"copi":2,"specifi":1,"amount":1,"adjust":4,"accur":1,"best":1,"year":1,"taken":2,"instant":1,"note":1,"datetim":5,"follow":1,"work":1,"element":1,"except":1,"minus":2,"thus":1,"smallest":1,"exceed":1,"unaffect":1,"immut":1,"like":1,"period":7,"achiev":1,"instanc":2,"largest":1,"field":1,"two":1,"subtract":6,"away":2,"will":2,"month":2,"method":4,"capac":1,"reduc":1,"day":3,"first":1},"maxFreq":7,"totalTerms":84},"loc":3}