{"id":11961,"className":"org.joda.time.Period","methodName":"normalizedStandard","signature":"\u003corg.joda.time.Period: org.joda.time.Period normalizedStandard()\u003e","javadoc":"/** \n * Normalizes this period using standard rules, assuming a 12 month year, 7 day week, 24 hour day, 60 minute hour and 60 second minute. \u003cp\u003e This method allows you to normalize a period. However to achieve this it makes the assumption that all years are 12 months, all weeks are 7 days, all days are 24 hours, all hours are 60 minutes and all minutes are 60 seconds. This is not true when daylight savings time is considered, and may also not be true for some chronologies. However, it is included as it is a useful operation for many applications and business rules. \u003cp\u003e If the period contains years or months, then the months will be normalized to be between 0 and 11. The days field and below will be normalized as necessary, however this will not overflow into the months field. Thus a period of 1 year 15 months will normalize to 2 years 3 months. But a period of 1 month 40 days will remain as 1 month 40 days. \u003cp\u003e The result will always have a \u003ccode\u003ePeriodType\u003c/code\u003e of standard, thus days will be grouped into weeks.\n * @return a normalized period equivalent to this period\n * @throws ArithmeticException if any field is too large to be represented\n * @since 1.5\n */\n","tf":{"freq":{"result":1,"second":2,"allow":1,"save":1,"normal":7,"arithmet":1,"use":2,"type":1,"necessari":1,"applic":1,"consid":1,"time":1,"equival":1,"oper":1,"chronolog":1,"rule":2,"busi":1,"year":5,"howev":3,"mani":1,"except":1,"may":1,"minut":4,"includ":1,"assum":1,"standard":3,"repres":1,"thus":2,"alway":1,"true":2,"hour":4,"period":8,"achiev":1,"field":3,"remain":1,"larg":1,"overflow":1,"contain":1,"will":7,"month":9,"method":1,"day":8,"group":1,"also":1,"make":1,"assumpt":1,"daylight":1,"week":3},"maxFreq":9,"totalTerms":105},"loc":3}