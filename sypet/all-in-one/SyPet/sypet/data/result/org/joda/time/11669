{"id":11669,"className":"org.joda.time.Instant","methodName":"toDateTimeISO","signature":"\u003corg.joda.time.Instant: org.joda.time.DateTime toDateTimeISO()\u003e","javadoc":"/** \n * Get this object as a DateTime using ISOChronology in the default zone. This method is identical to \u003ccode\u003etoDateTime()\u003c/code\u003e. \u003cp\u003e This method returns a DateTime object in the default zone. This differs from the similarly named method on DateTime, DateMidnight or MutableDateTime which retains the time zone. The difference is because Instant really represents a time \u003ci\u003ewithout\u003c/i\u003e a zone, thus calling this method we really have no zone to \u0027retain\u0027 and hence expect to switch to the default zone. \u003cp\u003e This method is deprecated because it is a duplicate of  {@link #toDateTime()}. However, removing it would cause the superclass implementation to be used, which would create silent bugs in any caller depending on this implementation. As such, the method itself is not currently planned to be removed. \u003cp\u003e This method definition preserves compatibility with earlier versions of Joda-Time.\n * @return a DateTime using the same millis with ISOChronology\n * @deprecated Use toDateTime() as it is identical\n */\n","tf":{"freq":{"caller":1,"silent":1,"call":1,"realli":2,"deprec":2,"link":1,"mutabl":1,"milli":1,"use":4,"object":2,"date":10,"version":1,"expect":1,"time":12,"midnight":1,"ident":2,"name":1,"current":1,"joda":1,"howev":1,"instant":1,"similar":1,"ochronolog":2,"henc":1,"creat":1,"repres":1,"thus":1,"depend":1,"preserv":1,"remov":2,"without":1,"differ":2,"earlier":1,"superclass":1,"caus":1,"plan":1,"definit":1,"duplic":1,"bug":1,"retain":2,"method":7,"zone":6,"compat":1},"maxFreq":12,"totalTerms":85},"loc":3}