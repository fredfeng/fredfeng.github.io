{"id":14478,"className":"org.joda.time.tz.DateTimeZoneBuilder","methodName":"addRecurringSavings","signature":"\u003corg.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)\u003e","javadoc":"/** \n * Add a recurring daylight saving time rule.\n * @param nameKey  the name key of new rule\n * @param saveMillis  the milliseconds to add to standard offset\n * @param fromYear  the first year that rule is in effect, MIN_VALUE indicatesbeginning of time\n * @param toYear  the last year (inclusive) that rule is in effect, MAX_VALUEindicates end of time\n * @param mode  \u0027u\u0027 - transitions are calculated against UTC, \u0027w\u0027 -transitions are calculated against wall offset, \u0027s\u0027 - transitions are calculated against standard offset\n * @param monthOfYear  the month from 1 (January) to 12 (December)\n * @param dayOfMonth  if negative, set to ((last day of month) - ~dayOfMonth).For example, if -1, set to last day of month\n * @param dayOfWeek  from 1 (Monday) to 7 (Sunday), if 0 then ignore\n * @param advanceDayOfWeek  if dayOfMonth does not fall on dayOfWeek, advance todayOfWeek when true, retreat when false.\n * @param millisOfDay  additional precision for specifying time of day of transitions\n */\n","tf":{"freq":{"fals":1,"save":3,"last":3,"monday":1,"today":1,"milli":2,"add":3,"transit":4,"specifi":1,"mode":1,"inclus":1,"retreat":1,"time":4,"millisecond":1,"name":2,"rule":4,"precis":1,"year":5,"offset":3,"decemb":1,"recur":2,"key":2,"end":1,"addit":1,"ignor":1,"eindic":1,"standard":2,"januari":1,"calcul":3,"true":1,"effect":2,"advanc":2,"fall":1,"sunday":1,"exampl":1,"month":7,"indicatesbegin":1,"negat":1,"day":10,"first":1,"daylight":1,"wall":1,"week":4},"maxFreq":10,"totalTerms":91},"loc":10}