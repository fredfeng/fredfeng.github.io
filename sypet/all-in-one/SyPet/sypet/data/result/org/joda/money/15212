{"id":15212,"className":"org.joda.money.BigMoney","methodName":"rounded","signature":"\u003corg.joda.money.BigMoney: org.joda.money.BigMoney rounded(int,java.math.RoundingMode)\u003e","javadoc":"/** \n * Returns a copy of this monetary value rounded to the specified scale without changing the current scale. \u003cp\u003e Scale is described in  {@link BigDecimal} and represents the point below whichthe monetary value is zero. Negative scales round increasingly large numbers. Unlike  {@link #withScale(int)}, this scale of the result is unchanged. \u003cul\u003e \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of -1 returns 40.00 or 50.00 depending on the rounding mode. \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of 0 returns 45.00 or 46.00 depending on the rounding mode. \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of 1 returns 45.20 or 45.30 depending on the rounding mode. \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of 2 has no effect (it already has that scale). \u003cli\u003eRounding \u0027EUR 45.23\u0027 to a scale of 3 has no effect (the scale is not increased). \u003c/ul\u003e This instance is immutable and unaffected by this method.\n * @param scale  the new scale\n * @param roundingMode  the rounding mode to use, not null\n * @return the new instance with the amount converted to be positive, never null\n * @throws ArithmeticException if the rounding fails\n */\n","tf":{"freq":{"increas":2,"scale":15,"result":1,"link":2,"arithmet":1,"convert":1,"use":1,"round":14,"monetari":2,"decim":1,"zero":1,"copi":1,"mode":5,"specifi":1,"amount":1,"fail":1,"current":1,"unlik":1,"valu":2,"except":1,"unchang":1,"repres":1,"depend":3,"unaffect":1,"immut":1,"describ":1,"number":1,"without":1,"instanc":2,"whichth":1,"point":1,"never":1,"effect":2,"larg":1,"method":1,"alreadi":1,"negat":1,"chang":1,"big":1,"posit":1},"maxFreq":15,"totalTerms":79},"loc":9}