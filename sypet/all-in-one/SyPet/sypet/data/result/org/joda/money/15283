{"id":15283,"className":"org.joda.money.Money","methodName":"dividedBy","signature":"\u003corg.joda.money.Money: org.joda.money.Money dividedBy(double,java.math.RoundingMode)\u003e","javadoc":"/** \n * Returns a copy of this monetary value divided by the specified value. \u003cp\u003e This takes this amount and divides it by the specified value, rounding the result is rounded as specified. \u003cp\u003e The amount is converted via  {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal \u00271.45d\u0027 will be converted to \u00271.45\u0027. \u003cp\u003e This instance is immutable and unaffected by this method.\n * @param valueToDivideBy  the scalar value to divide by, not null\n * @param roundingMode  the rounding mode to use, not null\n * @return the new divided instance, never null\n * @throws ArithmeticException if dividing by zero\n * @throws ArithmeticException if the rounding fails\n */\n","tf":{"freq":{"result":1,"scale":1,"via":1,"link":1,"arithmet":2,"use":1,"convert":3,"round":5,"zero":1,"monetari":1,"decim":2,"copi":1,"mode":2,"specifi":3,"amount":2,"expect":1,"fail":1,"valu":6,"yieldsth":1,"except":2,"liter":2,"scalar":1,"unaffect":1,"immut":1,"answer":1,"divid":7,"instanc":2,"toexact":1,"never":1,"scenario":1,"take":1,"program":1,"will":2,"exampl":1,"method":1,"big":2},"maxFreq":7,"totalTerms":64},"loc":3}