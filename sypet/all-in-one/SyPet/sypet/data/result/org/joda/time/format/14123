{"id":14123,"className":"org.joda.time.format.DateTimeFormat","methodName":"forStyle","signature":"\u003corg.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)\u003e","javadoc":"/** \n * Factory to create a format from a two character style pattern. \u003cp\u003e The first character is the date style, and the second character is the time style. Specify a character of \u0027S\u0027 for short style, \u0027M\u0027 for medium, \u0027L\u0027 for long, and \u0027F\u0027 for full. A date or time may be ommitted by specifying a style character \u0027-\u0027. \u003cp\u003e The returned formatter will dynamically adjust to the locale that the print/parse takes place in. Thus you just call {@link DateTimeFormatter#withLocale(Locale)} and the Short/Medium/Long/Fullstyle for that locale will be output. For example: \u003cpre\u003e DateTimeFormat.forStyle(style).withLocale(Locale.FRANCE).print(dt); \u003c/pre\u003e\n * @param style  two characters from the set {\"S\", \"M\", \"L\", \"F\", \"-\"}\n * @return the formatter\n * @throws IllegalArgumentException if the style is invalid\n */\n","tf":{"freq":{"call":1,"second":1,"link":1,"date":4,"formatt":3,"specifi":2,"time":4,"invalid":1,"style":10,"ommit":1,"full":1,"factori":1,"adjust":1,"place":1,"dynam":1,"argument":1,"just":1,"except":1,"may":1,"fullstyl":1,"thus":1,"charact":6,"creat":1,"format":2,"illeg":1,"medium":2,"print":2,"two":2,"pattern":1,"pre":2,"take":1,"exampl":1,"will":2,"local":6,"output":1,"first":1,"pars":1},"maxFreq":10,"totalTerms":71},"loc":3}