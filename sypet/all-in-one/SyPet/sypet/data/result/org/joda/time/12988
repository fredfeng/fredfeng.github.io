{"id":12988,"className":"org.joda.time.LocalDate","methodName":"LocalDate","signature":"\u003corg.joda.time.LocalDate: void LocalDate(java.lang.Object)\u003e","javadoc":"/** \n * Constructs an instance from an Object that represents a datetime. The time zone will be retrieved from the object if possible, otherwise the default time zone will be used. \u003cp\u003e If the object contains no chronology, \u003ccode\u003eISOChronology\u003c/code\u003e is used. Once the constructor is completed, the zone is no longer used. \u003cp\u003e The recognised object types are defined in {@link org.joda.time.convert.ConverterManager ConverterManager} andinclude ReadablePartial, ReadableInstant, String, Calendar and Date. The String formats are described by  {@link ISODateTimeFormat#localDateParser()}. The default String converter ignores the zone and only parses the field values.\n * @param instant  the datetime object\n * @throws IllegalArgumentException if the instant is invalid\n */\n","tf":{"freq":{"otherwis":1,"defin":1,"readabl":2,"link":2,"convert":4,"possibl":1,"use":3,"object":5,"org":1,"date":3,"type":1,"time":4,"invalid":1,"andinclud":1,"chronolog":1,"longer":1,"valu":1,"joda":1,"instant":3,"calendar":1,"datetim":2,"constructor":1,"complet":1,"argument":1,"except":1,"ignor":1,"ochronolog":1,"repres":1,"manag":2,"recognis":1,"describ":1,"format":2,"partial":1,"illeg":1,"instanc":1,"field":1,"retriev":1,"string":3,"contain":1,"will":2,"construct":1,"local":2,"odat":1,"pars":1,"parser":1,"zone":4},"maxFreq":5,"totalTerms":74},"loc":3}