{"id":14557,"className":"org.joda.time.convert.StringConverter","methodName":"getPartialValues","signature":"\u003corg.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)\u003e","javadoc":"/** \n * Extracts the values of the partial from an object of this converter\u0027s type. This method checks if the parser has a zone, and uses it if present. This is most useful for parsing local times with UTC.\n * @param fieldSource  a partial that provides access to the fields.This partial may be incomplete and only getFieldType(int) should be used\n * @param object  the object to convert\n * @param chrono  the chronology to use, which is the non-null result of getChronology()\n * @param parser the parser to use, may be null\n * @return the array of field values that match the fieldSource, must be non-null valid\n * @throws ClassCastException if the object is invalid\n * @throws IllegalArgumentException if the value if invalid\n * @since 1.3\n */\n","tf":{"freq":{"valid":1,"result":1,"incomplet":1,"use":5,"convert":2,"object":4,"type":2,"must":1,"time":1,"chrono":1,"invalid":2,"chronolog":2,"valu":4,"argument":1,"except":2,"may":2,"check":1,"partial":4,"access":1,"illeg":1,"provid":1,"extract":1,"non":2,"field":5,"present":1,"cast":1,"method":1,"sourc":2,"match":1,"local":1,"parser":3,"pars":1,"zone":1,"array":1},"maxFreq":5,"totalTerms":61},"loc":7}