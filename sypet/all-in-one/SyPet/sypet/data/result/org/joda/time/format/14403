{"id":14403,"className":"org.joda.time.format.DateTimeParser","methodName":"parseInto","signature":"\u003corg.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)\u003e","javadoc":"/** \n * Parse an element from the given text, saving any fields into the given DateTimeParserBucket. If the parse succeeds, the return value is the new text position. Note that the parse may succeed without fully reading the text. \u003cp\u003e If it fails, the return value is negative. To determine the position where the parse failed, apply the one\u0027s complement operator (~) on the return value.\n * @param bucket  field are saved into this, not null\n * @param text  the text to parse, not null\n * @param position  position to start parsing from\n * @return new position, negative value means parse failed -apply complement operator (~) to get position of failure\n * @throws IllegalArgumentException if any field is out of range\n */\n","tf":{"freq":{"save":2,"bucket":2,"one":1,"date":1,"complement":2,"time":1,"given":2,"fail":3,"oper":2,"rang":1,"mean":1,"read":1,"valu":4,"note":1,"argument":1,"element":1,"except":1,"text":5,"may":1,"succeed":2,"failur":1,"fulli":1,"illeg":1,"without":1,"field":3,"appli":2,"start":1,"determin":1,"negat":2,"parser":1,"pars":8,"posit":6},"maxFreq":8,"totalTerms":63},"loc":0}