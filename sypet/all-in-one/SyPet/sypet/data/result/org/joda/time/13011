{"id":13011,"className":"org.joda.time.LocalDate","methodName":"toDateTime","signature":"\u003corg.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime)\u003e","javadoc":"/** \n * Converts this object to a DateTime using a LocalTime to fill in the missing fields and using the default time zone. \u003cp\u003e The resulting chronology is determined by the chronology of this LocalDate. The chronology of the time must match. \u003cp\u003e If the time is null, this method delegates to  {@link #toDateTimeAtCurrentTime(DateTimeZone)}and the following documentation does not apply. \u003cp\u003e When the time zone is applied, the local date-time may be affected by daylight saving. In a daylight saving gap, when the local time does not exist, this method will throw an exception. In a daylight saving overlap, when the same local time occurs twice, this method returns the first occurrence of the local time. \u003cp\u003e This instance is immutable and unaffected by this method call.\n * @param time  the time of day to use, null uses current time\n * @return the DateTime instance\n * @throws IllegalArgumentException if the chronology of the time does not match\n * @throws IllegalInstantException if the local time does not exist when the time zone is applied\n */\n","tf":{"freq":{"call":1,"result":1,"save":3,"link":1,"use":4,"convert":1,"object":1,"date":7,"affect":1,"must":1,"occurr":1,"time":21,"document":1,"twice":1,"deleg":1,"chronolog":4,"current":2,"instant":1,"exist":2,"follow":1,"argument":1,"except":3,"may":1,"overlap":1,"fill":1,"unaffect":1,"immut":1,"illeg":2,"instanc":2,"field":1,"appli":3,"determin":1,"will":1,"method":4,"day":1,"local":7,"match":2,"first":1,"daylight":3,"zone":4,"miss":1,"occur":1,"gap":1},"maxFreq":21,"totalTerms":100},"loc":3}