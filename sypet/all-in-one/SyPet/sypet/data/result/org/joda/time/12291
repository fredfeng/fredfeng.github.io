{"id":12291,"className":"org.joda.time.MutablePeriod","methodName":"MutablePeriod","signature":"\u003corg.joda.time.MutablePeriod: void MutablePeriod(long)\u003e","javadoc":"/** \n * Creates a period from the given millisecond duration using the standard set of fields. \u003cp\u003e Only precise fields in the period type will be used. For the standard period type this is the time fields only. Thus the year, month, week and day fields will not be populated. \u003cp\u003e If the duration is small, less than one day, then this method will perform as you might expect and split the fields evenly. \u003cp\u003e If the duration is larger than one day then all the remaining duration will be stored in the largest available precise field, hours in this case. \u003cp\u003e For example, a duration equal to (365 + 60 + 5) days will be converted to ((365 + 60 + 5) * 24) hours by this constructor. \u003cp\u003e For more control over the conversion process, you have two options: \u003cul\u003e \u003cli\u003econvert the duration to an  {@link Interval}, and from there obtain the period \u003cli\u003especify a period type that contains precise definitions of the day and larger fields, such as the UTC or precise types. \u003c/ul\u003e\n * @param duration  the duration, in milliseconds\n */\n","tf":{"freq":{"store":1,"mutabl":1,"perform":1,"type":4,"specifi":1,"expect":1,"time":1,"given":1,"precis":4,"year":1,"option":1,"control":1,"creat":1,"avail":1,"period":6,"largest":1,"obtain":1,"definit":1,"contain":1,"month":1,"will":5,"split":1,"even":1,"day":5,"small":1,"might":1,"one":2,"link":1,"convers":1,"use":2,"convert":2,"durat":8,"popul":1,"millisecond":2,"less":1,"constructor":1,"standard":2,"thus":1,"larger":2,"equal":1,"hour":2,"field":7,"process":1,"interv":1,"two":1,"remain":1,"exampl":1,"method":1,"week":1},"maxFreq":8,"totalTerms":88},"loc":3}