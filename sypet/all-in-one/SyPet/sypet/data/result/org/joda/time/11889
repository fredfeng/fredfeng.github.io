{"id":11889,"className":"org.joda.time.Period","methodName":"fieldDifference","signature":"\u003corg.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)\u003e","javadoc":"/** \n * Creates a period from two partially specified times, calculating by field difference. \u003cp\u003e The two partials must contain the same fields, thus you can specify two \u003ccode\u003eLocalDate\u003c/code\u003e objects, or two \u003ccode\u003eLocalTime\u003c/code\u003e objects, but not one of each. Also, the partial may not contain overlapping fields, such as dayOfWeek and dayOfMonth. \u003cp\u003e Calculation by field difference works by extracting the difference one field at a time and not wrapping into other fields. Thus 2005-06-09/2007-04-12 will yield P1Y-2M3D. \u003cp\u003e For example, you have an event that always runs from the 27th of each month to the 2nd of the next month. If you calculate this period using a standard constructor, then you will get between P3D and P6D depending on the month. If you use this method, then you will get P1M-25D. This field-difference based period can be successfully applied to each month of the year to obtain the correct end date for a given start date.\n * @param start  the start of the period, must not be null\n * @param end  the end of the period, must not be null\n * @throws IllegalArgumentException if the partials are null or invalid\n * @since 1.1\n */\n","tf":{"freq":{"yield":1,"must":3,"specifi":2,"time":3,"invalid":1,"correct":1,"given":1,"event":1,"year":1,"work":1,"argument":1,"wrap":1,"except":1,"overlap":1,"creat":1,"alway":1,"calcul":3,"period":5,"partial":4,"extract":1,"appli":1,"obtain":1,"start":3,"contain":2,"month":5,"will":3,"day":2,"one":2,"next":1,"use":2,"object":2,"date":3,"run":1,"end":3,"constructor":1,"may":1,"standard":1,"thus":2,"depend":1,"illeg":1,"field":8,"differ":5,"two":4,"exampl":1,"base":1,"method":1,"local":2,"also":1,"success":1,"week":1},"maxFreq":8,"totalTerms":97},"loc":21}