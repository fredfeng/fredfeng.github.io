{"id":15240,"className":"org.joda.money.Money","methodName":"parse","signature":"\u003corg.joda.money.Money: org.joda.money.Money parse(java.lang.String)\u003e","javadoc":"/** \n * Parses an instance of  {@code Money} from a string.\u003cp\u003e The string format is \u0027$currencyCode $amount\u0027 where there may be zero to many spaces between the two parts. The currency code must be a valid three letter currency. The amount must match the regular expression  {@code [+-]?[0-9]*[.]?[0-9]*}. This matches the output from  {@link #toString()}. \u003cp\u003e For example,  {@code parse(\"USD 25\")} creates the instance {@code USD 25.00}while  {@code parse(\"USD 25.95\")} creates the instance {@code USD 25.95}.\n * @param moneyStr  the money string to parse, not null\n * @return the parsed instance, never null\n * @throws IllegalArgumentException if the string is malformed\n * @throws ArithmeticException if the amount is too large\n */\n","tf":{"freq":{"valid":1,"link":1,"arithmet":1,"currenc":3,"space":1,"zero":1,"express":1,"must":2,"amount":3,"money":3,"three":1,"argument":1,"mani":1,"except":2,"may":1,"letter":1,"regular":1,"creat":2,"format":1,"illeg":1,"instanc":4,"two":1,"malform":1,"never":1,"str":1,"larg":1,"string":5,"exampl":1,"match":2,"part":1,"output":1,"pars":6},"maxFreq":6,"totalTerms":54},"loc":3}