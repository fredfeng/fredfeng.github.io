{"id":11702,"className":"org.joda.time.DateTime","methodName":"parse","signature":"\u003corg.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String)\u003e","javadoc":"/** \n * Parses a  {@code DateTime} from the specified string.\u003cp\u003e This uses  {@link ISODateTimeFormat#dateTimeParser().withOffsetParsed()}which is different to passing a  {@code String} to the constructor.\u003cp\u003e Sometimes this method and  {@code new DateTime(str)} return different results.This can be confusing as the different is not visible in  {@link #toString()}. \u003cp\u003e When passed a date-time string without an offset, such as \u00272010-06-30T01:20\u0027, both the constructor and this method use the default time-zone. As such,  {@code DateTime.parse(\"2010-06-30T01:20\")} and{@code new DateTime(\"2010-06-30T01:20\"))} are equal.\u003cp\u003e However, when this method is passed a date-time string with an offset, the offset is directly parsed and stored. As such,  {@code DateTime.parse(\"2010-06-30T01:20+02:00\")} and{@code new DateTime(\"2010-06-30T01:20+02:00\"))} are NOT equal.The object produced via this method has a zone of  {@code DateTimeZone.forOffsetHours(2)}. The object produced via the constructor has a zone of  {@code DateTimeZone.getDefault()}.\n * @param str  the string to parse, not null\n * @since 2.0\n */\n","tf":{"freq":{"result":1,"via":2,"store":1,"visibl":1,"link":2,"use":2,"object":2,"date":11,"specifi":1,"time":13,"sometim":1,"offset":5,"howev":1,"constructor":3,"direct":1,"produc":2,"equal":2,"hour":1,"format":1,"without":1,"confus":1,"pass":3,"differ":3,"str":2,"string":6,"method":4,"odat":1,"parser":1,"pars":7,"zone":5},"maxFreq":13,"totalTerms":87},"loc":3}