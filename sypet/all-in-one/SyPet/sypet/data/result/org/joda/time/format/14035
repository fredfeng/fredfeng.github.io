{"id":14035,"className":"org.joda.time.format.PeriodFormatterBuilder","methodName":"appendPrefix","signature":"\u003corg.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String[],java.lang.String[])\u003e","javadoc":"/** \n * Append a field prefix which applies only to the next appended field. If the field is not printed, neither is the prefix. \u003cp\u003e The value is converted to String. During parsing, the prefix is selected based on the match with the regular expression. The index of the first regular expression that matches value converted to String nominates the prefix. If none of the regular expressions match the value converted to String then the last prefix is selected. \u003cp\u003e An example usage for English might look like this: \u003cpre\u003e appendPrefix(new String[] { \u0026quot;\u0026circ;1$\u0026quot;, \u0026quot;.*\u0026quot; }, new String[] { \u0026quot; year\u0026quot;, \u0026quot; years\u0026quot; }) \u003c/pre\u003e \u003cp\u003e Please note that for languages with simple mapping (singular and plural prefix only - like the one above) the  {@link #appendPrefix(String,String)} methodwill produce in a slightly faster formatter and that {@link #appendPrefix(String[],String[])} method should be only used when themapping between values and prefixes is more complicated than the difference between singular and plural.\n * @param regularExpressions  an array of regular expressions, at least oneelement, length has to match the length of prefixes parameter\n * @param prefixes  an array of prefixes, at least one element, length has tomatch the length of regularExpressions parameter\n * @return this PeriodFormatterBuilder\n * @throws IllegalStateException if no field exists to append to\n * @see #appendPrefix\n * @since 2.5\n */\n","tf":{"freq":{"themap":1,"last":1,"simpl":1,"least":2,"languag":1,"formatt":2,"slight":1,"none":1,"year":2,"nomin":1,"quot":8,"element":1,"append":8,"except":1,"index":1,"select":2,"builder":1,"period":1,"like":2,"appli":1,"prefix":15,"match":4,"english":1,"array":2,"might":1,"tomatch":1,"next":1,"one":2,"link":2,"state":1,"convert":3,"use":1,"express":6,"plural":2,"faster":1,"pleas":1,"length":4,"map":1,"methodwil":1,"valu":4,"exist":1,"note":1,"look":1,"regular":6,"paramet":2,"produc":1,"illeg":1,"singular":2,"print":1,"field":4,"neither":1,"differ":1,"circ":1,"pre":2,"string":9,"exampl":1,"base":1,"oneel":1,"method":1,"usag":1,"complic":1,"first":1,"pars":1},"maxFreq":15,"totalTerms":135},"loc":7}