{"id":13210,"className":"org.joda.time.LocalTime","methodName":"withFieldAdded","signature":"\u003corg.joda.time.LocalTime: org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int)\u003e","javadoc":"/** \n * Returns a copy of this time with the value of the specified field increased. \u003cp\u003e If the addition is zero or the field is null, then \u003ccode\u003ethis\u003c/code\u003e is returned. \u003cp\u003e If the addition causes the maximum value of the field to be exceeded, then the value will wrap. Thus 23:59 plus two minutes yields 00:01. \u003cp\u003e These lines are equivalent: \u003cpre\u003e LocalTime added \u003d dt.plusHours(6); LocalTime added \u003d dt.withFieldAdded(DurationFieldType.hours(), 6); \u003c/pre\u003e\n * @param fieldType  the field type to add to, not null\n * @param amount  the amount to add\n * @return a copy of this time with the field updated\n * @throws IllegalArgumentException if the value is null or invalid\n * @throws ArithmeticException if the result exceeds the internal capacity\n */\n","tf":{"freq":{"increas":1,"result":1,"yield":1,"arithmet":1,"line":1,"add":2,"type":3,"zero":1,"copi":2,"specifi":1,"amount":2,"durat":1,"time":4,"invalid":1,"equival":1,"valu":4,"argument":1,"addit":2,"wrap":1,"plus":2,"except":2,"minut":1,"thus":1,"exceed":2,"hour":2,"illeg":1,"field":9,"two":1,"caus":1,"updat":1,"maximum":1,"pre":2,"intern":1,"will":1,"ad":4,"capac":1,"local":2},"maxFreq":9,"totalTerms":66},"loc":13}