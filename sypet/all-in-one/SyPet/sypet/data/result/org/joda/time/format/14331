{"id":14331,"className":"org.joda.time.format.PeriodFormat","methodName":"wordBased","signature":"\u003corg.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)\u003e","javadoc":"/** \n * Returns a word based formatter for the specified locale. \u003cp\u003e The words are configured in a resource bundle text file - {@code org.joda.time.format.messages}. This can be added to via the normal classpath resource bundle mechanisms. \u003cp\u003e You can add your own translation by creating messages_\u003clocale\u003e.properties file and adding it to the  {@code org.joda.time.format.messages} path.\u003cp\u003e Simple example (1 -\u003e singular suffix, not 1 -\u003e plural suffix): \u003cpre\u003e PeriodFormat.space\u003d\\  PeriodFormat.comma\u003d, PeriodFormat.commandand\u003d,and  PeriodFormat.commaspaceand\u003d, and  PeriodFormat.commaspace\u003d,  PeriodFormat.spaceandspace\u003d\\ and  PeriodFormat.year\u003d\\ year PeriodFormat.years\u003d\\ years PeriodFormat.month\u003d\\ month PeriodFormat.months\u003d\\ months PeriodFormat.week\u003d\\ week PeriodFormat.weeks\u003d\\ weeks PeriodFormat.day\u003d\\ day PeriodFormat.days\u003d\\ days PeriodFormat.hour\u003d\\ hour PeriodFormat.hours\u003d\\ hours PeriodFormat.minute\u003d\\ minute PeriodFormat.minutes\u003d\\ minutes PeriodFormat.second\u003d\\ second PeriodFormat.seconds\u003d\\ seconds PeriodFormat.millisecond\u003d\\ millisecond PeriodFormat.milliseconds\u003d\\ milliseconds \u003c/pre\u003e \u003cp\u003e Some languages contain more than two suffixes. You can use regular expressions for them. Here\u0027s an example using regular expression for English: \u003cpre\u003e PeriodFormat.space\u003d\\  PeriodFormat.comma\u003d, PeriodFormat.commandand\u003d,and  PeriodFormat.commaspaceand\u003d, and  PeriodFormat.commaspace\u003d,  PeriodFormat.spaceandspace\u003d\\ and  PeriodFormat.regex.separator\u003d% PeriodFormat.years.regex\u003d1$%. PeriodFormat.years.list\u003d\\ year%\\ years PeriodFormat.months.regex\u003d1$%. PeriodFormat.months.list\u003d\\ month%\\ months PeriodFormat.weeks.regex\u003d1$%. PeriodFormat.weeks.list\u003d\\ week%\\ weeks PeriodFormat.days.regex\u003d1$%. PeriodFormat.days.list\u003d\\ day%\\ days PeriodFormat.hours.regex\u003d1$%. PeriodFormat.hours.list\u003d\\ hour%\\ hours PeriodFormat.minutes.regex\u003d1$%. PeriodFormat.minutes.list\u003d\\ minute%\\ minutes PeriodFormat.seconds.regex\u003d1$%. PeriodFormat.seconds.list\u003d\\ second%\\ seconds PeriodFormat.milliseconds.regex\u003d1$%. PeriodFormat.milliseconds.list\u003d\\ millisecond%\\ milliseconds \u003c/pre\u003e \u003cp\u003e You can mix both approaches. Here\u0027s example for Polish ( \"1 year, 2 years, 5 years, 12 years, 15 years, 21 years, 22 years, 25 years\" translates to \"1 rok, 2 lata, 5 lat, 12 lat, 15 lat, 21 lat, 22 lata, 25 lat\"). Notice that PeriodFormat.day and PeriodFormat.days is used for day suffixes as there is no need for regular expressions: \u003cpre\u003e PeriodFormat.space\u003d\\  PeriodFormat.comma\u003d, PeriodFormat.commandand\u003d,i  PeriodFormat.commaspaceand\u003d, i  PeriodFormat.commaspace\u003d,  PeriodFormat.spaceandspace\u003d\\ i  PeriodFormat.regex.separator\u003d% PeriodFormat.years.regex\u003d^1$%[0-9]*(?\u0026lt;!1)[2-4]$%[0-9] PeriodFormat.years.list\u003d\\ rok%\\ lata%\\ lat PeriodFormat.months.regex\u003d^1$%[0-9]*(?\u0026lt;!1)[2-4]$%[0-9] PeriodFormat.months.list\u003d\\ miesi\\u0105c%\\ miesi\\u0105ce%\\ miesi\\u0119cy PeriodFormat.weeks.regex\u003d^1$%[0-9]*(?\u0026lt;!1)[2-4]$%[0-9] PeriodFormat.weeks.list\u003d\\ tydzie\\u0144%\\ tygodnie%\\ tygodni PeriodFormat.day\u003d\\ dzie\\u0144 PeriodFormat.days\u003d\\ dni PeriodFormat.hours.regex\u003d^1$%[0-9]*(?\u0026lt;!1)[2-4]$%[0-9] PeriodFormat.hours.list\u003d\\ godzina%\\ godziny%\\ godzin PeriodFormat.minutes.regex\u003d^1$%[0-9]*(?\u0026lt;!1)[2-4]$%[0-9] PeriodFormat.minutes.list\u003d\\ minuta%\\ minuty%\\ minut PeriodFormat.seconds.regex\u003d^1$%[0-9]*(?\u0026lt;!1)[2-4]$%[0-9] PeriodFormat.seconds.list\u003d\\ sekunda%\\ sekundy%\\ sekund PeriodFormat.milliseconds.regex\u003d^1$%[0-9]*(?\u0026lt;!1)[2-4]$%[0-9] PeriodFormat.milliseconds.list\u003d\\ milisekunda%\\ milisekundy%\\ milisekund \u003c/pre\u003e \u003cp\u003e Each PeriodFormat.\u0026lt;duration_field_type\u0026gt;.regex property stands for an array of regular expressions and is followed by a property PeriodFormat.\u0026lt;duration_field_type\u0026gt;.list holding an array of suffixes. PeriodFormat.regex.separator is used for splitting. See {@link PeriodFormatterBuilder#appendSuffix(String[],String[])} for details.\u003cp\u003e Available languages are English, Danish, Dutch, French, German, Japanese, Polish, Portuguese and Spanish.\n * @return the formatter, not null\n * @since 2.0, regex since 2.5\n */\n","tf":{"freq":{"need":1,"via":1,"languag":2,"french":1,"formatt":3,"specifi":1,"time":2,"file":2,"year":18,"spaceandspac":3,"spanish":1,"regex":20,"hold":1,"builder":1,"avail":1,"miesi":3,"configur":1,"month":10,"split":1,"rok":2,"array":2,"link":1,"sekundi":1,"use":4,"space":3,"org":2,"express":4,"durat":2,"sekunda":1,"commandand":3,"dni":1,"messag":3,"hour":10,"translat":2,"singular":1,"mix":1,"field":2,"mechan":1,"string":2,"exampl":3,"base":2,"week":10,"milisekundi":1,"detail":1,"second":10,"simpl":1,"normal":1,"milisekunda":1,"type":2,"notic":1,"milisekund":1,"dutch":1,"follow":1,"append":1,"minut":11,"comma":3,"text":1,"creat":1,"german":1,"format":75,"period":74,"classpath":1,"lata":3,"separ":3,"dzie":1,"contain":1,"sekund":1,"word":3,"day":13,"properti":3,"english":2,"bundl":2,"polish":2,"japanes":1,"plural":1,"add":1,"godzina":1,"resourc":2,"tygodni":2,"minuta":1,"millisecond":10,"path":1,"joda":2,"minuti":1,"portugues":1,"lat":6,"godzin":1,"commaspaceand":3,"regular":4,"list":16,"suffix":6,"two":1,"stand":1,"pre":6,"godzini":1,"danish":1,"commaspac":3,"ad":2,"approach":1,"local":2,"tydzi":1},"maxFreq":75,"totalTerms":438},"loc":12}