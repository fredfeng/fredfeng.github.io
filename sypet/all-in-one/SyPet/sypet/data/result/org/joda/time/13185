{"id":13185,"className":"org.joda.time.LocalTime","methodName":"fromCalendarFields","signature":"\u003corg.joda.time.LocalTime: org.joda.time.LocalTime fromCalendarFields(java.util.Calendar)\u003e","javadoc":"/** \n * Constructs a LocalTime from a \u003ccode\u003ejava.util.Calendar\u003c/code\u003e using exactly the same field values. \u003cp\u003e Each field is queried from the Calendar and assigned to the LocalTime. This is useful if you have been using the Calendar as a local time, ignoring the zone. \u003cp\u003e One advantage of this method is that this method is unaffected if the version of the time zone data differs between the JDK and Joda-Time. That is because the local field values are transferred, calculated using the JDK time zone data and without using the Joda-Time time zone data. \u003cp\u003e This factory method ignores the type of the calendar and always creates a LocalTime with ISO chronology. It is expected that you will only pass in instances of \u003ccode\u003eGregorianCalendar\u003c/code\u003e however this is not validated.\n * @param calendar  the Calendar to extract fields from\n * @return the created LocalTime\n * @throws IllegalArgumentException if the calendar is null\n * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n */\n","tf":{"freq":{"valid":1,"assign":1,"one":1,"data":3,"use":5,"date":1,"type":1,"version":1,"expect":1,"time":10,"invalid":1,"chronolog":2,"factori":1,"exact":1,"valu":2,"joda":2,"howev":1,"calendar":9,"argument":2,"except":2,"ignor":2,"transfer":1,"creat":2,"alway":1,"advantag":1,"calcul":1,"unaffect":1,"illeg":2,"without":1,"extract":1,"instanc":1,"pass":1,"field":5,"queri":1,"differ":1,"will":1,"java":1,"method":3,"local":6,"construct":1,"gregorian":1,"util":1,"zone":4},"maxFreq":10,"totalTerms":88},"loc":11}