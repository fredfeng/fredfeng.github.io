{"id":15196,"className":"org.joda.money.BigMoney","methodName":"minus","signature":"\u003corg.joda.money.BigMoney: org.joda.money.BigMoney minus(double)\u003e","javadoc":"/** \n * Returns a copy of this monetary value with the amount subtracted. \u003cp\u003e This subtracts the specified amount from this monetary amount, returning a new object. \u003cp\u003e No precision is lost in the result. The scale of the result will be the maximum of the two scales. For example,\u0027USD 25.95\u0027 minus \u00273.021d\u0027 gives \u0027USD 22.929\u0027. \u003cp\u003e The amount is converted via  {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal \u00271.45d\u0027 will be converted to \u00271.45\u0027. \u003cp\u003e This instance is immutable and unaffected by this method.\n * @param amountToSubtract  the monetary value to subtract, not null\n * @return the new instance with the input amount subtracted, never null\n */\n","tf":{"freq":{"scale":3,"result":2,"lost":1,"via":1,"give":1,"link":1,"convert":3,"object":1,"monetari":3,"decim":2,"copi":1,"specifi":1,"amount":6,"expect":1,"precis":1,"valu":3,"yieldsth":1,"liter":2,"minus":2,"unaffect":1,"immut":1,"answer":1,"instanc":2,"toexact":1,"subtract":5,"two":1,"never":1,"input":1,"scenario":1,"program":1,"maximum":1,"will":3,"exampl":2,"method":1,"big":2},"maxFreq":6,"totalTerms":61},"loc":7}