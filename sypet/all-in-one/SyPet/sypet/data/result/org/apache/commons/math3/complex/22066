{"id":22066,"className":"org.apache.commons.math3.complex.Complex","methodName":"divide","signature":"\u003corg.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex)\u003e","javadoc":"/** \n * Returns a  {@code Complex} whose value is{@code (this / divisor)}. Implements the definitional formula \u003cpre\u003e \u003ccode\u003e a + bi          ac + bd + (bc - ad)i ----------- \u003d ------------------------- c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e \u003c/code\u003e \u003c/pre\u003e but uses \u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e prescaling of operands\u003c/a\u003e to limit the effects of overflows and underflows in the computation. \u003cbr/\u003e {@code Infinite} and {@code NaN} values are handled according to thefollowing rules, applied in the order presented: \u003cul\u003e \u003cli\u003eIf either  {@code this} or {@code divisor} has a {@code NaN} valuein either part,  {@link #NaN} is returned.\u003c/li\u003e \u003cli\u003eIf  {@code divisor} equals {@link #ZERO},  {@link #NaN} is returned.\u003c/li\u003e \u003cli\u003eIf  {@code this} and {@code divisor} are both infinite,{@link #NaN} is returned.\u003c/li\u003e \u003cli\u003eIf  {@code this} is finite (i.e., has no {@code Infinite} or{@code NaN} parts) and {@code divisor} is infinite (one or both partsinfinite),  {@link #ZERO} is returned.\u003c/li\u003e \u003cli\u003eIf  {@code this} is infinite and {@code divisor} is finite,{@code NaN} values are returned in the parts of the result if the{@link java.lang.Double} rules applied to the definitional formulaforce  {@code NaN} results.\u003c/li\u003e \u003c/ul\u003e\n * @param divisor Value by which this {@code Complex} is to be divided.\n * @return {@code this / divisor}.\n * @throws NullArgumentException if {@code divisor} is {@code null}.\n */\n","tf":{"freq":{"result":2,"complex":2,"formulaforc":1,"partsinfinit":1,"one":1,"link":6,"use":1,"prescal":1,"thefollow":1,"sup":4,"org":1,"lang":1,"infinit":5,"order":1,"finit":2,"rule":2,"valu":4,"href":1,"argument":1,"limit":1,"except":1,"acm":1,"whose":1,"divid":2,"equal":1,"accord":1,"divisor":9,"operand":1,"underflow":1,"handl":1,"present":1,"either":2,"appli":2,"effect":1,"http":1,"pre":2,"definit":2,"overflow":1,"valuein":1,"comput":1,"java":1,"part":3,"doi":1,"formula":1},"maxFreq":9,"totalTerms":78},"loc":28}