{"id":19318,"className":"org.apache.commons.math3.util.MathArrays","methodName":"verifyValues","signature":"\u003corg.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],double[],int,int,boolean)\u003e","javadoc":"/** \n * This method is used to verify that the begin and length parameters designate a subarray of positive length and the weights are all non-negative, non-NaN, finite, and not all zero. \u003cp\u003e \u003cul\u003e \u003cli\u003ereturns \u003ccode\u003etrue\u003c/code\u003e iff the parameters designate a subarray of non-negative length and the weights array contains legitimate values.\u003c/li\u003e \u003cli\u003ethrows \u003ccode\u003eMathIllegalArgumentException\u003c/code\u003e if any of the following are true: \u003cul\u003e\u003cli\u003ethe values array is null\u003c/li\u003e \u003cli\u003ethe weights array is null\u003c/li\u003e \u003cli\u003ethe weights array does not have the same length as the values array\u003c/li\u003e \u003cli\u003ethe weights array contains one or more infinite values\u003c/li\u003e \u003cli\u003ethe weights array contains one or more NaN values\u003c/li\u003e \u003cli\u003ethe weights array contains negative values\u003c/li\u003e \u003cli\u003ethe start and length arguments do not determine a valid array\u003c/li\u003e\u003c/ul\u003e \u003c/li\u003e \u003cli\u003ereturns \u003ccode\u003efalse\u003c/li\u003e if the array is non-null, but \u003ccode\u003elength\u003c/code\u003e is 0 unless \u003ccode\u003eallowEmpty\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e. \u003c/ul\u003e\u003c/p\u003e\n * @param values the input array.\n * @param weights the weights array.\n * @param begin index of the first array element to include.\n * @param length the number of elements to include.\n * @param allowEmpty if {@code true} than allow zero length arrays to pass.\n * @return {@code true} if the parameters are valid.\n * @throws NullArgumentException if either of the arrays are null\n * @throws MathIllegalArgumentException if the array indices are not valid,the weights array contains NaN, infinite or negative elements, or there are no positive weights.\n * @since 3.3\n */\n","tf":{"freq":{"fals":1,"valid":3,"weight":11,"allow":3,"legitim":1,"one":2,"use":1,"zero":2,"infinit":2,"indic":1,"unless":1,"verifi":2,"finit":1,"length":8,"valu":8,"follow":1,"argument":4,"element":3,"index":1,"except":3,"includ":2,"paramet":3,"true":5,"number":1,"subarray":2,"illeg":2,"pass":1,"empti":2,"non":4,"begin":2,"math":2,"either":1,"input":1,"iff":1,"start":1,"determin":1,"contain":5,"method":1,"negat":4,"first":1,"posit":2,"design":2,"array":17},"maxFreq":17,"totalTerms":122},"loc":33}