{"id":15775,"className":"org.apache.commons.math3.distribution.MultivariateNormalDistribution","methodName":"MultivariateNormalDistribution","signature":"\u003corg.apache.commons.math3.distribution.MultivariateNormalDistribution: void MultivariateNormalDistribution(double[],double[][])\u003e","javadoc":"/** \n * Creates a multivariate normal distribution with the given mean vector and covariance matrix. \u003cbr/\u003e The number of dimensions is equal to the length of the mean vector and to the number of rows and columns of the covariance matrix. It is frequently written as \"p\" in formulae. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e this constructor will implicitly create an instance of {@link Well19937c} as random generator to be used for sampling only (see{@link #sample()} and {@link #sample(int)}). In case no sampling is needed for the created distribution, it is advised to pass  {@code null}as random generator via the appropriate constructors to avoid the additional initialisation overhead.\n * @param means Vector of means.\n * @param covariances Covariance matrix.\n * @throws DimensionMismatchException if the arrays length areinconsistent.\n * @throws SingularMatrixException if the eigenvalue decomposition cannotbe performed on the provided covariance matrix.\n * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues isnegative.\n */\n","tf":{"freq":{"need":1,"via":1,"areinconsist":1,"normal":2,"implicit":1,"distribut":3,"perform":1,"isneg":1,"advis":1,"avoid":1,"overhead":1,"given":1,"except":3,"cannotb":1,"creat":3,"random":2,"number":2,"provid":1,"row":1,"non":1,"instanc":1,"multivari":2,"definit":1,"will":1,"column":1,"covari":5,"posit":1,"array":1,"link":3,"use":1,"well":1,"vector":3,"written":1,"length":2,"mean":4,"note":1,"constructor":2,"addit":1,"initialis":1,"matrix":6,"eigenvalu":2,"equal":1,"dimens":2,"frequent":1,"singular":1,"pass":1,"appropri":1,"generat":2,"decomposit":1,"mismatch":1,"sampl":4,"formula":1},"maxFreq":6,"totalTerms":86},"loc":3}