{"id":20327,"className":"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet","methodName":"PolygonsSet","signature":"\u003corg.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void PolygonsSet(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])\u003e","javadoc":"/** \n * Build a polygon from a simple list of vertices. \u003cp\u003eThe boundary is provided as a list of points considering to represent the vertices of a simple loop. The interior part of the region is on the left side of this path and the exterior is on its right side.\u003c/p\u003e \u003cp\u003eThis constructor does not handle polygons with a boundary forming several disconnected paths (such as polygons with holes).\u003c/p\u003e \u003cp\u003eFor cases where this simple constructor applies, it is expected to be numerically more robust than the  {@link #PolygonsSet(Collection) generalconstructor} using {@link SubHyperplane subhyperplanes}.\u003c/p\u003e \u003cp\u003eIf the list is empty, the region will represent the whole space.\u003c/p\u003e \u003cp\u003e Polygons with thin pikes or dents are inherently difficult to handle because they involve lines with almost opposite directions at some vertices. Polygons whose vertices come from some physical measurement with noise are also difficult because an edge that should be straight may be broken in lots of different pieces with almost equal directions. In both cases, computing the lines intersections is not numerically robust due to the almost 0 or almost \u0026pi; angle. Such cases need to carefully adjust the  {@code hyperplaneThickness}parameter. A too small value would often lead to completely wrong polygons with large area wrongly identified as inside or outside. Large values are often much safer. As a rule of thumb, a value slightly below the size of the most accurate detail needed is a good value for the  {@code hyperplaneThickness}parameter. \u003c/p\u003e\n * @param hyperplaneThickness tolerance below which points are considered tobelong to the hyperplane (which is therefore more a slab)\n * @param vertices vertices of the simple loop boundary\n */\n","tf":{"freq":{"need":2,"interior":1,"detail":1,"simpl":4,"generalconstructor":1,"exterior":1,"slab":1,"lead":1,"good":1,"subhyperplan":1,"nois":1,"polygon":8,"expect":1,"almost":4,"slight":1,"accur":1,"care":1,"right":1,"form":1,"vertic":6,"whose":1,"numer":2,"tobelong":1,"involv":1,"piec":1,"provid":1,"much":1,"size":1,"appli":1,"outsid":1,"thick":3,"often":2,"whole":1,"intersect":1,"will":1,"due":1,"comput":1,"lot":1,"angl":1,"thin":1,"thumb":1,"small":1,"boundari":3,"straight":1,"collect":1,"region":2,"sub":1,"edg":1,"link":2,"use":1,"line":2,"identifi":1,"therefor":1,"opposit":1,"build":1,"space":1,"difficult":2,"consid":2,"area":1,"side":2,"rule":1,"safer":1,"adjust":1,"path":2,"loop":2,"valu":4,"left":1,"dent":1,"toler":1,"complet":1,"constructor":2,"hole":1,"direct":2,"may":1,"robust":2,"repres":2,"hyperplan":5,"physic":1,"paramet":2,"come":1,"equal":1,"list":3,"sever":1,"handl":2,"empti":1,"inher":1,"broken":1,"differ":1,"point":2,"larg":2,"pike":1,"insid":1,"wrong":2,"measur":1,"disconnect":1,"part":1,"also":1},"maxFreq":8,"totalTerms":148},"loc":3}