{"id":17501,"className":"org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver","methodName":"solve","signature":"\u003corg.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver: double solve(int,FUNC,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)\u003e","javadoc":"/** \n * Solve for a zero in the given interval. A solver may require that the interval brackets a single zero root. Solvers that do require bracketing should be able to handle the case where one of the endpoints is itself a root.\n * @param maxEval Maximum number of evaluations.\n * @param f Function to solve.\n * @param min Lower bound for the interval.\n * @param max Upper bound for the interval.\n * @param allowedSolution The kind of solutions that the root-finding algorithm mayaccept as solutions.\n * @return A value where the function is zero.\n * @throws org.apache.commons.math3.exception.MathIllegalArgumentException if the arguments do not satisfy the requirements specified by the solver.\n * @throws org.apache.commons.math3.exception.TooManyEvaluationsException ifthe allowed number of evaluations is exceeded.\n */\n","tf":{"freq":{"solut":3,"lower":1,"allow":2,"common":2,"root":3,"singl":1,"one":1,"abl":1,"org":2,"zero":3,"bracket":2,"kind":1,"specifi":1,"algorithm":1,"function":2,"upper":1,"requir":3,"given":1,"valu":1,"find":1,"argument":2,"min":1,"mani":1,"except":4,"may":1,"max":2,"ifth":1,"mayaccept":1,"eval":1,"exceed":1,"apach":2,"number":2,"evalu":3,"illeg":1,"solv":3,"endpoint":1,"handl":1,"math":3,"interv":4,"solver":3,"maximum":1,"satisfi":1,"bound":2},"maxFreq":4,"totalTerms":75},"loc":0}