{"id":23457,"className":"org.apache.commons.math.analysis.solvers.MullerSolver","methodName":"solve","signature":"\u003corg.apache.commons.math.analysis.solvers.MullerSolver: double solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)\u003e","javadoc":"/** \n * Find a real root in the given interval. \u003cp\u003e Original Muller\u0027s method would have function evaluation at complex point. Since our f(x) is real, we have to find ways to avoid that. Bracketing condition is one way to go: by requiring bracketing in every iteration, the newly computed approximation is guaranteed to be real.\u003c/p\u003e \u003cp\u003e Normally Muller\u0027s method converges quadratically in the vicinity of a zero, however it may be very slow in regions far away from zeros. For example, f(x) \u003d exp(x) - 1, min \u003d -50, max \u003d 100. In such case we use bisection as a safety backup if it performs very poorly.\u003c/p\u003e \u003cp\u003e The formulas here use divided differences directly.\u003c/p\u003e\n * @param f the function to solve\n * @param min the lower bound for the interval\n * @param max the upper bound for the interval\n * @param maxEval Maximum number of evaluations.\n * @return the point at which the function value is zero\n * @throws MaxIterationsExceededException if the maximum iteration count is exceededor the solver detects convergence problems otherwise\n * @throws FunctionEvaluationException if an error occurs evaluating the function\n * @throws IllegalArgumentException if any parameters are invalid\n */\n","tf":{"freq":{"lower":1,"count":1,"root":1,"normal":1,"perform":1,"approxim":1,"zero":3,"bracket":2,"vicin":1,"function":5,"avoid":1,"requir":1,"invalid":1,"given":1,"slow":1,"howev":1,"everi":1,"argument":1,"except":3,"eval":1,"far":1,"number":1,"solv":2,"newli":1,"exp":1,"solver":1,"bisect":1,"maximum":2,"comput":1,"exceededor":1,"otherwis":1,"region":1,"complex":1,"one":1,"way":2,"use":2,"upper":1,"real":3,"muller":2,"valu":1,"quadrat":1,"converg":2,"find":2,"backup":1,"direct":1,"condit":1,"min":2,"detect":1,"may":1,"safeti":1,"max":4,"error":1,"guarante":1,"paramet":1,"exceed":1,"origin":1,"poor":1,"divid":1,"problem":1,"evalu":4,"illeg":1,"interv":3,"differ":1,"point":2,"away":1,"exampl":1,"method":2,"iter":3,"bound":2,"occur":1,"formula":1},"maxFreq":5,"totalTerms":103},"loc":4}