{"id":16166,"className":"org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D","methodName":"NeuronSquareMesh2D","signature":"\u003corg.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: void NeuronSquareMesh2D(int,boolean,int,boolean,org.apache.commons.math3.ml.neuralnet.twod.SquareNeighbourhood,org.apache.commons.math3.ml.neuralnet.FeatureInitializer[])\u003e","javadoc":"/** \n * Creates a two-dimensional network composed of square cells: Each neuron not located on the border of the mesh has four neurons linked to it. \u003cbr/\u003e The links are bi-directional. \u003cbr/\u003e The topology of the network can also be a cylinder (if one of the dimensions is wrapped) or a torus (if both dimensions are wrapped).\n * @param numRows Number of neurons in the first dimension.\n * @param wrapRowDim Whether to wrap the first dimension (i.e the firstand last neurons will be linked together).\n * @param numCols Number of neurons in the second dimension.\n * @param wrapColDim Whether to wrap the second dimension (i.e the firstand last neurons will be linked together).\n * @param neighbourhoodType Neighbourhood type.\n * @param featureInit Array of functions that will initialize thecorresponding element of the features set of each newly created neuron. In particular, the size of this array defines the size of feature set.\n * @throws NumberIsTooSmallException if {@code numRows \u003c 2} or{@code numCols \u003c 2}.\n */\n","tf":{"freq":{"defin":1,"squar":2,"col":3,"second":2,"last":2,"link":4,"one":1,"particular":1,"type":2,"whether":2,"network":2,"function":1,"dim":2,"cylind":1,"firstand":2,"initi":1,"four":1,"border":1,"mesh":2,"direct":1,"element":1,"wrap":6,"except":1,"locat":1,"creat":2,"cell":1,"thecorrespond":1,"compos":1,"init":1,"number":3,"togeth":2,"neuron":8,"dimens":6,"row":3,"size":2,"topolog":1,"newli":1,"two":1,"dimension":1,"num":4,"featur":3,"will":3,"torus":1,"small":1,"first":2,"also":1,"neighbourhood":2,"array":2},"maxFreq":8,"totalTerms":96},"loc":32}