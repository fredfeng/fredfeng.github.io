{"id":22906,"className":"org.apache.commons.math.optimization.LeastSquaresConverter","methodName":"LeastSquaresConverter","signature":"\u003corg.apache.commons.math.optimization.LeastSquaresConverter: void LeastSquaresConverter(org.apache.commons.math.analysis.MultivariateVectorialFunction,double[],org.apache.commons.math.linear.RealMatrix)\u003e","javadoc":"/** \n * Build a simple converter for correlated residuals with the specific weights. \u003cp\u003e The scalar objective function value is computed as: \u003cpre\u003e objective \u003d y\u003csup\u003eT\u003c/sup\u003ey with y \u003d scale\u0026times;(observation-objective) \u003c/pre\u003e \u003c/p\u003e \u003cp\u003e The array computed by the objective function, the observations array and the the scaling matrix must have consistent sizes or a  {@link FunctionEvaluationException}will be triggered while computing the scalar objective. \u003c/p\u003e\n * @param function vectorial residuals function to wrap\n * @param observations observations to be compared to objective function to compute residuals\n * @param scale scaling matrix\n * @exception IllegalArgumentException if the observations vector and the scalematrix dimensions don\u0027t match (objective function dimension is checked only when the  {@link #value(double[])} method is called)\n */\n","tf":{"freq":{"call":1,"squar":1,"scale":4,"weight":1,"simpl":1,"least":1,"link":2,"residu":3,"convert":2,"object":7,"build":1,"sup":2,"must":1,"function":7,"time":1,"observ":5,"vector":1,"valu":2,"scalematrix":1,"argument":1,"wrap":1,"trigger":1,"except":3,"check":1,"scalar":2,"consist":1,"vectori":1,"matrix":2,"evalu":1,"dimens":2,"illeg":1,"size":1,"specif":1,"pre":2,"will":1,"comput":4,"method":1,"match":1,"correl":1,"compar":1,"array":2},"maxFreq":7,"totalTerms":76},"loc":11}