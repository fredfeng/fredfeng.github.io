{"id":22760,"className":"org.apache.commons.math.special.Erf","methodName":"erf","signature":"\u003corg.apache.commons.math.special.Erf: double erf(double)\u003e","javadoc":"/** \n * \u003cp\u003eReturns the error function\u003c/p\u003e \u003cp\u003eerf(x) \u003d 2/\u0026radic;\u0026pi; \u003csub\u003e0\u003c/sub\u003e\u0026int;\u003csup\u003ex\u003c/sup\u003e e\u003csup\u003e-t\u003csup\u003e2\u003c/sup\u003e\u003c/sup\u003edt \u003c/p\u003e \u003cp\u003eThis implementation computes erf(x) using the {@link Gamma#regularizedGammaP(double,double,double,int) regularized gamma function}, following \u003ca href\u003d\"http://mathworld.wolfram.com/Erf.html\"\u003e Erf\u003c/a\u003e, equation (3)\u003c/p\u003e \u003cp\u003eThe value returned is always between -1 and 1 (inclusive).  If  {@code abs(x) \u003e 40}, then {@code erf(x)} is indistinguishable from either 1 or -1 as a double, so the appropriate extremevalue is returned.\u003c/p\u003e\n * @param x the value.\n * @return the error function erf(x)\n * @throws MathException if the algorithm fails to converge.\n * @see Gamma#regularizedGammaP(double,double,double,int)\n */\n","tf":{"freq":{"sub":2,"com":1,"link":1,"erf":7,"use":1,"sup":6,"algorithm":1,"function":3,"inclus":1,"gamma":5,"fail":1,"wolfram":1,"valu":2,"converg":1,"href":1,"follow":1,"except":1,"equat":1,"error":2,"regular":3,"alway":1,"indistinguish":1,"radic":1,"math":1,"either":1,"http":1,"appropri":1,"mathworld":1,"comput":1,"html":1,"ab":1,"extremevalu":1},"maxFreq":7,"totalTerms":54},"loc":10}