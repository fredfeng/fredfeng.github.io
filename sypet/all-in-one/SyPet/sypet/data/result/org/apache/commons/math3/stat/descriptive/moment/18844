{"id":18844,"className":"org.apache.commons.math3.stat.descriptive.moment.StandardDeviation","methodName":"evaluate","signature":"\u003corg.apache.commons.math3.stat.descriptive.moment.StandardDeviation: double evaluate(double[],double,int,int)\u003e","javadoc":"/** \n * Returns the Standard Deviation of the entries in the specified portion of the input array, using the precomputed mean value.  Returns \u003ccode\u003eDouble.NaN\u003c/code\u003e if the designated subarray is empty. \u003cp\u003e Returns 0 for a single-value (i.e. length \u003d 1) sample.\u003c/p\u003e \u003cp\u003e The formula used assumes that the supplied mean value is the arithmetic mean of the sample data, not a known population parameter.  This method is supplied only to save computation when the mean has already been computed.\u003c/p\u003e \u003cp\u003e Throws \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if the array is null.\u003c/p\u003e \u003cp\u003e Does not change the internal state of the statistic.\u003c/p\u003e\n * @param values the input array\n * @param mean the precomputed mean value\n * @param begin index of the first array element to include\n * @param length the number of elements to include\n * @return the standard deviation of the values or Double.NaN if length \u003d 0\n * @throws MathIllegalArgumentException if the array is null or the array indexparameters are not valid\n */\n","tf":{"freq":{"valid":1,"save":1,"singl":1,"state":1,"arithmet":1,"data":1,"use":2,"deviat":2,"specifi":1,"popul":1,"length":3,"mean":6,"valu":6,"precomput":2,"portion":1,"argument":2,"element":2,"index":1,"except":2,"indexparamet":1,"includ":2,"assum":1,"standard":2,"entri":1,"paramet":1,"number":1,"suppli":2,"evalu":1,"subarray":1,"illeg":2,"statist":1,"begin":1,"empti":1,"math":1,"input":2,"intern":1,"comput":2,"alreadi":1,"method":1,"chang":1,"known":1,"first":1,"design":1,"sampl":2,"array":6,"formula":1},"maxFreq":6,"totalTerms":76},"loc":3}