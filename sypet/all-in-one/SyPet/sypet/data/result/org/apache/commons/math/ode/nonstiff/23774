{"id":23774,"className":"org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator","methodName":"reinitialize","signature":"\u003corg.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator: void reinitialize(org.apache.commons.math.ode.AbstractIntegrator,double[],double[][],boolean)\u003e","javadoc":"/** \n * Reinitialize the instance \u003cp\u003eSome Runge-Kutta integrators need fewer functions evaluations than their counterpart step interpolators. So the interpolator should perform the last evaluations they need by themselves. The {@link RungeKuttaIntegrator RungeKuttaIntegrator} and {@link EmbeddedRungeKuttaIntegrator EmbeddedRungeKuttaIntegrator}abstract classes call this method in order to let the step interpolator perform the evaluations it needs. These evaluations will be performed during the call to \u003ccode\u003edoFinalize\u003c/code\u003e if any, i.e. only if the step handler either calls the  {@link AbstractStepInterpolator#finalizeStep finalizeStep} method or the{@link AbstractStepInterpolator#getInterpolatedState getInterpolatedState} method (for an interpolator which needs afinalization) or if it clones the step interpolator.\u003c/p\u003e\n * @param rkIntegrator integrator being used\n * @param y reference to the integrator array holding the state atthe end of the step\n * @param yDotArray reference to the integrator array holding all theintermediate slopes\n * @param forward integration direction indicator\n */\n","tf":{"freq":{"need":4,"call":3,"integr":10,"last":1,"link":4,"rung":5,"state":3,"use":1,"perform":3,"dot":1,"function":1,"indic":1,"order":1,"forward":1,"refer":2,"slope":1,"interpol":9,"end":1,"direct":1,"counterpart":1,"clone":1,"hold":2,"evalu":4,"reiniti":2,"kutta":5,"embed":2,"instanc":1,"either":1,"afin":1,"will":1,"fewer":1,"method":3,"theintermedi":1,"atth":1,"step":9,"array":3,"handler":1},"maxFreq":10,"totalTerms":93},"loc":5}