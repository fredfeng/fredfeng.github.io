{"id":19782,"className":"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer","methodName":"NonLinearConjugateGradientOptimizer","signature":"\u003corg.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void NonLinearConjugateGradientOptimizer(org.apache.commons.math3.optim.nonlinear.scalar.gradient.Formula,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double)\u003e","javadoc":"/** \n * Constructor with default  {@link IdentityPreconditioner preconditioner}.\n * @param updateFormula formula to use for updating the \u0026beta; parameter,must be one of  {@link Formula#FLETCHER_REEVES} or{@link Formula#POLAK_RIBIERE}.\n * @param checker Convergence checker.\n * @param relativeTolerance Relative threshold for line search.\n * @param absoluteTolerance Absolute threshold for line search.\n * @param initialBracketingRange Extent of the initial interval used tofind an interval that brackets the optimum in order to perform the line search.\n * @see LineSearch#LineSearch(MultivariateOptimizer,double,double,double)\n * @since 3.3\n */\n","tf":{"freq":{"optimum":1,"link":3,"one":1,"tofind":1,"use":2,"line":5,"perform":1,"beta":1,"bracket":2,"conjug":1,"must":1,"order":1,"ident":1,"extent":1,"search":5,"rang":1,"relat":2,"initi":2,"converg":1,"toler":2,"constructor":1,"linear":1,"optim":2,"paramet":1,"absolut":2,"checker":2,"non":1,"threshold":2,"interv":2,"multivari":1,"precondition":2,"updat":2,"formula":4,"gradient":1},"maxFreq":5,"totalTerms":59},"loc":8}