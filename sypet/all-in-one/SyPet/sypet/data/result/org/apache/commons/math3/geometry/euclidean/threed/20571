{"id":20571,"className":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation","methodName":"applyInverseTo","signature":"\u003corg.apache.commons.math3.geometry.euclidean.threed.FieldRotation: org.apache.commons.math3.geometry.euclidean.threed.FieldRotation\u003cT\u003e applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation)\u003e","javadoc":"/** \n * Apply the inverse of a rotation to another rotation. Applying the inverse of a rotation to another rotation is computing the composition in an order compliant with the following rule : let u be any vector and v its image by rInner (i.e. rInner.applyTo(u) \u003d v), let w be the inverse image of v by rOuter (i.e. rOuter.applyInverseTo(v) \u003d w), then w \u003d comp.applyTo(u), where comp \u003d applyInverseTo(rOuter, rInner).\n * @param rOuter rotation to apply the rotation to\n * @param rInner rotation to apply the rotation to\n * @param \u003c T \u003e the type of the field elements\n * @return a new rotation which is the composition of r by the inverseof the instance\n */\n","tf":{"freq":{"element":1,"comp":2,"inverseof":1,"inner":4,"composit":2,"rotat":9,"anoth":2,"type":1,"imag":2,"instanc":1,"field":1,"appli":9,"invers":6,"outer":4,"order":1,"vector":1,"rule":1,"compliant":1,"comput":1,"follow":1},"maxFreq":9,"totalTerms":51},"loc":7}