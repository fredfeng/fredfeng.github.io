{"id":21015,"className":"org.apache.commons.math3.linear.BlockFieldMatrix","methodName":"toBlocksLayout","signature":"\u003corg.apache.commons.math3.linear.BlockFieldMatrix: T[][] toBlocksLayout(T[][])\u003e","javadoc":"/** \n * Convert a data array from raw layout to blocks layout. \u003cp\u003e Raw layout is the straightforward layout where element at row i and column j is in array element \u003ccode\u003erawData[i][j]\u003c/code\u003e. Blocks layout is the layout used in  {@link BlockFieldMatrix} instances, where the matrixis split in square blocks (except at right and bottom side where blocks may be rectangular to fit matrix size) and each block is stored in a flattened one-dimensional array. \u003c/p\u003e \u003cp\u003e This method creates an array in blocks layout from an input array in raw layout. It can be used to provide the array argument of the  {@link #BlockFieldMatrix(int,int,FieldElement[][],boolean)}constructor. \u003c/p\u003e\n * @param \u003c T \u003e Type of the field elements.\n * @param rawData Data array in raw layout.\n * @return a new data array containing the same entries but in blocks layout\n * @throws DimensionMismatchException if {@code rawData} is not rectangular(not all rows have the same length).\n * @see #createBlocksLayout(Field,int,int)\n * @see #BlockFieldMatrix(int,int,FieldElement[][],boolean)\n */\n","tf":{"freq":{"raw":7,"squar":1,"rectangular":2,"store":1,"one":1,"link":2,"data":6,"use":2,"convert":1,"block":12,"type":1,"fit":1,"flatten":1,"side":1,"layout":12,"length":1,"right":1,"constructor":1,"argument":1,"element":5,"except":2,"may":1,"matrixi":1,"creat":2,"entri":1,"matrix":4,"dimens":1,"provid":1,"row":2,"size":1,"instanc":1,"field":7,"input":1,"dimension":1,"contain":1,"column":1,"bottom":1,"method":1,"split":1,"mismatch":1,"straightforward":1,"array":8},"maxFreq":12,"totalTerms":101},"loc":45}