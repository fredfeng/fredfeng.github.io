{"id":26654,"className":"org.apache.commons.math.complex.Complex","methodName":"nthRoot","signature":"\u003corg.apache.commons.math.complex.Complex: java.util.List\u003corg.apache.commons.math.complex.Complex\u003e nthRoot(int)\u003e","javadoc":"/** \n * \u003cp\u003eComputes the n-th roots of this complex number. \u003c/p\u003e \u003cp\u003eThe nth roots are defined by the formula: \u003cpre\u003e \u003ccode\u003e z\u003csub\u003ek\u003c/sub\u003e \u003d abs\u003csup\u003e 1/n\u003c/sup\u003e (cos(phi + 2\u0026pi;k/n) + i (sin(phi + 2\u0026pi;k/n))\u003c/code\u003e\u003c/pre\u003e for \u003ci\u003e\u003ccode\u003ek\u003d0, 1, ..., n-1\u003c/code\u003e\u003c/i\u003e, where \u003ccode\u003eabs\u003c/code\u003e and \u003ccode\u003ephi\u003c/code\u003e are respectively the  {@link #abs() modulus} and {@link #getArgument() argument} of this complex number.\u003c/p\u003e \u003cp\u003eIf one or both parts of this complex number is NaN, a list with just one element, {@link #NaN} is returned.\u003c/p\u003e\u003cp\u003eif neither part is NaN, but at least one part is infinite, the result is a one-element list containing  {@link #INF}.\u003c/p\u003e\n * @param n degree of root\n * @return List\u003cComplex\u003e all nth roots of this complex number\n * @throws IllegalArgumentException if parameter n is less than or equal to 0\n * @since 2.0\n */\n","tf":{"freq":{"result":1,"defin":1,"sub":2,"complex":5,"cos":1,"root":5,"least":1,"link":4,"one":4,"sup":2,"infinit":1,"nth":3,"less":1,"phi":3,"argument":3,"just":1,"element":2,"except":1,"paramet":1,"equal":1,"number":4,"list":3,"illeg":1,"neither":1,"degre":1,"pre":2,"sin":1,"contain":1,"comput":1,"ab":3,"part":3,"respect":1,"modulus":1,"formula":1},"maxFreq":5,"totalTerms":67},"loc":37}