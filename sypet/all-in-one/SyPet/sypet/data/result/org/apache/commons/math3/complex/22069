{"id":22069,"className":"org.apache.commons.math3.complex.Complex","methodName":"equals","signature":"\u003corg.apache.commons.math3.complex.Complex: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Test for equality with another object. If both the real and imaginary parts of two complex numbers are exactly the same, and neither is  {@code Double.NaN}, the two Complex objects are considered to be equal. The behavior is the same as for JDK\u0027s  {@link Double#equals(Object) Double}: \u003cul\u003e \u003cli\u003eAll  {@code NaN} values are considered to be equal,i.e, if either (or both) real and imaginary parts of the complex number are equal to  {@code Double.NaN}, the complex number is equal to  {@code NaN}. \u003c/li\u003e \u003cli\u003e Instances constructed with different representations of zero (i.e. either \"0\" or \"-0\") are \u003cem\u003enot\u003c/em\u003e considered to be equal. \u003c/li\u003e \u003c/ul\u003e\n * @param other Object to test for equality with this instance.\n * @return {@code true} if the objects are equal, {@code false} if objectis  {@code null}, not an instance of  {@code Complex}, or not equal to this instance.\n */\n","tf":{"freq":{"fals":1,"objecti":1,"complex":5,"test":2,"behavior":1,"link":1,"object":5,"anoth":1,"zero":1,"consid":3,"real":2,"exact":1,"valu":1,"imaginari":2,"true":1,"number":3,"equal":11,"instanc":4,"represent":1,"neither":1,"two":2,"differ":1,"either":2,"construct":1,"part":2},"maxFreq":11,"totalTerms":56},"loc":15}