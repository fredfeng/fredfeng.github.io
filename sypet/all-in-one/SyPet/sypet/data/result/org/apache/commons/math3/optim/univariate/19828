{"id":19828,"className":"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer","methodName":"getOptima","signature":"\u003corg.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] getOptima()\u003e","javadoc":"/** \n * Gets all the optima found during the last call to  {@code optimize}. The optimizer stores all the optima found during a set of restarts. The  {@code optimize} method returns the best point only.This method returns all the points found at the end of each starts, including the best one already returned by the  {@code optimize} method.\u003cbr/\u003e The returned array as one element for each start as specified in the constructor. It is ordered with the results from the runs that did converge first, sorted from best to worst objective value (i.e in ascending order if minimizing and in descending order if maximizing), followed by  {@code null} elementscorresponding to the runs that did not converge. This means all elements will be  {@code null} if the {@code optimize} method did throwan exception. This also means that if the first element is not  {@code null}, it is the best point found across all starts.\n * @return an array containing the optima.\n * @throws MathIllegalStateException if {@link #optimize(OptimizationData[]) optimize} has not been called.\n */\n","tf":{"freq":{"call":2,"result":1,"sort":1,"store":1,"last":1,"optima":4,"link":1,"one":2,"data":1,"state":1,"object":1,"run":2,"across":1,"specifi":1,"minim":1,"maxim":1,"order":3,"mean":2,"best":4,"valu":1,"converg":2,"end":1,"throwan":1,"follow":1,"constructor":1,"element":3,"except":2,"restart":1,"includ":1,"optim":8,"worst":1,"illeg":1,"math":1,"point":3,"start":3,"contain":1,"will":1,"method":4,"alreadi":1,"descend":1,"elementscorrespond":1,"ascend":1,"also":1,"first":2,"found":4,"array":2},"maxFreq":8,"totalTerms":81},"loc":6}