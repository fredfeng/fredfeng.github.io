{"id":19246,"className":"org.apache.commons.math3.util.ArithmeticUtils","methodName":"gcd","signature":"\u003corg.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)\u003e","javadoc":"/** \n * Computes the greatest common divisor of the absolute value of two numbers, using a modified version of the \"binary gcd\" method. See Knuth 4.5.2 algorithm B. The algorithm is due to Josef Stein (1961). \u003cbr/\u003e Special cases: \u003cul\u003e \u003cli\u003eThe invocations {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)}, {@code gcd(Integer.MIN_VALUE, 0)} and{@code gcd(0, Integer.MIN_VALUE)} throw an{@code ArithmeticException}, because the result would be 2^31, which is too large for an int value.\u003c/li\u003e \u003cli\u003eThe result of  {@code gcd(x, x)},  {@code gcd(0, x)} and{@code gcd(x, 0)} is the absolute value of {@code x}, except for the special cases above.\u003c/li\u003e \u003cli\u003eThe invocation  {@code gcd(0, 0)} is the only one which returns{@code 0}.\u003c/li\u003e \u003c/ul\u003e\n * @param p Number.\n * @param q Number.\n * @return the greatest common divisor (never negative).\n * @throws MathArithmeticException if the result cannot be represented asa non-negative  {@code int} value.\n * @since 1.1\n */\n","tf":{"freq":{"result":3,"binari":1,"common":2,"one":1,"josef":1,"arithmet":2,"use":1,"knuth":1,"version":1,"algorithm":2,"stein":1,"valu":4,"except":3,"repres":1,"greatest":2,"number":3,"asa":1,"absolut":2,"divisor":2,"invoc":2,"non":1,"math":1,"two":1,"never":1,"larg":1,"modifi":1,"comput":1,"due":1,"negat":2,"method":1,"special":2,"integ":4,"gcd":9},"maxFreq":9,"totalTerms":62},"loc":56}