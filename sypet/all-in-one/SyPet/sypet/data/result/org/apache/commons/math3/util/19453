{"id":19453,"className":"org.apache.commons.math3.util.FastMath","methodName":"exp","signature":"\u003corg.apache.commons.math3.util.FastMath: double exp(double)\u003e","javadoc":"/** \n * Exponential function. Computes exp(x), function result is nearly rounded.   It will be correctly rounded to the theoretical value for 99.9% of input values, otherwise it will have a 1 ULP error. Method: Lookup intVal \u003d exp(int(x)) Lookup fracVal \u003d exp(int(x-int(x) / 1024.0) * 1024.0 ); Compute z as the exponential of the remaining bits by a polynomial minus one exp(x) \u003d intVal * fracVal * (1 + z) Accuracy: Calculation is done with 63 bits of precision, so result should be correctly rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n * @param x   a double\n * @return double e\u003csup\u003ex\u003c/sup\u003e\n */\n","tf":{"freq":{"otherwis":2,"val":4,"result":2,"one":1,"round":3,"sup":2,"lookup":2,"function":2,"correct":2,"exponenti":2,"precis":1,"valu":3,"theoret":1,"less":1,"minus":1,"error":2,"done":1,"calcul":1,"accuraci":1,"frac":2,"exp":5,"bit":2,"input":2,"near":1,"remain":1,"will":2,"comput":2,"method":1,"polynomi":1},"maxFreq":5,"totalTerms":53},"loc":3}