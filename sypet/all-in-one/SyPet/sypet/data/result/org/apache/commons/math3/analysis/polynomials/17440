{"id":17440,"className":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm","methodName":"verifyInterpolationArray","signature":"\u003corg.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)\u003e","javadoc":"/** \n * Check that the interpolation arrays are valid. The arrays features checked by this method are that both arrays have the same length and this length is at least 2.\n * @param x Interpolating points array.\n * @param y Interpolating values array.\n * @param abort Whether to throw an exception if {@code x} is not sorted.\n * @throws DimensionMismatchException if the array lengths are different.\n * @throws NumberIsTooSmallException if the number of points is less than 2.\n * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException if  {@code x} is not sorted in strictly increasing order and {@code abort}is  {@code true}.\n * @return {@code false} if the {@code x} is not sorted in increasing order,{@code true} otherwise.\n * @see #evaluate(double[],double[],double)\n * @see #computeCoefficients()\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"increas":2,"valid":1,"sort":3,"common":1,"least":1,"org":1,"whether":1,"order":2,"sequenc":1,"interpol":4,"verifi":1,"length":3,"valu":1,"less":1,"except":5,"check":2,"apach":1,"true":2,"number":2,"evalu":1,"dimens":1,"monoton":1,"non":1,"math":1,"point":2,"differ":1,"featur":1,"comput":1,"method":1,"coeffici":1,"strict":1,"mismatch":1,"small":1,"abort":2,"array":7},"maxFreq":7,"totalTerms":61},"loc":10}