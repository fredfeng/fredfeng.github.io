{"id":25032,"className":"org.apache.commons.math.util.ResizableDoubleArray","methodName":"ResizableDoubleArray","signature":"\u003corg.apache.commons.math.util.ResizableDoubleArray: void ResizableDoubleArray(int,float)\u003e","javadoc":"/** \n * \u003cp\u003e Create a ResizableArray with the specified initial capacity and expansion factor.  The remaining properties take default values: \u003cul\u003e \u003cli\u003e\u003ccode\u003eexpansionMode \u003d MULTIPLICATIVE_MODE\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003econtractionFactor \u003d 0.5 + expansionFactor\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e\u003c/p\u003e \u003cp\u003e Throws IllegalArgumentException if the following conditions are not met: \u003cul\u003e \u003cli\u003e\u003ccode\u003einitialCapacity \u003e 0\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eexpansionFactor \u003e 1\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e\u003c/p\u003e\n * @param initialCapacity The initial size of the internal storage array\n * @param expansionFactor the array will be expanded based on thisparameter\n * @throws IllegalArgumentException if parameters are not valid\n */\n","tf":{"freq":{"valid":1,"specifi":1,"resiz":2,"mode":1,"met":1,"expand":1,"valu":1,"initi":4,"follow":1,"thisparamet":1,"argument":2,"condit":1,"except":2,"creat":1,"contract":1,"paramet":1,"expans":5,"factor":5,"storag":1,"illeg":2,"size":1,"remain":1,"take":1,"base":1,"intern":1,"will":1,"properti":1,"capac":3,"array":4},"maxFreq":5,"totalTerms":49},"loc":6}