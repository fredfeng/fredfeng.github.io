{"id":25791,"className":"org.apache.commons.math.linear.BigMatrixImpl","methodName":"luDecompose","signature":"\u003corg.apache.commons.math.linear.BigMatrixImpl: void luDecompose()\u003e","javadoc":"/** \n * Computes a new \u003ca href\u003d\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"\u003e LU decompostion\u003c/a\u003e for this matrix, storing the result for use by other methods. \u003cp\u003e \u003cstrong\u003eImplementation Note\u003c/strong\u003e:\u003cbr\u003e Uses \u003ca href\u003d\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"\u003e Crout\u0027s algortithm\u003c/a\u003e, with partial pivoting.\u003c/p\u003e \u003cp\u003e \u003cstrong\u003eUsage Note\u003c/strong\u003e:\u003cbr\u003e This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.\u003c/p\u003e\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\n","tf":{"freq":{"need":1,"squar":1,"crout":1,"store":1,"bourbaki":1,"pdf":1,"decompost":1,"invalid":1,"rare":1,"refer":1,"damtp":1,"href":2,"htm":1,"except":1,"algortithm":1,"invok":1,"partial":1,"non":1,"peopl":1,"strong":4,"http":2,"will":1,"comput":1,"lectur":1,"array":1,"result":1,"www":2,"made":2,"data":1,"use":5,"automat":1,"pivot":1,"xxx":1,"nummeth":1,"fdl":1,"cam":1,"edu":1,"forc":1,"note":3,"direct":2,"trigger":1,"linear":1,"matrix":3,"web":1,"recomput":2,"singular":1,"decompos":1,"math":2,"num":1,"decomposit":1,"method":3,"gatech":1,"usag":1,"chang":2,"user":1},"maxFreq":5,"totalTerms":76},"loc":79}