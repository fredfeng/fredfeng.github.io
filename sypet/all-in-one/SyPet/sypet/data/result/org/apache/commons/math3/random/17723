{"id":17723,"className":"org.apache.commons.math3.random.BitsStreamGenerator","methodName":"nextInt","signature":"\u003corg.apache.commons.math3.random.BitsStreamGenerator: int nextInt(int)\u003e","javadoc":"/** \n * {@inheritDoc}\u003cp\u003eThis default implementation is copied from Apache Harmony java.util.Random (r929253).\u003c/p\u003e \u003cp\u003eImplementation notes: \u003cul\u003e \u003cli\u003eIf n is a power of 2, this method returns {@code (int) ((n * (long) next(31)) \u003e\u003e 31)}.\u003c/li\u003e \u003cli\u003eIf n is not a power of 2, what is returned is  {@code next(31) % n}with  {@code next(31)} values rejected (i.e. regenerated) until avalue that is larger than the remainder of  {@code Integer.MAX_VALUE / n}is generated. Rejection of this initial segment is necessary to ensure a uniform distribution.\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n */\n","tf":{"freq":{"reject":2,"uniform":1,"segment":1,"larger":1,"next":4,"distribut":1,"avalu":1,"apach":1,"random":1,"necessari":1,"copi":1,"ensur":1,"regener":1,"remaind":1,"harmoni":1,"generat":1,"power":2,"java":1,"method":1,"valu":1,"initi":1,"integ":1,"util":1,"note":1},"maxFreq":4,"totalTerms":29},"loc":15}