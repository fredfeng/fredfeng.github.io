{"id":15665,"className":"org.apache.commons.math3.distribution.HypergeometricDistribution","methodName":"HypergeometricDistribution","signature":"\u003corg.apache.commons.math3.distribution.HypergeometricDistribution: void HypergeometricDistribution(int,int,int)\u003e","javadoc":"/** \n * Construct a new hypergeometric distribution with the specified population size, number of successes in the population, and sample size. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e this constructor will implicitly create an instance of {@link Well19937c} as random generator to be used for sampling only (see{@link #sample()} and {@link #sample(int)}). In case no sampling is needed for the created distribution, it is advised to pass  {@code null}as random generator via the appropriate constructors to avoid the additional initialisation overhead.\n * @param populationSize Population size.\n * @param numberOfSuccesses Number of successes in the population.\n * @param sampleSize Sample size.\n * @throws NotPositiveException if {@code numberOfSuccesses \u003c 0}.\n * @throws NotStrictlyPositiveException if {@code populationSize \u003c\u003d 0}.\n * @throws NumberIsTooLargeException if {@code numberOfSuccesses \u003e populationSize}, or  {@code sampleSize \u003e populationSize}.\n */\n","tf":{"freq":{"need":1,"via":1,"link":3,"distribut":3,"implicit":1,"use":1,"well":1,"specifi":1,"advis":1,"avoid":1,"popul":8,"overhead":1,"note":1,"hypergeometr":2,"constructor":2,"addit":1,"except":3,"initialis":1,"creat":2,"random":2,"number":6,"size":10,"instanc":1,"pass":1,"larg":1,"appropri":1,"generat":2,"will":1,"construct":1,"strict":1,"posit":2,"success":5,"sampl":8},"maxFreq":10,"totalTerms":77},"loc":3}