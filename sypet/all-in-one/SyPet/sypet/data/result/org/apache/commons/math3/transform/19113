{"id":19113,"className":"org.apache.commons.math3.transform.TransformUtils","methodName":"createComplexArray","signature":"\u003corg.apache.commons.math3.transform.TransformUtils: org.apache.commons.math3.complex.Complex[] createComplexArray(double[][])\u003e","javadoc":"/** \n * Builds a new array of  {@link Complex} from the specified two dimensionalarray of real and imaginary parts. In the returned array  {@code dataC}, the data is laid out as follows \u003cul\u003e \u003cli\u003e {@code dataC[i].getReal() \u003d dataRI[0][i]},\u003c/li\u003e \u003cli\u003e {@code dataC[i].getImaginary() \u003d dataRI[1][i]}.\u003c/li\u003e \u003c/ul\u003e\n * @param dataRI the array of real and imaginary parts to be transformed\n * @return an array of {@link Complex} with specified real and imaginary parts.\n * @throws DimensionMismatchException if the number of rows of the specifiedarray is not two, or the array is not rectangular\n */\n","tf":{"freq":{"rectangular":1,"except":1,"complex":3,"creat":1,"link":2,"dimensionalarray":1,"data":7,"specifiedarray":1,"number":1,"dimens":1,"build":1,"row":1,"specifi":2,"transform":1,"two":2,"real":4,"laid":1,"imaginari":4,"mismatch":1,"part":3,"follow":1,"array":6},"maxFreq":7,"totalTerms":46},"loc":18}