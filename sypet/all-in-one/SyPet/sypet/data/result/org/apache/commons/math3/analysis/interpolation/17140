{"id":17140,"className":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator","methodName":"smooth","signature":"\u003corg.apache.commons.math3.analysis.interpolation.LoessInterpolator: double[] smooth(double[],double[],double[])\u003e","javadoc":"/** \n * Compute a weighted loess fit on the data at the original abscissae.\n * @param xval Arguments for the interpolation points.\n * @param yval Values for the interpolation points.\n * @param weights point weights: coefficients by which the robustness weightof a point is multiplied.\n * @return the values of the loess fit at corresponding original abscissae.\n * @throws NonMonotonicSequenceException if {@code xval} not sorted instrictly increasing order.\n * @throws DimensionMismatchException if {@code xval} and {@code yval} havedifferent sizes.\n * @throws NoDataException if {@code xval} or {@code yval} has zero size.\n * @throws NotFiniteNumberException if any of the arguments and values arenot finite real numbers.\n * @throws NumberIsTooSmallException if the bandwidth is too small toaccomodate the size of the input data (i.e. the bandwidth must be larger than 2/n).\n * @since 2.1\n */\n","tf":{"freq":{"increas":1,"weight":3,"smooth":1,"sort":1,"correspond":1,"data":3,"zero":1,"xval":4,"must":1,"bandwidth":2,"real":1,"fit":2,"order":1,"sequenc":1,"finit":2,"interpol":2,"toaccomod":1,"multipli":1,"valu":3,"argument":2,"robust":1,"except":5,"abscissa":2,"larger":1,"origin":2,"yval":3,"number":3,"dimens":1,"size":3,"non":1,"monoton":1,"point":4,"input":1,"weightof":1,"loess":2,"comput":1,"coeffici":1,"arenot":1,"mismatch":1,"small":2,"instrict":1,"havediffer":1},"maxFreq":5,"totalTerms":73},"loc":144}