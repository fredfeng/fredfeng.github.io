{"id":18537,"className":"org.apache.commons.math3.stat.inference.GTest","methodName":"gTest","signature":"\u003corg.apache.commons.math3.stat.inference.GTest: boolean gTest(double[],long[],double)\u003e","javadoc":"/** \n * Performs a G-Test (Log-Likelihood Ratio Test) for goodness of fit evaluating the null hypothesis that the observed counts conform to the frequency distribution described by the expected counts, with significance level  {@code alpha}. Returns true iff the null hypothesis can be rejected with  {@code 100 * (1 - alpha)} percent confidence.\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003cbr\u003e To test the hypothesis that {@code observed} follows {@code expected} at the 99% level,use \u003c/p\u003e\u003cp\u003e {@code gTest(expected, observed, 0.01)}\u003c/p\u003e \u003cp\u003eReturns true iff  {@link #gTest(double[],long[]) gTestGoodnessOfFitPValue(expected, observed)} \u003c alpha\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePreconditions\u003c/strong\u003e: \u003cul\u003e \u003cli\u003eExpected counts must all be positive. \u003c/li\u003e \u003cli\u003eObserved counts must all be \u0026ge; 0. \u003c/li\u003e \u003cli\u003eThe observed and expected arrays must have the same length and their common length must be at least 2. \u003cli\u003e  {@code 0 \u003c alpha \u003c 0.5} \u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\u003cp\u003eIf any of the preconditions are not met, a {@code MathIllegalArgumentException} is thrown.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003eThis implementation rescales the {@code expected} array if necessary to ensure that the sum of theexpected and observed counts are equal.\u003c/p\u003e\n * @param observed array of observed frequency counts\n * @param expected array of expected frequency counts\n * @param alpha significance level of the test\n * @return true iff null hypothesis can be rejected with confidence 1 -alpha\n * @throws NotPositiveException if {@code observed} has negative entries\n * @throws NotStrictlyPositiveException if {@code expected} has entries thatare not strictly positive\n * @throws DimensionMismatchException if the array lengths do not match orare less than 2.\n * @throws MaxCountExceededException if an error occurs computing thep-value.\n * @throws OutOfRangeException if alpha is not strictly greater than zeroand less than or equal to 0.5\n */\n","tf":{"freq":{"greater":1,"percent":1,"count":8,"test":8,"least":1,"distribut":1,"precondit":2,"perform":1,"good":2,"necessari":1,"must":4,"expect":10,"level":3,"observ":10,"thatar":1,"rang":1,"theexpect":1,"zeroand":1,"frequenc":3,"follow":1,"argument":1,"except":6,"thrown":1,"orar":1,"signific":2,"describ":1,"pvalu":1,"log":1,"iff":3,"thep":1,"ratio":1,"strong":6,"comput":1,"negat":1,"match":1,"strict":3,"posit":4,"array":5,"reject":2,"common":1,"link":1,"use":1,"sum":1,"likelihood":1,"ensur":1,"fit":2,"met":1,"rescal":1,"alpha":7,"hypothesi":4,"length":3,"valu":1,"less":2,"note":1,"max":1,"confid":2,"error":1,"entri":2,"exceed":1,"true":3,"equal":2,"evalu":1,"dimens":1,"illeg":1,"math":1,"conform":1,"exampl":1,"mismatch":1,"occur":1},"maxFreq":10,"totalTerms":151},"loc":8}