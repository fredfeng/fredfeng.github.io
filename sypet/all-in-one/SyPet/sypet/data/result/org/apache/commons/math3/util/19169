{"id":19169,"className":"org.apache.commons.math3.util.Combinations","methodName":"comparator","signature":"\u003corg.apache.commons.math3.util.Combinations: java.util.Comparator\u003cint[]\u003e comparator()\u003e","javadoc":"/** \n * Defines a lexicographic ordering of combinations. The returned comparator allows to compare any two combinations that can be produced by this instance\u0027s  {@link #iterator() iterator}. Its  {@code compare(int[],int[])} method will throw exceptions ifpassed combinations that are inconsistent with this instance: \u003cul\u003e \u003cli\u003e {@code DimensionMismatchException} if the array lengths are notequal to  {@code k},\u003c/li\u003e \u003cli\u003e {@code OutOfRangeException} if an element of the array is notwithin the interval [0,  {@code n}).\u003c/li\u003e \u003c/ul\u003e\n * @return a lexicographic comparator.\n */\n","tf":{"freq":{"element":1,"inconsist":1,"defin":1,"except":3,"allow":1,"link":1,"notwithin":1,"lexicograph":2,"produc":1,"dimens":1,"instanc":2,"interv":1,"two":1,"order":1,"rang":1,"length":1,"will":1,"combin":3,"notequ":1,"ifpass":1,"method":1,"mismatch":1,"iter":2,"compar":5,"array":2},"maxFreq":5,"totalTerms":37},"loc":3}