{"id":24863,"className":"org.apache.commons.math.util.MathUtils","methodName":"normalizeArray","signature":"\u003corg.apache.commons.math.util.MathUtils: double[] normalizeArray(double[],double)\u003e","javadoc":"/** \n * \u003cp\u003eNormalizes an array to make it sum to a specified value. Returns the result of the transformation \u003cpre\u003e x |-\u003e x * normalizedSum / sum \u003c/pre\u003e applied to each non-NaN element x of the input array, where sum is the sum of the non-NaN entries in the input array.\u003c/p\u003e \u003cp\u003eThrows IllegalArgumentException if \u003ccode\u003enormalizedSum\u003c/code\u003e is infinite or NaN and ArithmeticException if the input array contains any infinite elements or sums to 0\u003c/p\u003e \u003cp\u003eIgnores (i.e., copies unchanged to the output array) NaNs in the input array.\u003c/p\u003e\n * @param values input array to be normalized\n * @param normalizedSum target sum for the normalized array\n * @return normalized array\n * @throws ArithmeticException if the input array contains infinite elements or sums to zero\n * @throws IllegalArgumentException if the target sum is infinite or NaN\n * @since 2.1\n */\n","tf":{"freq":{"argument":2,"result":1,"element":3,"ignor":1,"except":4,"unchang":1,"entri":1,"normal":8,"arithmet":2,"sum":11,"zero":1,"illeg":2,"copi":1,"specifi":1,"non":2,"transform":1,"infinit":4,"input":6,"appli":1,"pre":2,"contain":2,"target":2,"valu":2,"output":1,"make":1,"array":11},"maxFreq":11,"totalTerms":74},"loc":33}