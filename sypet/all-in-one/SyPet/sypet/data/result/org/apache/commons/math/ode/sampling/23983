{"id":23983,"className":"org.apache.commons.math.ode.sampling.StepHandler","methodName":"handleStep","signature":"\u003corg.apache.commons.math.ode.sampling.StepHandler: void handleStep(org.apache.commons.math.ode.sampling.StepInterpolator,boolean)\u003e","javadoc":"/** \n * Handle the last accepted step\n * @param interpolator interpolator for the last accepted step. Forefficiency purposes, the various integrators reuse the same object on each call, so if the instance wants to keep it across all calls (for example to provide at the end of the integration a continuous model valid throughout the integration range, as the {@link org.apache.commons.math.ode.ContinuousOutputModel ContinuousOutputModel} class does), it should build a local copyusing the clone method of the interpolator and store this copy. Keeping only a reference to the interpolator and reusing it will result in unpredictable behavior (potentially crashing the application).\n * @param isLast true if the step is the last one\n * @exception DerivativeException if user code called from step interpolatorfinalization triggers one\n */\n","tf":{"freq":{"integr":3,"last":4,"store":1,"deriv":1,"accept":2,"reus":2,"copi":1,"refer":1,"rang":1,"interpol":4,"purpos":1,"copyus":1,"crash":1,"throughout":1,"clone":1,"except":2,"ode":1,"apach":1,"provid":1,"continu":3,"instanc":1,"interpolatorfin":1,"will":1,"output":2,"valid":1,"call":3,"result":1,"model":3,"common":1,"behavior":1,"link":1,"one":2,"object":1,"org":1,"build":1,"across":1,"applic":1,"foreffici":1,"unpredict":1,"various":1,"end":1,"want":1,"trigger":1,"true":1,"potenti":1,"handl":2,"math":1,"exampl":1,"method":1,"local":1,"user":1,"step":5,"keep":2},"maxFreq":5,"totalTerms":78},"loc":0}