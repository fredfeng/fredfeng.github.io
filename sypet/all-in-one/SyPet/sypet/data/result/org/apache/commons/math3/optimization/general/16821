{"id":16821,"className":"org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer","methodName":"getCovariances","signature":"\u003corg.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[][] getCovariances(double)\u003e","javadoc":"/** \n * Get the covariance matrix of the optimized parameters. \u003cbr/\u003e Note that this operation involves the inversion of the \u003ccode\u003eJ\u003csup\u003eT\u003c/sup\u003eJ\u003c/code\u003e matrix, where  {@code J} is theJacobian matrix. The  {@code threshold} parameter is a way for the caller to specifythat the result of this computation should be considered meaningless, and thus trigger an exception.\n * @param threshold Singularity threshold.\n * @return the covariance matrix.\n * @throws org.apache.commons.math3.linear.SingularMatrixException if the covariance matrix cannot be computed (singular problem).\n * @deprecated As of 3.1. Please use {@link #computeCovariances(double[],double)}instead.\n */\n","tf":{"freq":{"caller":1,"result":1,"deprec":1,"jacobian":1,"common":1,"link":1,"use":1,"way":1,"sup":2,"org":1,"consid":1,"pleas":1,"invers":1,"oper":1,"note":1,"trigger":1,"linear":1,"except":2,"optim":1,"meaningless":1,"thus":1,"matrix":6,"paramet":2,"apach":1,"problem":1,"involv":1,"specifythat":1,"singular":3,"threshold":3,"math":1,"instead":1,"comput":3,"covari":5},"maxFreq":6,"totalTerms":51},"loc":3}