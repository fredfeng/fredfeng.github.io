{"id":25033,"className":"org.apache.commons.math.util.ResizableDoubleArray","methodName":"ResizableDoubleArray","signature":"\u003corg.apache.commons.math.util.ResizableDoubleArray: void ResizableDoubleArray(int,float,float)\u003e","javadoc":"/** \n * \u003cp\u003e Create a ResizableArray with the specified initialCapacity, expansionFactor, and contractionCriteria. The \u003ccode\u003eexpansionMode\u003c/code\u003e will default to \u003ccode\u003eMULTIPLICATIVE_MODE.\u003c/code\u003e\u003c/p\u003e \u003cp\u003e Throws IllegalArgumentException if the following conditions are not met: \u003cul\u003e \u003cli\u003e\u003ccode\u003einitialCapacity \u003e 0\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eexpansionFactor \u003e 1\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003econtractionFactor \u003e\u003d expansionFactor\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e\u003c/p\u003e\n * @param initialCapacity The initial size of the internal storage array\n * @param expansionFactor the array will be expanded based on thisparameter\n * @param contractionCriteria The contraction Criteria.\n * @throws IllegalArgumentException if parameters are not valid\n */\n","tf":{"freq":{"thisparamet":1,"condit":1,"argument":2,"valid":1,"except":2,"criteria":3,"creat":1,"contract":4,"paramet":1,"expans":5,"factor":5,"storag":1,"illeg":2,"size":1,"resiz":2,"specifi":1,"mode":1,"met":1,"base":1,"intern":1,"will":2,"expand":1,"initi":4,"capac":3,"follow":1,"array":4},"maxFreq":5,"totalTerms":52},"loc":6}