{"id":26635,"className":"org.apache.commons.math.complex.Complex","methodName":"multiply","signature":"\u003corg.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)\u003e","javadoc":"/** \n * Return the product of this complex number and the given complex number. \u003cp\u003e Implements preliminary checks for NaN and infinity followed by the definitional formula: \u003cpre\u003e\u003ccode\u003e (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i \u003c/code\u003e\u003c/pre\u003e \u003c/p\u003e \u003cp\u003e Returns  {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or moreNaN parts. \u003c/p\u003e Returns  {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or moreNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more infinite parts (same result is returned regardless of the sign of the components). \u003c/p\u003e \u003cp\u003e Returns finite values in components of the result per the definitional formula in all remaining cases. \u003c/p\u003e\n * @param rhs the other complex number\n * @return the complex number product\n * @throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n */\n","tf":{"freq":{"result":2,"complex":4,"infin":1,"link":2,"one":3,"infinit":1,"given":1,"finit":1,"multipli":1,"rhs":5,"valu":1,"follow":1,"regardless":1,"except":1,"check":1,"number":4,"product":2,"neither":1,"sign":1,"either":2,"remain":1,"per":1,"compon":2,"pre":2,"definit":2,"pointer":1,"part":3,"preliminari":1,"formula":2},"maxFreq":5,"totalTerms":51},"loc":12}