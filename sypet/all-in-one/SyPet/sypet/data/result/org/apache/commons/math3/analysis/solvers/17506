{"id":17506,"className":"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils","methodName":"bracket","signature":"\u003corg.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double[] bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)\u003e","javadoc":"/** \n * This method simply calls  {@link #bracket(UnivariateFunction,double,double,double,double,double,int) bracket(function, initial, lowerBound, upperBound, q, r, maximumIterations)}with  {@code q} and {@code r} set to 1.0 and {@code maximumIterations} set to {@code Integer.MAX_VALUE}. \u003cstrong\u003eNote: \u003c/strong\u003e this method can take \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e iterations to throw a \u003ccode\u003eConvergenceException.\u003c/code\u003e  Unless you are confident that there is a root between \u003ccode\u003elowerBound\u003c/code\u003e and \u003ccode\u003eupperBound\u003c/code\u003e near \u003ccode\u003einitial,\u003c/code\u003e it is better to use {@link #bracket(UnivariateFunction,double,double,double,double,double,int) bracket(function, initial, lowerBound, upperBound, q, r, maximumIterations)}, explicitly specifying the maximum number of iterations.\u003c/p\u003e\n * @param function Function.\n * @param initial Initial midpoint of interval being expanded tobracket a root.\n * @param lowerBound Lower bound (a is never lower than this value)\n * @param upperBound Upper bound (b never is greater than thisvalue).\n * @return a two-element array holding a and b.\n * @throws NoBracketingException if a root cannot be bracketted.\n * @throws NotStrictlyPositiveException if {@code maximumIterations \u003c\u003d 0}.\n * @throws NullArgumentException if {@code function} is {@code null}.\n */\n","tf":{"freq":{"call":1,"simpli":1,"greater":1,"lower":6,"root":3,"link":2,"use":1,"bracket":7,"specifi":1,"function":7,"upper":5,"midpoint":1,"unless":1,"univari":2,"expand":1,"valu":1,"initi":5,"converg":1,"note":1,"argument":1,"element":1,"thisvalu":1,"except":4,"confid":1,"hold":1,"tobracket":1,"number":1,"interv":1,"two":1,"never":2,"near":1,"explicit":1,"strong":2,"maximum":5,"take":1,"better":1,"method":2,"strict":1,"iter":6,"posit":1,"integ":2,"bound":10,"array":1},"maxFreq":10,"totalTerms":97},"loc":3}