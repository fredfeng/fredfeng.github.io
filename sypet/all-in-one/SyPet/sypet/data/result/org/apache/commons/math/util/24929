{"id":24929,"className":"org.apache.commons.math.util.ContinuedFraction","methodName":"evaluate","signature":"\u003corg.apache.commons.math.util.ContinuedFraction: double evaluate(double,double,int)\u003e","javadoc":"/** \n * \u003cp\u003e Evaluates the continued fraction at the value x. \u003c/p\u003e \u003cp\u003e The implementation of this method is based on equations 14-17 of: \u003cul\u003e \u003cli\u003e Eric W. Weisstein. \"Continued Fraction.\" From MathWorld--A Wolfram Web Resource. \u003ca target\u003d\"_blank\" href\u003d\"http://mathworld.wolfram.com/ContinuedFraction.html\"\u003e http://mathworld.wolfram.com/ContinuedFraction.html\u003c/a\u003e \u003c/li\u003e \u003c/ul\u003e The recurrence relationship defined in those equations can result in very large intermediate results which can result in numerical overflow. As a means to combat these overflow conditions, the intermediate results are scaled whenever they threaten to become numerically unstable.\u003c/p\u003e\n * @param x the evaluation point.\n * @param epsilon maximum error allowed.\n * @param maxIterations maximum number of convergents\n * @return the value of the continued fraction evaluated at x.\n * @throws MathException if the algorithm fails to converge.\n */\n","tf":{"freq":{"scale":1,"result":4,"defin":1,"com":2,"allow":1,"unstabl":1,"weisstein":1,"algorithm":1,"intermedi":2,"resourc":1,"becom":1,"fail":1,"epsilon":1,"combat":1,"mean":1,"wolfram":3,"valu":2,"converg":2,"href":1,"condit":1,"whenev":1,"except":1,"equat":2,"fraction":5,"max":1,"blank":1,"error":1,"numer":2,"number":1,"web":1,"evalu":4,"continu":5,"threaten":1,"math":2,"relationship":1,"point":1,"http":2,"maximum":2,"larg":1,"overflow":2,"eric":1,"base":1,"target":1,"mathworld":2,"method":1,"html":2,"iter":1,"recurr":1,"world":1},"maxFreq":5,"totalTerms":77},"loc":80}