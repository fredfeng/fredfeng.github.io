{"id":16181,"className":"org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory","methodName":"exponentialDecay","signature":"\u003corg.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction exponentialDecay(double,double,long)\u003e","javadoc":"/** \n * Creates an exponential decay  {@link LearningFactorFunction function}. It will compute \u003ccode\u003ea e\u003csup\u003e-x / b\u003c/sup\u003e\u003c/code\u003e, where  {@code x} is the (integer) independent variable and\u003cul\u003e \u003cli\u003e\u003ccode\u003ea \u003d initValue\u003c/code\u003e \u003cli\u003e\u003ccode\u003eb \u003d -numCall / ln(valueAtNumCall / initValue)\u003c/code\u003e \u003c/ul\u003e\n * @param initValue Initial value, i.e.{@link LearningFactorFunction#value(long) value(0)}.\n * @param valueAtNumCall Value of the function at {@code numCall}.\n * @param numCall Argument for which the function returns{@code valueAtNumCall}.\n * @return the learning factor function.\n * @throws org.apache.commons.math3.exception.OutOfRangeException if  {@code initValue \u003c\u003d 0} or {@code initValue \u003e 1}.\n * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException if  {@code valueAtNumCall \u003c\u003d 0}.\n * @throws org.apache.commons.math3.exception.NumberIsTooLargeException if  {@code valueAtNumCall \u003e\u003d initValue}.\n * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException if  {@code numCall \u003c\u003d 0}.\n */\n","tf":{"freq":{"call":9,"common":4,"link":2,"variabl":1,"sup":2,"org":4,"function":6,"independ":1,"rang":1,"exponenti":2,"valu":15,"initi":1,"argument":1,"except":8,"creat":1,"apach":4,"learn":3,"init":6,"number":1,"factor":3,"math":4,"num":9,"larg":1,"will":1,"comput":1,"strict":2,"posit":2,"integ":1,"decay":2},"maxFreq":15,"totalTerms":98},"loc":17}