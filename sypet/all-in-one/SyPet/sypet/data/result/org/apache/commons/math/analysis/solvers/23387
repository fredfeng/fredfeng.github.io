{"id":23387,"className":"org.apache.commons.math.analysis.solvers.BrentSolver","methodName":"solve","signature":"\u003corg.apache.commons.math.analysis.solvers.BrentSolver: double solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)\u003e","javadoc":"/** \n * Find a zero in the given interval with an initial guess. \u003cp\u003eThrows \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if the values of the function at the three points have the same sign (note that it is allowed to have endpoints with the same sign if the initial point has opposite sign function-wise).\u003c/p\u003e\n * @param f function to solve.\n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @param initial the start value to use (must be set to min if noinitial point is known).\n * @param maxEval Maximum number of evaluations.\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException the maximum iteration count is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating  the function\n * @throws IllegalArgumentException if initial is not between min and max(even if it \u003cem\u003eis\u003c/em\u003e a root)\n */\n","tf":{"freq":{"lower":1,"count":1,"allow":1,"root":1,"wise":1,"use":1,"zero":2,"opposit":1,"must":1,"function":6,"upper":1,"given":1,"three":1,"valu":3,"initi":4,"noiniti":1,"find":1,"note":1,"argument":2,"min":3,"except":4,"max":4,"error":1,"eval":1,"exceed":2,"number":1,"evalu":3,"illeg":2,"solv":2,"endpoint":1,"interv":3,"sign":3,"point":3,"start":1,"maximum":2,"guess":1,"even":1,"known":1,"iter":2,"bound":2,"occur":1},"maxFreq":6,"totalTerms":75},"loc":4}