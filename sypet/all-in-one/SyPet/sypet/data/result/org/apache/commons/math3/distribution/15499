{"id":15499,"className":"org.apache.commons.math3.distribution.AbstractIntegerDistribution","methodName":"inverseCumulativeProbability","signature":"\u003corg.apache.commons.math3.distribution.AbstractIntegerDistribution: int inverseCumulativeProbability(double)\u003e","javadoc":"/** \n * {@inheritDoc}The default implementation returns \u003cul\u003e \u003cli\u003e {@link #getSupportLowerBound()} for {@code p \u003d 0},\u003c/li\u003e \u003cli\u003e {@link #getSupportUpperBound()} for {@code p \u003d 1}, and\u003c/li\u003e \u003cli\u003e {@link #solveInverseCumulativeProbability(double,int,int)} for{@code 0 \u003c p \u003c 1}.\u003c/li\u003e \u003c/ul\u003e\n */\n","tf":{"freq":{"upper":1,"cumul":2,"lower":1,"support":2,"invers":2,"probabl":2,"link":3,"solv":1,"bound":2},"maxFreq":3,"totalTerms":16},"loc":44}