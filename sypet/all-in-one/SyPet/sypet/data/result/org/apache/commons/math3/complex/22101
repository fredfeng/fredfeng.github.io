{"id":22101,"className":"org.apache.commons.math3.complex.Complex","methodName":"nthRoot","signature":"\u003corg.apache.commons.math3.complex.Complex: java.util.List\u003corg.apache.commons.math3.complex.Complex\u003e nthRoot(int)\u003e","javadoc":"/** \n * Computes the n-th roots of this complex number. The nth roots are defined by the formula: \u003cpre\u003e \u003ccode\u003e z\u003csub\u003ek\u003c/sub\u003e \u003d abs\u003csup\u003e1/n\u003c/sup\u003e (cos(phi + 2\u0026pi;k/n) + i (sin(phi + 2\u0026pi;k/n)) \u003c/code\u003e \u003c/pre\u003e for \u003ci\u003e {@code k\u003d0, 1, ..., n-1}\u003c/i\u003e, where  {@code abs} and {@code phi}are respectively the  {@link #abs() modulus} and{@link #getArgument() argument} of this complex number.\u003cbr/\u003e If one or both parts of this complex number is NaN, a list with just one element,  {@link #NaN} is returned.if neither part is NaN, but at least one part is infinite, the result is a one-element list containing  {@link #INF}.\n * @param n Degree of root.\n * @return a List\u003cComplex\u003e of all {@code n}-th roots of  {@code this}.\n * @throws NotPositiveException if {@code n \u003c\u003d 0}.\n * @since 2.0\n */\n","tf":{"freq":{"result":1,"defin":1,"sub":2,"complex":4,"cos":1,"root":5,"least":1,"link":4,"one":4,"sup":2,"infinit":1,"nth":2,"phi":3,"argument":2,"just":1,"element":2,"except":1,"number":3,"list":3,"neither":1,"degre":1,"pre":2,"sin":1,"contain":1,"comput":1,"ab":3,"part":3,"posit":1,"respect":1,"modulus":1,"formula":1},"maxFreq":5,"totalTerms":60},"loc":35}