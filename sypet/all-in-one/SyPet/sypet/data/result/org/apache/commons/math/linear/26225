{"id":26225,"className":"org.apache.commons.math.linear.BlockRealMatrix","methodName":"BlockRealMatrix","signature":"\u003corg.apache.commons.math.linear.BlockRealMatrix: void BlockRealMatrix(int,int,double[][],boolean)\u003e","javadoc":"/** \n * Create a new dense matrix copying entries from block layout data. \u003cp\u003eThe input array \u003cem\u003emust\u003c/em\u003e already be in blocks layout.\u003c/p\u003e\n * @param rows  the number of rows in the new matrix\n * @param columns  the number of columns in the new matrix\n * @param blockData data for new matrix\n * @param copyArray if true, the input array will be copied, otherwiseit will be referenced\n * @exception IllegalArgumentException if \u003ccode\u003eblockData\u003c/code\u003e shape isinconsistent with block layout\n * @see #createBlocksLayout(int,int)\n * @see #toBlocksLayout(double[][])\n * @see #BlockRealMatrix(double[][])\n */\n","tf":{"freq":{"data":4,"block":9,"must":1,"copi":3,"referenc":1,"real":2,"layout":5,"isinconsist":1,"dens":1,"argument":1,"except":2,"creat":2,"entri":1,"matrix":6,"true":1,"number":2,"shape":1,"illeg":1,"row":2,"input":2,"otherwiseit":1,"column":2,"will":2,"alreadi":1,"array":3},"maxFreq":9,"totalTerms":57},"loc":34}