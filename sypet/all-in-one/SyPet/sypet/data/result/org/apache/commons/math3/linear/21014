{"id":21014,"className":"org.apache.commons.math3.linear.BlockFieldMatrix","methodName":"BlockFieldMatrix","signature":"\u003corg.apache.commons.math3.linear.BlockFieldMatrix: void BlockFieldMatrix(int,int,T[][],boolean)\u003e","javadoc":"/** \n * Create a new dense matrix copying entries from block layout data. \u003cp\u003eThe input array \u003cem\u003emust\u003c/em\u003e already be in blocks layout.\u003c/p\u003e\n * @param rows  the number of rows in the new matrix\n * @param columns  the number of columns in the new matrix\n * @param blockData data for new matrix\n * @param copyArray if true, the input array will be copied, otherwiseit will be referenced\n * @throws DimensionMismatchException if the {@code blockData} shape isinconsistent with block layout.\n * @throws NotStrictlyPositiveException if row or column dimension is notpositive.\n * @see #createBlocksLayout(Field,int,int)\n * @see #toBlocksLayout(FieldElement[][])\n * @see #BlockFieldMatrix(FieldElement[][])\n */\n","tf":{"freq":{"data":4,"block":9,"must":1,"copi":3,"referenc":1,"layout":5,"notposit":1,"isinconsist":1,"dens":1,"element":2,"except":2,"creat":2,"entri":1,"matrix":6,"true":1,"number":2,"shape":1,"dimens":2,"row":3,"field":5,"input":2,"otherwiseit":1,"column":3,"will":2,"alreadi":1,"strict":1,"mismatch":1,"posit":1,"array":3},"maxFreq":9,"totalTerms":68},"loc":31}