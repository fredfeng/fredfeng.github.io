{"id":24621,"className":"org.apache.commons.math.stat.descriptive.moment.Variance","methodName":"evaluate","signature":"\u003corg.apache.commons.math.stat.descriptive.moment.Variance: double evaluate(double[],double[],int,int)\u003e","javadoc":"/** \n * \u003cp\u003eReturns the weighted variance of the entries in the specified portion of the input array, or \u003ccode\u003eDouble.NaN\u003c/code\u003e if the designated subarray is empty.\u003c/p\u003e \u003cp\u003e Uses the formula \u003cpre\u003e \u0026Sigma;(weights[i]*(values[i] - weightedMean)\u003csup\u003e2\u003c/sup\u003e)/(\u0026Sigma;(weights[i]) - 1) \u003c/pre\u003e where weightedMean is the weighted mean\u003c/p\u003e \u003cp\u003e This formula will not return the same result as the unweighted variance when all weights are equal, unless all weights are equal to 1. The formula assumes that weights are to be treated as \"expansion values,\" as will be the case if for example the weights represent frequency counts. To normalize weights so that the denominator in the variance computation equals the length of the input vector minus one, use \u003cpre\u003e \u003ccode\u003eevaluate(values, MathUtils.normalizeArray(weights, values.length)); \u003c/code\u003e \u003c/pre\u003e \u003cp\u003e Returns 0 for a single-value (i.e. length \u003d 1) sample.\u003c/p\u003e \u003cp\u003e Throws \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if any of the following are true: \u003cul\u003e\u003cli\u003ethe values array is null\u003c/li\u003e \u003cli\u003ethe weights array is null\u003c/li\u003e \u003cli\u003ethe weights array does not have the same length as the values array\u003c/li\u003e \u003cli\u003ethe weights array contains one or more infinite values\u003c/li\u003e \u003cli\u003ethe weights array contains one or more NaN values\u003c/li\u003e \u003cli\u003ethe weights array contains negative values\u003c/li\u003e \u003cli\u003ethe start and length arguments do not determine a valid array\u003c/li\u003e \u003c/ul\u003e\u003c/p\u003e \u003cp\u003e Does not change the internal state of the statistic.\u003c/p\u003e \u003cp\u003e Throws \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if either array is null.\u003c/p\u003e\n * @param values the input array\n * @param weights the weights array\n * @param begin index of the first array element to include\n * @param length the number of elements to include\n * @return the weighted variance of the values or Double.NaN if length \u003d 0\n * @throws IllegalArgumentException if the parameters are not valid\n * @since 2.1\n */\n","tf":{"freq":{"count":1,"singl":1,"normal":2,"denomin":1,"specifi":1,"infinit":1,"frequenc":1,"follow":1,"argument":4,"element":2,"index":1,"except":3,"minus":1,"expans":1,"number":1,"statist":1,"varianc":4,"input":3,"start":1,"determin":1,"contain":3,"will":2,"comput":1,"negat":1,"util":1,"array":14,"treat":1,"valid":2,"unweight":1,"result":1,"weight":20,"one":3,"state":1,"use":2,"sup":2,"unless":1,"sigma":2,"vector":1,"length":7,"mean":3,"valu":12,"portion":1,"includ":2,"assum":1,"repres":1,"entri":1,"paramet":1,"true":1,"equal":3,"evalu":2,"subarray":1,"illeg":3,"begin":1,"empti":1,"math":1,"either":1,"pre":4,"intern":1,"exampl":1,"chang":1,"first":1,"design":1,"sampl":1,"formula":3},"maxFreq":20,"totalTerms":147},"loc":16}