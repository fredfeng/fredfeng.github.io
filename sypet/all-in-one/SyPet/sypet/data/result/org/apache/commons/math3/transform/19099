{"id":19099,"className":"org.apache.commons.math3.transform.FastFourierTransformer","methodName":"transformInPlace","signature":"\u003corg.apache.commons.math3.transform.FastFourierTransformer: void transformInPlace(double[][],org.apache.commons.math3.transform.DftNormalization,org.apache.commons.math3.transform.TransformType)\u003e","javadoc":"/** \n * Computes the standard transform of the specified complex data. The computation is done in place. The input data is laid out as follows \u003cul\u003e \u003cli\u003e {@code dataRI[0][i]} is the real part of the {@code i}-th data point,\u003c/li\u003e \u003cli\u003e {@code dataRI[1][i]} is the imaginary part of the {@code i}-th data point.\u003c/li\u003e \u003c/ul\u003e\n * @param dataRI the two dimensional array of real and imaginary parts of the data\n * @param normalization the normalization to be applied to the transformed data\n * @param type the type of transform (forward, inverse) to be performed\n * @throws DimensionMismatchException if the number of rows of the specifiedarray is not two, or the array is not rectangular\n * @throws MathIllegalArgumentException if the number of data points is nota power of two\n */\n","tf":{"freq":{"rectangular":1,"complex":1,"nota":1,"normal":2,"data":10,"perform":1,"type":2,"specifi":1,"real":2,"transform":4,"invers":1,"forward":1,"power":1,"imaginari":2,"place":2,"follow":1,"argument":1,"except":2,"standard":1,"done":1,"specifiedarray":1,"number":2,"dimens":1,"illeg":1,"row":1,"math":1,"point":3,"two":3,"input":1,"dimension":1,"appli":1,"laid":1,"comput":2,"mismatch":1,"part":3,"array":2},"maxFreq":10,"totalTerms":63},"loc":145}