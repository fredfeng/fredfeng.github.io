{"id":26352,"className":"org.apache.commons.math.linear.MatrixUtils","methodName":"serializeRealVector","signature":"\u003corg.apache.commons.math.linear.MatrixUtils: void serializeRealVector(org.apache.commons.math.linear.RealVector,java.io.ObjectOutputStream)\u003e","javadoc":"/** \n * Serialize a  {@link RealVector}. \u003cp\u003e This method is intended to be called from within a private \u003ccode\u003ewriteObject\u003c/code\u003e method (after a call to \u003ccode\u003eoos.defaultWriteObject()\u003c/code\u003e) in a class that has a {@link RealVector} field, which should be declared \u003ccode\u003etransient\u003c/code\u003e.This way, the default handling does not serialize the vector (the  {@link RealVector} interface is not serializable by default) but this method doesserialize it specifically. \u003c/p\u003e \u003cp\u003e The following example shows how a simple class with a name and a real vector should be written: \u003cpre\u003e\u003ccode\u003e public class NamedVector implements Serializable { private final String name; private final transient RealVector coefficients; // omitted constructors, getters ... private void writeObject(ObjectOutputStream oos) throws IOException { oos.defaultWriteObject();  // takes care of name field MatrixUtils.serializeRealVector(coefficients, oos); } private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException { ois.defaultReadObject();  // takes care of name field MatrixUtils.deserializeRealVector(this, \"coefficients\", ois); } } \u003c/code\u003e\u003c/pre\u003e \u003c/p\u003e\n * @param vector real vector to serialize\n * @param oos stream where the real vector should be written\n * @exception IOException if object cannot be written to stream\n * @see #deserializeRealVector(Object,String,ObjectInputStream)\n */\n","tf":{"freq":{"call":2,"stream":5,"simpl":1,"getter":1,"link":3,"serializ":2,"way":1,"show":1,"object":11,"doesseri":1,"real":11,"declar":1,"vector":14,"name":5,"written":3,"care":2,"write":4,"read":2,"oi":3,"constructor":1,"follow":1,"except":5,"oo":5,"matrix":2,"handl":1,"field":3,"input":2,"specif":1,"take":2,"omit":1,"pre":2,"string":2,"exampl":1,"method":3,"coeffici":3,"within":1,"output":1,"intend":1,"deseri":2,"serial":5,"util":2,"found":1},"maxFreq":14,"totalTerms":121},"loc":7}