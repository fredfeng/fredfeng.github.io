{"id":18568,"className":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics","methodName":"getPercentile","signature":"\u003corg.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getPercentile(double)\u003e","javadoc":"/** \n * Returns an estimate for the pth percentile of the stored values. \u003cp\u003e The implementation provided here follows the first estimation procedure presented \u003ca href\u003d\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\"\u003ehere.\u003c/a\u003e \u003c/p\u003e\u003cp\u003e \u003cstrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e \u003cli\u003e\u003ccode\u003e0 \u0026lt; p \u0026le; 100\u003c/code\u003e (otherwise an \u003ccode\u003eMathIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e \u003cli\u003eat least one value must be stored (returns \u003ccode\u003eDouble.NaN \u003c/code\u003e otherwise)\u003c/li\u003e \u003c/ul\u003e\u003c/p\u003e\n * @param p the requested percentile (scaled from 0 - 100)\n * @return An estimate for the pth percentile of the stored data\n * @throws MathIllegalStateException if percentile implementation has beenoverridden and the supplied implementation does not support setQuantile\n * @throws MathIllegalArgumentException if p is not a valid quantile\n */\n","tf":{"freq":{"percentil":5,"otherwis":2,"valid":1,"scale":1,"itl":1,"store":3,"quantil":2,"least":1,"one":1,"state":1,"data":1,"www":1,"div":1,"precondit":1,"must":1,"estim":3,"request":1,"beenoverridden":1,"handbook":1,"valu":2,"href":1,"htm":1,"follow":1,"argument":2,"thrown":1,"except":3,"support":1,"suppli":1,"illeg":3,"provid":1,"procedur":1,"section":1,"math":3,"present":1,"nist":1,"prc":2,"http":1,"pth":2,"strong":2,"first":1,"gov":1},"maxFreq":5,"totalTerms":62},"loc":22}