{"id":23408,"className":"org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils","methodName":"bracket","signature":"\u003corg.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils: double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)\u003e","javadoc":"/** \n * This method attempts to find two values a and b satisfying \u003cul\u003e \u003cli\u003e \u003ccode\u003e lowerBound \u003c\u003d a \u003c initial \u003c b \u003c\u003d upperBound\u003c/code\u003e \u003c/li\u003e \u003cli\u003e \u003ccode\u003e f(a) * f(b) \u003c\u003d 0 \u003c/code\u003e \u003c/li\u003e \u003c/ul\u003e If f is continuous on \u003ccode\u003e[a,b],\u003c/code\u003e this means that \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e bracket a root of f. \u003cp\u003e The algorithm starts by setting \u003ccode\u003ea :\u003d initial -1; b :\u003d initial +1,\u003c/code\u003e examines the value of the function at \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e and keeps moving the endpoints out by one unit each time through a loop that terminates when one of the following happens: \u003cul\u003e \u003cli\u003e \u003ccode\u003e f(a) * f(b) \u003c\u003d 0 \u003c/code\u003e --  success!\u003c/li\u003e \u003cli\u003e \u003ccode\u003e a \u003d lower \u003c/code\u003e and \u003ccode\u003e b \u003d upper\u003c/code\u003e -- ConvergenceException \u003c/li\u003e \u003cli\u003e \u003ccode\u003e maximumIterations\u003c/code\u003e iterations elapse -- ConvergenceException \u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n * @param function the function\n * @param initial initial midpoint of interval being expanded tobracket a root\n * @param lowerBound lower bound (a is never lower than this value)\n * @param upperBound upper bound (b never is greater than thisvalue)\n * @param maximumIterations maximum number of iterations to perform\n * @return a two element array holding {a, b}.\n * @throws ConvergenceException if the algorithm fails to find a and bsatisfying the desired conditions\n * @throws FunctionEvaluationException if an error occurs evaluating the function\n * @throws IllegalArgumentException if function is null, maximumIterationsis not positive, or initial is not between lowerBound and upperBound\n */\n","tf":{"freq":{"lower":6,"greater":1,"root":2,"perform":1,"desir":1,"bracket":2,"function":6,"elaps":1,"time":1,"fail":1,"expand":1,"happen":1,"examin":1,"move":1,"follow":1,"argument":1,"element":1,"except":5,"thisvalu":1,"tobracket":1,"hold":1,"number":1,"endpoint":1,"continu":1,"start":1,"maximum":4,"posit":1,"array":1,"attempt":1,"one":2,"iterationsi":1,"bsatisfi":1,"algorithm":2,"upper":5,"midpoint":1,"loop":1,"mean":1,"valu":3,"initi":6,"converg":3,"find":2,"condit":1,"error":1,"evalu":2,"illeg":1,"interv":1,"unit":1,"two":2,"termin":1,"never":2,"satisfi":1,"method":1,"iter":4,"success":1,"bound":8,"occur":1,"keep":1},"maxFreq":8,"totalTerms":105},"loc":39}