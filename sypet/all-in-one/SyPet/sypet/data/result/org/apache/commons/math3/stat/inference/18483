{"id":18483,"className":"org.apache.commons.math3.stat.inference.ChiSquareTest","methodName":"chiSquareTestDataSetsComparison","signature":"\u003corg.apache.commons.math3.stat.inference.ChiSquareTest: boolean chiSquareTestDataSetsComparison(long[],long[],double)\u003e","javadoc":"/** \n * \u003cp\u003ePerforms a Chi-Square two sample test comparing two binned data sets. The test evaluates the null hypothesis that the two lists of observed counts conform to the same frequency distribution, with significance level \u003ccode\u003ealpha\u003c/code\u003e.  Returns true iff the null hypothesis can be rejected with 100 * (1 - alpha) percent confidence. \u003c/p\u003e \u003cp\u003eSee  {@link #chiSquareDataSetsComparison(long[],long[])} fordetails on the formula used to compute the Chisquare statistic used in the test. The degrees of of freedom used to perform the test is one less than the common length of the input observed count arrays. \u003c/p\u003e \u003cstrong\u003ePreconditions\u003c/strong\u003e: \u003cul\u003e \u003cli\u003eObserved counts must be non-negative. \u003c/li\u003e \u003cli\u003eObserved counts for a specific bin must not both be zero. \u003c/li\u003e \u003cli\u003eObserved counts for a specific sample must not all be 0. \u003c/li\u003e \u003cli\u003eThe arrays \u003ccode\u003eobserved1\u003c/code\u003e and \u003ccode\u003eobserved2\u003c/code\u003e must have the same length and their common length must be at least 2. \u003c/li\u003e \u003cli\u003e \u003ccode\u003e 0 \u003c alpha \u003c 0.5 \u003c/code\u003e \u003c/li\u003e\u003c/ul\u003e\u003cp\u003e If any of the preconditions are not met, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown.\u003c/p\u003e\n * @param observed1 array of observed frequency counts of the first data set\n * @param observed2 array of observed frequency counts of the second data set\n * @param alpha significance level of the test\n * @return true iff null hypothesis can be rejected with confidence1 - alpha\n * @throws DimensionMismatchException the the length of the arrays does not match\n * @throws NotPositiveException if any entries in \u003ccode\u003eobserved1\u003c/code\u003e or\u003ccode\u003eobserved2\u003c/code\u003e are negative\n * @throws ZeroException if either all counts of \u003ccode\u003eobserved1\u003c/code\u003e or\u003ccode\u003eobserved2\u003c/code\u003e are zero, or if the count at the same index is zero for both arrays\n * @throws OutOfRangeException if \u003ccode\u003ealpha\u003c/code\u003e is not in the range (0, 0.5]\n * @throws MaxCountExceededException if an error occurs performing the test\n * @since 1.2\n */\n","tf":{"freq":{"squar":3,"percent":1,"second":1,"count":10,"freedom":1,"test":7,"least":1,"distribut":1,"precondit":2,"perform":3,"zero":4,"fordetail":1,"must":5,"level":2,"observ":15,"rang":2,"frequenc":3,"argument":1,"index":1,"thrown":1,"except":6,"signific":2,"comparison":2,"statist":1,"non":1,"degre":1,"iff":2,"input":1,"strong":2,"chi":3,"comput":1,"negat":2,"match":1,"bin":2,"posit":1,"compar":1,"array":6,"reject":2,"common":2,"link":1,"one":1,"data":5,"use":3,"met":1,"alpha":6,"hypothesi":3,"length":4,"less":1,"max":1,"confid":2,"error":1,"entri":1,"chisquar":1,"exceed":1,"true":2,"list":1,"evalu":1,"dimens":1,"illeg":1,"two":3,"either":1,"specif":2,"conform":1,"mismatch":1,"first":1,"sampl":2,"occur":1,"formula":1},"maxFreq":15,"totalTerms":155},"loc":10}