{"id":23978,"className":"org.apache.commons.math.ode.sampling.AbstractStepInterpolator","methodName":"finalizeStep","signature":"\u003corg.apache.commons.math.ode.sampling.AbstractStepInterpolator: void finalizeStep()\u003e","javadoc":"/** \n * Finalize the step. \u003cp\u003eSome embedded Runge-Kutta integrators need fewer functions evaluations than their counterpart step interpolators. These interpolators should perform the last evaluations they need by themselves only if they need them. This method triggers these extra evaluations. It can be called directly by the user step handler and it is called automatically if  {@link #setInterpolatedTime} is called.\u003c/p\u003e\u003cp\u003eOnce this method has been called, \u003cstrong\u003eno\u003c/strong\u003e other evaluation will be performed on this step. If there is a need to have some side effects between the step handler and the differential equations (for example update some data in the equations once the step has been done), it is advised to call this method explicitly from the step handler before these side effects are set up. If the step handler induces no side effect, then this method can safely be ignored, it will be called transparently as needed.\u003c/p\u003e \u003cp\u003e\u003cstrong\u003eWarning\u003c/strong\u003e: since the step interpolator provided to the step handler as a parameter of the  {@link StepHandler#handleStep handleStep} is valid only for the durationof the  {@link StepHandler#handleStep handleStep} call, one cannotsimply store a reference and reuse it later. One should first finalize the instance, then copy this finalized instance into a new object that can be kept.\u003c/p\u003e \u003cp\u003eThis method calls the protected \u003ccode\u003edoFinalize\u003c/code\u003e method if it has never been called during this step and set a flag indicating that it has been called once. It is the \u003ccode\u003e doFinalize\u003c/code\u003e method which should perform the evaluations. This wrapping prevents from calling \u003ccode\u003edoFinalize\u003c/code\u003e several times and hence evaluating the differential equations too often. Therefore, subclasses are not allowed not reimplement it, they should rather reimplement \u003ccode\u003edoFinalize\u003c/code\u003e.\u003c/p\u003e\n * @throws DerivativeException this exception is propagated to thecaller if the underlying user function triggers one\n */\n","tf":{"freq":{"need":5,"integr":1,"last":1,"store":1,"deriv":1,"rung":1,"perform":3,"reus":1,"copi":1,"function":2,"advis":1,"time":2,"refer":1,"interpol":4,"propag":1,"counterpart":1,"wrap":1,"except":2,"henc":1,"ignor":1,"thecal":1,"extra":1,"done":1,"prevent":1,"provid":1,"embed":1,"instanc":2,"reimplement":2,"cannotsimpli":1,"flag":1,"updat":1,"strong":4,"explicit":1,"often":1,"subclass":1,"will":2,"fewer":1,"warn":1,"call":11,"valid":1,"allow":1,"link":3,"one":3,"data":1,"therefor":1,"object":1,"automat":1,"transpar":1,"indic":1,"side":3,"rather":1,"kept":1,"direct":1,"trigger":2,"safe":1,"equat":3,"later":1,"paramet":1,"durationof":1,"evalu":6,"sever":1,"kutta":1,"handl":4,"never":1,"effect":3,"exampl":1,"method":7,"first":1,"user":2,"step":18,"induc":1,"handler":7,"differenti":2},"maxFreq":18,"totalTerms":151},"loc":6}