{"id":23407,"className":"org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils","methodName":"bracket","signature":"\u003corg.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils: double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)\u003e","javadoc":"/** \n * This method attempts to find two values a and b satisfying \u003cul\u003e \u003cli\u003e \u003ccode\u003e lowerBound \u003c\u003d a \u003c initial \u003c b \u003c\u003d upperBound\u003c/code\u003e \u003c/li\u003e \u003cli\u003e \u003ccode\u003e f(a) * f(b) \u003c 0 \u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e If f is continuous on \u003ccode\u003e[a,b],\u003c/code\u003e this means that \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e bracket a root of f. \u003cp\u003e The algorithm starts by setting \u003ccode\u003ea :\u003d initial -1; b :\u003d initial +1,\u003c/code\u003e examines the value of the function at \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e and keeps moving the endpoints out by one unit each time through a loop that terminates when one of the following happens: \u003cul\u003e \u003cli\u003e \u003ccode\u003e f(a) * f(b) \u003c 0 \u003c/code\u003e --  success!\u003c/li\u003e \u003cli\u003e \u003ccode\u003e a \u003d lower \u003c/code\u003e and \u003ccode\u003e b \u003d upper\u003c/code\u003e -- ConvergenceException \u003c/li\u003e \u003cli\u003e \u003ccode\u003e Integer.MAX_VALUE\u003c/code\u003e iterations elapse -- ConvergenceException \u003c/li\u003e \u003c/ul\u003e\u003c/p\u003e \u003cp\u003e \u003cstrong\u003eNote: \u003c/strong\u003e this method can take \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e iterations to throw a \u003ccode\u003eConvergenceException.\u003c/code\u003e  Unless you are confident that there is a root between \u003ccode\u003elowerBound\u003c/code\u003e and \u003ccode\u003eupperBound\u003c/code\u003e near \u003ccode\u003einitial,\u003c/code\u003e it is better to use {@link #bracket(UnivariateRealFunction,double,double,double,int)}, explicitly specifying the maximum number of iterations.\u003c/p\u003e\n * @param function the function\n * @param initial initial midpoint of interval being expanded tobracket a root\n * @param lowerBound lower bound (a is never lower than this value)\n * @param upperBound upper bound (b never is greater than thisvalue)\n * @return a two element array holding {a, b}\n * @throws ConvergenceException if a root can not be bracketted\n * @throws FunctionEvaluationException if an error occurs evaluating the function\n * @throws IllegalArgumentException if function is null, maximumIterationsis not positive, or initial is not between lowerBound and upperBound\n */\n","tf":{"freq":{"greater":1,"lower":7,"root":4,"bracket":4,"function":7,"specifi":1,"elaps":1,"time":1,"univari":1,"expand":1,"happen":1,"examin":1,"move":1,"follow":1,"argument":1,"element":1,"thisvalu":1,"except":6,"hold":1,"tobracket":1,"number":1,"endpoint":1,"continu":1,"near":1,"start":1,"strong":2,"explicit":1,"better":1,"maximum":2,"posit":1,"array":1,"attempt":1,"one":2,"link":1,"iterationsi":1,"use":1,"algorithm":1,"upper":6,"real":1,"midpoint":1,"unless":1,"loop":1,"mean":1,"valu":3,"initi":7,"converg":4,"find":1,"note":1,"confid":1,"error":1,"evalu":2,"illeg":1,"interv":1,"unit":1,"two":2,"never":2,"termin":1,"take":1,"satisfi":1,"method":2,"iter":3,"success":1,"integ":2,"bound":10,"occur":1,"keep":1},"maxFreq":10,"totalTerms":124},"loc":4}