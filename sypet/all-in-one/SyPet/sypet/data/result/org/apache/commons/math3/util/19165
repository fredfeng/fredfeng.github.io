{"id":19165,"className":"org.apache.commons.math3.util.Combinations","methodName":"Combinations","signature":"\u003corg.apache.commons.math3.util.Combinations: void Combinations(int,int)\u003e","javadoc":"/** \n * Creates an instance whose range is the k-element subsets of {0, ..., n - 1} represented as  {@code int[]} arrays.\u003cp\u003e The iteration order is lexicographic: the arrays returned by the {@link #iterator() iterator} are sorted in descending order andthey are visited in lexicographic order with significance from right to left. For example,  {@code new Combinations(4, 2).iterator()} returnsan iterator that will generate the following sequence of arrays on successive calls to {@code next()}:\u003cbr/\u003e {@code [0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3]}\u003c/p\u003e If  {@code k \u003d\u003d 0} an iterator containing an empty array is returned;if  {@code k \u003d\u003d n} an iterator containing [0, ..., n - 1] is returned.\n * @param n Size of the set from which subsets are selected.\n * @param k Size of the subsets to be enumerated.\n * @throws org.apache.commons.math3.exception.NotPositiveException if {@code n \u003c 0}.\n * @throws org.apache.commons.math3.exception.NumberIsTooLargeException if {@code k \u003e n}.\n */\n","tf":{"freq":{"call":1,"sort":1,"andthey":1,"common":2,"next":1,"link":1,"visit":1,"org":2,"subset":3,"order":3,"sequenc":1,"rang":1,"combin":2,"returnsan":1,"left":1,"right":1,"follow":1,"element":1,"except":4,"repres":1,"whose":1,"creat":1,"select":1,"apach":2,"signific":1,"number":1,"lexicograph":2,"size":2,"empti":1,"instanc":1,"math":2,"larg":1,"contain":2,"generat":1,"exampl":1,"will":1,"descend":1,"iter":7,"posit":1,"success":1,"array":4},"maxFreq":7,"totalTerms":65},"loc":3}