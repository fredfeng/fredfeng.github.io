{"id":16512,"className":"org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP","methodName":"solve","signature":"\u003corg.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp solve(int,org.apache.commons.math3.dfp.UnivariateDfpFunction,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.AllowedSolution)\u003e","javadoc":"/** \n * Solve for a zero in the given interval, start at  {@code startValue}. A solver may require that the interval brackets a single zero root. Solvers that do require bracketing should be able to handle the case where one of the endpoints is itself a root.\n * @param maxEval Maximum number of evaluations.\n * @param f Function to solve.\n * @param min Lower bound for the interval.\n * @param max Upper bound for the interval.\n * @param startValue Start value to use.\n * @param allowedSolution The kind of solutions that the root-finding algorithm mayaccept as solutions.\n * @return a value where the function is zero.\n * @exception NullArgumentException if f is null.\n * @exception NoBracketingException if root cannot be bracketed\n */\n","tf":{"freq":{"solut":3,"lower":1,"allow":1,"root":4,"singl":1,"one":1,"use":1,"abl":1,"zero":3,"bracket":4,"kind":1,"algorithm":1,"function":2,"upper":1,"requir":2,"given":1,"valu":4,"find":1,"argument":1,"min":1,"except":4,"may":1,"max":2,"mayaccept":1,"eval":1,"number":1,"evalu":1,"solv":3,"endpoint":1,"handl":1,"interv":4,"solver":2,"start":4,"maximum":1,"bound":2},"maxFreq":4,"totalTerms":64},"loc":220}