{"id":16188,"className":"org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction","methodName":"ExponentialDecayFunction","signature":"\u003corg.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: void ExponentialDecayFunction(double,double,long)\u003e","javadoc":"/** \n * Creates an instance. It will be such that \u003cul\u003e \u003cli\u003e {@code a \u003d initValue}\u003c/li\u003e \u003cli\u003e {@code b \u003d -numCall / ln(valueAtNumCall / initValue)}\u003c/li\u003e \u003c/ul\u003e\n * @param initValue Initial value, i.e. {@link #value(long) value(0)}.\n * @param valueAtNumCall Value of the function at {@code numCall}.\n * @param numCall Argument for which the function returns{@code valueAtNumCall}.\n * @throws NotStrictlyPositiveException if {@code initValue \u003c\u003d 0}.\n * @throws NotStrictlyPositiveException if {@code valueAtNumCall \u003c\u003d 0}.\n * @throws NumberIsTooLargeException if {@code valueAtNumCall \u003e\u003d initValue}.\n * @throws NotStrictlyPositiveException if {@code numCall \u003c\u003d 0}.\n */\n","tf":{"freq":{"argument":1,"call":9,"except":4,"creat":1,"link":1,"init":5,"number":1,"function":3,"instanc":1,"num":9,"larg":1,"exponenti":1,"will":1,"valu":14,"initi":1,"strict":3,"posit":3,"decay":1},"maxFreq":14,"totalTerms":60},"loc":17}