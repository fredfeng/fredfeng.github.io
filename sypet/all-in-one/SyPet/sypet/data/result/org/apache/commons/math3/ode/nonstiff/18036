{"id":18036,"className":"org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer","methodName":"updateHighOrderDerivativesPhase1","signature":"\u003corg.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix)\u003e","javadoc":"/** \n * Update the high order scaled derivatives for Adams integrators (phase 1). \u003cp\u003eThe complete update of high order derivatives has a form similar to: \u003cpre\u003e r\u003csub\u003en+1\u003c/sub\u003e \u003d (s\u003csub\u003e1\u003c/sub\u003e(n) - s\u003csub\u003e1\u003c/sub\u003e(n+1)) P\u003csup\u003e-1\u003c/sup\u003e u + P\u003csup\u003e-1\u003c/sup\u003e A P r\u003csub\u003en\u003c/sub\u003e \u003c/pre\u003e this method computes the P\u003csup\u003e-1\u003c/sup\u003e A P r\u003csub\u003en\u003c/sub\u003e part.\u003c/p\u003e\n * @param highOrder high order scaled derivatives(h\u003csup\u003e2\u003c/sup\u003e/2 y\u0027\u0027, ... h\u003csup\u003ek\u003c/sup\u003e/k! y(k))\n * @return updated high order derivatives\n * @see #updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)\n */\n","tf":{"freq":{"scale":2,"sub":10,"integr":1,"form":1,"deriv":6,"matrix":1,"sup":10,"real":1,"adam":1,"updat":5,"order":7,"pre":2,"comput":1,"method":1,"high":7,"part":1,"phase":3,"drow":1,"array":1,"complet":1,"similar":1},"maxFreq":10,"totalTerms":64},"loc":3}