{"id":20177,"className":"org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet","methodName":"getEnclosingCap","signature":"\u003corg.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.enclosing.EnclosingBall\u003corg.apache.commons.math3.geometry.spherical.twod.Sphere2D,org.apache.commons.math3.geometry.spherical.twod.S2Point\u003e getEnclosingCap()\u003e","javadoc":"/** \n * Get a spherical cap enclosing the polygon. \u003cp\u003e This method is intended as a first test to quickly identify points that are guaranteed to be outside of the region, hence performing a full {@link #checkPoint(org.apache.commons.math3.geometry.Vector) checkPoint}only if the point status remains undecided after the quick check. It is is therefore mostly useful to speed up computation for small polygons with complex shapes (say a country boundary on Earth), as the spherical cap will be small and hence will reliably identify a large part of the sphere as outside, whereas the full check can be more computing intensive. A typical use case is therefore: \u003c/p\u003e \u003cpre\u003e // compute region, plus an enclosing spherical cap SphericalPolygonsSet complexShape \u003d ...; EnclosingBall\u003cSphere2D, S2Point\u003e cap \u003d complexShape.getEnclosingCap(); // check lots of points for (Vector3D p : points) { final Location l; if (cap.contains(p)) { // we cannot be sure where the point is // we need to perform the full computation l \u003d complexShape.checkPoint(v); } else { // no need to do further computation, // we already know the point is outside l \u003d Location.OUTSIDE; } // use l ... } \u003c/pre\u003e \u003cp\u003e In the special cases of empty or whole sphere polygons, special spherical caps are returned, with angular radius set to negative or positive infinity so the  {@link EnclosingBall#contains(org.apache.commons.math3.geometry.Point) ball.contains(point)}method return always false or true. \u003c/p\u003e \u003cp\u003e This method is \u003cem\u003enot\u003c/em\u003e guaranteed to return the smallest enclosing cap. \u003c/p\u003e\n * @return a spherical cap enclosing the polygon\n */\n","tf":{"freq":{"fals":1,"need":2,"test":1,"infin":1,"undecid":1,"perform":2,"polygon":5,"spheric":6,"sure":1,"plus":1,"henc":2,"wherea":1,"status":1,"alway":1,"apach":2,"shape":4,"els":1,"outsid":3,"whole":1,"reliabl":1,"contain":3,"enclos":8,"say":1,"will":2,"lot":1,"comput":5,"negat":1,"radius":1,"posit":1,"small":2,"boundari":1,"geometri":2,"countri":1,"region":2,"complex":4,"common":2,"cap":10,"link":2,"quick":2,"typic":1,"use":3,"sphere":3,"angular":1,"identifi":2,"therefor":2,"org":2,"full":3,"vector":2,"locat":2,"ball":3,"check":6,"speed":1,"guarante":2,"smallest":1,"true":1,"intens":1,"know":1,"empti":1,"math":2,"point":12,"remain":1,"larg":1,"pre":2,"special":2,"alreadi":1,"method":3,"earth":1,"intend":1,"part":1,"first":1},"maxFreq":12,"totalTerms":155},"loc":77}