{"id":26314,"className":"org.apache.commons.math.linear.MatrixUtils","methodName":"createRealMatrix","signature":"\u003corg.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(double[][])\u003e","javadoc":"/** \n * Returns a  {@link RealMatrix} whose entries are the the values in thethe input array. \u003cp\u003eThe type of matrix returned depends on the dimension. Below 2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a square matrix) which can be stored in a 32kB array, a  {@link Array2DRowRealMatrix} instance is built. Above this threshold a {@link BlockRealMatrix} instance is built.\u003c/p\u003e\u003cp\u003eThe input array is copied, not referenced.\u003c/p\u003e\n * @param data input array\n * @return  RealMatrix containing the values of the array\n * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular(not all rows have the same length) or empty\n * @throws NullPointerException if either \u003ccode\u003edata\u003c/code\u003e or\u003ccode\u003edata[0]\u003c/code\u003e is null\n * @see #createRealMatrix(int,int)\n */\n","tf":{"freq":{"rectangular":1,"squar":1,"store":1,"link":3,"data":4,"block":1,"type":1,"sup":2,"copi":1,"referenc":1,"real":6,"time":1,"length":1,"valu":2,"built":2,"drow":1,"argument":1,"element":2,"except":2,"whose":1,"creat":2,"depend":1,"entri":1,"matrix":8,"dimens":1,"illeg":1,"row":1,"empti":1,"instanc":2,"threshold":1,"either":1,"input":3,"contain":1,"pointer":1,"theth":1,"array":6},"maxFreq":8,"totalTerms":67},"loc":4}