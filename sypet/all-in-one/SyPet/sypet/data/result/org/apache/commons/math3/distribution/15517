{"id":15517,"className":"org.apache.commons.math3.distribution.FDistribution","methodName":"FDistribution","signature":"\u003corg.apache.commons.math3.distribution.FDistribution: void FDistribution(double,double)\u003e","javadoc":"/** \n * Creates an F distribution using the given degrees of freedom. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e this constructor will implicitly create an instance of {@link Well19937c} as random generator to be used for sampling only (see{@link #sample()} and {@link #sample(int)}). In case no sampling is needed for the created distribution, it is advised to pass  {@code null}as random generator via the appropriate constructors to avoid the additional initialisation overhead.\n * @param numeratorDegreesOfFreedom Numerator degrees of freedom.\n * @param denominatorDegreesOfFreedom Denominator degrees of freedom.\n * @throws NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom \u003c\u003d 0} or{@code denominatorDegreesOfFreedom \u003c\u003d 0}.\n */\n","tf":{"freq":{"need":1,"via":1,"freedom":7,"link":3,"implicit":1,"distribut":3,"use":2,"denomin":3,"well":1,"advis":1,"avoid":1,"overhead":1,"given":1,"note":1,"constructor":2,"addit":1,"except":1,"initialis":1,"numer":3,"creat":3,"random":2,"instanc":1,"pass":1,"degre":7,"appropri":1,"generat":2,"will":1,"strict":1,"posit":1,"sampl":4},"maxFreq":7,"totalTerms":59},"loc":4}