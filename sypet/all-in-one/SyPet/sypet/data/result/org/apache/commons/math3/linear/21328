{"id":21328,"className":"org.apache.commons.math3.linear.RRQRDecomposition","methodName":"getRank","signature":"\u003corg.apache.commons.math3.linear.RRQRDecomposition: int getRank(double)\u003e","javadoc":"/** \n * Return the effective numerical matrix rank. \u003cp\u003eThe effective numerical rank is the number of non-negligible singular values.\u003c/p\u003e \u003cp\u003eThis implementation looks at Frobenius norms of the sequence of bottom right submatrices.  When a large fall in norm is seen, the rank is returned. The drop is computed as:\u003c/p\u003e \u003cpre\u003e (thisNorm/lastNorm) * rNorm \u003c dropThreshold \u003c/pre\u003e \u003cp\u003e where thisNorm is the Frobenius norm of the current submatrix, lastNorm is the Frobenius norm of the previous submatrix, rNorm is is the Frobenius norm of the complete matrix \u003c/p\u003e\n * @param dropThreshold threshold triggering rank computation\n * @return effective numerical matrix rank\n */\n","tf":{"freq":{"last":2,"drop":3,"frobenius":4,"submatric":1,"neglig":1,"rank":6,"norm":11,"sequenc":1,"current":1,"submatrix":2,"valu":1,"right":1,"complet":1,"look":1,"trigger":1,"previous":1,"numer":3,"matrix":3,"number":1,"seen":1,"singular":1,"non":1,"threshold":3,"effect":3,"larg":1,"pre":2,"fall":1,"bottom":1,"comput":2},"maxFreq":11,"totalTerms":61},"loc":17}