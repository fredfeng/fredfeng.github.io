{"id":15469,"className":"org.apache.commons.math3.distribution.EnumeratedRealDistribution","methodName":"EnumeratedRealDistribution","signature":"\u003corg.apache.commons.math3.distribution.EnumeratedRealDistribution: void EnumeratedRealDistribution(double[],double[])\u003e","javadoc":"/** \n * Create a discrete distribution using the given probability mass function enumeration. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e this constructor will implicitly create an instance of {@link Well19937c} as random generator to be used for sampling only (see{@link #sample()} and {@link #sample(int)}). In case no sampling is needed for the created distribution, it is advised to pass  {@code null}as random generator via the appropriate constructors to avoid the additional initialisation overhead.\n * @param singletons array of random variable values.\n * @param probabilities array of probabilities.\n * @throws DimensionMismatchException if{@code singletons.length !\u003d probabilities.length}\n * @throws NotPositiveException if any of the probabilities are negative.\n * @throws NotFiniteNumberException if any of the probabilities are infinite.\n * @throws NotANumberException if any of the probabilities are NaN.\n * @throws MathArithmeticException all of the probabilities are 0.\n */\n","tf":{"freq":{"need":1,"discret":1,"via":1,"variabl":1,"link":3,"arithmet":1,"distribut":3,"implicit":1,"use":2,"well":1,"function":1,"advis":1,"mass":1,"avoid":1,"real":1,"infinit":1,"overhead":1,"probabl":8,"given":1,"finit":1,"length":2,"valu":1,"note":1,"constructor":2,"addit":1,"except":5,"initialis":1,"creat":3,"singleton":2,"random":3,"number":1,"dimens":1,"instanc":1,"pass":1,"math":1,"appropri":1,"generat":2,"will":1,"negat":1,"anumb":1,"mismatch":1,"posit":1,"sampl":4,"array":2},"maxFreq":8,"totalTerms":72},"loc":3}