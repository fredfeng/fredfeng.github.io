{"id":24838,"className":"org.apache.commons.math.util.MathUtils","methodName":"equals","signature":"\u003corg.apache.commons.math.util.MathUtils: boolean equals(double,double,int)\u003e","javadoc":"/** \n * Returns true if both arguments are equal or within the range of allowed error (inclusive). Two float numbers are considered equal if there are  {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating point numbers are considered equal. Adapted from \u003ca href\u003d\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\"\u003e Bruce Dawson\u003c/a\u003e \u003cp\u003eThis method considers that  {@code NaN \u003d\u003d NaN}. In release 3.0, the semantics will change in order to comply with IEEE754 where it is specified that  {@code NaN !\u003d NaN}. New methods have been added for those cases where the old semantics (w.r.t. NaN) is useful (see e.g. {@link #equalsIncludingNaN(double,double,int) equalsIncludingNaN}. \u003c/p\u003e\n * @param x first value\n * @param y second value\n * @param maxUlps {@code (maxUlps - 1)} is the number of floating pointvalues between  {@code x} and {@code y}.\n * @return {@code true} if there are fewer than {@code maxUlps} floatingpoint values between  {@code x} and {@code y}.\n */\n","tf":{"freq":{"old":1,"com":1,"second":1,"allow":1,"paper":1,"link":1,"www":1,"use":1,"compli":1,"adapt":1,"consid":3,"specifi":1,"dawson":1,"inclus":1,"floatingpoint":1,"order":1,"releas":1,"cygnus":1,"rang":1,"semant":2,"pointvalu":1,"valu":3,"href":1,"htm":1,"argument":1,"adjac":1,"softwar":1,"includ":2,"max":4,"error":1,"bruce":1,"ulp":4,"true":2,"number":4,"equal":6,"comparingfloat":2,"two":2,"point":2,"http":1,"will":1,"ad":1,"fewer":2,"method":2,"chang":1,"within":1,"first":1},"maxFreq":6,"totalTerms":72},"loc":18}