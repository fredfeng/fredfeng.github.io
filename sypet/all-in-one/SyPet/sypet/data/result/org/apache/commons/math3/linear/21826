{"id":21826,"className":"org.apache.commons.math3.linear.MatrixUtils","methodName":"createRealMatrix","signature":"\u003corg.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])\u003e","javadoc":"/** \n * Returns a  {@link RealMatrix} whose entries are the the values in thethe input array. \u003cp\u003eThe type of matrix returned depends on the dimension. Below 2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a square matrix) which can be stored in a 32kB array, a  {@link Array2DRowRealMatrix} instance is built. Above this threshold a {@link BlockRealMatrix} instance is built.\u003c/p\u003e\u003cp\u003eThe input array is copied, not referenced.\u003c/p\u003e\n * @param data input array\n * @return  RealMatrix containing the values of the array\n * @throws org.apache.commons.math3.exception.DimensionMismatchException if  {@code data} is not rectangular (not all rows have the same length).\n * @throws NoDataException if a row or column is empty.\n * @throws NullArgumentException if either {@code data} or {@code data[0]}is  {@code null}.\n * @throws DimensionMismatchException if {@code data} is not rectangular.\n * @see #createRealMatrix(int,int)\n */\n","tf":{"freq":{"rectangular":2,"squar":1,"store":1,"common":1,"link":3,"data":6,"block":1,"org":1,"type":1,"sup":2,"copi":1,"referenc":1,"real":6,"time":1,"length":1,"valu":2,"built":2,"drow":1,"argument":1,"element":2,"except":5,"whose":1,"creat":2,"depend":1,"entri":1,"matrix":8,"apach":1,"dimens":3,"row":2,"empti":1,"instanc":2,"threshold":1,"math":1,"either":1,"input":3,"contain":1,"column":1,"theth":1,"mismatch":2,"array":6},"maxFreq":8,"totalTerms":81},"loc":8}