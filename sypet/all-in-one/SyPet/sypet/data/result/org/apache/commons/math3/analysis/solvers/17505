{"id":17505,"className":"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils","methodName":"forceSide","signature":"\u003corg.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)\u003e","javadoc":"/** \n * Force a root found by a non-bracketing solver to lie on a specified side, as if the solver was a bracketing one.\n * @param maxEval maximal number of new evaluations of the function(evaluations already done for finding the root should have already been subtracted from this number)\n * @param f function to solve\n * @param bracketing bracketing solver to use for shifting the root\n * @param baseRoot original root found by a previous non-bracketing solver\n * @param min minimal bound of the search interval\n * @param max maximal bound of the search interval\n * @param allowedSolution the kind of solutions that the root-finding algorithm mayaccept as solutions.\n * @return a root approximation, on the specified side of the exact root\n * @throws NoBracketingException if the function has the same sign at theendpoints.\n */\n","tf":{"freq":{"solut":3,"allow":1,"root":8,"theendpoint":1,"one":1,"use":1,"approxim":1,"bracket":6,"kind":1,"algorithm":1,"specifi":2,"function":3,"minim":1,"maxim":2,"search":2,"side":3,"exact":1,"forc":2,"find":2,"min":1,"except":1,"max":2,"mayaccept":1,"previous":1,"eval":1,"done":1,"origin":1,"number":2,"evalu":2,"solv":1,"non":2,"sign":1,"interv":2,"subtract":1,"solver":4,"base":1,"alreadi":2,"bound":2,"lie":1,"shift":1,"found":2},"maxFreq":8,"totalTerms":75},"loc":67}