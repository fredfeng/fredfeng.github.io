{"id":18666,"className":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic","methodName":"evaluate","signature":"\u003corg.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: double evaluate(double[])\u003e","javadoc":"/** \n * This default implementation calls  {@link #clear}, then invokes {@link #increment} in a loop over the the input array, and then uses{@link #getResult} to compute the return value.\u003cp\u003e Note that this implementation changes the internal state of the statistic.  Its side effects are the same as invoking  {@link #clear} andthen  {@link #incrementAll(double[])}.\u003c/p\u003e \u003cp\u003e Implementations may override this method with a more efficient and possibly more accurate implementation that works directly with the input array.\u003c/p\u003e \u003cp\u003e If the array is null, a MathIllegalArgumentException is thrown.\u003c/p\u003e\n * @param values input array\n * @return the value of the statistic applied to the input array\n * @throws MathIllegalArgumentException if values is null\n * @see org.apache.commons.math3.stat.descriptive.UnivariateStatistic#evaluate(double[])\n */\n","tf":{"freq":{"result":1,"call":1,"common":1,"link":5,"state":1,"andthen":1,"possibl":1,"use":1,"org":1,"clear":2,"side":1,"univari":1,"accur":1,"loop":1,"valu":4,"effici":1,"note":1,"argument":2,"direct":1,"work":1,"increment":2,"thrown":1,"except":2,"may":1,"invok":2,"descript":1,"apach":1,"evalu":2,"illeg":2,"stat":1,"statist":3,"math":3,"appli":1,"input":4,"effect":1,"intern":1,"comput":1,"method":1,"chang":1,"array":5},"maxFreq":5,"totalTerms":65},"loc":6}