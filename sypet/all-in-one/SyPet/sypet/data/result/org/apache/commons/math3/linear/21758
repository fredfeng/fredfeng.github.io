{"id":21758,"className":"org.apache.commons.math3.linear.BlockRealMatrix","methodName":"BlockRealMatrix","signature":"\u003corg.apache.commons.math3.linear.BlockRealMatrix: void BlockRealMatrix(int,int,double[][],boolean)\u003e","javadoc":"/** \n * Create a new dense matrix copying entries from block layout data. \u003cp\u003eThe input array \u003cem\u003emust\u003c/em\u003e already be in blocks layout.\u003c/p\u003e\n * @param rows Number of rows in the new matrix.\n * @param columns Number of columns in the new matrix.\n * @param blockData data for new matrix\n * @param copyArray Whether the input array will be copied or referenced.\n * @throws DimensionMismatchException if the shape of {@code blockData} isinconsistent with block layout.\n * @throws NotStrictlyPositiveException if row or column dimension is notpositive.\n * @see #createBlocksLayout(int,int)\n * @see #toBlocksLayout(double[][])\n * @see #BlockRealMatrix(double[][])\n */\n","tf":{"freq":{"data":4,"block":9,"must":1,"copi":3,"whether":1,"referenc":1,"real":2,"layout":5,"notposit":1,"isinconsist":1,"dens":1,"except":2,"creat":2,"entri":1,"matrix":6,"number":2,"shape":1,"dimens":2,"row":3,"input":2,"column":3,"will":1,"alreadi":1,"strict":1,"mismatch":1,"posit":1,"array":3},"maxFreq":9,"totalTerms":61},"loc":31}