{"id":15572,"className":"org.apache.commons.math3.distribution.ZipfDistribution","methodName":"ZipfDistribution","signature":"\u003corg.apache.commons.math3.distribution.ZipfDistribution: void ZipfDistribution(int,double)\u003e","javadoc":"/** \n * Create a new Zipf distribution with the given number of elements and exponent. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e this constructor will implicitly create an instance of {@link Well19937c} as random generator to be used for sampling only (see{@link #sample()} and {@link #sample(int)}). In case no sampling is needed for the created distribution, it is advised to pass  {@code null}as random generator via the appropriate constructors to avoid the additional initialisation overhead.\n * @param numberOfElements Number of elements.\n * @param exponent Exponent.\n * @exception NotStrictlyPositiveException if {@code numberOfElements \u003c\u003d 0}or  {@code exponent \u003c\u003d 0}.\n */\n","tf":{"freq":{"need":1,"via":1,"zipf":2,"link":3,"implicit":1,"distribut":3,"use":1,"well":1,"advis":1,"avoid":1,"overhead":1,"given":1,"note":1,"constructor":2,"expon":4,"addit":1,"element":4,"except":2,"initialis":1,"creat":3,"random":2,"number":4,"instanc":1,"pass":1,"appropri":1,"generat":2,"will":1,"strict":1,"posit":1,"sampl":4},"maxFreq":4,"totalTerms":53},"loc":3}