{"id":23887,"className":"org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians","methodName":"integrate","signature":"\u003corg.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: double integrate(double,double[],double[][],double,double[],double[][],double[][])\u003e","javadoc":"/** \n * Integrate the differential equations and the variational equations up to the given time. \u003cp\u003eThis method solves an Initial Value Problem (IVP) and also computes the derivatives of the solution with respect to initial state and parameters. This can be used as a basis to solve Boundary Value Problems (BVP).\u003c/p\u003e \u003cp\u003eSince this method stores some internal state variables made available in its public interface during integration ( {@link #getCurrentSignedStepsize()}), it is \u003cem\u003enot\u003c/em\u003e thread-safe.\u003c/p\u003e\n * @param t0 initial time\n * @param y0 initial value of the state vector at t0\n * @param dY0dP initial value of the state vector derivative with respect to theparameters at t0\n * @param t target time for the integration(can be set to a value smaller than \u003ccode\u003et0\u003c/code\u003e for backward integration)\n * @param y placeholder where to put the state vector at each successfulstep (and hence at the end of integration), can be the same object as y0\n * @param dYdY0 placeholder where to put the state vector derivative with respectto the initial state (dy[i]/dy0[j] is in element array dYdY0[i][j]) at each successful step (and hence at the end of integration)\n * @param dYdP placeholder where to put the state vector derivative with respectto the parameters (dy[i]/dp[j] is in element array dYdP[i][j]) at each successful step (and hence at the end of integration)\n * @return stop time, will be the same as target time if integration reached itstarget, but may be different if some event handler stops it at some point.\n * @throws IntegratorException if the integrator cannot perform integration\n * @throws DerivativeException this exception is propagated to the caller ifthe underlying user function triggers one\n */\n","tf":{"freq":{"integr":12,"store":1,"deriv":5,"variabl":1,"perform":1,"function":1,"time":5,"given":1,"variat":1,"event":1,"thread":1,"propag":1,"element":2,"except":3,"henc":3,"itstarget":1,"successfulstep":1,"avail":1,"solv":2,"sign":1,"will":1,"comput":1,"boundari":1,"array":2,"caller":1,"solut":1,"stop":2,"put":3,"backward":1,"one":1,"link":1,"state":8,"made":1,"use":1,"theparamet":1,"object":1,"smaller":1,"respectto":2,"reach":1,"stepsiz":1,"vector":5,"current":1,"valu":5,"initi":6,"end":3,"trigger":1,"safe":1,"may":1,"equat":2,"ifth":1,"paramet":2,"problem":2,"point":1,"differ":1,"placehold":3,"intern":1,"target":2,"method":2,"basi":1,"user":1,"also":1,"success":2,"respect":2,"step":2,"handler":1,"differenti":1},"maxFreq":12,"totalTerms":128},"loc":43}