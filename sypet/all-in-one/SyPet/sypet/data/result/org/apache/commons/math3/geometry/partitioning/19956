{"id":19956,"className":"org.apache.commons.math3.geometry.partitioning.BSPTree","methodName":"BSPTree","signature":"\u003corg.apache.commons.math3.geometry.partitioning.BSPTree: void BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)\u003e","javadoc":"/** \n * Build a BSPTree from its underlying elements. \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e perform any verification on consistency of its arguments, it should therefore be used only when then caller knows what it is doing.\u003c/p\u003e \u003cp\u003eThis method is mainly useful to build trees bottom-up. Building trees top-down is realized with the help of method  {@link #insertCut insertCut}.\u003c/p\u003e\n * @param cut cut sub-hyperplane for the tree\n * @param plus plus side sub-tree\n * @param minus minus side sub-tree\n * @param attribute attribute associated with the node (may be null)\n * @see #insertCut\n */\n","tf":{"freq":{"caller":1,"verif":1,"sub":3,"link":1,"use":2,"perform":1,"therefor":1,"build":3,"help":1,"attribut":2,"tree":6,"associ":1,"side":2,"realiz":1,"top":1,"argument":1,"element":1,"plus":2,"may":1,"minus":2,"consist":1,"hyperplan":1,"know":1,"main":1,"ptree":1,"node":1,"bottom":1,"method":3,"cut":5,"insert":3},"maxFreq":6,"totalTerms":52},"loc":9}