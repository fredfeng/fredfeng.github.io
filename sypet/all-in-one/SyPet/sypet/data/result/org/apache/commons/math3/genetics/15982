{"id":15982,"className":"org.apache.commons.math3.genetics.RandomKey","methodName":"inducedPermutation","signature":"\u003corg.apache.commons.math3.genetics.RandomKey: java.util.List\u003cjava.lang.Double\u003e inducedPermutation(java.util.List,java.util.List)\u003e","javadoc":"/** \n * Generates a representation of a permutation corresponding to a permutation which yields \u003ccode\u003epermutedData\u003c/code\u003e when applied to \u003ccode\u003eoriginalData\u003c/code\u003e. This method can be viewed as an inverse to  {@link #decode(List)}.\n * @param \u003c S \u003e type of the data\n * @param originalData the original, unpermuted data\n * @param permutedData the data, somehow permuted\n * @return representation of a permutation corresponding to the permutation\u003ccode\u003eoriginalData -\u003e permutedData\u003c/code\u003e\n * @throws DimensionMismatchException iff the length of \u003ccode\u003eoriginalData\u003c/code\u003eand \u003ccode\u003epermutedData\u003c/code\u003e lists are not equal\n * @throws MathIllegalArgumentException iff the \u003ccode\u003epermutedData\u003c/code\u003e and\u003ccode\u003eoriginalData\u003c/code\u003e lists contain different data\n */\n","tf":{"freq":{"yield":1,"somehow":1,"correspond":2,"link":1,"data":14,"permut":11,"type":1,"invers":1,"unpermut":1,"length":1,"argument":1,"decod":1,"except":2,"origin":6,"list":3,"equal":1,"dimens":1,"illeg":1,"represent":2,"math":1,"differ":1,"appli":1,"iff":2,"contain":1,"generat":1,"method":1,"view":1,"mismatch":1,"induc":1},"maxFreq":14,"totalTerms":63},"loc":20}