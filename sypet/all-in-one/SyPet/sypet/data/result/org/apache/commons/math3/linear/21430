{"id":21430,"className":"org.apache.commons.math3.linear.RectangularCholeskyDecomposition","methodName":"RectangularCholeskyDecomposition","signature":"\u003corg.apache.commons.math3.linear.RectangularCholeskyDecomposition: void RectangularCholeskyDecomposition(org.apache.commons.math3.linear.RealMatrix)\u003e","javadoc":"/** \n * Decompose a symmetric positive semidefinite matrix. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e this constructor follows the linpack method to detect dependent columns by proceeding with the Cholesky algorithm until a nonpositive diagonal element is encountered.\n * @see \u003ca href\u003d\"http://eprints.ma.man.ac.uk/1193/01/covered/MIMS_ep2008_56.pdf\"\u003e\n     * Analysis of the Cholesky Decomposition of a Semi-definite Matrix\u003c/a\u003e\n * @param matrix Symmetric positive semidefinite matrix.\n * @exception NonPositiveDefiniteMatrixException if the matrix is notpositive semidefinite.\n * @since 3.1\n */\n","tf":{"freq":{"rectangular":1,"nonposit":1,"pdf":1,"symmetr":2,"diagon":1,"algorithm":1,"semidefinit":3,"cover":1,"notposit":1,"proceed":1,"analysi":1,"href":1,"man":1,"note":1,"eprint":1,"follow":1,"constructor":1,"detect":1,"element":1,"except":2,"linpack":1,"depend":1,"matrix":6,"semi":1,"decompos":1,"non":1,"http":1,"encount":1,"definit":2,"decomposit":2,"column":1,"method":1,"choleski":3,"posit":3},"maxFreq":6,"totalTerms":49},"loc":3}