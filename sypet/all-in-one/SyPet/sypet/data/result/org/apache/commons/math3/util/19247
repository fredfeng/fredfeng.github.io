{"id":19247,"className":"org.apache.commons.math3.util.ArithmeticUtils","methodName":"gcd","signature":"\u003corg.apache.commons.math3.util.ArithmeticUtils: long gcd(long,long)\u003e","javadoc":"/** \n * \u003cp\u003e Gets the greatest common divisor of the absolute value of two numbers, using the \"binary gcd\" method which avoids division and modulo operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef Stein (1961). \u003c/p\u003e Special cases: \u003cul\u003e \u003cli\u003eThe invocations {@code gcd(Long.MIN_VALUE, Long.MIN_VALUE)}, {@code gcd(Long.MIN_VALUE, 0L)} and{@code gcd(0L, Long.MIN_VALUE)} throw an{@code ArithmeticException}, because the result would be 2^63, which is too large for a long value.\u003c/li\u003e \u003cli\u003eThe result of  {@code gcd(x, x)},  {@code gcd(0L, x)} and{@code gcd(x, 0L)} is the absolute value of {@code x}, except for the special cases above. \u003cli\u003eThe invocation  {@code gcd(0L, 0L)} is the only one which returns{@code 0L}.\u003c/li\u003e \u003c/ul\u003e\n * @param p Number.\n * @param q Number.\n * @return the greatest common divisor, never negative.\n * @throws MathArithmeticException if the result cannot be represented asa non-negative  {@code long} value.\n * @since 2.1\n */\n","tf":{"freq":{"result":3,"binari":1,"common":2,"one":1,"josef":1,"arithmet":2,"use":1,"knuth":1,"algorithm":2,"avoid":1,"stein":1,"oper":1,"valu":4,"except":3,"repres":1,"greatest":2,"number":3,"asa":1,"absolut":2,"divisor":2,"invoc":2,"non":1,"math":1,"two":1,"never":1,"larg":1,"modulo":1,"due":1,"negat":2,"method":1,"special":2,"gcd":9,"divis":1},"maxFreq":9,"totalTerms":59},"loc":57}