{"id":17141,"className":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator","methodName":"smooth","signature":"\u003corg.apache.commons.math3.analysis.interpolation.LoessInterpolator: double[] smooth(double[],double[])\u003e","javadoc":"/** \n * Compute a loess fit on the data at the original abscissae.\n * @param xval the arguments for the interpolation points\n * @param yval the values for the interpolation points\n * @return values of the loess fit at corresponding original abscissae\n * @throws NonMonotonicSequenceException if {@code xval} not sorted instrictly increasing order.\n * @throws DimensionMismatchException if {@code xval} and {@code yval} havedifferent sizes.\n * @throws NoDataException if {@code xval} or {@code yval} has zero size.\n * @throws NotFiniteNumberException if any of the arguments and values arenot finite real numbers.\n * @throws NumberIsTooSmallException if the bandwidth is too small toaccomodate the size of the input data (i.e. the bandwidth must be larger than 2/n).\n */\n","tf":{"freq":{"increas":1,"smooth":1,"sort":1,"correspond":1,"data":3,"zero":1,"xval":4,"must":1,"bandwidth":2,"real":1,"fit":2,"order":1,"sequenc":1,"finit":2,"interpol":2,"toaccomod":1,"valu":3,"argument":2,"except":5,"abscissa":2,"larger":1,"yval":3,"origin":2,"number":3,"dimens":1,"size":3,"non":1,"monoton":1,"point":2,"input":1,"loess":2,"comput":1,"arenot":1,"mismatch":1,"small":2,"instrict":1,"havediffer":1},"maxFreq":5,"totalTerms":64},"loc":10}