{"id":18388,"className":"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression","methodName":"calculateHat","signature":"\u003corg.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix calculateHat()\u003e","javadoc":"/** \n * \u003cp\u003eCompute the \"hat\" matrix. \u003c/p\u003e \u003cp\u003eThe hat matrix is defined in terms of the design matrix X by X(X\u003csup\u003eT\u003c/sup\u003eX)\u003csup\u003e-1\u003c/sup\u003eX\u003csup\u003eT\u003c/sup\u003e \u003c/p\u003e \u003cp\u003eThe implementation here uses the QR decomposition to compute the hat matrix as Q I\u003csub\u003ep\u003c/sub\u003eQ\u003csup\u003eT\u003c/sup\u003e where I\u003csub\u003ep\u003c/sub\u003e is the p-dimensional identity matrix augmented by 0\u0027s.  This computational formula is from \"The Hat Matrix in Regression and ANOVA\", David C. Hoaglin and Roy E. Welsch, \u003ci\u003eThe American Statistician\u003c/i\u003e, Vol. 32, No. 1 (Feb., 1978), pp. 17-22. \u003c/p\u003e \u003cp\u003eData for the model must have been successfully loaded using one of the  {@code newSampleData} methods before invoking this method; otherwisea  {@code NullPointerException} will be thrown.\u003c/p\u003e\n * @return the hat matrix\n * @throws NullPointerException unless method {@code newSampleData} has beencalled beforehand.\n */\n","tf":{"freq":{"defin":1,"model":1,"sub":4,"regress":1,"one":1,"data":3,"use":2,"sup":8,"augment":1,"must":1,"hat":6,"hoaglin":1,"vol":1,"unless":1,"ident":1,"american":1,"statistician":1,"beencal":1,"thrown":1,"except":2,"invok":1,"matrix":7,"calcul":1,"roy":1,"welsch":1,"dimension":1,"term":1,"feb":1,"beforehand":1,"decomposit":1,"will":1,"pointer":2,"comput":3,"method":3,"load":1,"david":1,"otherwisea":1,"success":1,"sampl":2,"design":1,"formula":1},"maxFreq":8,"totalTerms":72},"loc":22}