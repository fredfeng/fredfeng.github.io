{"id":16318,"className":"org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation","methodName":"getCovariances","signature":"\u003corg.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealMatrix getCovariances(double)\u003e","javadoc":"/** \n * Get the covariance matrix of the optimized parameters. \u003cbr/\u003e Note that this operation involves the inversion of the \u003ccode\u003eJ\u003csup\u003eT\u003c/sup\u003eJ\u003c/code\u003e matrix, where  {@code J} is the Jacobian matrix. The {@code threshold} parameter is away for the caller to specify that the result of this computation should be considered meaningless, and thus trigger an exception.\n * @param threshold Singularity threshold.\n * @return the covariance matrix.\n * @throws org.apache.commons.math3.linear.SingularMatrixException if the covariance matrix cannot be computed (singular problem).\n */\n","tf":{"freq":{"caller":1,"result":1,"jacobian":1,"common":1,"sup":2,"org":1,"consid":1,"specifi":1,"invers":1,"oper":1,"note":1,"trigger":1,"linear":1,"except":2,"optim":1,"meaningless":1,"thus":1,"matrix":6,"paramet":2,"apach":1,"problem":1,"involv":1,"singular":3,"threshold":3,"math":1,"away":1,"comput":2,"covari":4},"maxFreq":6,"totalTerms":44},"loc":0}