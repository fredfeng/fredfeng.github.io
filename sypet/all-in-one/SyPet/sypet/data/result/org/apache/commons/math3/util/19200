{"id":19200,"className":"org.apache.commons.math3.util.CombinatoricsUtils","methodName":"combinationsIterator","signature":"\u003corg.apache.commons.math3.util.CombinatoricsUtils: java.util.Iterator\u003cint[]\u003e combinationsIterator(int,int)\u003e","javadoc":"/** \n * Returns an iterator whose range is the k-element subsets of {0, ..., n - 1} represented as  {@code int[]} arrays.\u003cp\u003e The arrays returned by the iterator are sorted in descending order and they are visited in lexicographic order with significance from right to left. For example, combinationsIterator(4, 2) returns an Iterator that will generate the following sequence of arrays on successive calls to {@code next()}:\u003cbr/\u003e {@code [0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3]}\u003c/p\u003e If  {@code k \u003d\u003d 0} an Iterator containing an empty array is returned andif  {@code k \u003d\u003d n} an Iterator containing [0, ..., n -1] is returned.\n * @param n Size of the set from which subsets are selected.\n * @param k Size of the subsets to be enumerated.\n * @return an {@link Iterator iterator} over the k-sets in n.\n * @throws NotPositiveException if {@code n \u003c 0}.\n * @throws NumberIsTooLargeException if {@code k \u003e n}.\n */\n","tf":{"freq":{"call":1,"sort":1,"link":1,"next":1,"visit":1,"subset":3,"order":2,"rang":1,"sequenc":1,"combin":2,"left":1,"right":1,"follow":1,"element":1,"except":2,"repres":1,"whose":1,"select":1,"signific":1,"number":1,"lexicograph":1,"size":2,"empti":1,"larg":1,"contain":2,"generat":1,"exampl":1,"will":1,"descend":1,"iter":9,"posit":1,"andif":1,"success":1,"array":4},"maxFreq":9,"totalTerms":52},"loc":3}