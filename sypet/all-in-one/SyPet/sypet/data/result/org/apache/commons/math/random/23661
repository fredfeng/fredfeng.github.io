{"id":23661,"className":"org.apache.commons.math.random.RandomDataImpl","methodName":"nextPermutation","signature":"\u003corg.apache.commons.math.random.RandomDataImpl: int[] nextPermutation(int,int)\u003e","javadoc":"/** \n * Generates an integer array of length \u003ccode\u003ek\u003c/code\u003e whose entries are selected randomly, without repetition, from the integers \u003ccode\u003e0 through n-1\u003c/code\u003e (inclusive). \u003cp\u003e Generated arrays represent permutations of \u003ccode\u003en\u003c/code\u003e taken \u003ccode\u003ek\u003c/code\u003e at a time. \u003c/p\u003e \u003cp\u003e \u003cstrong\u003ePreconditions:\u003c/strong\u003e \u003cul\u003e \u003cli\u003e \u003ccode\u003ek \u003c\u003d n\u003c/code\u003e\u003c/li\u003e \u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e If the preconditions are not met, an IllegalArgumentException is thrown. \u003c/p\u003e \u003cp\u003e Uses a 2-cycle permutation shuffle. The shuffling process is described \u003ca href\u003d\"http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html\"\u003e here\u003c/a\u003e. \u003c/p\u003e\n * @param n domain of the permutation (must be positive)\n * @param k size of the permutation (must satisfy 0 \u003c k \u003c\u003d n).\n * @return the random permutation as an int array\n * @throws NumberIsTooLargeException if {@code k \u003e n}.\n * @throws NotStrictlyPositiveException if {@code k \u003c\u003d 0}.\n */\n","tf":{"freq":{"tch":1,"igc":1,"next":1,"www":1,"cycl":1,"precondit":2,"permut":6,"use":1,"must":2,"inclus":1,"met":1,"time":1,"domain":1,"length":1,"taken":1,"href":1,"note":1,"argument":1,"except":3,"thrown":1,"whose":1,"repres":1,"select":1,"entri":1,"random":2,"describ":1,"number":1,"without":1,"illeg":1,"size":1,"shuffl":2,"math":1,"process":1,"node":1,"repetit":1,"http":1,"strong":2,"larg":1,"abdn":1,"satisfi":1,"generat":2,"html":1,"strict":1,"posit":2,"integ":2,"array":3},"maxFreq":6,"totalTerms":63},"loc":19}