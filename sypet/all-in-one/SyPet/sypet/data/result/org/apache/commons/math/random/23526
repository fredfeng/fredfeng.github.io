{"id":23526,"className":"org.apache.commons.math.random.RandomData","methodName":"nextLong","signature":"\u003corg.apache.commons.math.random.RandomData: long nextLong(long,long)\u003e","javadoc":"/** \n * Generates a uniformly distributed random long integer between \u003ccode\u003elower\u003c/code\u003e and \u003ccode\u003eupper\u003c/code\u003e (endpoints included). \u003cp\u003e The generated long integer values will be random, but not cryptographically secure. To generate cryptographically secure sequences of longs, use \u003ccode\u003enextSecureLong\u003c/code\u003e\u003c/p\u003e \u003cp\u003e \u003cstrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e \u003cli\u003e\u003ccode\u003elower \u003c upper\u003c/code\u003e (otherwise an IllegalArgumentException is thrown.)\u003c/li\u003e \u003c/ul\u003e\u003c/p\u003e\n * @param lower lower bound for generated integer\n * @param upper upper bound for generated integer\n * @return a random integer greater than or equal to \u003ccode\u003elower\u003c/code\u003eand less than or equal to \u003ccode\u003eupper\u003c/code\u003e.\n */\n","tf":{"freq":{"otherwis":1,"greater":1,"lower":5,"next":2,"distribut":1,"precondit":1,"use":1,"upper":5,"cryptograph":2,"sequenc":1,"valu":1,"less":1,"argument":1,"except":1,"thrown":1,"includ":1,"uniform":1,"random":3,"equal":2,"illeg":1,"endpoint":1,"secur":3,"strong":2,"generat":5,"will":1,"integ":5,"bound":2},"maxFreq":5,"totalTerms":52},"loc":0}