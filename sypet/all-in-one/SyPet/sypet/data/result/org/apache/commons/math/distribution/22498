{"id":22498,"className":"org.apache.commons.math.distribution.IntegerDistribution","methodName":"inverseCumulativeProbability","signature":"\u003corg.apache.commons.math.distribution.IntegerDistribution: int inverseCumulativeProbability(double)\u003e","javadoc":"/** \n * For this distribution, X, this method returns the largest x such that P(X \u0026le; x) \u003c\u003d p. \u003cp\u003e Note that this definition implies: \u003cul\u003e \u003cli\u003e If there is a minimum value, \u003ccode\u003em\u003c/code\u003e, with positive probability under (the density of) X, then \u003ccode\u003em - 1\u003c/code\u003e is returned by \u003ccode\u003einverseCumulativeProbability(0).\u003c/code\u003e  If there is no such value \u003ccode\u003em,  Integer.MIN_VALUE\u003c/code\u003e is returned.\u003c/li\u003e \u003cli\u003e If there is a maximum value, \u003ccode\u003eM\u003c/code\u003e, such that P(X \u0026le; M) \u003d1, then \u003ccode\u003eM\u003c/code\u003e is returned by \u003ccode\u003einverseCumulativeProbability(1).\u003c/code\u003e If there is no such value, \u003ccode\u003eM, Integer.MAX_VALUE\u003c/code\u003e is returned.\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n * @param p the cumulative probability.\n * @return the largest x such that P(X \u0026le; x) \u003c\u003d p\n * @throws MathException if the inverse cumulative probability can not becomputed due to convergence or other numerical errors.\n * @throws IllegalArgumentException if p is not between 0 and 1 (inclusive)\n */\n","tf":{"freq":{"argument":1,"except":2,"error":1,"numer":1,"minimum":1,"becomput":1,"distribut":1,"illeg":1,"largest":2,"math":1,"inclus":1,"cumul":5,"invers":4,"probabl":6,"maximum":1,"densiti":1,"definit":1,"impli":1,"due":1,"method":1,"valu":4,"converg":1,"integ":2,"posit":1,"note":1},"maxFreq":6,"totalTerms":43},"loc":0}