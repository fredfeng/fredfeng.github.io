{"id":15533,"className":"org.apache.commons.math3.distribution.WeibullDistribution","methodName":"WeibullDistribution","signature":"\u003corg.apache.commons.math3.distribution.WeibullDistribution: void WeibullDistribution(double,double)\u003e","javadoc":"/** \n * Create a Weibull distribution with the given shape and scale and a location equal to zero. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e this constructor will implicitly create an instance of {@link Well19937c} as random generator to be used for sampling only (see{@link #sample()} and {@link #sample(int)}). In case no sampling is needed for the created distribution, it is advised to pass  {@code null}as random generator via the appropriate constructors to avoid the additional initialisation overhead.\n * @param alpha Shape parameter.\n * @param beta Scale parameter.\n * @throws NotStrictlyPositiveException if {@code alpha \u003c\u003d 0} or{@code beta \u003c\u003d 0}.\n */\n","tf":{"freq":{"need":1,"scale":2,"via":1,"link":3,"distribut":3,"implicit":1,"use":1,"well":1,"beta":2,"zero":1,"advis":1,"weibul":2,"avoid":1,"overhead":1,"given":1,"alpha":2,"note":1,"constructor":2,"addit":1,"except":1,"locat":1,"initialis":1,"creat":3,"paramet":2,"random":2,"equal":1,"shape":2,"instanc":1,"pass":1,"appropri":1,"generat":2,"will":1,"strict":1,"posit":1,"sampl":4},"maxFreq":4,"totalTerms":53},"loc":3}