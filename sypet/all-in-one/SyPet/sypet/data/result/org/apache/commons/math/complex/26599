{"id":26599,"className":"org.apache.commons.math.complex.ComplexUtils","methodName":"polar2Complex","signature":"\u003corg.apache.commons.math.complex.ComplexUtils: org.apache.commons.math.complex.Complex polar2Complex(double,double)\u003e","javadoc":"/** \n * Creates a complex number from the given polar representation. \u003cp\u003e The value returned is \u003ccode\u003er\u0026middot;e\u003csup\u003ei\u0026middot;theta\u003c/sup\u003e\u003c/code\u003e, computed as \u003ccode\u003er\u0026middot;cos(theta) + r\u0026middot;sin(theta)i\u003c/code\u003e\u003c/p\u003e \u003cp\u003e If either \u003ccode\u003er\u003c/code\u003e or \u003ccode\u003etheta\u003c/code\u003e is NaN, or \u003ccode\u003etheta\u003c/code\u003e is infinite,  {@link Complex#NaN} is returned.\u003c/p\u003e\u003cp\u003e If \u003ccode\u003er\u003c/code\u003e is infinite and \u003ccode\u003etheta\u003c/code\u003e is finite, infinite or NaN values may be returned in parts of the result, following the rules for double arithmetic.\u003cpre\u003e Examples: \u003ccode\u003e polar2Complex(INFINITY, \u0026pi;/4) \u003d INFINITY + INFINITY i polar2Complex(INFINITY, 0) \u003d INFINITY + NaN i polar2Complex(INFINITY, -\u0026pi;/4) \u003d INFINITY - INFINITY i polar2Complex(INFINITY, 5\u0026pi;/4) \u003d -INFINITY - INFINITY i \u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n * @param r the modulus of the complex number to create\n * @param theta  the argument of the complex number to create\n * @return \u003ccode\u003er\u0026middot;e\u003csup\u003ei\u0026middot;theta\u003c/sup\u003e\u003c/code\u003e\n * @throws IllegalArgumentException  if r is negative\n * @since 1.1\n */\n","tf":{"freq":{"result":1,"complex":9,"theta":8,"cos":1,"link":1,"arithmet":1,"sup":4,"infinit":3,"given":1,"finit":1,"rule":1,"valu":2,"follow":1,"argument":2,"polar":6,"except":1,"may":1,"creat":3,"middot":6,"number":3,"illeg":1,"represent":1,"either":1,"sin":1,"pre":2,"exampl":1,"comput":1,"negat":1,"part":1,"modulus":1},"maxFreq":9,"totalTerms":67},"loc":7}