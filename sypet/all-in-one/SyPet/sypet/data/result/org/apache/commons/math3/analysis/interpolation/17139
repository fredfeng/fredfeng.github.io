{"id":17139,"className":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator","methodName":"interpolate","signature":"\u003corg.apache.commons.math3.analysis.interpolation.LoessInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])\u003e","javadoc":"/** \n * Compute an interpolating function by performing a loess fit on the data at the original abscissae and then building a cubic spline with a {@link org.apache.commons.math3.analysis.interpolation.SplineInterpolator}on the resulting fit.\n * @param xval the arguments for the interpolation points\n * @param yval the values for the interpolation points\n * @return A cubic spline built upon a loess fit to the data at the original abscissae\n * @throws NonMonotonicSequenceException if {@code xval} not sorted instrictly increasing order.\n * @throws DimensionMismatchException if {@code xval} and {@code yval} havedifferent sizes.\n * @throws NoDataException if {@code xval} or {@code yval} has zero size.\n * @throws NotFiniteNumberException if any of the arguments and values arenot finite real numbers.\n * @throws NumberIsTooSmallException if the bandwidth is too small toaccomodate the size of the input data (i.e. the bandwidth must be larger than 2/n).\n */\n","tf":{"freq":{"perform":1,"zero":1,"xval":4,"must":1,"function":1,"sequenc":1,"interpol":6,"finit":2,"toaccomod":1,"argument":2,"except":5,"abscissa":2,"cubic":2,"yval":3,"apach":1,"number":3,"non":1,"size":3,"input":1,"spline":3,"comput":1,"loess":2,"small":2,"upon":1,"increas":1,"result":1,"sort":1,"common":1,"link":1,"data":4,"org":1,"build":1,"bandwidth":2,"fit":3,"real":1,"order":1,"valu":2,"analysi":1,"built":1,"larger":1,"origin":2,"dimens":1,"monoton":1,"math":1,"point":2,"mismatch":1,"arenot":1,"instrict":1,"havediffer":1},"maxFreq":6,"totalTerms":84},"loc":3}