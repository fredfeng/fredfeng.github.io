{"id":23793,"className":"org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer","methodName":"updateHighOrderDerivativesPhase2","signature":"\u003corg.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math.linear.Array2DRowRealMatrix)\u003e","javadoc":"/** \n * Update the high order scaled derivatives Adams integrators (phase 2). \u003cp\u003eThe complete update of high order derivatives has a form similar to: \u003cpre\u003e r\u003csub\u003en+1\u003c/sub\u003e \u003d (s\u003csub\u003e1\u003c/sub\u003e(n) - s\u003csub\u003e1\u003c/sub\u003e(n+1)) P\u003csup\u003e-1\u003c/sup\u003e u + P\u003csup\u003e-1\u003c/sup\u003e A P r\u003csub\u003en\u003c/sub\u003e \u003c/pre\u003e this method computes the (s\u003csub\u003e1\u003c/sub\u003e(n) - s\u003csub\u003e1\u003c/sub\u003e(n+1)) P\u003csup\u003e-1\u003c/sup\u003e u part.\u003c/p\u003e \u003cp\u003ePhase 1 of the update must already have been performed.\u003c/p\u003e\n * @param start first order scaled derivatives at step start\n * @param end first order scaled derivatives at step end\n * @param highOrder high order scaled derivatives, will be modified(h\u003csup\u003e2\u003c/sup\u003e/2 y\u0027\u0027, ... h\u003csup\u003ek\u003c/sup\u003e/k! y(k))\n * @see #updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)\n */\n","tf":{"freq":{"scale":4,"sub":12,"integr":1,"deriv":7,"perform":1,"sup":10,"must":1,"real":1,"order":8,"drow":1,"end":2,"similar":1,"complet":1,"form":1,"matrix":1,"adam":1,"updat":5,"start":2,"pre":2,"modifi":1,"will":1,"comput":1,"method":1,"alreadi":1,"high":6,"part":1,"phase":4,"first":2,"step":2,"array":1},"maxFreq":12,"totalTerms":83},"loc":10}