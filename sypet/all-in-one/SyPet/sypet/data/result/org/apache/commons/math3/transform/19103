{"id":19103,"className":"org.apache.commons.math3.transform.FastFourierTransformer","methodName":"mdfft","signature":"\u003corg.apache.commons.math3.transform.FastFourierTransformer: java.lang.Object mdfft(java.lang.Object,org.apache.commons.math3.transform.TransformType)\u003e","javadoc":"/** \n * Performs a multi-dimensional Fourier transform on a given array. Use {@link #transform(Complex[],TransformType)} in a row-columnimplementation in any number of dimensions with O(N\u0026times;log(N)) complexity with N \u003d n\u003csub\u003e1\u003c/sub\u003e \u0026times; n\u003csub\u003e2\u003c/sub\u003e \u0026times;n\u003csub\u003e3\u003c/sub\u003e \u0026times; ... \u0026times; n\u003csub\u003ed\u003c/sub\u003e, where n\u003csub\u003ek\u003c/sub\u003e is the number of elements in dimension k, and d is the total number of dimensions.\n * @param mdca Multi-Dimensional Complex Array, i.e. {@code Complex[][][][]}\n * @param type the type of transform (forward, inverse) to be performed\n * @return transform of {@code mdca} as a Multi-Dimensional Complex Array, i.e. {@code Complex[][][][]}\n * @throws IllegalArgumentException if any dimension is not a power of two\n * @deprecated see MATH-736\n */\n","tf":{"freq":{"total":1,"deprec":1,"complex":6,"sub":10,"link":1,"use":1,"perform":2,"type":3,"transform":5,"mdca":2,"time":5,"invers":1,"given":1,"forward":1,"power":1,"argument":1,"element":1,"except":1,"columnimplement":1,"fourier":1,"number":3,"dimens":4,"illeg":1,"mdfft":1,"log":1,"row":1,"two":1,"dimension":3,"multi":3,"array":3},"maxFreq":10,"totalTerms":67},"loc":10}