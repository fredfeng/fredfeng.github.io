{"id":19940,"className":"org.apache.commons.math3.geometry.partitioning.Region","methodName":"getTree","signature":"\u003corg.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree\u003cS\u003e getTree(boolean)\u003e","javadoc":"/** \n * Get the underlying BSP tree. \u003cp\u003eRegions are represented by an underlying inside/outside BSP tree whose leaf attributes are  {@code Boolean} instancesrepresenting inside leaf cells if the attribute value is {@code true} and outside leaf cells if the attribute is{@code false}. These leaf attributes are always present and guaranteed to be non null.\u003c/p\u003e \u003cp\u003eIn addition to the leaf attributes, the internal nodes which correspond to cells split by cut sub-hyperplanes may contain {@link BoundaryAttribute BoundaryAttribute} objects representingthe parts of the corresponding cut sub-hyperplane that belong to the boundary. When the boundary attributes have been computed, all internal nodes are guaranteed to have non-null attributes, however some  {@link BoundaryAttribute BoundaryAttribute} instances may have their {@link BoundaryAttribute#getPlusInside() getPlusInside} and {@link BoundaryAttribute#getPlusOutside() getPlusOutside} methods bothreturning null if the corresponding cut sub-hyperplane does not have any parts belonging to the boundary.\u003c/p\u003e \u003cp\u003eSince computing the boundary is not always required and can be time-consuming for large trees, these internal nodes attributes are computed using lazy evaluation only when required by setting the  {@code includeBoundaryAttributes} argument to{@code true}. Once computed, these attributes remain in the tree, which implies that in this case, further calls to the method for the same region will always include these attributes regardless of the value of the {@code includeBoundaryAttributes} argument.\u003c/p\u003e\n * @param includeBoundaryAttributes if true, the boundary attributesat internal nodes are guaranteed to be included (they may be included even if the argument is false, if they have already been computed due to a previous call)\n * @return underlying BSP tree\n * @see BoundaryAttribute\n */\n","tf":{"freq":{"fals":2,"belong":2,"leaf":5,"bothreturn":1,"time":1,"requir":2,"tree":6,"impli":1,"howev":1,"argument":3,"plus":4,"instancesrepres":1,"whose":1,"alway":3,"cell":3,"non":2,"instanc":1,"present":1,"node":4,"outsid":4,"contain":1,"will":1,"due":1,"comput":5,"even":1,"split":1,"boundari":15,"region":2,"call":2,"sub":3,"correspond":3,"link":4,"use":1,"object":1,"consum":1,"attribut":20,"valu":2,"regardless":1,"addit":1,"attributesat":1,"may":3,"includ":6,"previous":1,"repres":1,"hyperplan":3,"guarante":3,"true":3,"lazi":1,"evalu":1,"representingth":1,"remain":1,"larg":1,"intern":4,"alreadi":1,"insid":4,"method":2,"cut":3,"part":2},"maxFreq":20,"totalTerms":156},"loc":0}