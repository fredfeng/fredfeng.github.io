{"id":22079,"className":"org.apache.commons.math3.complex.Complex","methodName":"multiply","signature":"\u003corg.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)\u003e","javadoc":"/** \n * Returns a  {@code Complex} whose value is {@code this * factor}. Implements preliminary checks for  {@code NaN} and infinity followed bythe definitional formula: \u003cpre\u003e \u003ccode\u003e (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i \u003c/code\u003e \u003c/pre\u003e Returns  {@link #NaN} if either {@code this} or {@code factor} has one ormore  {@code NaN} parts.\u003cbr/\u003e Returns  {@link #INF} if neither {@code this} nor {@code factor} has oneor more  {@code NaN} parts and if either {@code this} or {@code factor}has one or more infinite parts (same result is returned regardless of the sign of the components). \u003cbr/\u003e Returns finite values in components of the result per the definitional formula in all remaining cases.\n * @param factor value to be multiplied by this {@code Complex}.\n * @return {@code this * factor}.\n * @throws NullArgumentException if {@code factor} is {@code null}.\n */\n","tf":{"freq":{"result":2,"complex":2,"infin":1,"link":2,"one":2,"oneor":1,"infinit":1,"byth":1,"finit":1,"multipli":2,"valu":3,"follow":1,"ormor":1,"regardless":1,"argument":1,"except":1,"check":1,"whose":1,"factor":7,"neither":1,"sign":1,"either":2,"remain":1,"per":1,"compon":2,"pre":2,"definit":2,"part":3,"preliminari":1,"formula":2},"maxFreq":7,"totalTerms":50},"loc":15}