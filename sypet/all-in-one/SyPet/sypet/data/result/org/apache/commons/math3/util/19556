{"id":19556,"className":"org.apache.commons.math3.util.ResizableDoubleArray","methodName":"ResizableDoubleArray","signature":"\u003corg.apache.commons.math3.util.ResizableDoubleArray: void ResizableDoubleArray(int,float,float)\u003e","javadoc":"/** \n * Creates an instance with the specified initialCapacity, expansionFactor, and contractionCriterion. The expansion mode will default to  {@code MULTIPLICATIVE}. \u003cbr/\u003e Throws IllegalArgumentException if the following conditions are not met: \u003cul\u003e \u003cli\u003e {@code initialCapacity \u003e 0}\u003c/li\u003e \u003cli\u003e {@code expansionFactor \u003e 1}\u003c/li\u003e \u003cli\u003e {@code contractionCriterion \u003e\u003d expansionFactor}\u003c/li\u003e \u003c/ul\u003e\n * @param initialCapacity Initial size of the internal storage array..\n * @param expansionFactor The array will be expanded based on thisparameter.\n * @param contractionCriteria Contraction criteria.\n * @throws MathIllegalArgumentException if parameters are not valid.\n * @deprecated As of 3.1. Please use{@link #ResizableDoubleArray(int,double,double)} instead.\n */\n","tf":{"freq":{"valid":1,"deprec":1,"link":1,"use":1,"mode":1,"specifi":1,"resiz":2,"met":1,"pleas":1,"expand":1,"initi":4,"follow":1,"thisparamet":1,"argument":2,"condit":1,"except":2,"criteria":2,"contract":4,"creat":1,"paramet":1,"expans":5,"factor":4,"storag":1,"illeg":2,"instanc":1,"size":1,"math":1,"criterion":2,"instead":1,"will":2,"intern":1,"base":1,"capac":3,"array":4},"maxFreq":5,"totalTerms":59},"loc":5}