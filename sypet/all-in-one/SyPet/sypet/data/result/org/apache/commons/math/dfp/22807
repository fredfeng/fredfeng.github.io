{"id":22807,"className":"org.apache.commons.math.dfp.DfpMath","methodName":"pow","signature":"\u003corg.apache.commons.math.dfp.DfpMath: org.apache.commons.math.dfp.Dfp pow(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)\u003e","javadoc":"/** \n * Computes x to the y power.\u003cp\u003e Uses the following method:\u003cp\u003e \u003col\u003e \u003cli\u003e Set u \u003d rint(y), v \u003d y-u \u003cli\u003e Compute a \u003d v * ln(x) \u003cli\u003e Compute b \u003d rint( a/ln(2) ) \u003cli\u003e Compute c \u003d a - b*ln(2) \u003cli\u003e x\u003csup\u003ey\u003c/sup\u003e \u003d x\u003csup\u003eu\u003c/sup\u003e  *   2\u003csup\u003eb\u003c/sup\u003e * e\u003csup\u003ec\u003c/sup\u003e \u003c/ol\u003e if |y| \u003e 1e8, then we compute by exp(y*ln(x))   \u003cp\u003e \u003cb\u003eSpecial Cases\u003c/b\u003e\u003cp\u003e \u003cul\u003e \u003cli\u003e  if y is 0.0 or -0.0 then result is 1.0 \u003cli\u003e  if y is 1.0 then result is x \u003cli\u003e  if y is NaN then result is NaN \u003cli\u003e  if x is NaN and y is not zero then result is NaN \u003cli\u003e  if |x| \u003e 1.0 and y is +Infinity then result is +Infinity \u003cli\u003e  if |x| \u003c 1.0 and y is -Infinity then result is +Infinity \u003cli\u003e  if |x| \u003e 1.0 and y is -Infinity then result is +0 \u003cli\u003e  if |x| \u003c 1.0 and y is +Infinity then result is +0 \u003cli\u003e  if |x| \u003d 1.0 and y is +/-Infinity then result is NaN \u003cli\u003e  if x \u003d +0 and y \u003e 0 then result is +0 \u003cli\u003e  if x \u003d +Inf and y \u003c 0 then result is +0 \u003cli\u003e  if x \u003d +0 and y \u003c 0 then result is +Inf \u003cli\u003e  if x \u003d +Inf and y \u003e 0 then result is +Inf \u003cli\u003e  if x \u003d -0 and y \u003e 0, finite, not odd integer then result is +0 \u003cli\u003e  if x \u003d -0 and y \u003c 0, finite, and odd integer then result is -Inf \u003cli\u003e  if x \u003d -Inf and y \u003e 0, finite, and odd integer then result is -Inf \u003cli\u003e  if x \u003d -0 and y \u003c 0, not finite odd integer then result is +Inf \u003cli\u003e  if x \u003d -Inf and y \u003e 0, not finite odd integer then result is +Inf \u003cli\u003e  if x \u003c 0 and y \u003e 0, finite, and odd integer then result is -(|x|\u003csup\u003ey\u003c/sup\u003e) \u003cli\u003e  if x \u003c 0 and y \u003e 0, finite, and not integer then result is NaN \u003c/ul\u003e\n * @param x base to be raised\n * @param y power to which base should be raised\n * @return x\u003csup\u003ey\u003c/sup\u003e\n */\n","tf":{"freq":{"result":20,"pow":1,"infin":7,"inf":10,"use":1,"rint":2,"sup":12,"zero":1,"exp":1,"rais":2,"finit":7,"base":2,"comput":5,"power":2,"method":1,"special":1,"odd":6,"integ":7,"follow":1},"maxFreq":20,"totalTerms":89},"loc":161}