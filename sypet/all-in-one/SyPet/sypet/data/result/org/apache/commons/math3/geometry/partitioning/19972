{"id":19972,"className":"org.apache.commons.math3.geometry.partitioning.BSPTree","methodName":"split","signature":"\u003corg.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree\u003cS\u003e split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)\u003e","javadoc":"/** \n * Split a BSP tree by an external sub-hyperplane. \u003cp\u003eSplit a tree in two halves, on each side of the sub-hyperplane. The instance is not modified.\u003c/p\u003e \u003cp\u003eThe tree returned is not upward-consistent: despite all of its sub-trees cut sub-hyperplanes (including its own cut sub-hyperplane) are bounded to the current cell, it is \u003cem\u003enot\u003c/em\u003e attached to any parent tree yet. This tree is intended to be later inserted into an higher level tree.\u003c/p\u003e \u003cp\u003eThe algorithm used here is the one given in Naylor, Amanatides and Thibault paper (section III, Binary Partitioning of a BSP Tree).\u003c/p\u003e\n * @param sub partitioning sub-hyperplane, must be already clippedto the convex region represented by the instance, will be used as the cut sub-hyperplane of the returned tree\n * @return a tree having the specified sub-hyperplane as its cutsub-hyperplane, the two parts of the split instance as its two sub-trees and a null parent\n */\n","tf":{"freq":{"region":1,"binari":1,"sub":10,"cutsub":1,"naylor":1,"paper":1,"partit":2,"one":1,"higher":1,"use":2,"clippedto":1,"must":1,"specifi":1,"algorithm":1,"level":1,"given":1,"tree":11,"side":1,"extern":1,"current":1,"convex":1,"amanatid":1,"thibault":1,"includ":1,"repres":1,"consist":1,"hyperplan":8,"later":1,"cell":1,"parent":2,"upward":1,"despit":1,"section":1,"instanc":3,"two":3,"attach":1,"will":1,"modifi":1,"alreadi":1,"split":4,"cut":3,"part":1,"intend":1,"insert":1,"halv":1,"bound":1,"yet":1},"maxFreq":11,"totalTerms":85},"loc":66}