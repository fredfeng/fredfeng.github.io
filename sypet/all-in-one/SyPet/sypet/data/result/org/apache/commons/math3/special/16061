{"id":16061,"className":"org.apache.commons.math3.special.Erf","methodName":"erfc","signature":"\u003corg.apache.commons.math3.special.Erf: double erfc(double)\u003e","javadoc":"/** \n * Returns the complementary error function. \u003cp\u003eerfc(x) \u003d 2/\u0026radic;\u0026pi; \u003csub\u003ex\u003c/sub\u003e\u0026int;\u003csup\u003e\u0026infin;\u003c/sup\u003e e\u003csup\u003e-t\u003csup\u003e2\u003c/sup\u003e\u003c/sup\u003edt \u003cbr/\u003e \u003d 1 -  {@link #erf(double) erf(x)} \u003c/p\u003e\u003cp\u003eThis implementation computes erfc(x) using the {@link Gamma#regularizedGammaQ(double,double,double,int) regularized gamma function}, following \u003ca href\u003d\"http://mathworld.wolfram.com/Erf.html\"\u003e Erf\u003c/a\u003e, equation (3).\u003c/p\u003e \u003cp\u003eThe value returned is always between 0 and 2 (inclusive). If  {@code abs(x) \u003e 40}, then  {@code erf(x)} is indistinguishable fromeither 0 or 2 as a double, so the appropriate extreme value is returned. \u003c/p\u003e\n * @param x the value\n * @return the complementary error function erfc(x)\n * @throws org.apache.commons.math3.exception.MaxCountExceededException if the algorithm fails to converge.\n * @see Gamma#regularizedGammaQ(double,double,double,int)\n * @since 2.2\n */\n","tf":{"freq":{"sub":2,"com":1,"count":1,"common":1,"infin":1,"erf":5,"link":2,"use":1,"org":1,"sup":6,"algorithm":1,"fromeith":1,"function":3,"inclus":1,"gamma":5,"fail":1,"wolfram":1,"valu":3,"converg":1,"href":1,"erfc":4,"extrem":1,"follow":1,"except":2,"equat":1,"max":1,"error":2,"regular":3,"alway":1,"indistinguish":1,"exceed":1,"apach":1,"complementari":2,"radic":1,"math":1,"http":1,"appropri":1,"mathworld":1,"comput":1,"html":1,"ab":1},"maxFreq":6,"totalTerms":68},"loc":7}