{"id":17686,"className":"org.apache.commons.math3.random.RandomData","methodName":"nextUniform","signature":"\u003corg.apache.commons.math3.random.RandomData: double nextUniform(double,double,boolean)\u003e","javadoc":"/** \n * Generates a uniformly distributed random value from the interval {@code (lower, upper)} or the interval {@code [lower, upper)}. The lower bound is thus optionally included, while the upper bound is always excluded. \u003cp\u003e \u003cstrong\u003eDefinition\u003c/strong\u003e: \u003ca href\u003d\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm\"\u003e Uniform Distribution\u003c/a\u003e  {@code lower} and {@code upper - lower} are the\u003ca href \u003d \"http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm\"\u003e location and scale parameters\u003c/a\u003e, respectively.\u003c/p\u003e\n * @param lower the lower bound of the support\n * @param upper the exclusive upper bound of the support\n * @param lowerInclusive {@code true} if the lower bound is inclusive\n * @return uniformly distributed random value in the {@code (lower, upper)}interval, if  {@code lowerInclusive} is {@code false}, or in the {@code [lower, upper)} interval, if {@code lowerInclusive} is{@code true}\n * @throws NumberIsTooLargeException if {@code lower \u003e\u003d upper}\n * @throws NotFiniteNumberException if one of the bounds is infinite\n * @throws NotANumberException if one of the bounds is NaN\n */\n","tf":{"freq":{"fals":1,"scale":1,"itl":2,"lower":14,"one":2,"next":1,"distribut":3,"www":2,"div":2,"exclud":1,"eda":4,"inclus":4,"upper":9,"infinit":1,"finit":1,"handbook":2,"valu":2,"exclus":1,"href":2,"htm":2,"option":1,"except":3,"locat":1,"support":2,"includ":1,"thus":1,"uniform":4,"alway":1,"paramet":1,"random":2,"true":2,"number":2,"section":2,"interv":4,"nist":2,"strong":2,"http":2,"larg":1,"generat":1,"definit":1,"anumb":1,"respect":1,"bound":7,"gov":2},"maxFreq":14,"totalTerms":104},"loc":0}