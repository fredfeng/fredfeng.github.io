{"id":19970,"className":"org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger","methodName":"merge","signature":"\u003corg.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger: org.apache.commons.math3.geometry.partitioning.BSPTree\u003cS\u003e merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)\u003e","javadoc":"/** \n * Merge a leaf node and a tree node. \u003cp\u003eThis method is called at the end of a recursive merging resulting from a  {@code tree1.merge(tree2, leafMerger)}call, when one of the sub-trees involved is a leaf (i.e. when its cut-hyperplane is null). This is the only place where the precise semantics of the operation are required. For all upper level nodes in the tree, the merging operation is only a generic partitioning algorithm.\u003c/p\u003e \u003cp\u003eSince the final operation may be non-commutative, it is important to know if the leaf node comes from the instance tree ( {@code tree1}) or the argument tree ( {@code tree2}). The third argument of the method is devoted to this. It can be ignored for commutative operations.\u003c/p\u003e \u003cp\u003eThe  {@link BSPTree#insertInTree BSPTree.insertInTree} methodmay be useful to implement this method.\u003c/p\u003e\n * @param leaf leaf node (its cut hyperplane is guaranteed to benull)\n * @param tree tree node (its cut hyperplane may be null or not)\n * @param parentTree parent tree to connect to (may be null)\n * @param isPlusChild if true and if parentTree is not null, theresulting tree should be the plus child of its parent, ignored if parentTree is null\n * @param leafFromInstance if true, the leaf node comes from theinstance tree ( {@code tree1}) and the tree node comes from the argument tree ( {@code tree2})\n * @return the BSP tree resulting from the merging (may be one ofthe arguments)\n */\n","tf":{"freq":{"leaf":8,"level":1,"requir":1,"tree":24,"oper":4,"precis":1,"place":1,"argument":4,"plus":2,"theinstanc":1,"ignor":2,"methodmay":1,"devot":1,"parent":5,"involv":1,"theresult":1,"third":1,"non":1,"instanc":2,"node":8,"commut":2,"merg":6,"recurs":1,"benul":1,"generic":1,"call":2,"result":2,"sub":1,"connect":1,"partit":1,"one":2,"link":1,"use":1,"algorithm":1,"child":2,"upper":1,"ofth":1,"semant":1,"end":1,"may":4,"hyperplan":3,"guarante":1,"merger":1,"come":3,"true":2,"know":1,"ptree":2,"method":3,"cut":3,"insert":2},"maxFreq":24,"totalTerms":124},"loc":0}