{"id":22590,"className":"org.apache.commons.math.distribution.PoissonDistributionImpl","methodName":"sample","signature":"\u003corg.apache.commons.math.distribution.PoissonDistributionImpl: int sample()\u003e","javadoc":"/** \n * Generates a random value sampled from this distribution. \u003cp\u003e\u003cstrong\u003eAlgorithm Description\u003c/strong\u003e: \u003cul\u003e\u003cli\u003e For small means, uses simulation of a Poisson process using Uniform deviates, as described \u003ca href\u003d\"http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm\"\u003e here.\u003c/a\u003e The Poisson process (and hence value returned) is bounded by 1000 * mean.\u003c/li\u003e\u003c \u003cli\u003e For large means, uses the rejection algorithm described in \u003cbr/\u003e Devroye, Luc. (1981).\u003ci\u003eThe Computer Generation of Poisson Random Variables\u003c/i\u003e \u003cstrong\u003eComputing\u003c/strong\u003e vol. 26 pp. 197-207.\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n * @return random value\n * @since 2.2\n * @throws MathException if an error occurs generating the random value\n */\n","tf":{"freq":{"reject":1,"pmmi":1,"variabl":1,"irmi":1,"distribut":1,"use":3,"devroy":1,"deviat":1,"algorithm":2,"vol":1,"rng":1,"poisson":3,"luc":1,"mean":3,"valu":4,"href":1,"htm":1,"except":1,"henc":1,"error":1,"uniform":1,"descript":1,"random":4,"describ":2,"math":1,"process":2,"simul":1,"strong":4,"http":1,"larg":1,"generat":3,"comput":2,"interact":1,"small":1,"bound":1,"sampl":2,"epfl":1,"cmos":1,"occur":1},"maxFreq":4,"totalTerms":61},"loc":3}