{"id":23879,"className":"org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians","methodName":"FirstOrderIntegratorWithJacobians","signature":"\u003corg.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void FirstOrderIntegratorWithJacobians(org.apache.commons.math.ode.FirstOrderIntegrator,org.apache.commons.math.ode.jacobians.ParameterizedODE,double[],double[],double[])\u003e","javadoc":"/** \n * Build an enhanced integrator using internal differentiation to compute jacobians.\n * @param integrator underlying integrator to solve the compound problem\n * @param ode original problem (f in the equation y\u0027 \u003d f(t, y))\n * @param p parameters array (may be null if {@link ParameterizedODE#getParametersDimension() getParametersDimension()} from original problem is zero)\n * @param hY step sizes to use for computing the jacobian df/dy, must have thesame dimension as the original problem\n * @param hP step sizes to use for computing the jacobian df/dp, must have thesame dimension as the original problem parameters dimension\n * @see #FirstOrderIntegratorWithJacobians(FirstOrderIntegrator,ODEWithJacobians)\n */\n","tf":{"freq":{"jacobian":6,"compound":1,"integr":6,"link":1,"use":3,"build":1,"zero":1,"must":2,"parameter":1,"order":3,"thesam":2,"ode":1,"equat":1,"may":1,"ewith":1,"origin":4,"paramet":4,"problem":5,"dimens":5,"solv":1,"size":2,"intern":1,"comput":3,"enhanc":1,"first":3,"step":2,"differenti":1,"array":1},"maxFreq":6,"totalTerms":64},"loc":8}