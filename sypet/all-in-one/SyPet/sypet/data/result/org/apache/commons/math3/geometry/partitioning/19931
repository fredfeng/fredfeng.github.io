{"id":19931,"className":"org.apache.commons.math3.geometry.partitioning.Region","methodName":"buildNew","signature":"\u003corg.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region\u003cS\u003e buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)\u003e","javadoc":"/** \n * Build a region using the instance as a prototype. \u003cp\u003eThis method allow to create new instances without knowing exactly the type of the region. It is an application of the prototype design pattern.\u003c/p\u003e \u003cp\u003eThe leaf nodes of the BSP tree \u003cem\u003emust\u003c/em\u003e have a {@code Boolean} attribute representing the inside status ofthe corresponding cell (true for inside cells, false for outside cells). In order to avoid building too many small objects, it is recommended to use the predefined constants {@code Boolean.TRUE} and {@code Boolean.FALSE}. The tree also \u003cem\u003emust\u003c/em\u003e have either null internal nodes or internal nodes representing the boundary as specified in the {@link #getTree getTree} method).\u003c/p\u003e\n * @param newTree inside/outside BSP tree representing the new region\n * @return the built region\n */\n","tf":{"freq":{"fals":1,"region":4,"allow":1,"correspond":1,"link":1,"predefin":1,"use":2,"object":1,"leaf":1,"type":1,"prototyp":2,"build":3,"recommend":1,"applic":1,"must":2,"specifi":1,"avoid":1,"attribut":1,"order":1,"tree":6,"exact":1,"ofth":1,"built":1,"mani":1,"constant":1,"creat":1,"repres":3,"status":1,"cell":3,"true":1,"know":1,"without":1,"instanc":2,"either":1,"node":3,"pattern":1,"outsid":2,"intern":2,"method":2,"insid":3,"boundari":1,"also":1,"small":1,"design":1},"maxFreq":6,"totalTerms":69},"loc":0}