{"id":15503,"className":"org.apache.commons.math3.distribution.AbstractIntegerDistribution","methodName":"logProbability","signature":"\u003corg.apache.commons.math3.distribution.AbstractIntegerDistribution: double logProbability(int)\u003e","javadoc":"/** \n * For a random variable  {@code X} whose values are distributed according tothis distribution, this method returns  {@code log(P(X \u003d x))}, where {@code log} is the natural logarithm. In other words, this methodrepresents the logarithm of the probability mass function (PMF) for the distribution. Note that due to the floating point precision and under/overflow issues, this method will for some distributions be more precise and faster than computing the logarithm of {@link #probability(int)}. \u003cp\u003e The default implementation simply computes the logarithm of  {@code probability(x)}.\u003c/p\u003e\n * @param x the point at which the PMF is evaluated\n * @return the logarithm of the value of the probability mass function at {@code x}\n */\n","tf":{"freq":{"simpli":1,"link":1,"variabl":1,"distribut":4,"natur":1,"issu":1,"function":2,"mass":2,"faster":1,"probabl":5,"precis":2,"valu":2,"note":1,"tothi":1,"whose":1,"random":1,"evalu":1,"accord":1,"log":3,"point":2,"methodrepres":1,"logarithm":5,"overflow":1,"will":1,"comput":2,"due":1,"method":2,"word":1},"maxFreq":5,"totalTerms":48},"loc":3}