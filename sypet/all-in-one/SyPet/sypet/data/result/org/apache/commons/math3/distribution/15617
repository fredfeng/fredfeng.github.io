{"id":15617,"className":"org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution","methodName":"cdf","signature":"\u003corg.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double cdf(double,boolean)\u003e","javadoc":"/** \n * Calculates  {@code P(D_n \u003c d)} using method described in [1] with quickdecisions for extreme values given in [2] (see above).\n * @param d statistic\n * @param exact whether the probability should be calculated exact using{@link org.apache.commons.math3.fraction.BigFraction} everywhere at theexpense of very slow execution time, or if  {@code double} should be usedconvenient places to gain speed. Almost never choose  {@code true} in realapplications unless you are very sure;  {@code true} is almost solely forverification purposes.\n * @return the two-sided probability of {@code P(D_n \u003c d)}\n * @throws MathArithmeticException if algorithm fails to convert {@code h}to a  {@link org.apache.commons.math3.fraction.BigFraction} in expressing{@code d} as {@code (k - h) / m} for integer {@code k, m} and{@code 0 \u003c\u003d h \u003c 1}.\n */\n","tf":{"freq":{"realappl":1,"everywher":1,"common":2,"link":2,"arithmet":1,"convert":1,"use":2,"express":1,"org":2,"whether":1,"algorithm":1,"almost":2,"time":1,"fail":1,"unless":1,"given":1,"probabl":2,"theexpens":1,"side":1,"exact":2,"purpos":1,"choos":1,"valu":1,"usedconveni":1,"slow":1,"place":1,"sole":1,"sure":1,"extrem":1,"except":1,"fraction":4,"speed":1,"quickdecis":1,"calcul":2,"apach":2,"true":2,"describ":1,"statist":1,"gain":1,"math":3,"two":1,"never":1,"forverif":1,"method":1,"big":2,"execut":1,"integ":1,"cdf":1},"maxFreq":4,"totalTerms":64},"loc":32}