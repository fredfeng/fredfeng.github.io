{"id":26315,"className":"org.apache.commons.math.linear.MatrixUtils","methodName":"createFieldMatrix","signature":"\u003corg.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.FieldMatrix\u003cT\u003e createFieldMatrix(T[][])\u003e","javadoc":"/** \n * Returns a  {@link FieldMatrix} whose entries are the the values in thethe input array. \u003cp\u003eThe type of matrix returned depends on the dimension. Below 2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a square matrix), a  {@link FieldMatrix} instance is built. Abovethis threshold a  {@link BlockFieldMatrix} instance is built.\u003c/p\u003e\u003cp\u003eThe input array is copied, not referenced.\u003c/p\u003e\n * @param \u003c T \u003e the type of the field elements\n * @param data input array\n * @return  RealMatrix containing the values of the array\n * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular(not all rows have the same length) or empty\n * @throws NullPointerException if either \u003ccode\u003edata\u003c/code\u003e or\u003ccode\u003edata[0]\u003c/code\u003e is null\n * @see #createFieldMatrix(Field,int,int)\n * @since 2.0\n */\n","tf":{"freq":{"rectangular":1,"squar":1,"link":3,"data":4,"block":1,"type":2,"sup":2,"copi":1,"referenc":1,"real":1,"time":1,"length":1,"valu":2,"built":2,"abovethi":1,"argument":1,"element":3,"except":2,"whose":1,"creat":2,"depend":1,"entri":1,"matrix":8,"dimens":1,"illeg":1,"row":1,"empti":1,"instanc":2,"threshold":1,"field":7,"either":1,"input":3,"contain":1,"pointer":1,"theth":1,"array":4},"maxFreq":8,"totalTerms":68},"loc":4}