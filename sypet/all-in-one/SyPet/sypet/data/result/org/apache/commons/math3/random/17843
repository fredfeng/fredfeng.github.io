{"id":17843,"className":"org.apache.commons.math3.random.RandomDataImpl","methodName":"nextGamma","signature":"\u003corg.apache.commons.math3.random.RandomDataImpl: double nextGamma(double,double)\u003e","javadoc":"/** \n * \u003cp\u003eGenerates a random value from the {@link org.apache.commons.math3.distribution.GammaDistribution Gamma Distribution}.\u003c/p\u003e \u003cp\u003eThis implementation uses the following algorithms: \u003c/p\u003e \u003cp\u003eFor 0 \u003c shape \u003c 1: \u003cbr/\u003e Ahrens, J. H. and Dieter, U., \u003ci\u003eComputer methods for sampling from gamma, beta, Poisson and binomial distributions.\u003c/i\u003e Computing, 12, 223-246, 1974.\u003c/p\u003e \u003cp\u003eFor shape \u003e\u003d 1: \u003cbr/\u003e Marsaglia and Tsang, \u003ci\u003eA Simple Method for Generating Gamma Variables.\u003c/i\u003e ACM Transactions on Mathematical Software, Volume 26 Issue 3, September, 2000.\u003c/p\u003e\n * @param shape the median of the Gamma distribution\n * @param scale the scale parameter of the Gamma distribution\n * @return random value sampled from the Gamma(shape, scale) distribution\n * @throws NotStrictlyPositiveException if {@code shape \u003c\u003d 0} or{@code scale \u003c\u003d 0}.\n * @since 2.2\n */\n","tf":{"freq":{"scale":4,"simpl":1,"common":1,"variabl":1,"link":1,"next":1,"distribut":7,"use":1,"org":1,"beta":1,"marsaglia":1,"issu":1,"algorithm":1,"gamma":8,"dieter":1,"poisson":1,"valu":2,"follow":1,"softwar":1,"except":1,"septemb":1,"mathemat":1,"paramet":1,"apach":1,"random":2,"shape":5,"math":1,"median":1,"transact":1,"generat":2,"comput":2,"method":2,"volum":1,"tsang":1,"strict":1,"posit":1,"binomi":1,"sampl":2,"ahren":1},"maxFreq":8,"totalTerms":65},"loc":3}