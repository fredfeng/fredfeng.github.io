{"id":21013,"className":"org.apache.commons.math3.linear.BlockFieldMatrix","methodName":"BlockFieldMatrix","signature":"\u003corg.apache.commons.math3.linear.BlockFieldMatrix: void BlockFieldMatrix(T[][])\u003e","javadoc":"/** \n * Create a new dense matrix copying entries from raw layout data. \u003cp\u003eThe input array \u003cem\u003emust\u003c/em\u003e already be in raw layout.\u003c/p\u003e \u003cp\u003eCalling this constructor is equivalent to call: \u003cpre\u003ematrix \u003d new BlockFieldMatrix\u003cT\u003e(getField(), rawData.length, rawData[0].length, toBlocksLayout(rawData), false);\u003c/pre\u003e \u003c/p\u003e\n * @param rawData Data for the new matrix, in raw layout.\n * @throws DimensionMismatchException if the {@code blockData} shape isinconsistent with block layout.\n * @see #BlockFieldMatrix(int,int,FieldElement[][],boolean)\n */\n","tf":{"freq":{"raw":7,"fals":1,"call":2,"data":7,"block":6,"copi":1,"must":1,"equival":1,"layout":5,"length":2,"isinconsist":1,"dens":1,"constructor":1,"element":1,"except":1,"creat":1,"entri":1,"matrix":6,"shape":1,"dimens":1,"field":5,"input":1,"pre":2,"alreadi":1,"mismatch":1,"array":1},"maxFreq":7,"totalTerms":59},"loc":3}