{"id":17507,"className":"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils","methodName":"bracket","signature":"\u003corg.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double[] bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)\u003e","javadoc":"/** \n * This method simply calls  {@link #bracket(UnivariateFunction,double,double,double,double,double,int) bracket(function, initial, lowerBound, upperBound, q, r, maximumIterations)}with  {@code q} and {@code r} set to 1.0.\n * @param function Function.\n * @param initial Initial midpoint of interval being expanded tobracket a root.\n * @param lowerBound Lower bound (a is never lower than this value).\n * @param upperBound Upper bound (b never is greater than thisvalue).\n * @param maximumIterations Maximum number of iterations to perform\n * @return a two element array holding a and b.\n * @throws NoBracketingException if the algorithm fails to find a and bsatisfying the desired conditions.\n * @throws NotStrictlyPositiveException if {@code maximumIterations \u003c\u003d 0}.\n * @throws NullArgumentException if {@code function} is {@code null}.\n */\n","tf":{"freq":{"call":1,"simpli":1,"lower":4,"greater":1,"root":1,"link":1,"perform":1,"desir":1,"bracket":4,"bsatisfi":1,"algorithm":1,"function":5,"upper":3,"midpoint":1,"fail":1,"univari":1,"expand":1,"valu":1,"initi":3,"find":1,"argument":1,"condit":1,"element":1,"except":3,"thisvalu":1,"hold":1,"tobracket":1,"number":1,"interv":1,"two":1,"never":2,"maximum":4,"method":1,"strict":1,"iter":4,"posit":1,"bound":6,"array":1},"maxFreq":6,"totalTerms":66},"loc":3}