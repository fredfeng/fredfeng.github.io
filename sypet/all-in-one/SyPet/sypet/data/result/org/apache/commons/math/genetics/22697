{"id":22697,"className":"org.apache.commons.math.genetics.RandomKey","methodName":"comparatorPermutation","signature":"\u003corg.apache.commons.math.genetics.RandomKey: java.util.List\u003cjava.lang.Double\u003e comparatorPermutation(java.util.List,java.util.Comparator)\u003e","javadoc":"/** \n * Generates a representation of a permutation corresponding to the \u003ccode\u003edata\u003c/code\u003e sorted by \u003ccode\u003ecomparator\u003c/code\u003e. The \u003ccode\u003edata\u003c/code\u003e is not modified during the process. This is useful if you want to inject some permutations to the initial population.\n * @param \u003c S \u003e type of the data\n * @param data list of data determining the order\n * @param comparator how the data will be compared\n * @return list representation of the permutation corresponding to the parameters\n */\n","tf":{"freq":{"sort":1,"correspond":2,"paramet":1,"data":6,"inject":1,"permut":4,"use":1,"list":2,"type":1,"represent":2,"process":1,"popul":1,"order":1,"determin":1,"generat":1,"will":1,"modifi":1,"initi":1,"compar":4,"want":1},"maxFreq":6,"totalTerms":34},"loc":6}