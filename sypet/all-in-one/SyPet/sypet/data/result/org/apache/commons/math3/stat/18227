{"id":18227,"className":"org.apache.commons.math3.stat.StatUtils","methodName":"min","signature":"\u003corg.apache.commons.math3.stat.StatUtils: double min(double[])\u003e","javadoc":"/** \n * Returns the minimum of the entries in the input array, or \u003ccode\u003eDouble.NaN\u003c/code\u003e if the array is empty. \u003cp\u003e Throws \u003ccode\u003eMathIllegalArgumentException\u003c/code\u003e if the array is null.\u003c/p\u003e \u003cp\u003e \u003cul\u003e \u003cli\u003eThe result is \u003ccode\u003eNaN\u003c/code\u003e iff all values are \u003ccode\u003eNaN\u003c/code\u003e (i.e. \u003ccode\u003eNaN\u003c/code\u003e values have no impact on the value of the statistic).\u003c/li\u003e \u003cli\u003eIf any of the values equals \u003ccode\u003eDouble.NEGATIVE_INFINITY\u003c/code\u003e, the result is \u003ccode\u003eDouble.NEGATIVE_INFINITY.\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\n * @param values the input array\n * @return the minimum of the values or Double.NaN if the array is empty\n * @throws MathIllegalArgumentException if the array is null\n */\n","tf":{"freq":{"min":1,"argument":2,"result":2,"except":2,"minimum":2,"entri":1,"equal":1,"illeg":2,"statist":1,"impact":1,"empti":2,"math":2,"input":2,"iff":1,"valu":6,"array":6},"maxFreq":6,"totalTerms":34},"loc":3}