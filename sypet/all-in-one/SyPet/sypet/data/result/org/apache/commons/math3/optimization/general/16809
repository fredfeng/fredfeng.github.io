{"id":16809,"className":"org.apache.commons.math3.optimization.general.Preconditioner","methodName":"precondition","signature":"\u003corg.apache.commons.math3.optimization.general.Preconditioner: double[] precondition(double[],double[])\u003e","javadoc":"/** \n * Precondition a search direction. \u003cp\u003e The returned preconditioned search direction must be computed fast or the algorithm performances will drop drastically. A classical approach is to compute only the diagonal elements of the hessian and to divide the raw search direction by these elements if they are all positive. If at least one of them is negative, it is safer to return a clone of the raw search direction as if the hessian was the identity matrix. The rationale for this simplified choice is that a negative diagonal element means the current point is far from the optimum and preconditioning will not be efficient anyway in this case. \u003c/p\u003e\n * @param point current point at which the search direction was computed\n * @param r raw search direction (i.e. opposite of the gradient)\n * @return approximation of H\u003csup\u003e-1\u003c/sup\u003er where H is the objective function hessian\n */\n","tf":{"freq":{"raw":3,"optimum":1,"drop":1,"least":1,"one":1,"precondit":4,"perform":1,"object":1,"approxim":1,"hessian":3,"sup":2,"opposit":1,"diagon":2,"must":1,"function":1,"algorithm":1,"anyway":1,"ident":1,"search":6,"safer":1,"current":2,"rational":1,"mean":1,"effici":1,"classic":1,"direct":6,"element":3,"clone":1,"matrix":1,"far":1,"choic":1,"divid":1,"point":3,"simplifi":1,"will":2,"comput":3,"approach":1,"negat":2,"drastic":1,"fast":1,"posit":1,"gradient":1},"maxFreq":6,"totalTerms":70},"loc":0}