{"id":19432,"className":"org.apache.commons.math3.util.CompositeFormat","methodName":"formatDouble","signature":"\u003corg.apache.commons.math3.util.CompositeFormat: java.lang.StringBuffer formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)\u003e","javadoc":"/** \n * Formats a double value to produce a string.  In general, the value is formatted using the formatting rules of \u003ccode\u003eformat\u003c/code\u003e.  There are three exceptions to this: \u003col\u003e \u003cli\u003eNaN is formatted as \u0027(NaN)\u0027\u003c/li\u003e \u003cli\u003ePositive infinity is formatted as \u0027(Infinity)\u0027\u003c/li\u003e \u003cli\u003eNegative infinity is formatted as \u0027(-Infinity)\u0027\u003c/li\u003e \u003c/ol\u003e\n * @param value the double to format.\n * @param format the format used.\n * @param toAppendTo where the text is to be appended\n * @param pos On input: an alignment field, if desired. On output: theoffsets of the alignment field\n * @return the value passed in as toAppendTo.\n */\n","tf":{"freq":{"append":3,"text":1,"except":1,"infin":4,"align":2,"use":2,"produc":1,"format":11,"desir":1,"general":1,"pass":1,"pos":1,"field":2,"input":1,"string":1,"rule":1,"theoffset":1,"three":1,"valu":4,"negat":1,"output":1,"posit":1},"maxFreq":11,"totalTerms":43},"loc":10}