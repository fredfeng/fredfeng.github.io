{"id":23500,"className":"org.apache.commons.math.random.AbstractRandomGenerator","methodName":"nextGaussian","signature":"\u003corg.apache.commons.math.random.AbstractRandomGenerator: double nextGaussian()\u003e","javadoc":"/** \n * Returns the next pseudorandom, Gaussian (\"normally\") distributed {@code double} value with mean {@code 0.0} and standarddeviation  {@code 1.0} from this random number generator\u0027s sequence.\u003cp\u003e The default implementation uses the \u003cem\u003ePolar Method\u003c/em\u003e due to G.E.P. Box, M.E. Muller and G. Marsaglia, as described in D. Knuth, \u003cu\u003eThe Art of Computer Programming\u003c/u\u003e, 3.4.1C.\u003c/p\u003e \u003cp\u003e The algorithm generates a pair of independent random values.  One of these is cached for reuse, so the full algorithm is not executed on each activation.  Implementations that do not override this method should make sure to call  {@link #clear} to clear the cached value in theimplementation of  {@link #setSeed(long)}.\u003c/p\u003e\n * @return  the next pseudorandom, Gaussian (\"normally\") distributed{@code double} value with mean {@code 0.0} andstandard deviation  {@code 1.0} from this random numbergenerator\u0027s sequence\n */\n","tf":{"freq":{"call":1,"pair":1,"standarddevi":1,"link":2,"one":1,"normal":2,"next":3,"distribut":2,"use":1,"knuth":1,"activ":1,"marsaglia":1,"reus":1,"deviat":1,"algorithm":2,"clear":2,"muller":1,"independ":1,"full":1,"sequenc":2,"gaussian":3,"mean":2,"valu":4,"numbergener":1,"sure":1,"polar":1,"seed":1,"theimplement":1,"art":1,"random":3,"describ":1,"number":1,"cach":2,"andstandard":1,"program":1,"generat":2,"due":1,"comput":1,"method":2,"box":1,"execut":1,"make":1,"pseudorandom":2},"maxFreq":4,"totalTerms":63},"loc":20}