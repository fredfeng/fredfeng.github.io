{"id":24180,"className":"org.apache.commons.math.stat.inference.OneWayAnova","methodName":"anovaPValue","signature":"\u003corg.apache.commons.math.stat.inference.OneWayAnova: double anovaPValue(java.util.Collection)\u003e","javadoc":"/** \n * Computes the ANOVA P-value for a collection of \u003ccode\u003edouble[]\u003c/code\u003e arrays. \u003cp\u003e\u003cstrong\u003ePreconditions\u003c/strong\u003e: \u003cul\u003e \u003cli\u003eThe categoryData \u003ccode\u003eCollection\u003c/code\u003e must contain \u003ccode\u003edouble[]\u003c/code\u003e arrays.\u003c/li\u003e \u003cli\u003e There must be at least two \u003ccode\u003edouble[]\u003c/code\u003e arrays in the \u003ccode\u003ecategoryData\u003c/code\u003e collection and each of these arrays must contain at least two values.\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n * @param categoryData \u003ccode\u003eCollection\u003c/code\u003e of \u003ccode\u003edouble[]\u003c/code\u003earrays each containing data for one category\n * @return Pvalue\n * @throws IllegalArgumentException if the preconditions are not met\n * @throws MathException if the statistic can not be computed do to aconvergence or other numerical error.\n */\n","tf":{"freq":{"argument":1,"except":2,"categori":4,"error":1,"numer":1,"aconverg":1,"least":2,"one":1,"precondit":2,"data":4,"pvalu":2,"illeg":1,"statist":1,"must":3,"math":1,"met":1,"two":2,"anova":1,"strong":2,"contain":3,"comput":2,"valu":2,"collect":4,"array":5},"maxFreq":5,"totalTerms":49},"loc":0}