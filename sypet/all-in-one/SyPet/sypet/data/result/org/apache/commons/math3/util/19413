{"id":19413,"className":"org.apache.commons.math3.util.ContinuedFraction","methodName":"evaluate","signature":"\u003corg.apache.commons.math3.util.ContinuedFraction: double evaluate(double,double,int)\u003e","javadoc":"/** \n * Evaluates the continued fraction at the value x. \u003cp\u003e The implementation of this method is based on the modified Lentz algorithm as described on page 18 ff. in: \u003cul\u003e \u003cli\u003e I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\" \u003ca target\u003d\"_blank\" href\u003d\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\"\u003e http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\u003c/a\u003e \u003c/li\u003e \u003c/ul\u003e \u003cb\u003eNote:\u003c/b\u003e the implementation uses the terms a\u003csub\u003ei\u003c/sub\u003e and b\u003csub\u003ei\u003c/sub\u003e as defined in \u003ca href\u003d\"http://mathworld.wolfram.com/ContinuedFraction.html\"\u003eContinued Fraction @ MathWorld\u003c/a\u003e. \u003c/p\u003e\n * @param x the evaluation point.\n * @param epsilon maximum error allowed.\n * @param maxIterations maximum number of convergents\n * @return the value of the continued fraction evaluated at x.\n * @throws ConvergenceException if the algorithm fails to converge.\n * @throws MaxCountExceededException if maximal number of iterations is reached\n */\n","tf":{"freq":{"com":1,"count":1,"pdf":2,"function":1,"maxim":1,"fail":1,"page":1,"thompson":3,"href":2,"coulomb":1,"argument":1,"except":2,"describ":1,"number":2,"continu":4,"http":3,"bessel":1,"maximum":2,"fresco":2,"defin":1,"complex":1,"sub":4,"allow":1,"lentz":1,"paper":2,"www":2,"use":1,"org":2,"algorithm":2,"reach":1,"order":1,"wolfram":1,"epsilon":1,"valu":2,"converg":3,"note":1,"fraction":4,"blank":1,"max":2,"error":1,"exceed":1,"barnett":1,"evalu":4,"math":1,"point":1,"term":1,"target":1,"base":1,"modifi":1,"mathworld":1,"method":1,"html":1,"iter":2,"world":1},"maxFreq":4,"totalTerms":85},"loc":57}