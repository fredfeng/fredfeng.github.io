{"id":19057,"className":"org.apache.commons.math3.stat.descriptive.summary.Product","methodName":"evaluate","signature":"\u003corg.apache.commons.math3.stat.descriptive.summary.Product: double evaluate(double[],double[],int,int)\u003e","javadoc":"/** \n * \u003cp\u003eReturns the weighted product of the entries in the specified portion of the input array, or \u003ccode\u003eDouble.NaN\u003c/code\u003e if the designated subarray is empty.\u003c/p\u003e \u003cp\u003eThrows \u003ccode\u003eMathIllegalArgumentException\u003c/code\u003e if any of the following are true: \u003cul\u003e\u003cli\u003ethe values array is null\u003c/li\u003e \u003cli\u003ethe weights array is null\u003c/li\u003e \u003cli\u003ethe weights array does not have the same length as the values array\u003c/li\u003e \u003cli\u003ethe weights array contains one or more infinite values\u003c/li\u003e \u003cli\u003ethe weights array contains one or more NaN values\u003c/li\u003e \u003cli\u003ethe weights array contains negative values\u003c/li\u003e \u003cli\u003ethe start and length arguments do not determine a valid array\u003c/li\u003e \u003c/ul\u003e\u003c/p\u003e \u003cp\u003eUses the formula, \u003cpre\u003e weighted product \u003d \u0026prod;values[i]\u003csup\u003eweights[i]\u003c/sup\u003e \u003c/pre\u003e that is, the weights are applied as exponents when computing the weighted product.\u003c/p\u003e\n * @param values the input array\n * @param weights the weights array\n * @param begin index of the first array element to include\n * @param length the number of elements to include\n * @return the product of the values or 1 if length \u003d 0\n * @throws MathIllegalArgumentException if the parameters are not valid\n * @since 2.1\n */\n","tf":{"freq":{"valid":2,"weight":12,"one":2,"use":1,"sup":2,"specifi":1,"infinit":1,"length":4,"valu":8,"prod":1,"portion":1,"follow":1,"expon":1,"argument":3,"element":2,"index":1,"except":2,"includ":2,"entri":1,"paramet":1,"true":1,"number":1,"evalu":1,"subarray":1,"illeg":2,"begin":1,"empti":1,"math":2,"product":4,"appli":1,"input":2,"start":1,"pre":2,"determin":1,"contain":3,"comput":1,"negat":1,"first":1,"design":1,"formula":1,"array":12},"maxFreq":12,"totalTerms":90},"loc":10}