{"id":19809,"className":"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer","methodName":"LevenbergMarquardtOptimizer","signature":"\u003corg.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void LevenbergMarquardtOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)\u003e","javadoc":"/** \n * Constructor that allows the specification of a custom convergence checker. Note that all the usual convergence checks will be \u003cem\u003edisabled\u003c/em\u003e. The default values for the algorithm settings are: \u003cul\u003e \u003cli\u003eInitial step bound factor: 100\u003c/li\u003e \u003cli\u003eCost relative tolerance: 1e-10\u003c/li\u003e \u003cli\u003eParameters relative tolerance: 1e-10\u003c/li\u003e \u003cli\u003eOrthogonality tolerance: 1e-10\u003c/li\u003e \u003cli\u003eQR ranking threshold:  {@link Precision#SAFE_MIN}\u003c/li\u003e \u003c/ul\u003e\n * @param checker Convergence checker.\n */\n","tf":{"freq":{"allow":1,"link":1,"algorithm":1,"rank":1,"precis":1,"relat":2,"levenberg":1,"valu":1,"initi":1,"converg":3,"note":1,"toler":3,"custom":1,"constructor":1,"usual":1,"check":1,"optim":1,"orthogon":1,"paramet":1,"factor":1,"cost":1,"checker":3,"threshold":1,"specif":1,"disabl":1,"will":1,"marquardt":1,"step":1,"bound":1},"maxFreq":3,"totalTerms":36},"loc":3}