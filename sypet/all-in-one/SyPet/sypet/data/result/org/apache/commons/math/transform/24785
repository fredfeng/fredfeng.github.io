{"id":24785,"className":"org.apache.commons.math.transform.FastFourierTransformer","methodName":"mdfft","signature":"\u003corg.apache.commons.math.transform.FastFourierTransformer: java.lang.Object mdfft(java.lang.Object,boolean)\u003e","javadoc":"/** \n * Performs a multi-dimensional Fourier transform on a given array. Use  {@link #inversetransform2(Complex[])} and{@link #transform2(Complex[])} in a row-column implementationin any number of dimensions with O(N\u0026times;log(N)) complexity with N\u003dn\u003csub\u003e1\u003c/sub\u003e\u0026times;n\u003csub\u003e2\u003c/sub\u003e\u0026times;n\u003csub\u003e3\u003c/sub\u003e\u0026times;...\u0026times;n\u003csub\u003ed\u003c/sub\u003e, n\u003csub\u003ex\u003c/sub\u003e\u003dnumber of elements in dimension x, and d\u003dtotal number of dimensions.\n * @param mdca Multi-Dimensional Complex Array id est Complex[][][][]\n * @param forward inverseTransform2 is preformed if this is false\n * @return transform of mdca as a Multi-Dimensional Complex Array id est Complex[][][][]\n * @throws IllegalArgumentException if any dimension is not a power of two\n */\n","tf":{"freq":{"fals":1,"total":1,"complex":7,"sub":10,"link":2,"preform":1,"use":1,"perform":1,"transform":4,"mdca":2,"time":5,"invers":1,"given":1,"est":2,"forward":1,"power":1,"argument":1,"implementationin":1,"element":1,"except":1,"fourier":1,"number":3,"dimens":4,"illeg":1,"mdfft":1,"log":1,"row":1,"two":1,"dimension":3,"multi":3,"column":1,"inversetransform":1,"array":3},"maxFreq":10,"totalTerms":69},"loc":10}