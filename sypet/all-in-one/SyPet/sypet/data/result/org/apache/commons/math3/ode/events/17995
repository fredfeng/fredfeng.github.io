{"id":17995,"className":"org.apache.commons.math3.ode.events.EventHandler","methodName":"eventOccurred","signature":"\u003corg.apache.commons.math3.ode.events.EventHandler: org.apache.commons.math3.ode.events.Action eventOccurred(double,double[],boolean)\u003e","javadoc":"/** \n * Handle an event and choose what to do next. \u003cp\u003eThis method is called when the integrator has accepted a step ending exactly on a sign change of the function, just \u003cem\u003ebefore\u003c/em\u003e the step handler itself is called (see below for scheduling). It allows the user to update his internal data to acknowledge the fact the event has been handled (for example setting a flag in the  {@link org.apache.commons.math3.ode.FirstOrderDifferentialEquations differential equations} to switch the derivatives computation incase of discontinuity), or to direct the integrator to either stop or continue integration, possibly with a reset state or derivatives.\u003c/p\u003e \u003cul\u003e \u003cli\u003eif  {@link Action#STOP} is returned, the step handler will be calledwith the \u003ccode\u003eisLast\u003c/code\u003e flag of the  {@link org.apache.commons.math3.ode.sampling.StepHandler#handleStep handleStep}method set to true and the integration will be stopped,\u003c/li\u003e \u003cli\u003eif  {@link Action#RESET_STATE} is returned, the {@link #resetState resetState} method will be called once the step handler hasfinished its task, and the integrator will also recompute the derivatives,\u003c/li\u003e \u003cli\u003eif  {@link Action#RESET_DERIVATIVES} is returned, the integratorwill recompute the derivatives, \u003cli\u003eif  {@link Action#CONTINUE} is returned, no specific action willbe taken (apart from having called this method) and integration will continue.\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe scheduling between this method and the  {@link org.apache.commons.math3.ode.sampling.StepHandler StepHandler} method {@link org.apache.commons.math3.ode.sampling.StepHandler#handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator,boolean) handleStep(interpolator, isLast)} is to call this method first and\u003ccode\u003ehandleStep\u003c/code\u003e afterwards. This scheduling allows the integrator to pass \u003ccode\u003etrue\u003c/code\u003e as the \u003ccode\u003eisLast\u003c/code\u003e parameter to the step handler to make it aware the step will be the last one if this method returns  {@link Action#STOP}. As the interpolator may be used to navigate back throughout the last step (as  {@link org.apache.commons.math3.ode.sampling.StepNormalizer StepNormalizer}does for example), user code called by this method and user code called by step handlers may experience apparently out of order values of the independent time variable. As an example, if the same user object implements both this  {@link EventHandler EventHandler} interface and the{@link org.apache.commons.math3.ode.sampling.FixedStepHandler FixedStepHandler}interface, a \u003cem\u003eforward\u003c/em\u003e integration may call its \u003ccode\u003eeventOccurred\u003c/code\u003e method with t \u003d 10 first and call its \u003ccode\u003ehandleStep\u003c/code\u003e method with t \u003d 9 afterwards. Such out of order calls are limited to the size of the integration step for  {@link org.apache.commons.math3.ode.sampling.StepHandler variable step handlers} andto the size of the fixed step for  {@link org.apache.commons.math3.ode.sampling.FixedStepHandler fixed step handlers}.\u003c/p\u003e\n * @param t current value of the independent \u003ci\u003etime\u003c/i\u003e variable\n * @param y array containing the current value of the state vector\n * @param increasing if true, the value of the switching function increaseswhen times increases around event (note that increase is measured with respect to physical time, not with respect to integration which may go backward in time)\n * @return indication of what the integrator should do next, thisvalue must be one of  {@link Action#STOP},  {@link Action#RESET_STATE}, {@link Action#RESET_DERIVATIVES} or {@link Action#CONTINUE}\n */\n","tf":{"freq":{"deriv":4,"accept":1,"variabl":3,"willb":1,"time":5,"forward":1,"event":7,"increaseswhen":1,"reset":3,"limit":1,"calledwith":1,"thisvalu":1,"apach":9,"apart":1,"will":6,"incas":1,"array":1,"increas":3,"backward":1,"common":9,"link":19,"next":2,"data":1,"use":1,"org":9,"indic":1,"current":2,"end":1,"note":1,"direct":1,"just":1,"may":4,"physic":1,"andto":1,"true":3,"back":1,"math":9,"either":1,"fact":1,"experi":1,"exampl":3,"intern":1,"method":11,"respect":2,"sampl":8,"integr":11,"last":5,"normal":2,"possibl":1,"must":1,"function":2,"independ":2,"exact":1,"interpol":3,"action":10,"taken":1,"throughout":1,"ode":9,"continu":2,"size":2,"sign":1,"flag":2,"updat":1,"contain":1,"comput":1,"make":1,"stop":2,"call":10,"allow":2,"one":2,"state":4,"schedul":3,"object":1,"navig":1,"afterward":2,"order":3,"hasfinish":1,"fix":5,"vector":1,"choos":1,"valu":4,"equat":2,"task":1,"paramet":1,"appar":1,"recomput":2,"handl":8,"pass":1,"around":1,"specif":1,"discontinu":1,"acknowledg":1,"integratorwil":1,"awar":1,"measur":1,"chang":1,"first":3,"user":4,"also":1,"step":29,"differenti":2,"occur":2,"handler":17},"maxFreq":29,"totalTerms":330},"loc":0}