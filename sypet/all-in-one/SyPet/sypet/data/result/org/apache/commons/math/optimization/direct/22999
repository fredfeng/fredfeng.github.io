{"id":22999,"className":"org.apache.commons.math.optimization.direct.DirectSearchOptimizer","methodName":"setStartConfiguration","signature":"\u003corg.apache.commons.math.optimization.direct.DirectSearchOptimizer: void setStartConfiguration(double[])\u003e","javadoc":"/** \n * Set start configuration for simplex. \u003cp\u003eThe start configuration for simplex is built from a box parallel to the canonical axes of the space. The simplex is the subset of vertices of a box parallel to the canonical axes. It is built as the path followed while traveling from one vertex of the box to the diagonally opposite vertex moving only along the box edges. The first vertex of the box will be located at the start point of the optimization.\u003c/p\u003e \u003cp\u003eAs an example, in dimension 3 a simplex has 4 vertices. Setting the steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }. The first vertex would be set to the start point at (1, 1, 1) and the last vertex would be set to the diagonally opposite vertex at (2, 11, 3).\u003c/p\u003e\n * @param steps steps along the canonical axes representing box edges,they may be negative but not null\n * @exception IllegalArgumentException if one step is null\n */\n","tf":{"freq":{"canon":3,"last":1,"edg":2,"one":2,"travel":1,"space":1,"diagon":2,"opposit":2,"subset":1,"simplex":5,"impli":1,"path":1,"along":2,"built":2,"axe":3,"move":1,"follow":1,"argument":1,"parallel":2,"except":2,"may":1,"locat":1,"optim":1,"vertic":2,"repres":1,"dimens":1,"illeg":1,"point":3,"configur":3,"start":7,"vertex":6,"exampl":1,"will":1,"negat":1,"box":6,"first":2,"step":4},"maxFreq":7,"totalTerms":78},"loc":16}