{"id":24845,"className":"org.apache.commons.math.util.MathUtils","methodName":"gcd","signature":"\u003corg.apache.commons.math.util.MathUtils: int gcd(int,int)\u003e","javadoc":"/** \n * \u003cp\u003e Gets the greatest common divisor of the absolute value of two numbers, using the \"binary gcd\" method which avoids division and modulo operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef Stein (1961). \u003c/p\u003e Special cases: \u003cul\u003e \u003cli\u003eThe invocations \u003ccode\u003egcd(Integer.MIN_VALUE, Integer.MIN_VALUE)\u003c/code\u003e, \u003ccode\u003egcd(Integer.MIN_VALUE, 0)\u003c/code\u003e and \u003ccode\u003egcd(0, Integer.MIN_VALUE)\u003c/code\u003e throw an \u003ccode\u003eArithmeticException\u003c/code\u003e, because the result would be 2^31, which is too large for an int value.\u003c/li\u003e \u003cli\u003eThe result of \u003ccode\u003egcd(x, x)\u003c/code\u003e, \u003ccode\u003egcd(0, x)\u003c/code\u003e and \u003ccode\u003egcd(x, 0)\u003c/code\u003e is the absolute value of \u003ccode\u003ex\u003c/code\u003e, except for the special cases above. \u003cli\u003eThe invocation \u003ccode\u003egcd(0, 0)\u003c/code\u003e is the only one which returns \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e\n * @param p any number\n * @param q any number\n * @return the greatest common divisor, never negative\n * @throws ArithmeticException if the result cannot be represented as anonnegative int value\n * @since 1.1\n */\n","tf":{"freq":{"result":3,"binari":1,"common":2,"one":1,"josef":1,"arithmet":2,"anonneg":1,"use":1,"knuth":1,"algorithm":2,"avoid":1,"stein":1,"oper":1,"valu":4,"except":3,"repres":1,"greatest":2,"number":3,"absolut":2,"divisor":2,"invoc":2,"two":1,"never":1,"larg":1,"modulo":1,"due":1,"negat":1,"method":1,"special":2,"integ":4,"gcd":9,"divis":1},"maxFreq":9,"totalTerms":60},"loc":59}