{"id":19308,"className":"org.apache.commons.math3.util.MathArrays","methodName":"convolve","signature":"\u003corg.apache.commons.math3.util.MathArrays: double[] convolve(double[],double[])\u003e","javadoc":"/** \n * Calculates the \u003ca href\u003d\"http://en.wikipedia.org/wiki/Convolution\"\u003e convolution\u003c/a\u003e between two sequences. \u003cp\u003e The solution is obtained via straightforward computation of the convolution sum (and not via FFT). Whenever the computation needs an element that would be located at an index outside the input arrays, the value is assumed to be zero.\n * @param x First sequence.Typically, this sequence will represent an input signal to a system.\n * @param h Second sequence.Typically, this sequence will represent the impulse response of the system.\n * @return the convolution of {@code x} and {@code h}. This array\u0027s length will be  {@code x.length + h.length - 1}.\n * @throws NullArgumentException if either {@code x} or {@code h} is {@code null}.\n * @throws NoDataException if either {@code x} or {@code h} is empty.\n * @since 3.3\n */\n","tf":{"freq":{"solut":1,"need":1,"via":2,"second":1,"data":1,"typic":2,"sum":1,"signal":1,"zero":1,"org":1,"sequenc":5,"length":3,"impuls":1,"valu":1,"wiki":1,"href":1,"argument":1,"whenev":1,"element":1,"except":2,"locat":1,"index":1,"assum":1,"respons":1,"repres":2,"calcul":1,"empti":1,"two":1,"convolut":4,"either":2,"system":2,"obtain":1,"input":2,"http":1,"outsid":1,"convolv":1,"will":3,"wikipedia":1,"comput":2,"first":1,"straightforward":1,"array":2},"maxFreq":5,"totalTerms":62},"loc":28}