{"id":19288,"className":"org.apache.commons.math3.util.MathArrays","methodName":"sortInPlace","signature":"\u003corg.apache.commons.math3.util.MathArrays: void sortInPlace(double[],double[][])\u003e","javadoc":"/** \n * Sort an array in ascending order in place and perform the same reordering of entries on other arrays. For example, if {@code x \u003d [3, 1, 2], y \u003d [1, 2, 3]} and {@code z \u003d [0, 5, 7]}, then {@code sortInPlace(x, y, z)} will update {@code x} to {@code [1, 2, 3]}, {@code y} to {@code [2, 3, 1]} and {@code z} to {@code [5, 7, 0]}.\n * @param x Array to be sorted and used as a pattern for permutationof the other arrays.\n * @param yList Set of arrays whose permutations of entries will followthose performed on  {@code x}.\n * @throws DimensionMismatchException if any {@code y} is not the samesize as  {@code x}.\n * @throws NullArgumentException if {@code x} or any {@code y} is null.\n * @since 3.0\n */\n","tf":{"freq":{"argument":1,"except":2,"sort":4,"whose":1,"permutationof":1,"entri":2,"permut":1,"use":1,"list":1,"perform":2,"dimens":1,"reorder":1,"followthos":1,"pattern":1,"order":1,"updat":1,"exampl":1,"will":2,"mismatch":1,"place":3,"ascend":1,"array":5},"maxFreq":5,"totalTerms":35},"loc":3}