{"id":16183,"className":"org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory","methodName":"quasiSigmoidDecay","signature":"\u003corg.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction quasiSigmoidDecay(double,double,long)\u003e","javadoc":"/** \n * Creates an sigmoid-like  {@code LearningFactorFunction function}. The function  {@code f} will have the following properties:\u003cul\u003e \u003cli\u003e {@code f(0) \u003d initValue}\u003c/li\u003e \u003cli\u003e {@code numCall} is the inflexion point\u003c/li\u003e\u003cli\u003e {@code slope \u003d f\u0027(numCall)}\u003c/li\u003e \u003c/ul\u003e\n * @param initValue Initial value, i.e.{@link LearningFactorFunction#value(long) value(0)}.\n * @param slope Value of the function derivative at {@code numCall}.\n * @param numCall Inflexion point.\n * @return the learning factor function.\n * @throws org.apache.commons.math3.exception.OutOfRangeException if  {@code initValue \u003c\u003d 0} or {@code initValue \u003e 1}.\n * @throws org.apache.commons.math3.exception.NumberIsTooLargeException if  {@code slope \u003e\u003d 0}.\n * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException if  {@code numCall \u003c\u003d 0}.\n */\n","tf":{"freq":{"call":5,"deriv":1,"common":3,"link":1,"org":3,"function":6,"rang":1,"slope":3,"valu":8,"initi":1,"follow":1,"except":6,"creat":1,"apach":3,"init":4,"learn":3,"number":1,"sigmoid":2,"factor":3,"like":1,"quasi":1,"math":3,"inflexion":2,"point":2,"num":5,"larg":1,"will":1,"properti":1,"strict":1,"posit":1,"decay":1},"maxFreq":8,"totalTerms":76},"loc":17}