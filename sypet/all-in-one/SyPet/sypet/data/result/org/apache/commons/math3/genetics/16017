{"id":16017,"className":"org.apache.commons.math3.genetics.GeneticAlgorithm","methodName":"nextGeneration","signature":"\u003corg.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.Population nextGeneration(org.apache.commons.math3.genetics.Population)\u003e","javadoc":"/** \n * Evolve the given population into the next generation. \u003cp\u003e \u003col\u003e \u003cli\u003eGet nextGeneration population to fill from \u003ccode\u003ecurrent\u003c/code\u003e generation, using its nextGeneration method\u003c/li\u003e \u003cli\u003eLoop until new generation is filled:\u003c/li\u003e \u003cul\u003e\u003cli\u003eApply configured SelectionPolicy to select a pair of parents from \u003ccode\u003ecurrent\u003c/code\u003e\u003c/li\u003e \u003cli\u003eWith probability \u003d  {@link #getCrossoverRate()}, apply configured  {@link CrossoverPolicy} to parents\u003c/li\u003e\u003cli\u003eWith probability \u003d  {@link #getMutationRate()}, apply configured  {@link MutationPolicy} to each of the offspring\u003c/li\u003e\u003cli\u003eAdd offspring individually to nextGeneration, space permitting\u003c/li\u003e \u003c/ul\u003e \u003cli\u003eReturn nextGeneration\u003c/li\u003e \u003c/ol\u003e\n * @param current the current population.\n * @return the population for the next generation.\n */\n","tf":{"freq":{"pair":1,"permit":1,"next":7,"link":4,"use":1,"space":1,"add":1,"popul":4,"rate":2,"given":1,"probabl":2,"loop":1,"current":4,"individu":1,"select":2,"fill":2,"parent":2,"polici":3,"crossov":2,"mutat":2,"configur":3,"appli":3,"evolv":1,"generat":9,"method":1,"offspr":2},"maxFreq":9,"totalTerms":63},"loc":34}