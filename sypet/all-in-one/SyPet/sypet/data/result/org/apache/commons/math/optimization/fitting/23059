{"id":23059,"className":"org.apache.commons.math.optimization.fitting.ParametricGaussianFunction","methodName":"gradient","signature":"\u003corg.apache.commons.math.optimization.fitting.ParametricGaussianFunction: double[] gradient(double,double[])\u003e","javadoc":"/** \n * Computes the gradient vector for a four variable version of the function where the parameters, \u003ctt\u003ea\u003c/tt\u003e, \u003ctt\u003eb\u003c/tt\u003e, \u003ctt\u003ec\u003c/tt\u003e, and \u003ctt\u003ed\u003c/tt\u003e, are considered the variables, not \u003ctt\u003ex\u003c/tt\u003e.  That is, instead of computing the gradient vector for the function \u003ctt\u003ef(x)\u003c/tt\u003e (which would just be the derivative of \u003ctt\u003ef(x)\u003c/tt\u003e with respect to \u003ctt\u003ex\u003c/tt\u003e since it\u0027s a one-dimensional function), computes the gradient vector for the function \u003ctt\u003ef(a, b, c, d) \u003d a + b*exp(-((x - c)^2 / (2*d^2)))\u003c/tt\u003e treating the specified \u003ctt\u003ex\u003c/tt\u003e as a constant. \u003cp\u003e The components of the computed gradient vector are the partial derivatives of \u003ctt\u003ef(a, b, c, d)\u003c/tt\u003e with respect to each variable. That is, the partial derivative of \u003ctt\u003ef(a, b, c, d)\u003c/tt\u003e with respect to \u003ctt\u003ea\u003c/tt\u003e, the partial derivative of \u003ctt\u003ef(a, b, c, d)\u003c/tt\u003e with respect to \u003ctt\u003eb\u003c/tt\u003e, the partial derivative of \u003ctt\u003ef(a, b, c, d)\u003c/tt\u003e with respect to \u003ctt\u003ec\u003c/tt\u003e, and the partial derivative of \u003ctt\u003ef(a, b, c, d)\u003c/tt\u003e with respect to \u003ctt\u003ed\u003c/tt\u003e.\n * @param x \u003ctt\u003ex\u003c/tt\u003e value to be used as constant in \u003ctt\u003ef(a, b, c,d)\u003c/tt\u003e\n * @param parameters values of \u003ctt\u003ea\u003c/tt\u003e, \u003ctt\u003eb\u003c/tt\u003e, \u003ctt\u003ec\u003c/tt\u003e, and\u003ctt\u003ed\u003c/tt\u003e for computation of gradient vector of \u003ctt\u003ef(a, b, c, d)\u003c/tt\u003e\n * @return gradient vector of \u003ctt\u003ef(a, b, c, d)\u003c/tt\u003e\n * @throws IllegalArgumentException if \u003ccode\u003eparameters\u003c/code\u003e is invalid asdetermined by  {@link #validateParameters(double[])}\n * @throws ZeroException if \u003ccode\u003eparameters\u003c/code\u003e values areinvalid as determined by  {@link #validateParameters(double[])}\n */\n","tf":{"freq":{"valid":2,"deriv":6,"link":2,"variabl":3,"one":1,"use":1,"zero":1,"consid":1,"function":4,"version":1,"specifi":1,"invalid":1,"vector":6,"valu":3,"four":1,"argument":1,"just":1,"asdetermin":1,"except":2,"constant":2,"areinvalid":1,"paramet":6,"partial":5,"illeg":1,"exp":1,"dimension":1,"compon":1,"determin":1,"instead":1,"comput":5,"respect":6,"gradient":7,"treat":1},"maxFreq":7,"totalTerms":78},"loc":15}