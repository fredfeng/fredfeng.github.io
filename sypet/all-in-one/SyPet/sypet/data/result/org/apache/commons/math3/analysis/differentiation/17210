{"id":17210,"className":"org.apache.commons.math3.analysis.differentiation.DSCompiler","methodName":"linearCombination","signature":"\u003corg.apache.commons.math3.analysis.differentiation.DSCompiler: void linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)\u003e","javadoc":"/** \n * Compute linear combination. The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n * @param a1 first scale factor\n * @param c1 first base (unscaled) component\n * @param offset1 offset of first operand in its array\n * @param a2 second scale factor\n * @param c2 second base (unscaled) component\n * @param offset2 offset of second operand in its array\n * @param a3 third scale factor\n * @param c3 third base (unscaled) component\n * @param offset3 offset of third operand in its array\n * @param a4 fourth scale factor\n * @param c4 fourth base (unscaled) component\n * @param offset4 offset of fourth operand in its array\n * @param result array where result must be stored (it may beone of the input arrays)\n * @param resultOffset offset of the result in its array\n */\n","tf":{"freq":{"result":4,"scale":4,"may":1,"linear":2,"store":1,"second":3,"deriv":1,"structur":1,"factor":4,"operand":4,"third":3,"must":1,"unscal":4,"fourth":3,"input":1,"compon":4,"beon":1,"combin":2,"will":1,"base":4,"comput":1,"offset":10,"built":1,"first":3,"array":7},"maxFreq":10,"totalTerms":71},"loc":9}