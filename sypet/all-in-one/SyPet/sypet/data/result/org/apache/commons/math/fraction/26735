{"id":26735,"className":"org.apache.commons.math.fraction.FractionFormat","methodName":"format","signature":"\u003corg.apache.commons.math.fraction.FractionFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)\u003e","javadoc":"/** \n * Formats an object and appends the result to a StringBuffer. \u003ccode\u003eobj\u003c/code\u003e must be either a {@link Fraction} object or a {@link Number} object.  Any other type ofobject will result in an  {@link IllegalArgumentException} being thrown.\n * @param obj the object to format.\n * @param toAppendTo where the text is to be appended\n * @param pos On input: an alignment field, if desired. On output: theoffsets of the alignment field\n * @return the value passed in as toAppendTo.\n * @see java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)\n * @throws IllegalArgumentException is \u003ccode\u003eobj\u003c/code\u003e is not a valid type.\n */\n","tf":{"freq":{"valid":1,"result":2,"link":3,"object":5,"desir":1,"type":2,"lang":2,"must":1,"pos":1,"buffer":2,"theoffset":1,"valu":1,"argument":2,"append":4,"fraction":1,"except":2,"thrown":1,"text":3,"align":2,"number":1,"format":5,"illeg":2,"pass":1,"field":3,"either":1,"input":1,"string":2,"will":1,"java":4,"obj":3,"ofobject":1,"output":1,"posit":1},"maxFreq":5,"totalTerms":64},"loc":21}