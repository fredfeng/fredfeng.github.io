{"id":22052,"className":"org.apache.commons.math3.complex.RootsOfUnity","methodName":"computeRoots","signature":"\u003corg.apache.commons.math3.complex.RootsOfUnity: void computeRoots(int)\u003e","javadoc":"/** \n * \u003cp\u003e Computes the  {@code n}-th roots of unity. The roots are stored in {@code omega[]}, such that  {@code omega[k] \u003d w ^ k}, where {@code k \u003d 0, ..., n - 1},  {@code w \u003d exp(2 * pi * i / n)} and{@code i \u003d sqrt(-1)}. \u003c/p\u003e \u003cp\u003e Note that  {@code n} can be positive of negative\u003c/p\u003e \u003cul\u003e \u003cli\u003e {@code abs(n)} is always the number of roots of unity.\u003c/li\u003e\u003cli\u003eIf  {@code n \u003e 0}, then the roots are stored in counter-clockwise order.\u003c/li\u003e \u003cli\u003eIf  {@code n \u003c 0}, then the roots are stored in clockwise order.\u003c/p\u003e \u003c/ul\u003e\n * @param n the (signed) number of roots of unity to be computed\n * @throws ZeroException if {@code n \u003d 0}\n */\n","tf":{"freq":{"except":1,"uniti":3,"store":3,"root":7,"alway":1,"counter":1,"sqrt":1,"number":2,"zero":1,"omega":2,"sign":1,"exp":1,"order":2,"clockwis":2,"comput":3,"negat":1,"ab":1,"posit":1,"note":1},"maxFreq":7,"totalTerms":35},"loc":35}