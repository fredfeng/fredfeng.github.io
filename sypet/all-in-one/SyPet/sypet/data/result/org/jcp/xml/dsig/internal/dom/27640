{"id":27640,"className":"org.jcp.xml.dsig.internal.dom.DOMReference","methodName":"DOMReference","signature":"\u003corg.jcp.xml.dsig.internal.dom.DOMReference: void DOMReference(java.lang.String,java.lang.String,javax.xml.crypto.dsig.DigestMethod,java.util.List,java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eReference\u003c/code\u003e from the specified parameters.\n * @param uri the URI (may be null)\n * @param type the type (may be null)\n * @param dm the digest method\n * @param transforms a list of {@link Transform}s. The list is defensively copied to protect against subsequent modification. May be \u003ccode\u003enull\u003c/code\u003e or empty.\n * @param id the reference ID (may be \u003ccode\u003enull\u003c/code\u003e)\n * @return a \u003ccode\u003eReference\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003edm\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @throws ClassCastException if any of the \u003ccode\u003etransforms\u003c/code\u003e arenot of type \u003ccode\u003eTransform\u003c/code\u003e\n */\n","tf":{"freq":{"except":2,"may":4,"creat":1,"link":1,"paramet":1,"digest":1,"list":2,"type":3,"uri":1,"copi":1,"empti":1,"defens":1,"specifi":1,"transform":4,"cast":1,"refer":4,"pointer":1,"method":1,"arenot":1,"subsequ":1,"modif":1},"maxFreq":4,"totalTerms":34},"loc":3}