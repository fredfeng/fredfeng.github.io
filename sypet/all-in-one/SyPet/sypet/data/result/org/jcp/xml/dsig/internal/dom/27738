{"id":27738,"className":"org.jcp.xml.dsig.internal.dom.DOMRetrievalMethod","methodName":"DOMRetrievalMethod","signature":"\u003corg.jcp.xml.dsig.internal.dom.DOMRetrievalMethod: void DOMRetrievalMethod(java.lang.String,java.lang.String,java.util.List)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eDOMRetrievalMethod\u003c/code\u003e containing the specified URIReference and List of Transforms.\n * @param uri the URI\n * @param type the type\n * @param transforms a list of {@link Transform}s. The list is defensively copied to prevent subsequent modification. May be \u003ccode\u003enull\u003c/code\u003e or empty.\n * @throws IllegalArgumentException if the format of \u003ccode\u003euri\u003c/code\u003e isinvalid, as specified by Reference\u0027s URI attribute in the W3C specification for XML-Signature Syntax and Processing\n * @throws NullPointerException if \u003ccode\u003euriReference\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e\n * @throws ClassCastException if \u003ccode\u003etransforms\u003c/code\u003e contains anyentries that are not of type  {@link Transform}\n */\n","tf":{"freq":{"link":2,"type":3,"signatur":1,"copi":1,"specifi":2,"defens":1,"transform":5,"mretriev":1,"attribut":1,"refer":2,"subsequ":1,"argument":1,"may":1,"except":3,"creat":1,"irefer":1,"list":3,"prevent":1,"format":1,"uri":3,"illeg":1,"empti":1,"process":1,"syntax":1,"specif":1,"cast":1,"anyentri":1,"retriev":1,"contain":2,"isinvalid":1,"pointer":1,"method":2,"modif":1},"maxFreq":5,"totalTerms":50},"loc":27}