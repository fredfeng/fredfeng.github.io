{"id":27577,"className":"org.ietf.jgss.GSSContext","methodName":"wrap","signature":"\u003corg.ietf.jgss.GSSContext: void wrap(java.io.InputStream,java.io.OutputStream,org.ietf.jgss.MessageProp)\u003e","javadoc":"/** \n * Applies per-message security services over the established security context using streams. The method will return a token with the application supplied data and a cryptographic MIC over it. The data may be encrypted if confidentiality (privacy) was requested. This method is equivalent to the byte array based  {@link #wrap(byte[],int,int,MessageProp) wrap} method.\u003cp\u003eThe application will be responsible for sending the token to the peer.  Typically, the application would ensure this by calling the   {@link java.io.OutputStream#flush() flush}method on an \u003ccode\u003eOutputStream\u003c/code\u003e that encapsulates the connection between the two peers.\u003cp\u003e The MessageProp object is instantiated by the application and used to specify a QOP value which selects cryptographic algorithms, and a privacy service to optionally encrypt the message.  The underlying mechanism that is used in the call may not be able to provide the privacy service.  It sets the actual privacy service that it does provide in this MessageProp object which the caller should then query upon return.  If the mechanism is not able to provide the requested QOP, it throws a GSSException with the BAD_QOP code.\u003cp\u003e Since some application-level protocols may wish to use tokens emitted by wrap to provide \"secure framing\", implementations should support the wrapping of zero-length messages.\u003cp\u003e\n * @param inStream an InputStream containing the application data to beprotected. All of the data that is available in inStream is used.\n * @param outStream an OutputStream to write the protected messageto.\n * @param msgProp instance of MessageProp that is used by theapplication to set the desired QOP and privacy state. Set the desired QOP to 0 to request the default QOP. Upon return from this method, this object will contain the the actual privacy state that was applied to the message by the underlying mechanism.\n * @throws GSSException containing the followingmajor error codes: {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED}, {@link GSSException#BAD_QOP GSSException.BAD_QOP}, {@link GSSException#FAILURE GSSException.FAILURE}\n */\n","tf":{"freq":{"send":1,"wish":1,"instanti":1,"servic":4,"sexcept":8,"abl":2,"desir":2,"zero":1,"theapplic":1,"specifi":1,"level":1,"equival":1,"encrypt":2,"cryptograph":2,"request":3,"option":1,"wrap":5,"support":1,"respons":1,"beprotect":1,"select":1,"avail":1,"msg":1,"provid":4,"instanc":1,"queri":1,"input":1,"appli":2,"frame":1,"contain":3,"will":3,"output":3,"upon":2,"array":1,"caller":1,"call":2,"stream":8,"connect":1,"link":5,"state":2,"data":4,"typic":1,"use":6,"object":3,"applic":6,"ensur":1,"algorithm":1,"token":3,"privaci":6,"followingmajor":1,"write":1,"length":1,"valu":1,"messageto":1,"peer":2,"emit":1,"protocol":1,"confidenti":1,"may":3,"error":1,"messag":8,"establish":1,"prop":5,"suppli":1,"two":1,"secur":3,"flush":2,"per":1,"mechan":3,"context":1,"base":1,"encapsul":1,"actual":2,"method":5,"java":1},"maxFreq":8,"totalTerms":165},"loc":0}