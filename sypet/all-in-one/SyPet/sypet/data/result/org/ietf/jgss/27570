{"id":27570,"className":"org.ietf.jgss.GSSContext","methodName":"initSecContext","signature":"\u003corg.ietf.jgss.GSSContext: int initSecContext(java.io.InputStream,java.io.OutputStream)\u003e","javadoc":"/** \n * Called by the context initiator to start the context creation phase and process any tokens generated by the peer\u0027s \u003ccode\u003eacceptSecContext\u003c/code\u003e method using streams. This method may write an output token to the \u003ccode\u003eOutpuStream\u003c/code\u003e, which the application will need to send to the peer for processing by its \u003ccode\u003eacceptSecContext\u003c/code\u003e call. Typically, the application would ensure this by calling the   {@link java.io.OutputStream#flush() flush}method on an \u003ccode\u003eOutputStream\u003c/code\u003e that encapsulates the connection between the two peers. The application can determine if a token is written to the OutputStream from the return value of this method. A return value of \u003ccode\u003e0\u003c/code\u003e indicates that no token was written. The application can call {@link #isEstablished() isEstablished} to determine if the contextestablishment phase is complete on this side of the context. A return  value of \u003ccode\u003efalse\u003c/code\u003e from \u003ccode\u003eisEstablished\u003c/code\u003e indicates that more tokens are expected to be supplied to \u003ccode\u003einitSecContext\u003c/code\u003e. Upon completion of the context establishment, the available context options may be queried through the get methods.\u003cp\u003e Note that it is possible that the \u003ccode\u003einitSecContext\u003c/code\u003e method return a token for the peer, and \u003ccode\u003eisEstablished\u003c/code\u003e return \u003ccode\u003etrue\u003c/code\u003e also. This indicates that the token needs to be sent to the peer, but the local end of the context is now fully established.\u003cp\u003e The GSS-API authentication tokens contain a definitive start and end. This method will attempt to read one of these tokens per invocation, and may block on the stream if only part of the token is available.  In all other respects this method is equivalent to the byte array based  {@link #initSecContext(byte[],int,int) initSecContext}.\u003cp\u003e Some mechanism providers might require that the caller be granted permission to initiate a security context. A failed permission check might cause a  {@link java.lang.SecurityException SecurityException}to be thrown from this method.\u003cp\u003e The following example code demonstrates how this method might be used:\u003cp\u003e \u003cpre\u003e InputStream is ... OutputStream os ... GSSContext context ... // Loop while there is still a token to be processed while (!context.isEstablished()) { context.initSecContext(is, os); // send output token if generated os.flush(); } \u003c/pre\u003e\n * @return the number of bytes written to the OutputStream as part of thetoken to be sent to the peer. A value of 0 indicates that no token needs to be sent.\n * @param inStream an InputStream that contains the token generated bythe peer. This parameter is ignored on the first call since no token has been or will be received from the peer at that point.\n * @param outStream an OutputStream where the output token will bewritten. During the final stage of context establishment, there may be no bytes written.\n * @throws GSSException containing the followingmajor error codes: {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}, {@link GSSException#BAD_MIC GSSException.BAD_MIC}, {@link GSSException#NO_CRED GSSException.NO_CRED}, {@link GSSException#CREDENTIALS_EXPIRED GSSException.CREDENTIALS_EXPIRED}, {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS}, {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN}, {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN}, {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}, {@link GSSException#BAD_MECH GSSException.BAD_MECH}, {@link GSSException#FAILURE GSSException.FAILURE}\n */\n","tf":{"freq":{"need":3,"accept":2,"scontext":1,"expect":1,"fail":1,"byth":1,"option":1,"thetoken":1,"ignor":1,"avail":2,"number":1,"provid":1,"invoc":1,"queri":1,"start":2,"now":1,"will":4,"upon":1,"array":1,"caller":1,"creation":1,"might":3,"stream":13,"outpu":1,"link":14,"typic":1,"use":2,"block":1,"applic":4,"ensur":1,"bewritten":1,"authent":1,"indic":4,"side":1,"token":16,"followingmajor":1,"written":4,"write":1,"loop":1,"initi":2,"note":1,"end":2,"complet":2,"may":4,"establish":8,"true":1,"receiv":1,"fulli":1,"process":3,"point":1,"per":1,"mechan":1,"encapsul":1,"base":1,"exampl":1,"method":10,"part":2,"respect":1,"fals":1,"send":2,"grant":1,"possibl":1,"sexcept":21,"sent":3,"requir":1,"equival":1,"permiss":2,"follow":1,"except":2,"thrown":1,"init":6,"input":2,"determin":2,"contain":3,"definit":1,"demonstr":1,"output":9,"phase":2,"attempt":1,"call":5,"connect":1,"one":1,"stage":1,"lang":1,"contextestablish":1,"read":1,"valu":4,"peer":8,"error":1,"check":1,"paramet":1,"suppli":1,"still":1,"two":1,"flush":3,"secur":3,"caus":1,"sec":8,"pre":2,"generat":3,"context":19,"java":2,"local":1,"first":1,"also":1},"maxFreq":21,"totalTerms":280},"loc":0}