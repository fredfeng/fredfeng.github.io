{"id":27571,"className":"org.ietf.jgss.GSSContext","methodName":"acceptSecContext","signature":"\u003corg.ietf.jgss.GSSContext: byte[] acceptSecContext(byte[],int,int)\u003e","javadoc":"/** \n * Called by the context acceptor upon receiving a token from the peer. This method may return an output token which the application will need to send to the peer for further processing by its \u003ccode\u003einitSecContext\u003c/code\u003e call.\u003cp\u003e The application can call  {@link #isEstablished() isEstablished} todetermine if the context establishment phase is complete for this peer.  A return value of \u003ccode\u003efalse\u003c/code\u003e from \u003ccode\u003eisEstablished\u003c/code\u003e indicates that more tokens are expected to be supplied to this method.    Upon completion of the context establishment, the available context options may be queried through the get methods.\u003cp\u003e Note that it is possible that \u003ccode\u003eacceptSecContext\u003c/code\u003e return a token for the peer, and \u003ccode\u003eisEstablished\u003c/code\u003e return \u003ccode\u003etrue\u003c/code\u003e also.  This indicates that the token needs to be sent to the peer, but the local end of the context is now fully established.\u003cp\u003e Some mechanism providers might require that the caller be granted permission to accept a security context. A failed permission check might cause a  {@link java.lang.SecurityException SecurityException}to be thrown from this method.\u003cp\u003e The following example code demonstrates how this method might be used:\u003cp\u003e \u003cpre\u003e byte[] inToken; byte[] outToken; GSSContext context ... // Loop while there is still a token to be processed while (!context.isEstablished()) { inToken \u003d readToken(); outToken \u003d context.acceptSecContext(inToken, 0, inToken.length); // send output token if generated if (outToken !\u003d null) sendToken(outToken); } \u003c/pre\u003e\n * @return a byte[] containing the token to be sent to thepeer. \u003ccode\u003enull\u003c/code\u003e indicates that no token is generated.\n * @param inToken token generated by the peer.\n * @param offset the offset within the inToken where the token begins.\n * @param len the length of the token.\n * @throws GSSException containing the followingmajor error codes: {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}, {@link GSSException#BAD_MIC GSSException.BAD_MIC}, {@link GSSException#NO_CRED GSSException.NO_CRED}, {@link GSSException#CREDENTIALS_EXPIRED GSSException.CREDENTIALS_EXPIRED}, {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS}, {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN}, {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN}, {@link GSSException#BAD_MECH GSSException.BAD_MECH}, {@link GSSException#FAILURE GSSException.FAILURE}\n */\n","tf":{"freq":{"need":2,"fals":1,"send":3,"grant":1,"accept":4,"scontext":1,"possibl":1,"sexcept":19,"expect":1,"sent":2,"todetermin":1,"requir":1,"fail":1,"permiss":2,"option":1,"follow":1,"thrown":1,"except":2,"init":1,"avail":1,"provid":1,"thepeer":1,"queri":1,"now":1,"contain":2,"will":1,"demonstr":1,"output":2,"phase":1,"upon":2,"caller":1,"call":3,"might":3,"link":11,"use":1,"lang":1,"applic":2,"acceptor":1,"indic":3,"token":24,"followingmajor":1,"length":2,"loop":1,"read":1,"valu":1,"offset":2,"note":1,"end":1,"complet":2,"peer":6,"may":2,"error":1,"check":1,"establish":8,"true":1,"still":1,"receiv":1,"suppli":1,"fulli":1,"len":1,"begin":1,"process":2,"caus":1,"secur":3,"pre":2,"sec":4,"mechan":1,"generat":3,"exampl":1,"context":13,"java":1,"method":5,"within":1,"local":1,"also":1},"maxFreq":24,"totalTerms":186},"loc":0}