{"id":11379,"className":"org.xml.sax.ext.EntityResolver2","methodName":"getExternalSubset","signature":"\u003corg.xml.sax.ext.EntityResolver2: org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Allows applications to provide an external subset for documents that don\u0027t explicitly define one.  Documents with DOCTYPE declarations that omit an external subset can thus augment the declarations available for validation, entity processing, and attribute processing (normalization, defaulting, and reporting types including ID). This augmentation is reported through the  {@link LexicalHandler#startDTD startDTD()} method as ifthe document text had originally included the external subset; this callback is made before any internal subset data or errors are reported.\u003c/p\u003e \u003cp\u003eThis method can also be used with documents that have no DOCTYPE declaration.  When the root element is encountered, but no DOCTYPE declaration has been seen, this method is invoked.  If it returns a value for the external subset, that root element is declared to be the root element, giving the effect of splicing a DOCTYPE declaration at the end the prolog of a document that could not otherwise be valid.  The sequence of parser callbacks in that case logically resembles this:\u003c/p\u003e \u003cpre\u003e ... comments and PIs from the prolog (as usual) startDTD (\"rootName\", source.getPublicId (), source.getSystemId ()); startEntity (\"[dtd]\"); ... declarations, comments, and PIs from the external subset endEntity (\"[dtd]\"); endDTD (); ... then the rest of the document (as usual) startElement (..., \"rootName\", ...); \u003c/pre\u003e \u003cp\u003eNote that the InputSource gets no further resolution. Implementations of this method may wish to invoke {@link #resolveEntity resolveEntity()} to gain benefits such as useof local caches of DTD entities.  Also, this method will never be used by a (non-validating) processor that is not including external parameter entities. \u003c/p\u003e \u003cp\u003eUses for this method include facilitating data validation when interoperating with XML processors that would always require undesirable network accesses for external entities, or which for other reasons adopt a \"no DTDs\" policy. Non-validation motives include forcing documents to include DTDs so that attributes are handled consistently. For example, an XPath processor needs to know which attibutes have type \"ID\" before it can process a widely used type of reference.\u003c/p\u003e \u003cp\u003e\u003cstrong\u003eWarning:\u003c/strong\u003e Returning an external subset modifies the input document.  By providing definitions for general entities, it can make a malformed document appear to be well formed. \u003c/p\u003e\n * @param name Identifies the document root element.  This name comesfrom a DOCTYPE declaration (where available) or from the actual root element.\n * @param baseURI The document\u0027s base URI, serving as an additionalhint for selecting the external subset.  This is always an absolute URI, unless it is null because the XMLReader was given an InputSource without one.\n * @return An InputSource object describing the new external subsetto be used by the parser, or null to indicate that no external subset is provided.\n * @exception SAXException Any SAX exception, possibly wrappinganother exception.\n * @exception IOException Probably indicating a failure to createa new InputStream or Reader, or an illegal URL.\n */\n","tf":{"freq":{"need":1,"appear":1,"benefit":1,"reason":1,"augment":2,"given":1,"refer":1,"sequenc":1,"adopt":1,"createa":1,"report":3,"subsetto":1,"processor":3,"element":6,"form":1,"invok":2,"alway":2,"describ":1,"resolv":2,"avail":2,"useof":1,"absolut":1,"wide":1,"resembl":1,"without":1,"provid":3,"non":2,"system":1,"start":5,"explicit":1,"wrappinganoth":1,"will":1,"additionalhint":1,"sourc":5,"xexcept":1,"comment":2,"stream":1,"give":1,"link":2,"data":2,"made":1,"use":5,"applic":1,"xpath":1,"resolut":1,"document":11,"attribut":2,"indic":2,"unless":1,"extern":12,"undesir":1,"forc":1,"end":3,"note":1,"usual":2,"may":1,"ifth":1,"failur":1,"seen":1,"access":1,"gain":1,"process":3,"encount":1,"omit":1,"base":2,"intern":1,"callback":2,"exampl":1,"method":6,"attibut":1,"motiv":1,"splice":1,"root":7,"wish":1,"normal":1,"possibl":1,"facilit":1,"type":3,"lexic":1,"requir":1,"probabl":1,"dtd":2,"interoper":1,"except":5,"text":1,"consist":1,"select":1,"polici":1,"logic":1,"prolog":2,"malform":1,"input":5,"reader":1,"entiti":9,"strong":2,"definit":1,"rest":1,"make":1,"parser":2,"lreader":1,"warn":1,"otherwis":1,"defin":1,"valid":5,"allow":1,"one":2,"identifi":1,"object":1,"well":1,"network":1,"subset":10,"declar":8,"name":4,"serv":1,"valu":1,"includ":6,"error":1,"thus":1,"origin":1,"paramet":1,"cach":1,"illeg":1,"know":1,"general":1,"handl":1,"never":1,"comesfrom":1,"effect":1,"pre":2,"modifi":1,"actual":1,"pis":2,"local":1,"also":2,"handler":1},"maxFreq":12,"totalTerms":262},"loc":0}