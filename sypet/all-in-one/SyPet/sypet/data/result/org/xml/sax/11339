{"id":11339,"className":"org.xml.sax.XMLReader","methodName":"parse","signature":"\u003corg.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)\u003e","javadoc":"/** \n * Parse an XML document. \u003cp\u003eThe application can use this method to instruct the XML reader to begin parsing an XML document from any valid input source (a character stream, a byte stream, or a URI).\u003c/p\u003e \u003cp\u003eApplications may not invoke this method while a parse is in progress (they should create a new XMLReader instead for each nested XML document).  Once a parse is complete, an application may reuse the same XMLReader object, possibly with a different input source. Configuration of the XMLReader object (such as handler bindings and values established for feature flags and properties) is unchanged by completion of a parse, unless the definition of that aspect of the configuration explicitly specifies other behavior. (For example, feature flags or properties exposing characteristics of the document being parsed.) \u003c/p\u003e \u003cp\u003eDuring the parse, the XMLReader will provide information about the XML document through the registered event handlers.\u003c/p\u003e \u003cp\u003eThis method is synchronous: it will not return until parsing has ended.  If a client application wants to terminate parsing early, it should throw an exception.\u003c/p\u003e\n * @param input The input source for the top-level of theXML document.\n * @exception org.xml.sax.SAXException Any SAX exception, possiblywrapping another exception.\n * @exception java.io.IOException An IO exception from the parser,possibly from a byte stream or character stream supplied by the application.\n * @see org.xml.sax.InputSource\n * @see #parse(java.lang.String)\n * @see #setEntityResolver\n * @see #setDTDHandler\n * @see #setContentHandler\n * @see #setErrorHandler\n */\n","tf":{"freq":{"progress":1,"possiblywrap":1,"client":1,"possibl":2,"earli":1,"reus":1,"specifi":1,"level":1,"instruct":1,"event":1,"except":7,"unchang":1,"creat":1,"charact":2,"invok":1,"dhandler":1,"resolv":1,"xml":2,"provid":1,"content":1,"inform":1,"input":5,"configur":2,"reader":1,"flag":2,"aspect":1,"entiti":1,"explicit":1,"definit":1,"will":2,"sax":2,"sourc":4,"properti":2,"xexcept":1,"parser":1,"lreader":4,"characterist":1,"valid":1,"stream":4,"behavior":1,"use":1,"anoth":1,"object":2,"org":2,"lang":1,"applic":5,"document":6,"unless":1,"regist":1,"valu":1,"expos":1,"want":1,"end":1,"top":1,"complet":2,"may":2,"error":1,"nest":1,"establish":1,"suppli":1,"begin":1,"differ":1,"termin":1,"string":1,"instead":1,"featur":2,"exampl":1,"java":2,"method":3,"pars":11,"bind":1,"handler":4},"maxFreq":11,"totalTerms":129},"loc":0}