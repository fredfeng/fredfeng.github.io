{"id":11327,"className":"org.xml.sax.XMLReader","methodName":"getFeature","signature":"\u003corg.xml.sax.XMLReader: boolean getFeature(java.lang.String)\u003e","javadoc":"/** \n * Look up the value of a feature flag. \u003cp\u003eThe feature name is any fully-qualified URI.  It is possible for an XMLReader to recognize a feature name but temporarily be unable to return its value. Some feature values may be available only in specific contexts, such as before, during, or after a parse. Also, some feature values may not be programmatically accessible. (In the case of an adapter for SAX1  {@link Parser}, there is no implementation-independent way to expose whether the underlying parser is performing validation, expanding external entities, and so forth.) \u003c/p\u003e \u003cp\u003eAll XMLReaders are required to recognize the http://xml.org/sax/features/namespaces and the http://xml.org/sax/features/namespace-prefixes feature names.\u003c/p\u003e \u003cp\u003eTypical usage is something like this:\u003c/p\u003e \u003cpre\u003e XMLReader r \u003d new MySAXDriver(); // try to activate validation try { r.setFeature(\"http://xml.org/sax/features/validation\", true); } catch (SAXException e) { System.err.println(\"Cannot activate validation.\"); } // register event handlers r.setContentHandler(new MyContentHandler()); r.setErrorHandler(new MyErrorHandler()); // parse the first document try { r.parse(\"http://www.foo.com/mydoc.xml\"); } catch (IOException e) { System.err.println(\"I/O exception reading XML document\"); } catch (SAXException e) { System.err.println(\"XML exception reading document.\"); } \u003c/pre\u003e \u003cp\u003eImplementors are free (and encouraged) to invent their own features, using names built on their own URIs.\u003c/p\u003e\n * @param name The feature name, which is a fully-qualified URI.\n * @return The current value of the feature (true or false).\n * @exception org.xml.sax.SAXNotRecognizedException If the featurevalue can\u0027t be assigned or retrieved.\n * @exception org.xml.sax.SAXNotSupportedException When theXMLReader recognizes the feature name but cannot determine its value at this time.\n * @see #setFeature\n */\n","tf":{"freq":{"fals":1,"forth":1,"assign":1,"com":1,"programmat":1,"possibl":1,"foo":1,"perform":1,"mydoc":1,"whether":1,"time":1,"free":1,"independ":1,"namespac":2,"requir":1,"println":3,"event":1,"encourag":1,"expand":1,"recogn":4,"implementor":1,"except":7,"support":1,"temporarili":1,"avail":1,"xml":6,"like":1,"content":2,"system":3,"flag":1,"entiti":1,"http":4,"determin":1,"prefix":1,"sax":5,"xexcept":2,"parser":2,"lreader":4,"valid":4,"link":1,"www":1,"typic":1,"use":1,"way":1,"adapt":1,"org":5,"activ":2,"someth":1,"document":3,"invent":1,"extern":1,"name":7,"current":1,"read":2,"regist":1,"valu":6,"expos":1,"featurevalu":1,"built":1,"look":1,"may":2,"error":2,"true":2,"fulli":2,"access":1,"unabl":1,"specif":1,"retriev":1,"pre":2,"err":3,"context":1,"featur":16,"xdriver":1,"usag":1,"first":1,"also":1,"pars":3,"qualifi":2,"xnot":2,"handler":5},"maxFreq":16,"totalTerms":164},"loc":0}