{"id":11304,"className":"org.xml.sax.ContentHandler","methodName":"characters","signature":"\u003corg.xml.sax.ContentHandler: void characters(char[],int,int)\u003e","javadoc":"/** \n * Receive notification of character data. \u003cp\u003eThe Parser will call this method to report each chunk of character data.  SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information.\u003c/p\u003e \u003cp\u003eThe application must not attempt to read from the array outside of the specified range.\u003c/p\u003e \u003cp\u003eIndividual characters may consist of more than one Java \u003ccode\u003echar\u003c/code\u003e value.  There are two important cases where this happens, because characters can\u0027t be represented in just sixteen bits. In one case, characters are represented in a \u003cem\u003eSurrogate Pair\u003c/em\u003e, using two special Unicode values. Such characters are in the so-called \"Astral Planes\", with a code point above U+FFFF.  A second case involves composite characters, such as a base character combining with one or more accent characters. \u003c/p\u003e \u003cp\u003e Your code should not assume that algorithms using \u003ccode\u003echar\u003c/code\u003e-at-a-time idioms will be working in character units; in some cases they will split characters.  This is relevant wherever XML permits arbitrary characters, such as attribute values, processing instruction data, and comments as well as in data reported from this method.  It\u0027s also generally relevant whenever Java code manipulates internationalized text; the issue isn\u0027t unique to XML.\u003c/p\u003e \u003cp\u003eNote that some parsers will report whitespace in element content using the  {@link #ignorableWhitespace ignorableWhitespace}method rather than this one (validating parsers \u003cem\u003emust\u003c/em\u003e do so).\u003c/p\u003e\n * @param ch the characters from the XML document\n * @param start the start position in the array\n * @param length the number of characters to read from the array\n * @throws org.xml.sax.SAXException any SAX exception, possiblywrapping another exception\n * @see #ignorableWhitespace\n * @see org.xml.sax.Locator\n */\n","tf":{"freq":{"chunk":3,"singl":2,"idiom":1,"specifi":1,"time":1,"wherev":1,"rang":1,"event":1,"report":3,"internation":1,"happen":1,"element":1,"ignor":3,"surrog":1,"charact":17,"involv":1,"number":1,"provid":1,"content":1,"bit":1,"start":2,"will":4,"sax":2,"split":2,"comment":1,"xexcept":1,"posit":1,"array":3,"pair":1,"link":1,"data":5,"use":4,"anoth":1,"org":2,"issu":1,"applic":1,"algorithm":1,"document":1,"attribut":1,"extern":1,"length":1,"rather":1,"note":1,"individu":1,"just":1,"whenev":1,"may":3,"assum":1,"repres":2,"come":1,"receiv":1,"contigu":1,"process":1,"point":1,"plane":1,"unicod":1,"base":1,"method":3,"manipul":1,"possiblywrap":1,"second":1,"relev":2,"permit":1,"must":3,"notif":1,"arbitrari":1,"uniqu":1,"instruct":1,"combin":1,"howev":1,"work":1,"except":2,"text":1,"consist":1,"composit":1,"xml":2,"inform":1,"entiti":1,"outsid":1,"parser":4,"attempt":1,"call":2,"valid":1,"one":4,"well":1,"read":2,"valu":3,"accent":1,"sixteen":1,"locat":2,"astral":1,"whitespac":4,"sever":1,"general":1,"two":2,"unit":1,"special":1,"java":2,"also":1},"maxFreq":17,"totalTerms":164},"loc":0}