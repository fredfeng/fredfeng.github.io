{"id":11475,"className":"org.xml.sax.helpers.NamespaceSupport","methodName":"declarePrefix","signature":"\u003corg.xml.sax.helpers.NamespaceSupport: boolean declarePrefix(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Declare a Namespace prefix.  All prefixes must be declared before they are referenced.  For example, a SAX driver (parser) would scan an element\u0027s attributes in two passes:  first for namespace declarations, then a second pass using  {@link #processName processName()} tointerpret prefixes against (potentially redefined) prefixes. \u003cp\u003eThis method declares a prefix in the current Namespace context; the prefix will remain in force until this context is popped, unless it is shadowed in a descendant context.\u003c/p\u003e \u003cp\u003eTo declare the default element Namespace, use the empty string as the prefix.\u003c/p\u003e \u003cp\u003eNote that there is an asymmetry in this library:  {@link #getPrefix getPrefix} will not return the \"\" prefix,even if you have declared a default element namespace. To check for a default namespace, you have to look it up explicitly using  {@link #getURI getURI}. This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed.\u003c/p\u003e\n * @param prefix The prefix to declare, or the empty string toindicate the default element namespace.  This may never have the value \"xml\" or \"xmlns\".\n * @param uri The Namespace URI to associate with the prefix.\n * @return true if the prefix was legal, false otherwise\n * @see #processName\n * @see #getURI\n * @see #getPrefix\n */\n","tf":{"freq":{"fals":1,"second":1,"pop":1,"must":1,"referenc":1,"toindic":1,"namespac":8,"shadow":1,"element":4,"easier":1,"xml":1,"xmlns":1,"uri":1,"asymmetri":2,"explicit":1,"prefix":18,"will":2,"even":1,"parser":1,"make":1,"otherwis":1,"legal":1,"allow":1,"link":3,"use":3,"attribut":2,"declar":8,"unless":1,"associ":1,"name":4,"current":1,"valu":1,"driver":1,"tointerpret":1,"forc":1,"exist":1,"note":1,"look":2,"may":1,"check":1,"true":1,"librari":1,"potenti":1,"pass":2,"empti":2,"process":3,"redefin":1,"two":1,"never":1,"remain":1,"string":2,"exampl":1,"context":3,"method":1,"scan":1,"descend":1,"first":1},"maxFreq":18,"totalTerms":109},"loc":8}