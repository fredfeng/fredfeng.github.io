{"id":11139,"className":"org.w3c.dom.ranges.Range","methodName":"compareBoundaryPoints","signature":"\u003corg.w3c.dom.ranges.Range: short compareBoundaryPoints(short,org.w3c.dom.ranges.Range)\u003e","javadoc":"/** \n * Compare the boundary-points of two Ranges in a document.\n * @param how A code representing the type of comparison, as definedabove.\n * @param sourceRange The \u003ccode\u003eRange\u003c/code\u003e on which this current\u003ccode\u003eRange\u003c/code\u003e is compared to.\n * @return  -1, 0 or 1 depending on whether the correspondingboundary-point of the Range is respectively before, equal to, or after the corresponding boundary-point of \u003ccode\u003esourceRange\u003c/code\u003e.\n * @exception DOMException WRONG_DOCUMENT_ERR: Raised if the two Ranges are not in the same Document or DocumentFragment. \u003cbr\u003eINVALID_STATE_ERR: Raised if \u003ccode\u003edetach()\u003c/code\u003e has already been invoked on this object.\n */\n","tf":{"freq":{"mexcept":1,"correspond":1,"object":1,"type":1,"whether":1,"definedabov":1,"document":3,"rais":2,"rang":7,"current":1,"correspondingboundari":1,"fragment":1,"except":1,"detach":1,"repres":1,"invok":1,"depend":1,"equal":1,"comparison":1,"two":2,"point":4,"sourc":2,"alreadi":1,"boundari":3,"compar":3,"respect":1},"maxFreq":7,"totalTerms":44},"loc":0}