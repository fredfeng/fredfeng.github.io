{"id":11193,"className":"org.w3c.dom.ls.LSParserFilter","methodName":"acceptNode","signature":"\u003corg.w3c.dom.ls.LSParserFilter: short acceptNode(org.w3c.dom.Node)\u003e","javadoc":"/** \n * This method will be called by the parser at the completion of the parsing of each node. The node and all of its descendants will exist and be complete. The parent node will also exist, although it may be incomplete, i.e. it may have additional children that have not yet been parsed. Attribute nodes are never passed to this function. \u003cbr\u003eFrom within this method, the new node may be freely modified - children may be added or removed, text nodes modified, etc. The state of the rest of the document outside this node is not defined, and the affect of any attempt to navigate to, or to modify any other part of the document is undefined. \u003cbr\u003eFor validating parsers, the checks are made on the original document, before any modification by the filter. No validity checks are made on any document modifications made by the filter. \u003cbr\u003eIf this new node is rejected, the parser might reuse the new node and any of its descendants.\n * @param nodeArg The newly constructed element. At the time this methodis called, the element is complete - it has all of its children (and their children, recursively) and attributes, and is attached as a child to its parent.\n * @return \u003cul\u003e \u003cli\u003e \u003ccode\u003eFILTER_ACCEPT\u003c/code\u003e if this \u003ccode\u003eNode\u003c/code\u003e should be included in the DOM document being built. \u003c/li\u003e \u003cli\u003e \u003ccode\u003eFILTER_REJECT\u003c/code\u003e if the \u003ccode\u003eNode\u003c/code\u003e and all of its children should be rejected. \u003c/li\u003e \u003cli\u003e \u003ccode\u003eFILTER_SKIP\u003c/code\u003e if the \u003ccode\u003eNode\u003c/code\u003e should be skipped and the \u003ccode\u003eNode\u003c/code\u003e should be replaced by all the children of the \u003ccode\u003eNode\u003c/code\u003e. \u003c/li\u003e \u003cli\u003e \u003ccode\u003eFILTER_INTERRUPT\u003c/code\u003e if the filter wants to stop the processing of the document. Interrupting the processing of the document does no longer guarantee that the resulting DOM tree is XML well-formed. The \u003ccode\u003eNode\u003c/code\u003e is accepted and will be the last completely parsed node. \u003c/li\u003e \u003c/ul\u003e\n */\n","tf":{"freq":{"incomplet":1,"last":1,"accept":2,"etc":1,"skip":1,"reus":1,"function":1,"arg":1,"time":1,"although":1,"tree":1,"longer":1,"methodi":1,"undefin":1,"element":2,"text":1,"form":1,"remov":1,"parent":2,"freeli":1,"newli":1,"node":18,"outsid":1,"will":4,"rest":1,"parser":3,"recurs":1,"filter":3,"attempt":1,"result":1,"stop":1,"call":2,"defin":1,"valid":2,"might":1,"reject":2,"state":1,"made":3,"children":6,"well":1,"navig":1,"affect":1,"child":1,"document":7,"attribut":2,"built":1,"exist":2,"want":1,"complet":4,"addit":1,"may":4,"includ":1,"check":2,"guarante":1,"origin":1,"interrupt":1,"pass":1,"process":2,"never":1,"attach":1,"replac":1,"modifi":3,"ad":1,"method":2,"construct":1,"within":1,"descend":2,"part":1,"pars":3,"also":1,"modif":2,"yet":1},"maxFreq":18,"totalTerms":132},"loc":0}