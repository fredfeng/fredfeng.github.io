{"id":10189,"className":"org.w3c.dom.events.EventTarget","methodName":"dispatchEvent","signature":"\u003corg.w3c.dom.events.EventTarget: boolean dispatchEvent(org.w3c.dom.events.Event)\u003e","javadoc":"/** \n * This method allows the dispatch of events into the implementations event model. Events dispatched in this manner will have the same capturing and bubbling behavior as events dispatched directly by the implementation. The target of the event is the \u003ccode\u003e EventTarget\u003c/code\u003e on which \u003ccode\u003edispatchEvent\u003c/code\u003e is called.\n * @param evt Specifies the event type, behavior, and contextualinformation to be used in processing the event.\n * @return The return value of \u003ccode\u003edispatchEvent\u003c/code\u003e indicateswhether any of the listeners which handled the event called \u003ccode\u003epreventDefault\u003c/code\u003e. If \u003ccode\u003epreventDefault\u003c/code\u003e was called the value is false, else the value is true.\n * @exception EventException UNSPECIFIED_EVENT_TYPE_ERR: Raised if the \u003ccode\u003eEvent\u003c/code\u003e\u0027s type was not specified by initializing the event before \u003ccode\u003edispatchEvent\u003c/code\u003e was called. Specification of the \u003ccode\u003eEvent\u003c/code\u003e\u0027s type as \u003ccode\u003enull\u003c/code\u003e or an empty string will also trigger this exception.\n */\n","tf":{"freq":{"fals":1,"call":4,"model":1,"indicateswheth":1,"allow":1,"behavior":2,"use":1,"type":3,"bubbl":1,"contextualinform":1,"specifi":2,"rais":1,"event":17,"dispatch":7,"valu":3,"initi":1,"captur":1,"listen":1,"direct":1,"trigger":1,"except":3,"true":1,"prevent":2,"els":1,"empti":1,"handl":1,"process":1,"specif":1,"string":1,"evt":1,"target":2,"will":2,"manner":1,"method":1,"also":1},"maxFreq":17,"totalTerms":71},"loc":0}