{"id":10014,"className":"org.w3c.dom.TypeInfo","methodName":"isDerivedFrom","signature":"\u003corg.w3c.dom.TypeInfo: boolean isDerivedFrom(java.lang.String,java.lang.String,int)\u003e","javadoc":"/** \n * This method returns if there is a derivation between the reference type definition, i.e. the \u003ccode\u003eTypeInfo\u003c/code\u003e on which the method is being called, and the other type definition, i.e. the one passed as parameters.\n * @param typeNamespaceArg  the namespace of the other type definition.\n * @param typeNameArg  the name of the other type definition.\n * @param derivationMethod  the type of derivation and conditions appliedbetween two types, as described in the list of constants provided in this interface.\n * @return  If the document\u0027s schema is a DTD or no schema is associatedwith the document, this method will always return \u003ccode\u003efalse\u003c/code\u003e .  If the document\u0027s schema is an XML Schema, the method will return \u003ccode\u003etrue\u003c/code\u003e if the reference type definition is derived from the other type definition according to the derivation parameter. If the value of the parameter is \u003ccode\u003e0\u003c/code\u003e (no bit is set to \u003ccode\u003e1\u003c/code\u003e for the \u003ccode\u003ederivationMethod\u003c/code\u003e parameter), the method will return \u003ccode\u003etrue\u003c/code\u003e if the other type definition can be reached by recursing any combination of {base type definition}, {item type definition}, or {member type definitions} from the reference type definition.\n */\n","tf":{"freq":{"fals":1,"call":1,"deriv":7,"one":1,"associatedwith":1,"type":16,"info":1,"schema":4,"reach":1,"arg":2,"namespac":2,"document":3,"refer":3,"name":2,"combin":1,"valu":1,"member":1,"condit":1,"constant":1,"alway":1,"appliedbetween":1,"paramet":4,"true":2,"describ":1,"list":1,"accord":1,"provid":1,"pass":1,"bit":1,"two":1,"item":1,"definit":11,"base":1,"will":3,"method":7,"recurs":1},"maxFreq":16,"totalTerms":89},"loc":0}