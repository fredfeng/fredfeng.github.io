{"id":10055,"className":"org.w3c.dom.Node","methodName":"getFeature","signature":"\u003corg.w3c.dom.Node: java.lang.Object getFeature(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in . The specialized object may also be obtained by using binding-specific casting methods but is not necessarily expected to, as discussed in . This method also allow the implementation to provide specialized objects which do not support the \u003ccode\u003eNode\u003c/code\u003e interface.\n * @param feature  The name of the feature requested. Note that any plussign \"+\" prepended to the name of the feature will be ignored since it is not significant in the context of this method.\n * @param version  This is the version number of the feature to test.\n * @return  Returns an object which implements the specialized APIs ofthe specified feature and version, if any, or \u003ccode\u003enull\u003c/code\u003e if there is no object which implements interfaces associated with that feature. If the \u003ccode\u003eDOMObject\u003c/code\u003e returned by this method implements the \u003ccode\u003eNode\u003c/code\u003e interface, it must delegate to the primary core \u003ccode\u003eNode\u003c/code\u003e and not return results inconsistent with the primary core \u003ccode\u003eNode\u003c/code\u003e such as attributes, childNodes, etc.\n * @since DOM Level 3\n */\n","tf":{"freq":{"inconsist":1,"result":1,"mobject":1,"allow":1,"test":1,"etc":1,"use":1,"object":5,"must":1,"version":4,"specifi":3,"child":1,"expect":1,"level":1,"attribut":1,"deleg":1,"associ":1,"ofth":1,"name":2,"request":1,"note":1,"primari":2,"ignor":1,"may":1,"support":1,"prepend":1,"signific":1,"number":1,"provid":1,"specif":1,"obtain":1,"node":5,"cast":1,"discuss":1,"context":1,"will":1,"featur":8,"core":2,"special":5,"method":5,"necessarili":1,"plussign":1,"bind":1,"also":2},"maxFreq":8,"totalTerms":76},"loc":0}