{"id":11168,"className":"org.w3c.dom.xpath.XPathEvaluator","methodName":"createExpression","signature":"\u003corg.w3c.dom.xpath.XPathEvaluator: org.w3c.dom.xpath.XPathExpression createExpression(java.lang.String,org.w3c.dom.xpath.XPathNSResolver)\u003e","javadoc":"/** \n * Creates a parsed XPath expression with resolved namespaces. This is useful when an expression will be reused in an application since it makes it possible to compile the expression string into a more efficient internal form and preresolve all namespace prefixes which occur within the expression.\n * @param expression The XPath expression string to be parsed.\n * @param resolver The \u003ccode\u003eresolver\u003c/code\u003e permits translation ofprefixes within the XPath expression into appropriate namespace URIs . If this is specified as \u003ccode\u003enull\u003c/code\u003e, any namespace prefix within the expression will result in \u003ccode\u003eDOMException\u003c/code\u003e being thrown with the code \u003ccode\u003eNAMESPACE_ERR\u003c/code\u003e.\n * @return The compiled form of the XPath expression.\n * @exception XPathException INVALID_EXPRESSION_ERR: Raised if the expression is not legal according to the rules of the \u003ccode\u003eXPathEvaluator\u003c/code\u003ei\n * @exception DOMException NAMESPACE_ERR: Raised if the expression contains namespace prefixes which cannot be resolved by the specified \u003ccode\u003eXPathNSResolver\u003c/code\u003e.\n */\n","tf":{"freq":{"legal":1,"result":1,"mexcept":2,"permit":1,"possibl":1,"use":1,"express":12,"reus":1,"applic":1,"specifi":2,"xpath":7,"namespac":5,"rais":2,"rule":1,"preresolv":1,"effici":1,"except":3,"thrown":1,"form":2,"creat":2,"resolv":5,"evalu":1,"accord":1,"translat":1,"appropri":1,"contain":1,"string":2,"prefix":3,"will":2,"intern":1,"within":3,"make":1,"pars":2,"ofprefix":1,"compil":2,"occur":1},"maxFreq":12,"totalTerms":76},"loc":0}