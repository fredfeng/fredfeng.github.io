{"id":10038,"className":"org.w3c.dom.Node","methodName":"cloneNode","signature":"\u003corg.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)\u003e","javadoc":"/** \n * Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes. The duplicate node has no parent ( \u003ccode\u003eparentNode\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e) and no user data. User data associated to the imported node is not carried over. However, if any \u003ccode\u003eUserDataHandlers\u003c/code\u003e has been specified along with the associated data these handlers will be called with the appropriate parameters before this method returns. \u003cbr\u003eCloning an \u003ccode\u003eElement\u003c/code\u003e copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes, but this method does not copy any children it contains unless it is a deep clone. This includes text contained in an the \u003ccode\u003eElement\u003c/code\u003e since the text is contained in a child \u003ccode\u003eText\u003c/code\u003e node. Cloning an \u003ccode\u003eAttr\u003c/code\u003e directly, as opposed to be cloned as part of an \u003ccode\u003eElement\u003c/code\u003e cloning operation, returns a specified attribute (\u003ccode\u003especified\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e). Cloning an \u003ccode\u003eAttr\u003c/code\u003e always clones its children, since they represent its value, no matter whether this is a deep clone or not. Cloning an \u003ccode\u003eEntityReference\u003c/code\u003e automatically constructs its subtree if a corresponding \u003ccode\u003eEntity\u003c/code\u003e is available, no matter whether this is a deep clone or not. Cloning any other type of node simply returns a copy of this node. \u003cbr\u003eNote that cloning an immutable subtree results in a mutable copy, but the children of an \u003ccode\u003eEntityReference\u003c/code\u003e clone are readonly . In addition, clones of unspecified \u003ccode\u003eAttr\u003c/code\u003e nodes are specified. And, cloning \u003ccode\u003eDocument\u003c/code\u003e, \u003ccode\u003eDocumentType\u003c/code\u003e, \u003ccode\u003eEntity\u003c/code\u003e, and \u003ccode\u003eNotation\u003c/code\u003e nodes is implementation dependent.\n * @param deep If \u003ccode\u003etrue\u003c/code\u003e, recursively clone the subtree underthe specified node; if \u003ccode\u003efalse\u003c/code\u003e, clone only the node itself (and its attributes, if it is an \u003ccode\u003eElement\u003c/code\u003e).\n * @return The duplicate node.\n */\n","tf":{"freq":{"fals":1,"mutabl":1,"type":2,"carri":1,"copi":5,"whether":2,"specifi":5,"readon":1,"oper":1,"refer":2,"along":1,"howev":1,"processor":1,"deep":4,"element":4,"clone":18,"text":3,"alway":1,"immut":1,"parent":2,"avail":1,"attr":3,"node":14,"entiti":4,"underth":1,"contain":3,"will":1,"duplic":3,"recurs":1,"generic":1,"unspecifi":1,"result":1,"call":1,"simpli":1,"correspond":1,"data":4,"children":3,"automat":1,"child":1,"document":2,"attribut":4,"unless":1,"associ":2,"valu":2,"serv":1,"subtre":3,"note":1,"constructor":1,"direct":1,"addit":1,"includ":2,"repres":2,"matter":2,"depend":1,"paramet":1,"true":2,"notat":1,"oppos":1,"appropri":1,"generat":1,"method":2,"construct":1,"part":1,"user":3,"handler":2},"maxFreq":18,"totalTerms":145},"loc":0}