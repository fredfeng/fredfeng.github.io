{"id":11202,"className":"org.w3c.dom.ls.LSSerializer","methodName":"writeToString","signature":"\u003corg.w3c.dom.ls.LSSerializer: java.lang.String writeToString(org.w3c.dom.Node)\u003e","javadoc":"/** \n * Serialize the specified node as described above in the general description of the \u003ccode\u003eLSSerializer\u003c/code\u003e interface. The output is written to a \u003ccode\u003eDOMString\u003c/code\u003e that is returned to the caller. The encoding used is the encoding of the \u003ccode\u003eDOMString\u003c/code\u003e type, i.e. UTF-16. Note that no Byte Order Mark is generated in a \u003ccode\u003eDOMString\u003c/code\u003e object.\n * @param nodeArg  The node to serialize.\n * @return  Returns the serialized data.\n * @exception DOMException DOMSTRING_SIZE_ERR: Raised if the resulting string is too long to fit in a \u003ccode\u003eDOMString\u003c/code\u003e.\n * @exception LSException SERIALIZE_ERR: Raised if the \u003ccode\u003eLSSerializer\u003c/code\u003e was unable to serialize the node. DOM applications should attach a \u003ccode\u003eDOMErrorHandler\u003c/code\u003e using the parameter \"\u003ca href\u003d\u0027http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler\u0027\u003e error-handler\u003c/a\u003e\" if they wish to get details on the error.\n */\n","tf":{"freq":{"caller":1,"result":1,"detail":1,"merror":1,"wish":1,"mexcept":1,"www":1,"data":1,"use":2,"object":1,"org":1,"type":1,"applic":1,"specifi":1,"fit":1,"arg":1,"level":1,"rais":2,"order":1,"written":1,"write":1,"href":1,"note":1,"except":3,"error":3,"paramet":2,"descript":1,"describ":1,"mark":1,"general":1,"unabl":1,"node":4,"encod":2,"http":1,"attach":1,"string":2,"generat":1,"mstring":4,"html":1,"core":2,"output":1,"serial":6,"handler":3},"maxFreq":6,"totalTerms":66},"loc":0}