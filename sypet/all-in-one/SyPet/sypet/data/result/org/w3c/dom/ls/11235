{"id":11235,"className":"org.w3c.dom.ls.LSParser","methodName":"parseWithContext","signature":"\u003corg.w3c.dom.ls.LSParser: org.w3c.dom.Node parseWithContext(org.w3c.dom.ls.LSInput,org.w3c.dom.Node,short)\u003e","javadoc":"/** \n * Parse an XML fragment from a resource identified by a \u003ccode\u003eLSInput\u003c/code\u003e and insert the content into an existing document at the position specified with the \u003ccode\u003econtext\u003c/code\u003e and \u003ccode\u003eaction\u003c/code\u003e arguments. When parsing the input stream, the context node (or its parent, depending on where the result will be inserted) is used for resolving unbound namespace prefixes. The context node\u0027s \u003ccode\u003eownerDocument\u003c/code\u003e node (or the node itself if the node of type \u003ccode\u003eDOCUMENT_NODE\u003c/code\u003e) is used to resolve default attributes and entity references. \u003cbr\u003e As the new data is inserted into the document, at least one mutation event is fired per new immediate child or sibling of the context node. \u003cbr\u003e If the context node is a \u003ccode\u003eDocument\u003c/code\u003e node and the action is \u003ccode\u003eACTION_REPLACE_CHILDREN\u003c/code\u003e, then the document that is passed as the context node will be changed such that its \u003ccode\u003exmlEncoding\u003c/code\u003e, \u003ccode\u003edocumentURI\u003c/code\u003e, \u003ccode\u003exmlVersion\u003c/code\u003e, \u003ccode\u003einputEncoding\u003c/code\u003e, \u003ccode\u003exmlStandalone\u003c/code\u003e, and all other such attributes are set to what they would be set to if the input source was parsed using \u003ccode\u003eLSParser.parse()\u003c/code\u003e. \u003cbr\u003e This method is always synchronous, even if the \u003ccode\u003eLSParser\u003c/code\u003e is asynchronous (\u003ccode\u003eLSParser.async\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e). \u003cbr\u003e If an error occurs while parsing, the caller is notified through the \u003ccode\u003eErrorHandler\u003c/code\u003e instance associated with the \"\u003ca href\u003d\u0027http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler\u0027\u003e error-handler\u003c/a\u003e\" parameter of the \u003ccode\u003eDOMConfiguration\u003c/code\u003e. \u003cbr\u003e When calling \u003ccode\u003eparseWithContext\u003c/code\u003e, the values of the following configuration parameters will be ignored and their default values will always be used instead: \"\u003ca href\u003d\u0027http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate\u0027\u003e validate\u003c/a\u003e\", \"\u003ca href\u003d\u0027http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate-if-schema\u0027\u003e validate-if-schema\u003c/a\u003e\", and \"\u003ca href\u003d\u0027http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-element-content-whitespace\u0027\u003e element-content-whitespace\u003c/a\u003e\". Other parameters will be treated normally, and the parser is expected to call the \u003ccode\u003eLSParserFilter\u003c/code\u003e just as if a whole document was parsed.\n * @param input  The \u003ccode\u003eLSInput\u003c/code\u003e from which the source documentis to be read. The source document must be an XML fragment, i.e. anything except a complete XML document (except in the case where the context node of type \u003ccode\u003eDOCUMENT_NODE\u003c/code\u003e, and the action is \u003ccode\u003eACTION_REPLACE_CHILDREN\u003c/code\u003e), a DOCTYPE (internal subset), entity declaration(s), notation declaration(s), or XML or text declaration(s).\n * @param contextArg  The node that is used as the context for the datathat is being parsed. This node must be a \u003ccode\u003eDocument\u003c/code\u003e node, a \u003ccode\u003eDocumentFragment\u003c/code\u003e node, or a node of a type that is allowed as a child of an \u003ccode\u003eElement\u003c/code\u003e node, e.g. it cannot be an \u003ccode\u003eAttribute\u003c/code\u003e node.\n * @param action  This parameter describes which action should be takenbetween the new set of nodes being inserted and the existing children of the context node. The set of possible actions is defined in \u003ccode\u003eACTION_TYPES\u003c/code\u003e above.\n * @return  Return the node that is the result of the parse operation. Ifthe result is more than one top-level node, the first one is returned.\n * @exception DOMException HIERARCHY_REQUEST_ERR: Raised if the content cannot replace, be inserted before, after, or as a child of the context node (see also \u003ccode\u003eNode.insertBefore\u003c/code\u003e or \u003ccode\u003eNode.replaceChild\u003c/code\u003e in [\u003ca href\u003d\u0027http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\u0027\u003eDOM Level 3 Core\u003c/a\u003e] ). \u003cbr\u003e NOT_SUPPORTED_ERR: Raised if the \u003ccode\u003eLSParser\u003c/code\u003e doesn\u0027t support this method, or if the context node is of type \u003ccode\u003eDocument\u003c/code\u003e and the DOM implementation doesn\u0027t support the replacement of the \u003ccode\u003eDocumentType\u003c/code\u003e child or \u003ccode\u003eElement\u003c/code\u003e child. \u003cbr\u003e NO_MODIFICATION_ALLOWED_ERR: Raised if the context node is a read only node and the content is being appended to its child list, or if the parent node of the context node is read only node and the content is being inserted in its child list. \u003cbr\u003e INVALID_STATE_ERR: Raised if the \u003ccode\u003eLSParser.busy\u003c/code\u003e attribute is \u003ccode\u003etrue\u003c/code\u003e.\n * @exception LSException PARSE_ERR: Raised if the \u003ccode\u003eLSParser\u003c/code\u003e was unable to load the XML fragment. DOM applications should attach a \u003ccode\u003eDOMErrorHandler\u003c/code\u003e using the parameter \"\u003ca href\u003d\u0027http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler\u0027\u003e error-handler\u003c/a\u003e\" if they wish to get details on the error.\n */\n","tf":{"freq":{"anyth":1,"specifi":1,"schema":2,"expect":1,"arg":1,"oper":1,"refer":1,"event":1,"href":6,"element":4,"ignor":1,"support":2,"sibl":1,"alway":2,"describ":1,"parent":2,"resolv":2,"instanc":1,"content":6,"encod":2,"configur":1,"http":6,"prefix":1,"will":5,"load":1,"sourc":3,"posit":1,"caller":1,"asynchron":1,"merror":1,"stream":1,"mexcept":1,"data":1,"use":6,"org":6,"applic":1,"version":1,"document":13,"unbound":1,"attribut":4,"associ":1,"datathat":1,"complet":1,"just":1,"ifth":1,"true":2,"fire":1,"unabl":1,"documenti":1,"per":1,"attach":1,"intern":1,"method":2,"insert":7,"pars":10,"detail":1,"wish":1,"least":1,"normal":1,"possibl":1,"takenbetween":1,"type":5,"must":2,"namespac":1,"level":8,"busi":1,"action":6,"follow":1,"argument":1,"notifi":1,"append":1,"text":1,"except":5,"xml":3,"input":6,"node":30,"entiti":2,"whole":1,"owner":1,"even":1,"parser":8,"mconfigur":1,"filter":1,"treat":1,"defin":1,"result":3,"call":2,"valid":4,"allow":1,"one":3,"www":6,"children":1,"identifi":1,"child":8,"subset":1,"resourc":1,"rais":5,"declar":3,"read":3,"immedi":1,"valu":2,"exist":2,"fragment":4,"top":1,"error":7,"depend":1,"paramet":10,"whitespac":2,"list":2,"standalon":1,"mutat":1,"async":1,"pass":1,"notat":1,"replac":3,"context":16,"instead":1,"core":12,"html":5,"chang":1,"also":1,"first":1,"occur":1,"handler":6},"maxFreq":30,"totalTerms":348},"loc":0}