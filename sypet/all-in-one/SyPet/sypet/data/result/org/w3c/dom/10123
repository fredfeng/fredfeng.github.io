{"id":10123,"className":"org.w3c.dom.Attr","methodName":"getValue","signature":"\u003corg.w3c.dom.Attr: java.lang.String getValue()\u003e","javadoc":"/** \n * On retrieval, the value of the attribute is returned as a string. Character and general entity references are replaced with their values. See also the method \u003ccode\u003egetAttribute\u003c/code\u003e on the \u003ccode\u003eElement\u003c/code\u003e interface. \u003cbr\u003eOn setting, this creates a \u003ccode\u003eText\u003c/code\u003e node with the unparsed contents of the string, i.e. any characters that an XML processor would recognize as markup are instead treated as literal text. See also the method \u003ccode\u003eElement.setAttribute()\u003c/code\u003e. \u003cbr\u003e Some specialized implementations, such as some [\u003ca href\u003d\u0027http://www.w3.org/TR/2003/REC-SVG11-20030114/\u0027\u003eSVG 1.1\u003c/a\u003e] implementations, may do normalization automatically, even after mutation; in such case, the value on retrieval may differ from the value on setting.\n */\n","tf":{"freq":{"markup":1,"normal":1,"www":1,"org":1,"automat":1,"attribut":3,"refer":1,"valu":5,"processor":1,"href":1,"recogn":1,"unpars":1,"element":2,"may":2,"text":2,"liter":1,"charact":2,"creat":1,"mutat":1,"general":1,"content":1,"differ":1,"node":1,"entiti":1,"http":1,"retriev":2,"replac":1,"string":2,"instead":1,"even":1,"method":2,"special":1,"also":2,"treat":1},"maxFreq":5,"totalTerms":48},"loc":0}