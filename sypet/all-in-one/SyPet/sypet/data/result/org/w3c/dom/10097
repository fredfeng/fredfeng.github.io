{"id":10097,"className":"org.w3c.dom.Document","methodName":"createProcessingInstruction","signature":"\u003corg.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eProcessingInstruction\u003c/code\u003e node given the specified name and data strings.\n * @param target The target part of the processing instruction.Unlike\u003ccode\u003eDocument.createElementNS\u003c/code\u003e or \u003ccode\u003eDocument.createAttributeNS\u003c/code\u003e, no namespace well-formed checking is done on the target name. Applications should invoke \u003ccode\u003eDocument.normalizeDocument()\u003c/code\u003e with the parameter \" namespaces\" set to \u003ccode\u003etrue\u003c/code\u003e in order to ensure that the target name is namespace well-formed.\n * @param data The data for the node.\n * @return The new \u003ccode\u003eProcessingInstruction\u003c/code\u003e object.\n * @exception DOMException INVALID_CHARACTER_ERR: Raised if the specified target is not an XML name according to the XML version in use specified in the \u003ccode\u003eDocument.xmlVersion\u003c/code\u003e attribute. \u003cbr\u003eNOT_SUPPORTED_ERR: Raised if this document is an HTML document.\n */\n","tf":{"freq":{"mexcept":1,"normal":1,"data":3,"use":1,"object":1,"well":2,"applic":1,"version":2,"ensur":1,"specifi":3,"document":7,"namespac":3,"rais":2,"attribut":2,"order":1,"given":1,"instruct":4,"name":4,"unlik":1,"element":1,"except":1,"form":2,"check":1,"creat":4,"invok":1,"done":1,"paramet":1,"true":1,"xml":1,"accord":1,"process":4,"node":2,"string":1,"target":5,"part":1},"maxFreq":7,"totalTerms":69},"loc":0}