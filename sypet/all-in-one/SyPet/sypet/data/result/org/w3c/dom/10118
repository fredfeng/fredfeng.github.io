{"id":10118,"className":"org.w3c.dom.Document","methodName":"normalizeDocument","signature":"\u003corg.w3c.dom.Document: void normalizeDocument()\u003e","javadoc":"/** \n * This method acts as if the document was going through a save and load cycle, putting the document in a \"normal\" form. As a consequence, this method updates the replacement tree of \u003ccode\u003eEntityReference\u003c/code\u003e nodes and normalizes \u003ccode\u003eText\u003c/code\u003e nodes, as defined in the method \u003ccode\u003eNode.normalize()\u003c/code\u003e. \u003cbr\u003e Otherwise, the actual result depends on the features being set on the \u003ccode\u003eDocument.domConfig\u003c/code\u003e object and governing what operations actually take place. Noticeably this method could also make the document namespace well-formed according to the algorithm described in , check the character normalization, remove the \u003ccode\u003eCDATASection\u003c/code\u003e nodes, etc. See \u003ccode\u003eDOMConfiguration\u003c/code\u003e for details. \u003cpre\u003e// Keep in the document the information defined // in the XML Information Set (Java example) DOMConfiguration docConfig \u003d myDocument.getDomConfig(); docConfig.setParameter(\"infoset\", Boolean.TRUE); myDocument.normalizeDocument();\u003c/pre\u003e \u003cbr\u003eMutation events, when supported, are generated to reflect the changes occurring on the document. \u003cbr\u003e If errors occur during the invocation of this method, such as an attempt to update a read-only node or a \u003ccode\u003eNode.nodeName\u003c/code\u003e contains an invalid character according to the XML version in use, errors or warnings (\u003ccode\u003eDOMError.SEVERITY_ERROR\u003c/code\u003e or \u003ccode\u003eDOMError.SEVERITY_WARNING\u003c/code\u003e) will be reported using the \u003ccode\u003eDOMErrorHandler\u003c/code\u003e object associated with the \"error-handler \" parameter. Note this method might also report fatal errors ( \u003ccode\u003eDOMError.SEVERITY_FATAL_ERROR\u003c/code\u003e) if an implementation cannot recover from an error.\n * @since DOM Level 3\n */\n","tf":{"freq":{"asect":1,"detail":1,"govern":1,"save":1,"dom":2,"normal":6,"consequ":1,"etc":1,"cycl":1,"notic":1,"recov":1,"namespac":1,"level":1,"invalid":1,"tree":1,"refer":1,"oper":1,"event":1,"report":2,"config":4,"place":1,"infoset":1,"text":1,"support":1,"form":2,"charact":2,"fatal":1,"remov":1,"describ":1,"invoc":1,"inform":2,"node":7,"entiti":1,"updat":2,"contain":1,"will":1,"load":1,"make":1,"mconfigur":2,"go":1,"warn":1,"attempt":1,"otherwis":1,"might":1,"result":1,"defin":2,"merror":4,"put":1,"use":2,"object":2,"well":1,"version":1,"algorithm":1,"document":10,"associ":1,"name":1,"read":1,"note":1,"error":5,"check":1,"depend":1,"paramet":2,"mutat":1,"accord":2,"take":1,"pre":2,"generat":1,"replac":1,"exampl":1,"featur":1,"actual":2,"java":1,"method":6,"chang":1,"act":1,"also":2,"reflect":1,"handler":2,"occur":2,"keep":1},"maxFreq":10,"totalTerms":132},"loc":0}