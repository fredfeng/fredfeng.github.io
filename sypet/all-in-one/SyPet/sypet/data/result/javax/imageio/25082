{"id":25082,"className":"javax.imageio.ImageWriter","methodName":"canReplacePixels","signature":"\u003cjavax.imageio.ImageWriter: boolean canReplacePixels(int)\u003e","javadoc":"/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the writer allows pixels of the given image to be replaced using the \u003ccode\u003ereplacePixels\u003c/code\u003e methods. \u003cp\u003e A writer that does not support any pixel replacement may return \u003ccode\u003efalse\u003c/code\u003e without performing bounds checking on the index. \u003cp\u003e The default implementation throws an \u003ccode\u003eIllegalStateException\u003c/code\u003e if the output is \u003ccode\u003enull\u003c/code\u003e, and otherwise returns \u003ccode\u003efalse\u003c/code\u003e without checking the value of \u003ccode\u003eimageIndex\u003c/code\u003e.\n * @param imageIndex the index of the image whose pixels are to bereplaced.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the pixels of the givenimage can be replaced.\n * @exception IllegalStateException if the output has not beenset.\n * @exception IndexOutOfBoundsException if the writer supportspixel replacement in general, but \u003ccode\u003eimageIndex\u003c/code\u003e is less than 0 or greater than the largest available index.\n * @exception IOException if an I/O error occurs during the query.\n */\n","tf":{"freq":{"fals":2,"otherwis":1,"bereplac":1,"greater":1,"allow":1,"pixel":6,"state":2,"use":1,"perform":1,"given":1,"valu":1,"writer":3,"less":1,"supportspixel":1,"may":1,"index":7,"except":7,"support":1,"error":1,"check":2,"whose":1,"beenset":1,"true":2,"avail":1,"imag":5,"without":2,"illeg":2,"general":1,"largest":1,"queri":1,"replac":6,"method":1,"output":2,"bound":2,"occur":1,"givenimag":1},"maxFreq":7,"totalTerms":72},"loc":6}