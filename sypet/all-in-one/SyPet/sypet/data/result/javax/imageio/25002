{"id":25002,"className":"javax.imageio.IIOParam","methodName":"setSourceSubsampling","signature":"\u003cjavax.imageio.IIOParam: void setSourceSubsampling(int,int,int,int)\u003e","javadoc":"/** \n * Specifies a decimation subsampling to apply on I/O.  The \u003ccode\u003esourceXSubsampling\u003c/code\u003e and \u003ccode\u003esourceYSubsampling\u003c/code\u003e parameters specify the subsampling period (\u003ci\u003ei.e.\u003c/i\u003e, the number of rows and columns to advance after every source pixel).  Specifically, a period of 1 will use every row or column; a period of 2 will use every other row or column.  The \u003ccode\u003esubsamplingXOffset\u003c/code\u003e and \u003ccode\u003esubsamplingYOffset\u003c/code\u003e parameters specify an offset from the region (or image) origin for the first subsampled pixel. Adjusting the origin of the subsample grid is useful for avoiding seams when subsampling a very large source image into destination regions that will be assembled into a complete subsampled image. Most users will want to simply leave these parameters at 0. \u003cp\u003e The number of pixels and scanlines to be used are calculated as follows. \u003cp\u003e The number of subsampled pixels in a scanline is given by \u003cp\u003e \u003ccode\u003etruncate[(width - subsamplingXOffset + sourceXSubsampling - 1) / sourceXSubsampling]\u003c/code\u003e. \u003cp\u003e If the region is such that this width is zero, an \u003ccode\u003eIllegalStateException\u003c/code\u003e is thrown. \u003cp\u003e The number of scanlines to be used can be computed similarly. \u003cp\u003eThe ability to set the subsampling grid to start somewhere other than the source region origin is useful if the region is being used to create subsampled tiles of a large image, where the tile width and height are not multiples of the subsampling periods.  If the subsampling grid does not remain consistent from tile to tile, there will be artifacts at the tile boundaries.  By adjusting the subsampling grid offset for each tile to compensate, these artifacts can be avoided.  The tradeoff is that in order to avoid these artifacts, the tiles are not all the same size.  The grid offset to use in this case is given by: \u003cbr\u003e grid offset \u003d [period - (region offset modulo period)] modulo period) \u003cp\u003e If either \u003ccode\u003esourceXSubsampling\u003c/code\u003e or \u003ccode\u003esourceYSubsampling\u003c/code\u003e is 0 or negative, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e will be thrown. \u003cp\u003e If either \u003ccode\u003esubsamplingXOffset\u003c/code\u003e or \u003ccode\u003esubsamplingYOffset\u003c/code\u003e is negative or greater than or equal to the corresponding period, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e will be thrown. \u003cp\u003e There is no \u003ccode\u003eunsetSourceSubsampling\u003c/code\u003e method; simply call \u003ccode\u003esetSourceSubsampling(1, 1, 0, 0)\u003c/code\u003e to restore default values.\n * @param sourceXSubsampling the number of columns to advancebetween pixels.\n * @param sourceYSubsampling the number of rows to advance betweenpixels.\n * @param subsamplingXOffset the horizontal offset of the first subsamplewithin the region, or within the image if no region is set.\n * @param subsamplingYOffset the horizontal offset of the first subsamplewithin the region, or within the image if no region is set.\n * @exception IllegalArgumentException if either period isnegative or 0, or if either grid offset is negative or greater than the corresponding period.\n * @exception IllegalStateException if the source region is such thatthe subsampled output would contain no pixels.\n */\n","tf":{"freq":{"greater":2,"zero":1,"isneg":1,"abil":1,"specifi":3,"xsubsampl":5,"avoid":3,"height":1,"scanlin":3,"given":2,"everi":3,"subsamplewithin":2,"follow":1,"argument":3,"except":7,"thrown":3,"multipl":1,"consist":1,"creat":1,"calcul":1,"width":3,"compens":1,"tradeoff":1,"number":6,"imag":6,"period":10,"row":4,"size":1,"assembl":1,"appli":1,"start":1,"advanc":2,"unset":1,"contain":1,"restor":1,"will":7,"column":4,"leav":1,"comput":1,"negat":3,"sourc":15,"output":1,"boundari":1,"region":11,"call":1,"simpli":2,"pixel":6,"correspond":2,"state":2,"somewher":1,"use":8,"truncat":1,"decim":1,"advancebetween":1,"order":1,"seam":1,"adjust":2,"grid":7,"horizont":2,"valu":1,"offset":8,"want":1,"similar":1,"complet":1,"subsampl":23,"yoffset":3,"ysubsampl":3,"origin":3,"paramet":3,"equal":1,"illeg":5,"either":4,"artifact":3,"specif":1,"remain":1,"xoffset":4,"larg":2,"thatth":1,"tile":7,"modulo":2,"method":1,"within":2,"betweenpixel":1,"first":3,"user":1,"destin":1},"maxFreq":23,"totalTerms":254},"loc":31}