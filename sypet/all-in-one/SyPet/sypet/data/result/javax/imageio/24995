{"id":24995,"className":"javax.imageio.ImageWriteParam","methodName":"setCompressionQuality","signature":"\u003cjavax.imageio.ImageWriteParam: void setCompressionQuality(float)\u003e","javadoc":"/** \n * Sets the compression quality to a value between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e.  Only a single compression quality setting is supported by default; writers can provide extended versions of \u003ccode\u003eImageWriteParam\u003c/code\u003e that offer more control.  For lossy compression schemes, the compression quality should control the tradeoff between file size and image quality (for example, by choosing quantization tables when writing JPEG images).  For lossless schemes, the compression quality may be used to control the tradeoff between file size and time taken to perform the compression (for example, by optimizing row filters and setting the ZLIB compression level when writing PNG images). \u003cp\u003e A compression quality setting of 0.0 is most generically interpreted as \"high compression is important,\" while a setting of 1.0 is most generically interpreted as \"high image quality is important.\" \u003cp\u003e If there are multiple compression types but none has been set, an \u003ccode\u003eIllegalStateException\u003c/code\u003e is thrown. \u003cp\u003e The default implementation checks that compression is supported, and that the compression mode is \u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e.  If so, if \u003ccode\u003egetCompressionTypes()\u003c/code\u003e returns \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003ecompressionType\u003c/code\u003e is non-\u003ccode\u003enull\u003c/code\u003e it sets the \u003ccode\u003ecompressionQuality\u003c/code\u003e instance variable.\n * @param quality a \u003ccode\u003efloat\u003c/code\u003e between \u003ccode\u003e0\u003c/code\u003eand\u003ccode\u003e1\u003c/code\u003e indicating the desired quality level.\n * @exception UnsupportedOperationException if the writer does notsupport compression.\n * @exception IllegalStateException if the compression mode is not\u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e.\n * @exception IllegalStateException if the set of legalcompression types is non-\u003ccode\u003enull\u003c/code\u003e and the current compression type is \u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003equality\u003c/code\u003e isnot between \u003ccode\u003e0\u003c/code\u003eand \u003ccode\u003e1\u003c/code\u003e, inclusive.\n * @see #getCompressionQuality\n */\n","tf":{"freq":{"unsupport":1,"legalcompress":1,"singl":1,"variabl":1,"perform":1,"type":5,"desir":1,"time":1,"level":2,"scheme":2,"oper":1,"file":2,"none":1,"taken":1,"writer":2,"argument":1,"lossi":1,"control":3,"except":9,"thrown":1,"support":2,"multipl":1,"qualiti":13,"tradeoff":2,"imag":5,"provid":1,"row":1,"size":2,"non":2,"instanc":1,"compress":20,"filter":1,"generic":2,"interpret":2,"state":3,"use":1,"version":1,"mode":2,"inclus":1,"isnot":1,"indic":1,"quantiz":1,"current":1,"write":3,"choos":1,"valu":1,"lossless":1,"may":1,"optim":1,"check":1,"offer":1,"illeg":4,"notsupport":1,"tabl":1,"exampl":2,"high":2},"maxFreq":20,"totalTerms":125},"loc":17}