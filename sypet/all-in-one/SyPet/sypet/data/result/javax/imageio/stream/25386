{"id":25386,"className":"javax.imageio.stream.ImageOutputStream","methodName":"writeChars","signature":"\u003cjavax.imageio.stream.ImageOutputStream: void writeChars(java.lang.String)\u003e","javadoc":"/** \n * Writes a string to the output stream. For every character in the string \u003ccode\u003es\u003c/code\u003e, taken in order, two bytes are written to the output stream, ordered according to the current byte order setting.  If network byte order is being used, the high-order byte is written first; the order is reversed otherwise.  If \u003ccode\u003es\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown. \u003cp\u003e If \u003ccode\u003es.length\u003c/code\u003e is zero, then no bytes are written. Otherwise, the character \u003ccode\u003es[0]\u003c/code\u003e is written first, then \u003ccode\u003es[1]\u003c/code\u003e, and so on; the last character written is \u003ccode\u003es[s.length-1]\u003c/code\u003e. \u003cp\u003e If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first.  The bit offset will be 0 after the write.\n * @param s a \u003ccode\u003eString\u003c/code\u003e containing the value to bewritten.\n * @exception NullPointerException if \u003ccode\u003es\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"otherwis":2,"stream":3,"last":1,"use":1,"zero":2,"network":1,"bewritten":1,"revers":1,"order":6,"written":6,"current":2,"write":3,"length":2,"valu":1,"taken":1,"offset":2,"everi":1,"pad":1,"except":5,"thrown":1,"error":1,"charact":3,"accord":1,"non":1,"bit":2,"two":1,"remaind":1,"contain":1,"string":3,"will":1,"pointer":2,"within":1,"high":1,"output":2,"first":3,"occur":1},"maxFreq":6,"totalTerms":68},"loc":0}