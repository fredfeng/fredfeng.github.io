{"id":25200,"className":"javax.imageio.ImageReader","methodName":"isRandomAccessEasy","signature":"\u003cjavax.imageio.ImageReader: boolean isRandomAccessEasy(int)\u003e","javadoc":"/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the storage format of the given image places no inherent impediment on random access to pixels. For most compressed formats, such as JPEG, this method should return \u003ccode\u003efalse\u003c/code\u003e, as a large section of the image in addition to the region of interest may need to be decoded. \u003cp\u003e This is merely a hint for programs that wish to be efficient; all readers must be able to read arbitrary regions as specified in an \u003ccode\u003eImageReadParam\u003c/code\u003e. \u003cp\u003e Note that formats that return \u003ccode\u003efalse\u003c/code\u003e from this method may nonetheless allow tiling (\u003ci\u003ee.g.\u003c/i\u003e Restart Markers in JPEG), and random access will likely be reasonably efficient on tiles.  See  {@link #isImageTiled \u003ccode\u003eisImageTiled\u003c/code\u003e}. \u003cp\u003e A reader for which all images are guaranteed to support easy random access, or are guaranteed not to support easy random access, may return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e respectively without accessing any image data.  In such cases, it is not necessary to throw an exception even if no input source has been set or the image index is out of bounds. \u003cp\u003e The default implementation returns \u003ccode\u003efalse\u003c/code\u003e.\n * @param imageIndex the index of the image to be queried.\n * @return \u003ccode\u003etrue\u003c/code\u003e if reading a region of interest ofthe given image is likely to be efficient.\n * @exception IllegalStateException if an input source is requiredto determine the return value, but none has been set.\n * @exception IndexOutOfBoundsException if an image must beaccessed to determine the return value, but the supplied index is out of bounds.\n * @exception IOException if an error occurs during reading.\n */\n","tf":{"freq":{"need":1,"fals":4,"beaccess":1,"requiredto":1,"wish":1,"reason":1,"abl":1,"necessari":1,"must":2,"specifi":1,"arbitrari":1,"given":2,"interest":2,"none":1,"effici":3,"place":1,"decod":1,"index":5,"except":7,"support":2,"random":5,"format":3,"imag":12,"like":2,"without":1,"compress":1,"queri":1,"input":2,"reader":2,"marker":1,"program":1,"determin":2,"will":1,"sourc":2,"even":1,"mere":1,"region":3,"allow":1,"pixel":1,"link":1,"state":1,"data":1,"easi":3,"ofth":1,"read":4,"valu":2,"note":1,"addit":1,"may":3,"impedi":1,"restart":1,"error":1,"guarante":2,"true":3,"suppli":1,"hint":1,"access":6,"storag":1,"illeg":1,"section":1,"inher":1,"nonetheless":1,"larg":1,"tile":4,"method":2,"bound":3,"respect":1,"occur":1},"maxFreq":12,"totalTerms":133},"loc":3}