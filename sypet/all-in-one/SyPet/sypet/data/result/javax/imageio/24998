{"id":24998,"className":"javax.imageio.ImageWriteParam","methodName":"getCompressionQualityDescriptions","signature":"\u003cjavax.imageio.ImageWriteParam: java.lang.String[] getCompressionQualityDescriptions()\u003e","javadoc":"/** \n * Returns an array of \u003ccode\u003eString\u003c/code\u003es that may be used along with \u003ccode\u003egetCompressionQualityValues\u003c/code\u003e as part of a user interface for setting or displaying the compression quality level.  The \u003ccode\u003eString\u003c/code\u003e with index \u003ccode\u003ei\u003c/code\u003e provides a description of the range of quality levels between \u003ccode\u003egetCompressionQualityValues[i]\u003c/code\u003e and \u003ccode\u003egetCompressionQualityValues[i + 1]\u003c/code\u003e.  Note that the length of the array returned from \u003ccode\u003egetCompressionQualityValues\u003c/code\u003e will always be one greater than that returned from \u003ccode\u003egetCompressionQualityDescriptions\u003c/code\u003e. \u003cp\u003e As an example, the strings \"Good\", \"Better\", and \"Best\" could be associated with the ranges \u003ccode\u003e[0, .33)\u003c/code\u003e, \u003ccode\u003e[.33, .66)\u003c/code\u003e, and \u003ccode\u003e[.66, 1.0]\u003c/code\u003e.  In this case, \u003ccode\u003egetCompressionQualityDescriptions\u003c/code\u003e would return \u003ccode\u003e{ \"Good\", \"Better\", \"Best\" }\u003c/code\u003e and \u003ccode\u003egetCompressionQualityValues\u003c/code\u003e would return \u003ccode\u003e{ 0.0F, .33F, .66F, 1.0F }\u003c/code\u003e. \u003cp\u003e If no descriptions are available, \u003ccode\u003enull\u003c/code\u003e is returned.  If \u003ccode\u003enull\u003c/code\u003e is returned from \u003ccode\u003egetCompressionQualityValues\u003c/code\u003e, this method must also return \u003ccode\u003enull\u003c/code\u003e. \u003cp\u003e The descriptions should be localized for the \u003ccode\u003eLocale\u003c/code\u003e returned by \u003ccode\u003egetLocale\u003c/code\u003e, if it is non-\u003ccode\u003enull\u003c/code\u003e. \u003cp\u003e If there are multiple compression types but none has been set, an \u003ccode\u003eIllegalStateException\u003c/code\u003e is thrown. \u003cp\u003e The default implementation checks that compression is supported and that the compression mode is \u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e.  If so, if \u003ccode\u003egetCompressionTypes()\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003egetCompressionType()\u003c/code\u003e is non-\u003ccode\u003enull\u003c/code\u003e, it returns \u003ccode\u003enull\u003c/code\u003e.\n * @return an array of \u003ccode\u003eString\u003c/code\u003es containing localizeddescriptions of the compression quality levels.\n * @exception UnsupportedOperationException if the writer does notsupport compression.\n * @exception IllegalStateException if the compression mode is not\u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e.\n * @exception IllegalStateException if the set of legalcompression types is non-\u003ccode\u003enull\u003c/code\u003e and the current compression type is \u003ccode\u003enull\u003c/code\u003e.\n * @see #getCompressionQualityValues\n */\n","tf":{"freq":{"unsupport":1,"greater":1,"legalcompress":1,"good":2,"type":5,"must":1,"level":3,"oper":1,"rang":2,"none":1,"along":1,"writer":1,"index":1,"except":7,"thrown":1,"support":1,"multipl":1,"alway":1,"descript":6,"qualiti":13,"display":1,"avail":1,"provid":1,"non":3,"compress":20,"better":2,"contain":1,"localizeddescript":1,"will":1,"array":3,"one":1,"state":3,"use":1,"mode":2,"associ":1,"current":1,"length":1,"best":2,"valu":7,"note":1,"may":1,"check":1,"illeg":3,"notsupport":1,"string":4,"exampl":1,"method":1,"local":3,"part":1,"user":1,"also":1},"maxFreq":20,"totalTerms":123},"loc":15}