{"id":25529,"className":"javax.imageio.spi.ImageReaderSpi","methodName":"canDecodeInput","signature":"\u003cjavax.imageio.spi.ImageReaderSpi: boolean canDecodeInput(java.lang.Object)\u003e","javadoc":"/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the supplied source object appears to be of the format supported by this reader.  Returning \u003ccode\u003etrue\u003c/code\u003e from this method does not guarantee that reading will succeed, only that there appears to be a reasonable chance of success based on a brief inspection of the stream contents.  If the source is an \u003ccode\u003eImageInputStream\u003c/code\u003e, implementations will commonly check the first several bytes of the stream for a \"magic number\" associated with the format.  Once actual reading has commenced, the reader may still indicate failure at any time prior to the completion of decoding. \u003cp\u003e It is important that the state of the object not be disturbed in order that other \u003ccode\u003eImageReaderSpi\u003c/code\u003es can properly determine whether they are able to decode the object. In particular, if the source is an \u003ccode\u003eImageInputStream\u003c/code\u003e, a \u003ccode\u003emark\u003c/code\u003e/\u003ccode\u003ereset\u003c/code\u003e pair should be used to preserve the stream position. \u003cp\u003e Formats such as \"raw,\" which can potentially attempt to read nearly any stream, should return \u003ccode\u003efalse\u003c/code\u003e in order to avoid being invoked in preference to a closer match. \u003cp\u003e If \u003ccode\u003esource\u003c/code\u003e is not an instance of one of the classes returned by \u003ccode\u003egetInputTypes\u003c/code\u003e, the method should simply return \u003ccode\u003efalse\u003c/code\u003e.\n * @param source the object (typically an\u003ccode\u003eImageInputStream\u003c/code\u003e) to be decoded.\n * @return \u003ccode\u003etrue\u003c/code\u003e if it is likely that this stream canbe decoded.\n * @exception IllegalArgumentException if \u003ccode\u003esource\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an I/O error occurs while reading thestream.\n */\n","tf":{"freq":{"canb":1,"fals":2,"appear":2,"reason":1,"particular":1,"abl":1,"type":1,"whether":1,"prior":1,"avoid":1,"time":1,"spi":1,"reset":1,"proper":1,"argument":1,"decod":5,"except":4,"succeed":1,"support":1,"invok":1,"preserv":1,"mark":1,"number":1,"format":3,"like":1,"imag":4,"commenc":1,"instanc":1,"content":1,"input":5,"magic":1,"thestream":1,"reader":3,"near":1,"determin":1,"will":2,"sourc":6,"match":1,"prefer":1,"posit":1,"inspect":1,"attempt":1,"raw":1,"simpli":1,"stream":8,"pair":1,"common":1,"one":1,"typic":1,"state":1,"use":1,"object":4,"closer":1,"disturb":1,"indic":1,"order":2,"associ":1,"read":4,"complet":1,"may":1,"error":1,"check":1,"failur":1,"guarante":1,"true":3,"suppli":1,"still":1,"illeg":1,"potenti":1,"sever":1,"base":1,"actual":1,"method":2,"success":1,"first":1,"brief":1,"occur":1,"chanc":1},"maxFreq":8,"totalTerms":121},"loc":0}