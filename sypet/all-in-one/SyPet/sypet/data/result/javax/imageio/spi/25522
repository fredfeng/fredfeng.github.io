{"id":25522,"className":"javax.imageio.spi.ImageWriterSpi","methodName":"canEncodeImage","signature":"\u003cjavax.imageio.spi.ImageWriterSpi: boolean canEncodeImage(java.awt.image.RenderedImage)\u003e","javadoc":"/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the \u003ccode\u003eImageWriter\u003c/code\u003e implementation associated with this service provider is able to encode the given \u003ccode\u003eRenderedImage\u003c/code\u003e instance.  Note that this includes instances of \u003ccode\u003ejava.awt.image.BufferedImage\u003c/code\u003e. \u003cp\u003e See the discussion for \u003ccode\u003ecanEncodeImage(ImageTypeSpecifier)\u003c/code\u003e for information on the semantics of this method.\n * @param im an instance of \u003ccode\u003eRenderedImage\u003c/code\u003e to be encoded.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this writer is likely to be ableto encode this image.\n * @exception IllegalArgumentException if \u003ccode\u003eim\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e.\n */\n","tf":{"freq":{"ableto":1,"servic":1,"abl":1,"type":1,"specifi":1,"buffer":1,"given":1,"associ":1,"semant":1,"writer":2,"note":1,"argument":1,"except":2,"includ":1,"true":2,"imag":9,"like":1,"illeg":1,"provid":1,"instanc":3,"render":2,"inform":1,"encod":5,"awt":1,"discuss":1,"java":1,"method":1},"maxFreq":9,"totalTerms":45},"loc":3}