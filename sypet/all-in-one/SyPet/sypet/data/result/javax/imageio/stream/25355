{"id":25355,"className":"javax.imageio.stream.ImageInputStream","methodName":"readFully","signature":"\u003cjavax.imageio.stream.ImageInputStream: void readFully(double[],int,int)\u003e","javadoc":"/** \n * Reads \u003ccode\u003elen\u003c/code\u003e doubles (64-bit IEEE double-precision floats) from the stream according to the current byte order, and stores them into \u003ccode\u003ed\u003c/code\u003e starting at index \u003ccode\u003eoff\u003c/code\u003e.  If the end of the stream is reached, an \u003ccode\u003eEOFException\u003c/code\u003e will be thrown. \u003cp\u003e The bit offset within the stream is reset to zero before the read occurs.\n * @param d an array of doubles to be written to.\n * @param off the starting position withinb to write to.\n * @param len the maximum number of \u003ccode\u003edouble\u003c/code\u003es to read.\n * @exception IndexOutOfBoundsException if \u003ccode\u003eoff\u003c/code\u003e isnegative, \u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003eoff + len\u003c/code\u003e is greater than \u003ccode\u003ed.length\u003c/code\u003e.\n * @exception NullPointerException if \u003ccode\u003ed\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception EOFException if the stream reaches the end beforereading all the bytes.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"stream":4,"greater":1,"store":1,"withinb":1,"beforeread":1,"zero":1,"isneg":1,"reach":2,"order":1,"written":1,"length":1,"write":1,"current":1,"precis":1,"read":4,"reset":1,"offset":1,"end":2,"except":7,"index":2,"thrown":1,"error":1,"number":1,"fulli":1,"accord":1,"len":4,"fexcept":2,"bit":2,"start":2,"maximum":1,"will":1,"pointer":1,"negat":1,"within":1,"posit":1,"bound":1,"occur":2,"array":1},"maxFreq":7,"totalTerms":60},"loc":0}