{"id":25140,"className":"javax.imageio.ImageIO","methodName":"createImageInputStream","signature":"\u003cjavax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eImageInputStream\u003c/code\u003e that will take its input from the given \u003ccode\u003eObject\u003c/code\u003e.  The set of \u003ccode\u003eImageInputStreamSpi\u003c/code\u003es registered with the \u003ccode\u003eIIORegistry\u003c/code\u003e class is queried and the first one that is able to take input from the supplied object is used to create the returned \u003ccode\u003eImageInputStream\u003c/code\u003e.  If no suitable \u003ccode\u003eImageInputStreamSpi\u003c/code\u003e exists, \u003ccode\u003enull\u003c/code\u003e is returned. \u003cp\u003e The current cache settings from \u003ccode\u003egetUseCache\u003c/code\u003eand \u003ccode\u003egetCacheDirectory\u003c/code\u003e will be used to control caching.\n * @param input an \u003ccode\u003eObject\u003c/code\u003e to be used as an inputsource, such as a \u003ccode\u003eFile\u003c/code\u003e, readable \u003ccode\u003eRandomAccessFile\u003c/code\u003e, or \u003ccode\u003eInputStream\u003c/code\u003e.\n * @return an \u003ccode\u003eImageInputStream\u003c/code\u003e, or \u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003einput\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if a cache file is needed but cannot becreated.\n * @see javax.imageio.spi.ImageInputStreamSpi\n */\n","tf":{"freq":{"need":1,"stream":8,"directori":1,"readabl":1,"one":1,"suitabl":1,"inputsourc":1,"use":4,"object":3,"abl":1,"becreat":1,"given":1,"javax":1,"file":3,"oregistri":1,"spi":4,"current":1,"regist":1,"imageio":1,"exist":1,"argument":1,"control":1,"except":4,"creat":2,"random":1,"suppli":1,"cach":5,"access":1,"imag":7,"illeg":1,"queri":1,"input":12,"take":2,"will":2,"first":1},"maxFreq":12,"totalTerms":79},"loc":31}