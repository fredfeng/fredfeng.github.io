{"id":25376,"className":"javax.imageio.stream.ImageOutputStream","methodName":"write","signature":"\u003cjavax.imageio.stream.ImageOutputStream: void write(byte[],int,int)\u003e","javadoc":"/** \n * Writes a sequence of bytes to the stream at the current position.  If \u003ccode\u003elen\u003c/code\u003e is 0, nothing is written. The byte \u003ccode\u003eb[off]\u003c/code\u003e is written first, then the byte \u003ccode\u003eb[off + 1]\u003c/code\u003e, and so on. \u003cp\u003e If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first.  The bit offset will be 0 after the write.  Implementers can use the {@link ImageOutputStreamImpl#flushBits \u003ccode\u003eflushBits\u003c/code\u003e}method of  {@link ImageOutputStreamImpl \u003ccode\u003eImageOutputStreamImpl\u003c/code\u003e} to guarantee this.\n * @param b an array of \u003ccode\u003ebyte\u003c/code\u003es to be written.\n * @param off the start offset in the data.\n * @param len the number of \u003ccode\u003ebyte\u003c/code\u003es to write.\n * @exception IndexOutOfBoundsException if \u003ccode\u003eoff\u003c/code\u003e isnegative, \u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003eoff + len\u003c/code\u003e is greater than \u003ccode\u003eb.length\u003c/code\u003e.\n * @exception NullPointerException if \u003ccode\u003eb\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"stream":5,"greater":1,"link":2,"data":1,"use":1,"zero":1,"isneg":1,"sequenc":1,"written":4,"length":1,"current":2,"write":4,"noth":1,"offset":3,"pad":1,"index":1,"except":6,"error":1,"impl":3,"guarante":1,"number":1,"len":4,"imag":3,"non":1,"bit":4,"flush":2,"remaind":1,"start":1,"will":1,"pointer":1,"negat":1,"method":1,"within":1,"output":3,"first":2,"posit":1,"bound":1,"occur":1,"array":1},"maxFreq":6,"totalTerms":72},"loc":0}