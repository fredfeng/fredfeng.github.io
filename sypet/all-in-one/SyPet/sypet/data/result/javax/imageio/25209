{"id":25209,"className":"javax.imageio.ImageReader","methodName":"read","signature":"\u003cjavax.imageio.ImageReader: java.awt.image.BufferedImage read(int)\u003e","javadoc":"/** \n * Reads the image indexed by \u003ccode\u003eimageIndex\u003c/code\u003e and returns it as a complete \u003ccode\u003eBufferedImage\u003c/code\u003e, using a default \u003ccode\u003eImageReadParam\u003c/code\u003e.  This is a convenience method that calls \u003ccode\u003eread(imageIndex, null)\u003c/code\u003e. \u003cp\u003e The image returned will be formatted according to the first \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e returned from \u003ccode\u003egetImageTypes\u003c/code\u003e. \u003cp\u003e Any registered \u003ccode\u003eIIOReadProgressListener\u003c/code\u003e objects will be notified by calling their \u003ccode\u003eimageStarted\u003c/code\u003e method, followed by calls to their \u003ccode\u003eimageProgress\u003c/code\u003e method as the read progresses.  Finally their \u003ccode\u003eimageComplete\u003c/code\u003e method will be called. \u003ccode\u003eIIOReadUpdateListener\u003c/code\u003e objects may be updated at other times during the read as pixels are decoded.  Finally, \u003ccode\u003eIIOReadWarningListener\u003c/code\u003e objects will receive notification of any non-fatal warnings that occur during decoding.\n * @param imageIndex the index of the image to be retrieved.\n * @return the desired portion of the image as a\u003ccode\u003eBufferedImage\u003c/code\u003e.\n * @exception IllegalStateException if the input source has not beenset.\n * @exception IndexOutOfBoundsException if the supplied index isout of bounds.\n * @exception IOException if an error occurs during reading.\n */\n","tf":{"freq":{"warn":2,"progress":3,"call":4,"pixel":1,"isout":1,"state":1,"use":1,"object":3,"desir":1,"type":2,"specifi":1,"buffer":2,"notif":1,"time":1,"oread":3,"read":7,"regist":1,"listen":3,"conveni":1,"portion":1,"complet":2,"follow":1,"notifi":1,"decod":2,"except":6,"may":1,"index":7,"error":1,"fatal":1,"beenset":1,"suppli":1,"receiv":1,"accord":1,"format":1,"imag":15,"illeg":1,"non":1,"input":1,"updat":2,"start":1,"retriev":1,"will":4,"sourc":1,"method":4,"first":1,"bound":2,"occur":2},"maxFreq":15,"totalTerms":103},"loc":3}