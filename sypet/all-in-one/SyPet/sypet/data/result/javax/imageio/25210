{"id":25210,"className":"javax.imageio.ImageReader","methodName":"read","signature":"\u003cjavax.imageio.ImageReader: java.awt.image.BufferedImage read(int,javax.imageio.ImageReadParam)\u003e","javadoc":"/** \n * Reads the image indexed by \u003ccode\u003eimageIndex\u003c/code\u003e and returns it as a complete \u003ccode\u003eBufferedImage\u003c/code\u003e, using a supplied \u003ccode\u003eImageReadParam\u003c/code\u003e. \u003cp\u003e The actual \u003ccode\u003eBufferedImage\u003c/code\u003e returned will be chosen using the algorithm defined by the \u003ccode\u003egetDestination\u003c/code\u003e method. \u003cp\u003e Any registered \u003ccode\u003eIIOReadProgressListener\u003c/code\u003e objects will be notified by calling their \u003ccode\u003eimageStarted\u003c/code\u003e method, followed by calls to their \u003ccode\u003eimageProgress\u003c/code\u003e method as the read progresses.  Finally their \u003ccode\u003eimageComplete\u003c/code\u003e method will be called. \u003ccode\u003eIIOReadUpdateListener\u003c/code\u003e objects may be updated at other times during the read as pixels are decoded.  Finally, \u003ccode\u003eIIOReadWarningListener\u003c/code\u003e objects will receive notification of any non-fatal warnings that occur during decoding. \u003cp\u003e The set of source bands to be read and destination bands to be written is determined by calling \u003ccode\u003egetSourceBands\u003c/code\u003e and \u003ccode\u003egetDestinationBands\u003c/code\u003e on the supplied \u003ccode\u003eImageReadParam\u003c/code\u003e.  If the lengths of the arrays returned by these methods differ, the set of source bands contains an index larger that the largest available source index, or the set of destination bands contains an index larger than the largest legal destination index, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown. \u003cp\u003e If the supplied \u003ccode\u003eImageReadParam\u003c/code\u003e contains optional setting values not supported by this reader (\u003ci\u003ee.g.\u003c/i\u003e source render size or any format-specific settings), they will be ignored.\n * @param imageIndex the index of the image to be retrieved.\n * @param param an \u003ccode\u003eImageReadParam\u003c/code\u003e used to controlthe reading process, or \u003ccode\u003enull\u003c/code\u003e.\n * @return the desired portion of the image as a\u003ccode\u003eBufferedImage\u003c/code\u003e.\n * @exception IllegalStateException if the input source has not beenset.\n * @exception IndexOutOfBoundsException if the supplied index isout of bounds.\n * @exception IllegalArgumentException if the set of source anddestination bands specified by \u003ccode\u003eparam.getSourceBands\u003c/code\u003e and \u003ccode\u003eparam.getDestinationBands\u003c/code\u003e differ in length or include indices that are out of bounds.\n * @exception IllegalArgumentException if the resulting image wouldhave a width or height less than 1.\n * @exception IOException if an error occurs during reading.\n */\n","tf":{"freq":{"progress":3,"wouldhav":1,"isout":1,"desir":1,"specifi":1,"controlth":1,"buffer":3,"notif":1,"time":1,"height":1,"band":9,"anddestin":1,"option":1,"follow":1,"notifi":1,"argument":3,"decod":2,"ignor":1,"thrown":1,"except":11,"index":10,"support":1,"fatal":1,"width":1,"beenset":1,"avail":1,"format":1,"imag":16,"size":1,"render":1,"non":1,"largest":2,"input":1,"reader":1,"updat":2,"start":1,"determin":1,"contain":3,"will":5,"sourc":8,"array":1,"warn":2,"legal":1,"result":1,"call":4,"defin":1,"pixel":1,"state":1,"use":3,"object":3,"chosen":1,"algorithm":1,"indic":1,"written":1,"oread":3,"length":2,"regist":1,"read":11,"valu":1,"listen":3,"less":1,"portion":1,"complet":2,"may":1,"includ":1,"error":1,"larger":2,"suppli":4,"receiv":1,"illeg":4,"process":1,"differ":2,"specif":1,"retriev":1,"actual":1,"method":5,"bound":3,"destin":6,"occur":2},"maxFreq":16,"totalTerms":187},"loc":0}