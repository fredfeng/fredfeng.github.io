{"id":25169,"className":"javax.imageio.ImageIO","methodName":"getImageReader","signature":"\u003cjavax.imageio.ImageIO: javax.imageio.ImageReader getImageReader(javax.imageio.ImageWriter)\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eImageReader\u003c/code\u003ecorresponding to the given \u003ccode\u003eImageWriter\u003c/code\u003e, if there is one, or \u003ccode\u003enull\u003c/code\u003e if the plug-in for this \u003ccode\u003eImageWriter\u003c/code\u003e does not specify a corresponding \u003ccode\u003eImageReader\u003c/code\u003e, or if the given \u003ccode\u003eImageWriter\u003c/code\u003e is not registered.  This method is provided principally for symmetry with \u003ccode\u003egetImageWriter(ImageReader)\u003c/code\u003e.  Note that this method returns the \"preferred\" reader, which is the first in the list returned by javax.imageio.spi.ImageWriterSpi.\u003ccode\u003egetImageReaderSpiNames()\u003c/code\u003e.\n * @param writer an instance of a registered \u003ccode\u003eImageWriter\u003c/code\u003e.\n * @return an \u003ccode\u003eImageReader\u003c/code\u003e, or null.\n * @exception IllegalArgumentException if \u003ccode\u003ewriter\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #getImageWriter(ImageReader)\n * @see javax.imageio.spi.ImageWriterSpi#getImageReaderSpiNames()\n */\n","tf":{"freq":{"argument":1,"except":2,"correspond":2,"one":1,"list":1,"symmetri":1,"imag":16,"illeg":1,"provid":1,"instanc":1,"specifi":1,"reader":9,"given":2,"plug":1,"javax":2,"name":2,"spi":6,"regist":2,"method":2,"prefer":1,"writer":10,"imageio":2,"first":1,"note":1,"princip":1},"maxFreq":16,"totalTerms":70},"loc":57}