{"id":25214,"className":"javax.imageio.ImageReader","methodName":"readRaster","signature":"\u003cjavax.imageio.ImageReader: java.awt.image.Raster readRaster(int,javax.imageio.ImageReadParam)\u003e","javadoc":"/** \n * Returns a new \u003ccode\u003eRaster\u003c/code\u003e object containing the raw pixel data from the image stream, without any color conversion applied.  The application must determine how to interpret the pixel data by other means.  Any destination or image-type parameters in the supplied \u003ccode\u003eImageReadParam\u003c/code\u003e object are ignored, but all other parameters are used exactly as in the  {@link #read \u003ccode\u003eread\u003c/code\u003e}method, except that any destination offset is used as a logical rather than a physical offset.  The size of the returned \u003ccode\u003eRaster\u003c/code\u003e will always be that of the source region clipped to the actual image. Logical offsets in the stream itself are ignored. \u003cp\u003e This method allows formats that normally apply a color conversion, such as JPEG, and formats that do not normally have an associated colorspace, such as remote sensing or medical imaging data, to provide access to raw pixel data. \u003cp\u003e Any registered \u003ccode\u003ereadUpdateListener\u003c/code\u003es are ignored, as there is no \u003ccode\u003eBufferedImage\u003c/code\u003e, but all other listeners are called exactly as they are for the  {@link #read \u003ccode\u003eread\u003c/code\u003e}method. \u003cp\u003e If  {@link #canReadRaster \u003ccode\u003ecanReadRaster()\u003c/code\u003e} returns\u003ccode\u003efalse\u003c/code\u003e, this method throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e. \u003cp\u003e If the supplied \u003ccode\u003eImageReadParam\u003c/code\u003e contains optional setting values not supported by this reader (\u003ci\u003ee.g.\u003c/i\u003e source render size or any format-specific settings), they will be ignored. \u003cp\u003e The default implementation throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @param imageIndex the index of the image to be read.\n * @param param an \u003ccode\u003eImageReadParam\u003c/code\u003e used to controlthe reading process, or \u003ccode\u003enull\u003c/code\u003e.\n * @return the desired portion of the image as a\u003ccode\u003eRaster\u003c/code\u003e.\n * @exception UnsupportedOperationException if this plug-in does notsupport reading raw \u003ccode\u003eRaster\u003c/code\u003es.\n * @exception IllegalStateException if the input source has not beenset.\n * @exception IndexOutOfBoundsException if the supplied index isout of bounds.\n * @exception IOException if an error occurs during reading.\n * @see #canReadRaster\n * @see #read\n * @see java.awt.image.Raster\n */\n","tf":{"freq":{"fals":1,"unsupport":3,"normal":2,"isout":1,"desir":1,"type":1,"must":1,"controlth":1,"buffer":1,"oper":3,"exact":2,"sens":1,"option":1,"index":4,"ignor":4,"except":11,"support":1,"alway":1,"beenset":1,"format":3,"imag":12,"without":1,"provid":1,"logic":2,"render":1,"size":2,"awt":1,"input":1,"appli":2,"reader":1,"plug":1,"updat":1,"remot":1,"determin":1,"contain":2,"will":2,"sourc":3,"medic":1,"raw":3,"region":1,"call":1,"stream":2,"allow":1,"pixel":3,"link":3,"state":1,"interpret":1,"data":4,"convers":2,"use":3,"object":2,"applic":1,"associ":1,"regist":1,"mean":1,"read":17,"rather":1,"valu":1,"offset":3,"listen":2,"portion":1,"clip":1,"error":1,"physic":1,"paramet":2,"suppli":3,"access":1,"illeg":1,"notsupport":1,"process":1,"raster":9,"specif":1,"color":2,"actual":1,"java":1,"method":4,"bound":2,"occur":1,"destin":2,"colorspac":1},"maxFreq":17,"totalTerms":172},"loc":3}