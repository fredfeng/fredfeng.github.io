{"id":25011,"className":"javax.imageio.IIOParam","methodName":"setDestinationOffset","signature":"\u003cjavax.imageio.IIOParam: void setDestinationOffset(java.awt.Point)\u003e","javadoc":"/** \n * Specifies the offset in the destination image at which future decoded pixels are to be placed, when reading, or where a region will be written, when writing. \u003cp\u003e When reading, the region to be written within the destination \u003ccode\u003eBufferedImage\u003c/code\u003e will start at this offset and have a width and height determined by the source region of interest, the subsampling parameters, and the destination bounds. \u003cp\u003e Normal writes are not affected by this method, only writes performed using \u003ccode\u003eImageWriter.replacePixels\u003c/code\u003e.  For such writes, the offset specified is within the output stream image whose pixels are being modified. \u003cp\u003e There is no \u003ccode\u003eunsetDestinationOffset\u003c/code\u003e method; simply call \u003ccode\u003esetDestinationOffset(new Point(0, 0))\u003c/code\u003e to restore default values.\n * @param destinationOffset the offset in the destination, as a\u003ccode\u003ePoint\u003c/code\u003e.\n * @exception IllegalArgumentException if\u003ccode\u003edestinationOffset\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see #getDestinationOffset\n * @see ImageWriter#replacePixels\n */\n","tf":{"freq":{"region":3,"call":1,"simpli":1,"stream":1,"pixel":4,"normal":1,"use":1,"perform":1,"affect":1,"specifi":2,"buffer":1,"height":1,"interest":1,"written":2,"write":4,"read":2,"valu":1,"writer":2,"place":1,"offset":10,"argument":1,"decod":1,"except":2,"futur":1,"subsampl":1,"whose":1,"width":1,"paramet":1,"imag":5,"illeg":1,"point":2,"start":1,"unset":1,"replac":2,"determin":1,"restor":1,"modifi":1,"will":2,"method":2,"sourc":1,"within":2,"output":1,"bound":1,"destin":10},"maxFreq":10,"totalTerms":84},"loc":6}