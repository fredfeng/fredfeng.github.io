{"id":25077,"className":"javax.imageio.ImageWriter","methodName":"prepareWriteEmpty","signature":"\u003cjavax.imageio.ImageWriter: void prepareWriteEmpty(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,int,int,javax.imageio.metadata.IIOMetadata,java.util.List,javax.imageio.ImageWriteParam)\u003e","javadoc":"/** \n * Begins the writing of a complete image stream, consisting of a single image with undefined pixel values and associated metadata and thumbnails, to the output.  The pixel values will be defined by future calls to the \u003ccode\u003ereplacePixels\u003c/code\u003e methods.  If the output is an \u003ccode\u003eImageOutputStream\u003c/code\u003e, its existing contents prior to the current seek position are not affected, and need not be readable or writable. \u003cp\u003e The writing is not complete until a call to \u003ccode\u003eendWriteEmpty\u003c/code\u003e occurs.  Calls to \u003ccode\u003eprepareReplacePixels\u003c/code\u003e, \u003ccode\u003ereplacePixels\u003c/code\u003e, and \u003ccode\u003eendReplacePixels\u003c/code\u003e may occur between calls to \u003ccode\u003eprepareWriteEmpty\u003c/code\u003e and \u003ccode\u003eendWriteEmpty\u003c/code\u003e. However, calls to \u003ccode\u003eprepareWriteEmpty\u003c/code\u003e cannot be nested, and calls to \u003ccode\u003eprepareWriteEmpty\u003c/code\u003e and \u003ccode\u003eprepareInsertEmpty\u003c/code\u003e may not be interspersed. \u003cp\u003e If \u003ccode\u003ecanWriteEmpty\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown. \u003cp\u003e An \u003ccode\u003eImageWriteParam\u003c/code\u003e may optionally be supplied to control the writing process.  If \u003ccode\u003eparam\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a default write param will be used. \u003cp\u003e If the supplied \u003ccode\u003eImageWriteParam\u003c/code\u003e contains optional setting values not supported by this writer (\u003ci\u003ee.g.\u003c/i\u003e progressive encoding or any format-specific settings), they will be ignored. \u003cp\u003e The default implementation throws an \u003ccode\u003eIllegalStateException\u003c/code\u003e if the output is \u003ccode\u003enull\u003c/code\u003e, and otherwise throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @param streamMetadata an \u003ccode\u003eIIOMetadata\u003c/code\u003e object representingstream metadata, or \u003ccode\u003enull\u003c/code\u003e to use default values.\n * @param imageType an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e describingthe layout of the image.\n * @param width the width of the image.\n * @param height the height of the image.\n * @param imageMetadata an \u003ccode\u003eIIOMetadata\u003c/code\u003e objectrepresenting image metadata, or \u003ccode\u003enull\u003c/code\u003e.\n * @param thumbnails a \u003ccode\u003eList\u003c/code\u003e of\u003ccode\u003eBufferedImage\u003c/code\u003e thumbnails for this image, or \u003ccode\u003enull\u003c/code\u003e.\n * @param param an \u003ccode\u003eImageWriteParam\u003c/code\u003e, or\u003ccode\u003enull\u003c/code\u003e to use a default \u003ccode\u003eImageWriteParam\u003c/code\u003e.\n * @exception IllegalStateException if the output has notbeen set.\n * @exception UnsupportedOperationException if\u003ccode\u003ecanWriteEmpty\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IllegalStateException if a previous call to\u003ccode\u003eprepareWriteEmpty\u003c/code\u003e has been made without a corresponding call to \u003ccode\u003eendWriteEmpty\u003c/code\u003e.\n * @exception IllegalStateException if a previous call to\u003ccode\u003eprepareInsertEmpty\u003c/code\u003e has been made without a corresponding call to \u003ccode\u003eendInsertEmpty\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003eimageType\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003ethumbnails\u003c/code\u003e contains \u003ccode\u003enull\u003c/code\u003e references or objects other than \u003ccode\u003eBufferedImage\u003c/code\u003es.\n * @exception IllegalArgumentException if width or height are lessthan 1.\n * @exception IOException if an I/O error occurs during writing.\n */\n","tf":{"freq":{"progress":1,"need":1,"fals":2,"unsupport":3,"singl":1,"type":3,"describingth":1,"objectrepres":1,"specifi":1,"prior":1,"buffer":2,"height":3,"refer":1,"oper":3,"lessthan":1,"writer":1,"undefin":1,"howev":1,"option":2,"metadata":5,"argument":2,"control":1,"ignor":1,"except":17,"thrown":1,"support":1,"consist":1,"width":3,"writabl":1,"format":1,"imag":18,"without":2,"prepar":8,"content":1,"encod":1,"ometadata":2,"thumbnail":4,"contain":2,"will":4,"notbeen":1,"output":5,"representingstream":1,"posit":1,"otherwis":1,"call":10,"defin":1,"stream":3,"pixel":6,"correspond":2,"readabl":1,"made":2,"state":4,"use":3,"object":2,"affect":1,"associ":1,"layout":1,"write":19,"current":1,"valu":4,"exist":1,"end":5,"complet":2,"may":3,"futur":1,"error":1,"previous":2,"nest":1,"list":1,"suppli":2,"illeg":6,"empti":13,"begin":1,"seek":1,"process":1,"specif":1,"interspers":1,"replac":4,"method":1,"insert":3,"occur":3},"maxFreq":19,"totalTerms":230},"loc":3}