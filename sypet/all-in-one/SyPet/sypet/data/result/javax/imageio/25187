{"id":25187,"className":"javax.imageio.ImageReader","methodName":"setInput","signature":"\u003cjavax.imageio.ImageReader: void setInput(java.lang.Object,boolean,boolean)\u003e","javadoc":"/** \n * Sets the input source to use to the given \u003ccode\u003eImageInputStream\u003c/code\u003e or other \u003ccode\u003eObject\u003c/code\u003e. The input source must be set before any of the query or read methods are used.  If \u003ccode\u003einput\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, any currently set input source will be removed.  In any case, the value of \u003ccode\u003eminIndex\u003c/code\u003e will be initialized to 0. \u003cp\u003e The \u003ccode\u003eseekForwardOnly\u003c/code\u003e parameter controls whether the value returned by \u003ccode\u003egetMinIndex\u003c/code\u003e will be increased as each image (or thumbnail, or image metadata) is read.  If \u003ccode\u003eseekForwardOnly\u003c/code\u003e is true, then a call to \u003ccode\u003eread(index)\u003c/code\u003e will throw an \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if \u003ccode\u003eindex \u0026lt this.minIndex\u003c/code\u003e; otherwise, the value of \u003ccode\u003eminIndex\u003c/code\u003e will be set to \u003ccode\u003eindex\u003c/code\u003e.  If \u003ccode\u003eseekForwardOnly\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, the value of \u003ccode\u003eminIndex\u003c/code\u003e will remain 0 regardless of any read operations. \u003cp\u003e The \u003ccode\u003eignoreMetadata\u003c/code\u003e parameter, if set to \u003ccode\u003etrue\u003c/code\u003e, allows the reader to disregard any metadata encountered during the read.  Subsequent calls to the \u003ccode\u003egetStreamMetadata\u003c/code\u003e and \u003ccode\u003egetImageMetadata\u003c/code\u003e methods may return \u003ccode\u003enull\u003c/code\u003e, and an \u003ccode\u003eIIOImage\u003c/code\u003e returned from \u003ccode\u003ereadAll\u003c/code\u003e may return \u003ccode\u003enull\u003c/code\u003e from their \u003ccode\u003egetMetadata\u003c/code\u003e method.  Setting this parameter may allow the reader to work more efficiently.  The reader may choose to disregard this setting and return metadata normally. \u003cp\u003e Subclasses should take care to remove any cached information based on the previous stream, such as header information or partially decoded image data. \u003cp\u003e Use of a general \u003ccode\u003eObject\u003c/code\u003e other than an \u003ccode\u003eImageInputStream\u003c/code\u003e is intended for readers that interact directly with a capture device or imaging protocol. The set of legal classes is advertised by the reader\u0027s service provider\u0027s \u003ccode\u003egetInputTypes\u003c/code\u003e method; most readers will return a single-element array containing only \u003ccode\u003eImageInputStream.class\u003c/code\u003e to indicate that they accept only an \u003ccode\u003eImageInputStream\u003c/code\u003e. \u003cp\u003e The default implementation checks the \u003ccode\u003einput\u003c/code\u003e argument against the list returned by \u003ccode\u003eoriginatingProvider.getInputTypes()\u003c/code\u003e and fails if the argument is not an instance of one of the classes in the list.  If the originating provider is set to \u003ccode\u003enull\u003c/code\u003e, the input is accepted only if it is an \u003ccode\u003eImageInputStream\u003c/code\u003e.\n * @param input the \u003ccode\u003eImageInputStream\u003c/code\u003e or other\u003ccode\u003eObject\u003c/code\u003e to use for future decoding.\n * @param seekForwardOnly if \u003ccode\u003etrue\u003c/code\u003e, images and metadatamay only be read in ascending order from this input source.\n * @param ignoreMetadata if \u003ccode\u003etrue\u003c/code\u003e, metadatamay be ignored during reads.\n * @exception IllegalArgumentException if \u003ccode\u003einput\u003c/code\u003e isnot an instance of one of the classes returned by the originating service provider\u0027s \u003ccode\u003egetInputTypes\u003c/code\u003e method, or is not an \u003ccode\u003eImageInputStream\u003c/code\u003e.\n * @see ImageInputStream\n * @see #getInput\n * @see javax.imageio.spi.ImageReaderSpi#getInputTypes\n */\n","tf":{"freq":{"fals":1,"singl":1,"accept":2,"servic":2,"normal":1,"type":4,"whether":1,"must":1,"fail":1,"given":1,"forward":4,"oper":1,"javax":1,"spi":2,"care":1,"effici":1,"captur":1,"imageio":1,"metadata":8,"argument":3,"work":1,"element":1,"decod":2,"control":1,"index":9,"except":3,"ignor":3,"remov":2,"partial":1,"imag":15,"provid":4,"header":1,"instanc":2,"inform":2,"queri":1,"input":23,"thumbnail":1,"reader":7,"contain":1,"oimag":1,"will":7,"subclass":1,"sourc":4,"ascend":1,"array":1,"legal":1,"increas":1,"otherwis":1,"call":2,"stream":10,"allow":2,"one":2,"data":1,"use":4,"object":3,"metadatamay":2,"isnot":1,"order":1,"indic":1,"current":1,"read":8,"choos":1,"valu":4,"initi":1,"subsequ":1,"regardless":1,"direct":1,"min":5,"protocol":1,"may":4,"futur":1,"check":1,"previous":1,"disregard":2,"advertis":1,"origin":3,"paramet":3,"true":4,"list":2,"cach":1,"illeg":1,"general":1,"seek":4,"remain":1,"take":1,"encount":1,"base":1,"interact":1,"method":5,"devic":1,"intend":1,"bound":1},"maxFreq":23,"totalTerms":231},"loc":27}