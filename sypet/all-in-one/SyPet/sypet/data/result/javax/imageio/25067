{"id":25067,"className":"javax.imageio.ImageWriter","methodName":"endWriteSequence","signature":"\u003cjavax.imageio.ImageWriter: void endWriteSequence()\u003e","javadoc":"/** \n * Completes the writing of a sequence of images begun with \u003ccode\u003eprepareWriteSequence\u003c/code\u003e.  Any stream metadata that should come at the end of the sequence of images is written out, and any header information at the beginning of the sequence is patched up if necessary.  If the output is an \u003ccode\u003eImageOutputStream\u003c/code\u003e, data through the stream metadata at the end of the sequence are flushed and need not be readable or writable. \u003cp\u003e If \u003ccode\u003ecanWriteSequence\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, this method will throw an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e. \u003cp\u003e The default implementation throws an \u003ccode\u003eIllegalStateException\u003c/code\u003e if the output is \u003ccode\u003enull\u003c/code\u003e, and otherwise throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @exception IllegalStateException if the output has notbeen set, or \u003ccode\u003eprepareWriteSequence\u003c/code\u003e has not been called.\n * @exception UnsupportedOperationException if\u003ccode\u003ecanWriteSequence\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IOException if an error occurs during writing.\n */\n","tf":{"freq":{"otherwis":1,"need":1,"fals":2,"call":1,"unsupport":3,"stream":3,"readabl":1,"state":2,"data":1,"necessari":1,"oper":3,"sequenc":9,"written":1,"write":7,"end":3,"metadata":2,"complet":1,"except":9,"error":1,"come":1,"writabl":1,"imag":3,"illeg":2,"header":1,"prepar":2,"begin":1,"inform":1,"flush":1,"begun":1,"will":1,"notbeen":1,"method":1,"output":4,"patch":1,"occur":1},"maxFreq":9,"totalTerms":75},"loc":3}