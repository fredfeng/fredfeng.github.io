{"id":25464,"className":"javax.imageio.stream.MemoryCache","methodName":"read","signature":"\u003cjavax.imageio.stream.MemoryCache: void read(byte[],int,int,long)\u003e","javadoc":"/** \n * Copy \u003ccode\u003elen\u003c/code\u003e bytes from the cache, starting at cache position \u003ccode\u003epos\u003c/code\u003e, into the array \u003ccode\u003eb\u003c/code\u003e at offset \u003ccode\u003eoff\u003c/code\u003e.\n * @exception NullPointerException if b is \u003ccode\u003enull\u003c/code\u003e\n * @exception IndexOutOfBoundsException if \u003ccode\u003eoff\u003c/code\u003e,\u003ccode\u003elen\u003c/code\u003e or \u003ccode\u003epos\u003c/code\u003e are negative or if \u003ccode\u003eoff + len \u003e b.length\u003c/code\u003e or if any portion of the requested data is not in the cache (including if \u003ccode\u003epos\u003c/code\u003e is in a block that has already been disposed).\n */\n","tf":{"freq":{"except":4,"index":1,"includ":1,"data":1,"block":1,"len":3,"cach":3,"copi":1,"pos":3,"start":1,"request":1,"length":1,"dispos":1,"read":1,"pointer":1,"alreadi":1,"negat":1,"offset":1,"posit":1,"bound":1,"portion":1,"array":1},"maxFreq":4,"totalTerms":31},"loc":25}