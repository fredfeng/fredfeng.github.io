{"id":25178,"className":"javax.imageio.ImageIO","methodName":"read","signature":"\u003cjavax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.File)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eBufferedImage\u003c/code\u003e as the result of decoding a supplied \u003ccode\u003eFile\u003c/code\u003e with an \u003ccode\u003eImageReader\u003c/code\u003e chosen automatically from among those currently registered. The \u003ccode\u003eFile\u003c/code\u003e is wrapped in an \u003ccode\u003eImageInputStream\u003c/code\u003e.  If no registered \u003ccode\u003eImageReader\u003c/code\u003e claims to be able to read the resulting stream, \u003ccode\u003enull\u003c/code\u003e is returned. \u003cp\u003e The current cache settings from \u003ccode\u003egetUseCache\u003c/code\u003eand \u003ccode\u003egetCacheDirectory\u003c/code\u003e will be used to control caching in the \u003ccode\u003eImageInputStream\u003c/code\u003e that is created. \u003cp\u003e Note that there is no \u003ccode\u003eread\u003c/code\u003e method that takes a filename as a \u003ccode\u003eString\u003c/code\u003e; use this method instead after creating a \u003ccode\u003eFile\u003c/code\u003e from the filename. \u003cp\u003e This method does not attempt to locate \u003ccode\u003eImageReader\u003c/code\u003es that can read directly from a \u003ccode\u003eFile\u003c/code\u003e; that may be accomplished using \u003ccode\u003eIIORegistry\u003c/code\u003e and \u003ccode\u003eImageReaderSpi\u003c/code\u003e.\n * @param input a \u003ccode\u003eFile\u003c/code\u003e to read from.\n * @return a \u003ccode\u003eBufferedImage\u003c/code\u003e containing the decodedcontents of the input, or \u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003einput\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an error occurs during reading.\n */\n","tf":{"freq":{"attempt":1,"result":2,"accomplish":1,"stream":3,"directori":1,"use":4,"chosen":1,"abl":1,"automat":1,"buffer":2,"oregistri":1,"among":1,"file":5,"spi":1,"current":2,"read":6,"regist":2,"note":1,"argument":1,"direct":1,"decod":1,"wrap":1,"control":1,"except":4,"may":1,"locat":1,"error":1,"creat":2,"filenam":2,"suppli":1,"cach":4,"imag":8,"illeg":1,"decodedcont":1,"input":5,"reader":4,"take":1,"contain":1,"string":1,"instead":1,"will":1,"method":3,"claim":1,"occur":1},"maxFreq":8,"totalTerms":86},"loc":18}