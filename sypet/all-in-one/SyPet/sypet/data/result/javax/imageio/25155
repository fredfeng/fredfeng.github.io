{"id":25155,"className":"javax.imageio.ImageIO","methodName":"getImageReaders","signature":"\u003cjavax.imageio.ImageIO: java.util.Iterator\u003cjavax.imageio.ImageReader\u003e getImageReaders(java.lang.Object)\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eIterator\u003c/code\u003e containing all currently registered \u003ccode\u003eImageReader\u003c/code\u003es that claim to be able to decode the supplied \u003ccode\u003eObject\u003c/code\u003e, typically an \u003ccode\u003eImageInputStream\u003c/code\u003e. \u003cp\u003e The stream position is left at its prior position upon exit from this method.\n * @param input an \u003ccode\u003eImageInputStream\u003c/code\u003e or other\u003ccode\u003eObject\u003c/code\u003e containing encoded image data.\n * @return an \u003ccode\u003eIterator\u003c/code\u003e containing \u003ccode\u003eImageReader\u003c/code\u003es.\n * @exception IllegalArgumentException if \u003ccode\u003einput\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see javax.imageio.spi.ImageReaderSpi#canDecodeInput\n */\n","tf":{"freq":{"stream":3,"typic":1,"data":1,"object":2,"abl":1,"prior":1,"javax":1,"spi":2,"current":1,"regist":1,"left":1,"imageio":1,"argument":1,"decod":2,"except":2,"suppli":1,"imag":7,"illeg":1,"exit":1,"input":5,"encod":1,"reader":4,"contain":3,"method":1,"claim":1,"iter":2,"posit":2,"upon":1},"maxFreq":7,"totalTerms":51},"loc":16}