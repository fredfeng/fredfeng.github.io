{"id":25025,"className":"javax.imageio.ImageTypeSpecifier","methodName":"createInterleaved","signature":"\u003cjavax.imageio.ImageTypeSpecifier: javax.imageio.ImageTypeSpecifier createInterleaved(java.awt.color.ColorSpace,int[],int,boolean,boolean)\u003e","javadoc":"/** \n * Returns a specifier for an interleaved image format that will use a \u003ccode\u003eComponentColorModel\u003c/code\u003e and a \u003ccode\u003ePixelInterleavedSampleModel\u003c/code\u003e to store each pixel component in a separate byte, short, or int.\n * @param colorSpace the desired \u003ccode\u003eColorSpace\u003c/code\u003e.\n * @param bandOffsets an array of \u003ccode\u003eint\u003c/code\u003es indicating theoffsets for each band.\n * @param dataType the desired data type, as one of the enumerationsfrom the \u003ccode\u003eDataBuffer\u003c/code\u003e class.\n * @param hasAlpha \u003ccode\u003etrue\u003c/code\u003e if an alpha channel is desired.\n * @param isAlphaPremultiplied \u003ccode\u003etrue\u003c/code\u003e if the color channelswill be premultipled by the alpha channel.\n * @return an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desiredcharacteristics.\n * @exception IllegalArgumentException if \u003ccode\u003ecolorSpace\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003ebandOffsets\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003edataType\u003c/code\u003e isnot one of the legal \u003ccode\u003eDataBuffer.TYPE_*\u003c/code\u003e constants.\n * @exception IllegalArgumentException if\u003ccode\u003ebandOffsets.length\u003c/code\u003e does not equal the number of color space components, plus 1 if \u003ccode\u003ehasAlpha\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e.\n */\n","tf":{"freq":{"legal":1,"desiredcharacterist":1,"model":2,"store":1,"pixel":2,"interleav":3,"one":2,"data":5,"use":1,"space":4,"desir":3,"type":4,"specifi":2,"premultipli":1,"buffer":2,"band":4,"isnot":1,"indic":1,"alpha":5,"length":1,"premultipl":1,"theoffset":1,"offset":3,"argument":4,"plus":1,"except":8,"constant":1,"creat":1,"true":3,"number":1,"equal":1,"format":1,"imag":2,"illeg":4,"channelswil":1,"compon":3,"color":6,"separ":1,"will":1,"enumerationsfrom":1,"channel":2,"sampl":1,"array":1},"maxFreq":8,"totalTerms":95},"loc":7}