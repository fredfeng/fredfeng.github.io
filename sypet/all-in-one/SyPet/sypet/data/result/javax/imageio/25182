{"id":25182,"className":"javax.imageio.ImageIO","methodName":"write","signature":"\u003cjavax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,javax.imageio.stream.ImageOutputStream)\u003e","javadoc":"/** \n * Writes an image using the an arbitrary \u003ccode\u003eImageWriter\u003c/code\u003e that supports the given format to an \u003ccode\u003eImageOutputStream\u003c/code\u003e.  The image is written to the \u003ccode\u003eImageOutputStream\u003c/code\u003e starting at the current stream pointer, overwriting existing stream data from that point forward, if present. \u003cp\u003e This method \u003cem\u003edoes not\u003c/em\u003e close the provided \u003ccode\u003eImageOutputStream\u003c/code\u003e after the write operation has completed; it is the responsibility of the caller to close the stream, if desired.\n * @param im a \u003ccode\u003eRenderedImage\u003c/code\u003e to be written.\n * @param formatName a \u003ccode\u003eString\u003c/code\u003e containg the informalname of the format.\n * @param output an \u003ccode\u003eImageOutputStream\u003c/code\u003e to be written to.\n * @return \u003ccode\u003efalse\u003c/code\u003e if no appropriate writer is found.\n * @exception IllegalArgumentException if any parameter is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an error occurs during writing.\n */\n","tf":{"freq":{"fals":1,"caller":1,"stream":7,"overwrit":1,"conta":1,"data":1,"use":1,"informalnam":1,"desir":1,"close":2,"arbitrari":1,"given":1,"forward":1,"oper":1,"name":1,"written":3,"write":4,"current":1,"writer":2,"exist":1,"complet":1,"argument":1,"except":4,"support":1,"error":1,"respons":1,"paramet":1,"format":3,"imag":8,"illeg":1,"provid":1,"render":1,"point":1,"present":1,"start":1,"appropri":1,"string":1,"pointer":1,"method":1,"output":5,"occur":1,"found":1},"maxFreq":8,"totalTerms":71},"loc":13}