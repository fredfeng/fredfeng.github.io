{"id":25181,"className":"javax.imageio.ImageIO","methodName":"read","signature":"\u003cjavax.imageio.ImageIO: java.awt.image.BufferedImage read(javax.imageio.stream.ImageInputStream)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eBufferedImage\u003c/code\u003e as the result of decoding a supplied \u003ccode\u003eImageInputStream\u003c/code\u003e with an \u003ccode\u003eImageReader\u003c/code\u003e chosen automatically from among those currently registered.  If no registered \u003ccode\u003eImageReader\u003c/code\u003e claims to be able to read the stream, \u003ccode\u003enull\u003c/code\u003e is returned. \u003cp\u003e Unlike most other methods in this class, this method \u003cem\u003edoes\u003c/em\u003e close the provided \u003ccode\u003eImageInputStream\u003c/code\u003e after the read operation has completed, unless \u003ccode\u003enull\u003c/code\u003e is returned, in which case this method \u003cem\u003edoes not\u003c/em\u003e close the stream.\n * @param stream an \u003ccode\u003eImageInputStream\u003c/code\u003e to read from.\n * @return a \u003ccode\u003eBufferedImage\u003c/code\u003e containing the decodedcontents of the input, or \u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003estream\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an error occurs during reading.\n */\n","tf":{"freq":{"result":1,"stream":7,"chosen":1,"abl":1,"automat":1,"close":2,"buffer":2,"unless":1,"oper":1,"among":1,"current":1,"unlik":1,"read":5,"regist":2,"complet":1,"argument":1,"decod":1,"except":4,"error":1,"suppli":1,"imag":7,"illeg":1,"provid":1,"decodedcont":1,"input":4,"reader":2,"contain":1,"method":3,"claim":1,"occur":1},"maxFreq":7,"totalTerms":58},"loc":22}