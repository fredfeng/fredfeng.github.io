{"id":25034,"className":"javax.imageio.ImageTypeSpecifier","methodName":"createIndexed","signature":"\u003cjavax.imageio.ImageTypeSpecifier: javax.imageio.ImageTypeSpecifier createIndexed(byte[],byte[],byte[],byte[],int,int)\u003e","javadoc":"/** \n * Returns a specifier for an indexed-color image format that will pack index values of the given bit depth into array elements of the specified data type.\n * @param redLUT an array of \u003ccode\u003ebyte\u003c/code\u003es containingthe red values for each index.\n * @param greenLUT an array of \u003ccode\u003ebyte\u003c/code\u003es containing * thegreen values for each index.\n * @param blueLUT an array of \u003ccode\u003ebyte\u003c/code\u003es containing theblue values for each index.\n * @param alphaLUT an array of \u003ccode\u003ebyte\u003c/code\u003es containing thealpha values for each index, or \u003ccode\u003enull\u003c/code\u003e to create a fully opaque LUT.\n * @param bits the number of bits in each index.\n * @param dataType the desired output type, as one of the enumerationsfrom the \u003ccode\u003eDataBuffer\u003c/code\u003e class.\n * @return an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desiredcharacteristics.\n * @exception IllegalArgumentException if \u003ccode\u003eredLUT\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003egreenLUT\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003eblueLUT\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003ebits\u003c/code\u003e isnot one of 1, 2, 4, 8, or 16.\n * @exception IllegalArgumentException if thenon-\u003ccode\u003enull\u003c/code\u003e LUT parameters do not have lengths of exactly \u003ccode\u003e1 \u003c\u003c bits\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003edataType\u003c/code\u003e isnot one of \u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \u003ccode\u003eDataBuffer.TYPE_SHORT\u003c/code\u003e, \u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e, or \u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003ebits\u003c/code\u003e islarger than the bit size of the given \u003ccode\u003edataType\u003c/code\u003e.\n */\n","tf":{"freq":{"desiredcharacterist":1,"containingth":1,"islarg":1,"one":3,"data":9,"pack":1,"desir":1,"type":6,"specifi":3,"buffer":5,"opaqu":1,"thealpha":1,"isnot":2,"given":2,"exact":1,"alpha":1,"length":1,"valu":5,"thenon":1,"argument":7,"element":1,"except":14,"index":8,"creat":2,"green":2,"theblu":1,"paramet":1,"number":1,"fulli":1,"format":1,"imag":2,"illeg":7,"depth":1,"size":1,"bit":7,"red":3,"color":1,"blue":2,"contain":3,"thegreen":1,"will":1,"enumerationsfrom":1,"output":1,"array":5},"maxFreq":14,"totalTerms":121},"loc":8}