{"id":25117,"className":"javax.imageio.ImageReadParam","methodName":"setDestination","signature":"\u003cjavax.imageio.ImageReadParam: void setDestination(java.awt.image.BufferedImage)\u003e","javadoc":"/** \n * Supplies a \u003ccode\u003eBufferedImage\u003c/code\u003e to be used as the destination for decoded pixel data.  The currently set image will be written to by the \u003ccode\u003eread\u003c/code\u003e, \u003ccode\u003ereadAll\u003c/code\u003e, and \u003ccode\u003ereadRaster\u003c/code\u003e methods, and a reference to it will be returned by those methods. \u003cp\u003e Pixel data from the aforementioned methods will be written starting at the offset specified by \u003ccode\u003egetDestinationOffset\u003c/code\u003e. \u003cp\u003e If \u003ccode\u003edestination\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a newly-created \u003ccode\u003eBufferedImage\u003c/code\u003e will be returned by those methods. \u003cp\u003e At the time of reading, the image is checked to verify that its \u003ccode\u003eColorModel\u003c/code\u003e and \u003ccode\u003eSampleModel\u003c/code\u003e correspond to one of the \u003ccode\u003eImageTypeSpecifier\u003c/code\u003es returned from the \u003ccode\u003eImageReader\u003c/code\u003e\u0027s \u003ccode\u003egetImageTypes\u003c/code\u003e method.  If it does not, the reader will throw an \u003ccode\u003eIIOException\u003c/code\u003e.\n * @param destination the BufferedImage to be written to, or\u003ccode\u003enull\u003c/code\u003e.\n * @see #getDestination\n */\n","tf":{"freq":{"model":2,"pixel":2,"correspond":1,"one":1,"data":2,"use":1,"type":2,"aforement":1,"specifi":2,"buffer":3,"time":1,"refer":1,"written":3,"verifi":1,"current":1,"read":4,"oexcept":1,"offset":2,"decod":1,"check":1,"creat":1,"suppli":1,"imag":8,"raster":1,"newli":1,"reader":2,"color":1,"start":1,"will":5,"method":5,"sampl":1,"destin":6},"maxFreq":8,"totalTerms":66},"loc":3}