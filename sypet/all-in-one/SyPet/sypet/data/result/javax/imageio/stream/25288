{"id":25288,"className":"javax.imageio.stream.ImageInputStreamImpl","methodName":"read","signature":"\u003cjavax.imageio.stream.ImageInputStreamImpl: int read(byte[],int,int)\u003e","javadoc":"/** \n * Reads up to \u003ccode\u003elen\u003c/code\u003e bytes from the stream, and stores them into \u003ccode\u003eb\u003c/code\u003e starting at index \u003ccode\u003eoff\u003c/code\u003e. If no bytes can be read because the end of the stream has been reached, \u003ccode\u003e-1\u003c/code\u003e is returned. \u003cp\u003e The bit offset within the stream must be reset to zero before the read occurs. \u003cp\u003e Subclasses must provide an implementation for this method. The subclass implementation should update the stream position before exiting.\n * @param b an array of bytes to be written to.\n * @param off the starting position within \u003ccode\u003eb\u003c/code\u003e to write to.\n * @param len the maximum number of bytes to read.\n * @return the number of bytes actually read, or \u003ccode\u003e-1\u003c/code\u003eto indicate EOF.\n * @exception IndexOutOfBoundsException if \u003ccode\u003eoff\u003c/code\u003e isnegative, \u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003eoff + len\u003c/code\u003e is greater than \u003ccode\u003eb.length\u003c/code\u003e.\n * @exception NullPointerException if \u003ccode\u003eb\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"stream":4,"greater":1,"store":1,"zero":1,"isneg":1,"must":2,"reach":1,"indic":1,"written":1,"length":1,"write":1,"read":6,"reset":1,"offset":1,"end":1,"except":6,"index":2,"error":1,"number":2,"len":4,"provid":1,"exit":1,"bit":1,"updat":1,"start":2,"maximum":1,"subclass":2,"pointer":1,"actual":1,"negat":1,"method":1,"within":2,"posit":2,"bound":1,"occur":2,"array":1},"maxFreq":6,"totalTerms":60},"loc":0}