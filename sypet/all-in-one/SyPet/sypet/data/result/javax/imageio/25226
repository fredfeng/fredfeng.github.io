{"id":25226,"className":"javax.imageio.ImageReader","methodName":"getThumbnailWidth","signature":"\u003cjavax.imageio.ImageReader: int getThumbnailWidth(int,int)\u003e","javadoc":"/** \n * Returns the width of the thumbnail preview image indexed by \u003ccode\u003ethumbnailIndex\u003c/code\u003e, associated with the image indexed by \u003ccode\u003eImageIndex\u003c/code\u003e. \u003cp\u003e If the reader does not support thumbnails, (\u003ccode\u003ereaderSupportsThumbnails\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e), an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown. \u003cp\u003e The default implementation simply returns \u003ccode\u003ereadThumbnail(imageindex, thumbnailIndex).getWidth()\u003c/code\u003e.  Subclasses should therefore override this method if possible in order to avoid forcing the thumbnail to be read.\n * @param imageIndex the index of the image to be retrieved.\n * @param thumbnailIndex the index of the thumbnail to be retrieved.\n * @return the width of the desired thumbnail as an \u003ccode\u003eint\u003c/code\u003e.\n * @exception UnsupportedOperationException if thumbnails are notsupported.\n * @exception IllegalStateException if the input source has not been set.\n * @exception IndexOutOfBoundsException if either of the suppliedindices are out of bounds.\n * @exception IOException if an error occurs during reading.\n */\n","tf":{"freq":{"fals":1,"unsupport":2,"simpli":1,"state":1,"possibl":1,"therefor":1,"desir":1,"avoid":1,"order":1,"oper":2,"associ":1,"read":3,"suppliedindic":1,"forc":1,"except":9,"index":10,"thrown":1,"support":2,"error":1,"width":4,"imag":5,"illeg":1,"imageindex":1,"notsupport":1,"either":1,"input":1,"reader":2,"thumbnail":12,"preview":1,"retriev":2,"will":1,"subclass":1,"sourc":1,"method":1,"bound":2,"occur":1},"maxFreq":12,"totalTerms":79},"loc":3}