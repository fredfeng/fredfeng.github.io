{"id":25208,"className":"javax.imageio.ImageReader","methodName":"getImageMetadata","signature":"\u003cjavax.imageio.ImageReader: javax.imageio.metadata.IIOMetadata getImageMetadata(int,java.lang.String,java.util.Set)\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eIIOMetadata\u003c/code\u003e object representing the metadata associated with the given image, or \u003ccode\u003enull\u003c/code\u003e if the reader does not support reading metadata or none is available. \u003cp\u003e The resuting metadata object is only responsible for returning documents in the format named by \u003ccode\u003eformatName\u003c/code\u003e.  Within any documents that are returned, only nodes whose names are members of \u003ccode\u003enodeNames\u003c/code\u003e are required to be returned.  In this way, the amount of metadata processing done by the reader may be kept to a minimum, based on what information is actually needed. \u003cp\u003e If \u003ccode\u003eformatName\u003c/code\u003e is not the name of a supported metadata format, \u003ccode\u003enull\u003c/code\u003e may be returned. \u003cp\u003e In all cases, it is legal to return a more capable metadata object than strictly necessary.  The format name and node names are merely hints that may be used to reduce the reader\u0027s workload. \u003cp\u003e The default implementation simply returns the result of calling \u003ccode\u003egetImageMetadata(imageIndex)\u003c/code\u003e, after checking that the format name is supported.  If it is not, \u003ccode\u003enull\u003c/code\u003e is returned.\n * @param imageIndex the index of the image whose metadata is tobe retrieved.\n * @param formatName a metadata format name that may be used to retrievea document from the returned \u003ccode\u003eIIOMetadata\u003c/code\u003e object.\n * @param nodeNames a \u003ccode\u003eSet\u003c/code\u003e containing the names ofnodes that may be contained in a retrieved document.\n * @return an \u003ccode\u003eIIOMetadata\u003c/code\u003e object, or \u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalStateException if the input source has not beenset.\n * @exception IndexOutOfBoundsException if the supplied index isout of bounds.\n * @exception IllegalArgumentException if \u003ccode\u003eformatName\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003enodeNames\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an error occurs during reading.\n */\n","tf":{"freq":{"need":1,"isout":1,"necessari":1,"amount":1,"requir":1,"given":1,"none":1,"tobe":1,"metadata":10,"argument":2,"except":10,"index":5,"support":3,"respons":1,"whose":2,"done":1,"beenset":1,"avail":1,"format":9,"imag":6,"inform":1,"input":1,"node":5,"ometadata":3,"reader":3,"contain":2,"sourc":1,"mere":1,"strict":1,"legal":1,"result":1,"call":1,"simpli":1,"ofnod":1,"minimum":1,"state":1,"way":1,"use":2,"resut":1,"object":5,"document":4,"retrievea":1,"associ":1,"name":15,"read":2,"kept":1,"member":1,"workload":1,"may":5,"error":1,"check":1,"repres":1,"suppli":1,"capabl":1,"hint":1,"illeg":3,"process":1,"retriev":2,"base":1,"actual":1,"within":1,"reduc":1,"bound":2,"occur":1},"maxFreq":15,"totalTerms":143},"loc":3}