{"id":25212,"className":"javax.imageio.ImageReader","methodName":"readAll","signature":"\u003cjavax.imageio.ImageReader: java.util.Iterator\u003cjavax.imageio.IIOImage\u003e readAll(java.util.Iterator)\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eIterator\u003c/code\u003e containing all the images, thumbnails, and metadata, starting at the index given by \u003ccode\u003egetMinIndex\u003c/code\u003e, from the input source in the form of \u003ccode\u003eIIOImage\u003c/code\u003e objects.  An \u003ccode\u003eIterator\u003c/code\u003e containing \u003ccode\u003eImageReadParam\u003c/code\u003e objects is supplied; one element is consumed for each image read from the input source until no more images are available.  If the read param \u003ccode\u003eIterator\u003c/code\u003e runs out of elements, but there are still more images available from the input source, default read params are used for the remaining images. \u003cp\u003e If \u003ccode\u003eparams\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a default read param will be used for all images. \u003cp\u003e The actual \u003ccode\u003eBufferedImage\u003c/code\u003e referenced by the returned \u003ccode\u003eIIOImage\u003c/code\u003e will be chosen using the algorithm defined by the \u003ccode\u003egetDestination\u003c/code\u003e method. \u003cp\u003e Any registered \u003ccode\u003eIIOReadProgressListener\u003c/code\u003e objects will be notified by calling their \u003ccode\u003esequenceStarted\u003c/code\u003e method once.  Then, for each image decoded, there will be a call to \u003ccode\u003eimageStarted\u003c/code\u003e, followed by calls to \u003ccode\u003eimageProgress\u003c/code\u003e as the read progresses, and finally to \u003ccode\u003eimageComplete\u003c/code\u003e.  The \u003ccode\u003esequenceComplete\u003c/code\u003e method will be called after the last image has been decoded. \u003ccode\u003eIIOReadUpdateListener\u003c/code\u003e objects may be updated at other times during the read as pixels are decoded.  Finally, \u003ccode\u003eIIOReadWarningListener\u003c/code\u003e objects will receive notification of any non-fatal warnings that occur during decoding. \u003cp\u003e The set of source bands to be read and destination bands to be written is determined by calling \u003ccode\u003egetSourceBands\u003c/code\u003e and \u003ccode\u003egetDestinationBands\u003c/code\u003e on the supplied \u003ccode\u003eImageReadParam\u003c/code\u003e.  If the lengths of the arrays returned by these methods differ, the set of source bands contains an index larger that the largest available source index, or the set of destination bands contains an index larger than the largest legal destination index, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown. \u003cp\u003e Thumbnails will be returned in their entirety regardless of the region settings. \u003cp\u003e If any of the supplied \u003ccode\u003eImageReadParam\u003c/code\u003es contain optional setting values not supported by this reader (\u003ci\u003ee.g.\u003c/i\u003e source render size or any format-specific settings), they will be ignored.\n * @param params an \u003ccode\u003eIterator\u003c/code\u003e containing\u003ccode\u003eImageReadParam\u003c/code\u003e objects.\n * @return an \u003ccode\u003eIterator\u003c/code\u003e representing thecontents of the input source as \u003ccode\u003eIIOImage\u003c/code\u003es.\n * @exception IllegalStateException if the input source has not beenset.\n * @exception IllegalArgumentException if anynon-\u003ccode\u003enull\u003c/code\u003e element of \u003ccode\u003eparams\u003c/code\u003e is not an \u003ccode\u003eImageReadParam\u003c/code\u003e.\n * @exception IllegalArgumentException if the set of source anddestination bands specified by \u003ccode\u003eparam.getSourceBands\u003c/code\u003e and \u003ccode\u003eparam.getDestinationBands\u003c/code\u003e differ in length or include indices that are out of bounds.\n * @exception IllegalArgumentException if a resulting image wouldhave a width or height less than 1.\n * @exception IOException if an error occurs during reading.\n * @see ImageReadParam\n * @see IIOImage\n */\n","tf":{"freq":{"progress":3,"last":1,"wouldhav":1,"specifi":1,"entireti":1,"buffer":1,"referenc":1,"notif":1,"time":1,"height":1,"band":9,"given":1,"sequenc":2,"anddestin":1,"option":1,"metadata":1,"follow":1,"argument":4,"notifi":1,"element":3,"decod":4,"ignor":1,"thrown":1,"except":11,"index":6,"support":1,"form":1,"fatal":1,"width":1,"beenset":1,"avail":3,"format":1,"imag":19,"size":1,"render":1,"largest":2,"non":1,"input":5,"reader":1,"thumbnail":2,"updat":2,"start":3,"determin":1,"oimag":4,"contain":6,"will":8,"sourc":12,"anynon":1,"array":1,"region":1,"legal":1,"warn":2,"result":1,"defin":1,"call":5,"pixel":1,"one":1,"state":1,"use":3,"object":6,"chosen":1,"run":1,"algorithm":1,"consum":1,"indic":1,"written":1,"length":2,"oread":3,"read":15,"regist":1,"valu":1,"listen":3,"less":1,"regardless":1,"complet":2,"min":1,"may":1,"includ":1,"error":1,"repres":1,"larger":2,"receiv":1,"still":1,"suppli":3,"illeg":5,"differ":2,"specif":1,"remain":1,"thecont":1,"actual":1,"method":4,"iter":5,"bound":1,"occur":2,"destin":6},"maxFreq":19,"totalTerms":237},"loc":53}