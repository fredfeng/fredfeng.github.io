{"id":25183,"className":"javax.imageio.ImageIO","methodName":"write","signature":"\u003cjavax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.File)\u003e","javadoc":"/** \n * Writes an image using an arbitrary \u003ccode\u003eImageWriter\u003c/code\u003e that supports the given format to a \u003ccode\u003eFile\u003c/code\u003e.  If there is already a \u003ccode\u003eFile\u003c/code\u003e present, its contents are discarded.\n * @param im a \u003ccode\u003eRenderedImage\u003c/code\u003e to be written.\n * @param formatName a \u003ccode\u003eString\u003c/code\u003e containg the informalname of the format.\n * @param output a \u003ccode\u003eFile\u003c/code\u003e to be written to.\n * @return \u003ccode\u003efalse\u003c/code\u003e if no appropriate writer is found.\n * @exception IllegalArgumentException if any parameter is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an error occurs during writing.\n */\n","tf":{"freq":{"fals":1,"conta":1,"use":1,"discard":1,"informalnam":1,"arbitrari":1,"given":1,"file":3,"written":2,"name":1,"write":3,"writer":2,"argument":1,"except":4,"support":1,"error":1,"paramet":1,"format":3,"imag":3,"illeg":1,"render":1,"content":1,"present":1,"appropri":1,"string":1,"alreadi":1,"output":1,"occur":1,"found":1},"maxFreq":4,"totalTerms":42},"loc":27}