{"id":25170,"className":"javax.imageio.ImageIO","methodName":"getImageWriters","signature":"\u003cjavax.imageio.ImageIO: java.util.Iterator\u003cjavax.imageio.ImageWriter\u003e getImageWriters(javax.imageio.ImageTypeSpecifier,java.lang.String)\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eIterator\u003c/code\u003e containing all currently registered \u003ccode\u003eImageWriter\u003c/code\u003es that claim to be able to encode images of the given layout (specified using an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e) in the given format.\n * @param type an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e indicating thelayout of the image to be written.\n * @param formatName the informal name of the \u003ccode\u003eformat\u003c/code\u003e.\n * @return an \u003ccode\u003eIterator\u003c/code\u003e containing \u003ccode\u003eImageWriter\u003c/code\u003es.\n * @exception IllegalArgumentException if any parameter is\u003ccode\u003enull\u003c/code\u003e.\n * @see javax.imageio.spi.ImageWriterSpi#canEncodeImage(ImageTypeSpecifier)\n */\n","tf":{"freq":{"use":1,"abl":1,"type":4,"specifi":4,"given":2,"indic":1,"javax":1,"spi":2,"layout":1,"written":1,"name":2,"current":1,"regist":1,"writer":4,"imageio":1,"argument":1,"except":2,"thelayout":1,"paramet":1,"format":3,"imag":10,"illeg":1,"inform":1,"encod":2,"contain":2,"claim":1,"iter":2},"maxFreq":10,"totalTerms":54},"loc":21}