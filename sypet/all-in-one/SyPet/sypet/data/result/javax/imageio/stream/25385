{"id":25385,"className":"javax.imageio.stream.ImageOutputStream","methodName":"writeBytes","signature":"\u003cjavax.imageio.stream.ImageOutputStream: void writeBytes(java.lang.String)\u003e","javadoc":"/** \n * Writes a string to the output stream. For every character in the string \u003ccode\u003es\u003c/code\u003e, taken in order, one byte is written to the output stream. If \u003ccode\u003es\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown. \u003cp\u003e If \u003ccode\u003es.length\u003c/code\u003e is zero, then no bytes are written. Otherwise, the character \u003ccode\u003es[0]\u003c/code\u003e is written first, then \u003ccode\u003es[1]\u003c/code\u003e, and so on; the last character written is \u003ccode\u003es[s.length-1]\u003c/code\u003e. For each character, one byte is written, the low-order byte, in exactly the manner of the \u003ccode\u003ewriteByte\u003c/code\u003e method. The high-order eight bits of each character in the string are ignored. \u003cp\u003e If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first.  The bit offset will be 0 after the write.\n * @param s a \u003ccode\u003eString\u003c/code\u003e containing the value to bewritten.\n * @exception NullPointerException if \u003ccode\u003es\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"otherwis":1,"stream":3,"last":1,"one":2,"zero":2,"eight":1,"bewritten":1,"order":3,"written":6,"exact":1,"current":1,"write":4,"length":2,"valu":1,"taken":1,"offset":2,"everi":1,"pad":1,"ignor":1,"except":5,"thrown":1,"error":1,"charact":5,"non":1,"bit":3,"remaind":1,"contain":1,"string":4,"will":1,"pointer":2,"manner":1,"method":1,"within":1,"high":1,"output":2,"low":1,"first":2,"occur":1},"maxFreq":6,"totalTerms":70},"loc":0}