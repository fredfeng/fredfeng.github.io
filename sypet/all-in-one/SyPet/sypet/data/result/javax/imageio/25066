{"id":25066,"className":"javax.imageio.ImageWriter","methodName":"writeToSequence","signature":"\u003cjavax.imageio.ImageWriter: void writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam)\u003e","javadoc":"/** \n * Appends a single image and possibly associated metadata and thumbnails, to the output.  If the output is an \u003ccode\u003eImageOutputStream\u003c/code\u003e, the existing contents of the output prior to the current seek position may be flushed, and need not be readable or writable, unless the plug-in needs to be able to patch up the header information when \u003ccode\u003eendWriteSequence\u003c/code\u003e is called (\u003citalic\u003ee.g.\u003c/italic\u003e TIFF). \u003cp\u003e If \u003ccode\u003ecanWriteSequence\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, this method will throw an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e. \u003cp\u003e The output must have been set beforehand using the \u003ccode\u003esetOutput\u003c/code\u003e method. \u003cp\u003e \u003ccode\u003eprepareWriteSequence\u003c/code\u003e must have been called beforehand, or an \u003ccode\u003eIllegalStateException\u003c/code\u003e is thrown. \u003cp\u003e If \u003ccode\u003ecanWriteRasters\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e, the \u003ccode\u003eIIOImage\u003c/code\u003e may contain a \u003ccode\u003eRaster\u003c/code\u003e source.  Otherwise, it must contain a \u003ccode\u003eRenderedImage\u003c/code\u003e source. \u003cp\u003e The supplied thumbnails will be resized if needed, and any thumbnails in excess of the supported number will be ignored. If the format requires additional thumbnails that are not provided, the writer will generate them internally. \u003cp\u003e An \u003ccode\u003eImageWriteParam\u003c/code\u003e may optionally be supplied to control the writing process.  If \u003ccode\u003eparam\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a default write param will be used. \u003cp\u003e If the supplied \u003ccode\u003eImageWriteParam\u003c/code\u003e contains optional setting values not supported by this writer (\u003ci\u003ee.g.\u003c/i\u003e progressive encoding or any format-specific settings), they will be ignored. \u003cp\u003e The default implementation throws an \u003ccode\u003eIllegalStateException\u003c/code\u003e if the output is \u003ccode\u003enull\u003c/code\u003e, and otherwise throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @param image an \u003ccode\u003eIIOImage\u003c/code\u003e object containing animage, thumbnails, and metadata to be written.\n * @param param an \u003ccode\u003eImageWriteParam\u003c/code\u003e, or\u003ccode\u003enull\u003c/code\u003e to use a default \u003ccode\u003eImageWriteParam\u003c/code\u003e.\n * @exception IllegalStateException if the output has notbeen set, or \u003ccode\u003eprepareWriteSequence\u003c/code\u003e has not been called.\n * @exception UnsupportedOperationException if\u003ccode\u003ecanWriteSequence\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003eimage\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception UnsupportedOperationException if \u003ccode\u003eimage\u003c/code\u003econtains a \u003ccode\u003eRaster\u003c/code\u003e and \u003ccode\u003ecanWriteRasters\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IOException if an error occurs during writing.\n */\n","tf":{"freq":{"progress":1,"need":3,"fals":3,"unsupport":4,"singl":1,"possibl":1,"abl":1,"must":3,"resiz":1,"prior":1,"requir":1,"oper":4,"sequenc":6,"writer":2,"option":2,"metadata":2,"argument":1,"control":1,"append":1,"ignor":2,"except":14,"thrown":1,"support":2,"number":1,"writabl":1,"format":2,"imag":10,"provid":1,"header":1,"prepar":2,"render":1,"content":1,"inform":1,"encod":1,"thumbnail":5,"plug":1,"oimag":2,"contain":5,"will":6,"notbeen":1,"sourc":2,"output":8,"posit":1,"otherwis":2,"call":3,"stream":1,"readabl":1,"excess":1,"state":3,"use":3,"object":1,"animag":1,"unless":1,"associ":1,"written":1,"current":1,"write":15,"valu":1,"exist":1,"end":1,"addit":1,"may":3,"error":1,"ital":2,"true":1,"suppli":3,"illeg":4,"seek":1,"process":1,"raster":4,"specif":1,"flush":1,"generat":1,"beforehand":2,"intern":1,"method":2,"patch":1,"occur":1},"maxFreq":15,"totalTerms":180},"loc":3}