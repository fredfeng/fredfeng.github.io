{"id":25073,"className":"javax.imageio.ImageWriter","methodName":"writeInsert","signature":"\u003cjavax.imageio.ImageWriter: void writeInsert(int,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)\u003e","javadoc":"/** \n * Inserts a new image into an existing image stream.  Existing images with an index greater than \u003ccode\u003eimageIndex\u003c/code\u003e are preserved, and their indices are each increased by 1.  A value for \u003ccode\u003eimageIndex\u003c/code\u003e of -1 may be used to signify an index one larger than the previous largest index; that is, it will cause the image to be logically appended to the end of the sequence.  If the output is an \u003ccode\u003eImageOutputStream\u003c/code\u003e, the entirety of the stream must be both readable and writeable. \u003cp\u003e If \u003ccode\u003ecanInsertImage(imageIndex)\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown. \u003cp\u003e An \u003ccode\u003eImageWriteParam\u003c/code\u003e may optionally be supplied to control the writing process.  If \u003ccode\u003eparam\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a default write param will be used. \u003cp\u003e If the supplied \u003ccode\u003eImageWriteParam\u003c/code\u003e contains optional setting values not supported by this writer (\u003ci\u003ee.g.\u003c/i\u003e progressive encoding or any format-specific settings), they will be ignored. \u003cp\u003e The default implementation throws an \u003ccode\u003eIllegalStateException\u003c/code\u003e if the output is \u003ccode\u003enull\u003c/code\u003e, and otherwise throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @param imageIndex the index at which to write the image.\n * @param image an \u003ccode\u003eIIOImage\u003c/code\u003e object containing animage, thumbnails, and metadata to be written.\n * @param param an \u003ccode\u003eImageWriteParam\u003c/code\u003e, or\u003ccode\u003enull\u003c/code\u003e to use a default \u003ccode\u003eImageWriteParam\u003c/code\u003e.\n * @exception IllegalStateException if the output has notbeen set.\n * @exception UnsupportedOperationException if\u003ccode\u003ecanInsertImage(imageIndex)\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003eimage\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IndexOutOfBoundsException if \u003ccode\u003eimageIndex\u003c/code\u003eis less than -1 or greater than the largest available index.\n * @exception UnsupportedOperationException if \u003ccode\u003eimage\u003c/code\u003econtains a \u003ccode\u003eRaster\u003c/code\u003e and \u003ccode\u003ecanWriteRasters\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IOException if an error occurs during writing.\n */\n","tf":{"freq":{"fals":3,"progress":1,"unsupport":4,"greater":2,"signifi":1,"must":1,"entireti":1,"oper":4,"sequenc":1,"writer":1,"option":2,"metadata":1,"argument":1,"append":1,"control":1,"index":12,"except":15,"thrown":1,"ignor":1,"support":1,"preserv":1,"avail":1,"format":1,"imag":21,"logic":1,"largest":2,"writeabl":1,"encod":1,"thumbnail":1,"oimag":1,"contain":3,"will":4,"notbeen":1,"output":4,"otherwis":1,"increas":1,"stream":3,"one":1,"readabl":1,"state":2,"use":3,"object":1,"animag":1,"indic":1,"written":1,"write":10,"valu":2,"exist":2,"less":1,"end":1,"may":2,"error":1,"previous":1,"larger":1,"suppli":2,"illeg":3,"process":1,"raster":2,"specif":1,"caus":1,"insert":4,"bound":1,"occur":1},"maxFreq":21,"totalTerms":151},"loc":3}