{"id":25337,"className":"javax.imageio.stream.ImageInputStream","methodName":"readUnsignedByte","signature":"\u003cjavax.imageio.stream.ImageInputStream: int readUnsignedByte()\u003e","javadoc":"/** \n * Reads a byte from the stream, and (conceptually) converts it to an int, masks it with \u003ccode\u003e0xff\u003c/code\u003e in order to strip off any sign-extension bits, and returns it as a \u003ccode\u003ebyte\u003c/code\u003e value. \u003cp\u003e Thus, byte values between \u003ccode\u003e0x00\u003c/code\u003e and \u003ccode\u003e0x7f\u003c/code\u003e are simply returned as integer values between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e127\u003c/code\u003e.  Values between \u003ccode\u003e0x80\u003c/code\u003e and \u003ccode\u003e0xff\u003c/code\u003e, which normally represent negative \u003ccode\u003ebyte\u003c/code\u003evalues, will be mapped into positive integers between \u003ccode\u003e128\u003c/code\u003e and \u003ccode\u003e255\u003c/code\u003e. \u003cp\u003e The bit offset within the stream is reset to zero before the read occurs.\n * @return an unsigned byte value from the stream.\n * @exception EOFException if the end of the stream is reached.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"stream":4,"simpli":1,"normal":1,"xff":2,"mask":1,"convert":1,"zero":1,"reach":1,"order":1,"extens":1,"map":1,"reset":1,"read":3,"valu":6,"offset":1,"end":1,"except":3,"error":1,"thus":1,"repres":1,"strip":1,"conceptu":1,"fexcept":1,"sign":1,"bit":2,"unsign":2,"will":1,"negat":1,"within":1,"integ":2,"posit":1,"occur":2},"maxFreq":6,"totalTerms":49},"loc":0}