{"id":25061,"className":"javax.imageio.ImageWriter","methodName":"write","signature":"\u003cjavax.imageio.ImageWriter: void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)\u003e","javadoc":"/** \n * Appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output.  Any necessary header information is included.  If the output is an \u003ccode\u003eImageOutputStream\u003c/code\u003e, its existing contents prior to the current seek position are not affected, and need not be readable or writable. \u003cp\u003e The output must have been set beforehand using the \u003ccode\u003esetOutput\u003c/code\u003e method. \u003cp\u003e Stream metadata may optionally be supplied; if it is \u003ccode\u003enull\u003c/code\u003e, default stream metadata will be used. \u003cp\u003e If \u003ccode\u003ecanWriteRasters\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e, the \u003ccode\u003eIIOImage\u003c/code\u003e may contain a \u003ccode\u003eRaster\u003c/code\u003e source.  Otherwise, it must contain a \u003ccode\u003eRenderedImage\u003c/code\u003e source. \u003cp\u003e The supplied thumbnails will be resized if needed, and any thumbnails in excess of the supported number will be ignored. If the format requires additional thumbnails that are not provided, the writer should generate them internally. \u003cp\u003e  An \u003ccode\u003eImageWriteParam\u003c/code\u003e may optionally be supplied to control the writing process.  If \u003ccode\u003eparam\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a default write param will be used. \u003cp\u003e If the supplied \u003ccode\u003eImageWriteParam\u003c/code\u003e contains optional setting values not supported by this writer (\u003ci\u003ee.g.\u003c/i\u003e progressive encoding or any format-specific settings), they will be ignored.\n * @param streamMetadata an \u003ccode\u003eIIOMetadata\u003c/code\u003e object representingstream metadata, or \u003ccode\u003enull\u003c/code\u003e to use default values.\n * @param image an \u003ccode\u003eIIOImage\u003c/code\u003e object containing animage, thumbnails, and metadata to be written.\n * @param param an \u003ccode\u003eImageWriteParam\u003c/code\u003e, or\u003ccode\u003enull\u003c/code\u003e to use a default \u003ccode\u003eImageWriteParam\u003c/code\u003e.\n * @exception IllegalStateException if the output has notbeen set.\n * @exception UnsupportedOperationException if \u003ccode\u003eimage\u003c/code\u003econtains a \u003ccode\u003eRaster\u003c/code\u003e and \u003ccode\u003ecanWriteRasters\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003eimage\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an error occurs during writing.\n */\n","tf":{"freq":{"fals":1,"progress":1,"need":2,"unsupport":1,"singl":1,"necessari":1,"must":2,"prior":1,"resiz":1,"requir":1,"oper":1,"writer":2,"option":3,"metadata":6,"argument":1,"control":1,"append":1,"except":8,"ignor":2,"support":2,"writabl":1,"number":1,"format":2,"imag":12,"provid":1,"header":1,"render":1,"content":1,"inform":1,"encod":1,"ometadata":1,"thumbnail":5,"contain":6,"oimag":2,"will":5,"notbeen":1,"sourc":2,"output":6,"representingstream":1,"posit":1,"otherwis":1,"stream":6,"readabl":1,"state":1,"excess":1,"use":5,"object":2,"affect":1,"animag":1,"associ":1,"written":1,"current":1,"write":10,"valu":2,"exist":1,"complet":1,"addit":1,"may":3,"includ":1,"error":1,"true":1,"suppli":4,"illeg":2,"seek":1,"process":1,"raster":4,"specif":1,"generat":1,"beforehand":1,"intern":1,"method":1,"occur":1},"maxFreq":12,"totalTerms":152},"loc":0}