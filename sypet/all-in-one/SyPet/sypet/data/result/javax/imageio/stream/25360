{"id":25360,"className":"javax.imageio.stream.ImageInputStream","methodName":"readBits","signature":"\u003cjavax.imageio.stream.ImageInputStream: long readBits(int)\u003e","javadoc":"/** \n * Reads a bitstring from the stream and returns it as a \u003ccode\u003elong\u003c/code\u003e, with the first bit read becoming the most significant bit of the output.  The read starts within the byte indicated by \u003ccode\u003egetStreamPosition\u003c/code\u003e, at the bit given by \u003ccode\u003egetBitOffset\u003c/code\u003e.  The bit offset is advanced by \u003ccode\u003enumBits\u003c/code\u003e and reduced modulo 8. \u003cp\u003e The byte order of the stream has no effect on this method.  The return value of this method is constructed as though the bits were read one at a time, and shifted into the right side of the return value, as shown by the following pseudo-code: \u003cpre\u003e long accum \u003d 0L; for (int i \u003d 0; i \u003c numBits; i++) { accum \u003c\u003c\u003d 1; // Shift left one bit to make room accum |\u003d readBit(); } \u003c/pre\u003e Note that the result of \u003ccode\u003ereadBits(32)\u003c/code\u003e may thus not be equal to that of \u003ccode\u003ereadInt()\u003c/code\u003e if a reverse network byte order is being used (i.e., \u003ccode\u003egetByteOrder() \u003d\u003d false\u003c/code\u003e). \u003cp\u003e If the end of the stream is encountered before all the bits have been read, an \u003ccode\u003eEOFException\u003c/code\u003e is thrown.\n * @param numBits the number of bits to read, as an \u003ccode\u003eint\u003c/code\u003ebetween 0 and 64, inclusive.\n * @return the bitstring, as a \u003ccode\u003elong\u003c/code\u003e with the last bitread stored in the least significant bit.\n * @exception IllegalArgumentException if \u003ccode\u003enumBits\u003c/code\u003eis not between 0 and 64, inclusive.\n * @exception EOFException if the stream reaches the end beforereading all the bits.\n * @exception IOException if an I/O error occurs.\n */\n","tf":{"freq":{"fals":1,"store":1,"last":1,"least":1,"pseudo":1,"beforeread":1,"though":1,"time":1,"becom":1,"given":1,"right":1,"follow":1,"accum":3,"argument":1,"except":5,"thrown":1,"signific":2,"shown":1,"number":1,"bit":18,"advanc":1,"start":1,"output":1,"posit":1,"make":1,"room":1,"result":1,"stream":5,"one":2,"use":1,"network":1,"reach":1,"inclus":2,"revers":1,"order":3,"indic":1,"bitstr":2,"side":1,"read":10,"valu":2,"left":1,"offset":2,"note":1,"end":2,"may":1,"error":1,"thus":1,"bitread":1,"equal":1,"illeg":1,"fexcept":2,"num":4,"effect":1,"pre":2,"encount":1,"modulo":1,"method":2,"construct":1,"reduc":1,"within":1,"first":1,"shift":2,"occur":1},"maxFreq":18,"totalTerms":115},"loc":0}