{"id":25184,"className":"javax.imageio.ImageIO","methodName":"write","signature":"\u003cjavax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)\u003e","javadoc":"/** \n * Writes an image using an arbitrary \u003ccode\u003eImageWriter\u003c/code\u003e that supports the given format to an \u003ccode\u003eOutputStream\u003c/code\u003e. \u003cp\u003e This method \u003cem\u003edoes not\u003c/em\u003e close the provided \u003ccode\u003eOutputStream\u003c/code\u003e after the write operation has completed; it is the responsibility of the caller to close the stream, if desired. \u003cp\u003e The current cache settings from \u003ccode\u003egetUseCache\u003c/code\u003eand \u003ccode\u003egetCacheDirectory\u003c/code\u003e will be used to control caching.\n * @param im a \u003ccode\u003eRenderedImage\u003c/code\u003e to be written.\n * @param formatName a \u003ccode\u003eString\u003c/code\u003e containg the informalname of the format.\n * @param output an \u003ccode\u003eOutputStream\u003c/code\u003e to be written to.\n * @return \u003ccode\u003efalse\u003c/code\u003e if no appropriate writer is found.\n * @exception IllegalArgumentException if any parameter is\u003ccode\u003enull\u003c/code\u003e.\n * @exception IOException if an error occurs during writing.\n */\n","tf":{"freq":{"fals":1,"caller":1,"stream":4,"directori":1,"conta":1,"use":3,"informalnam":1,"desir":1,"close":2,"arbitrari":1,"given":1,"oper":1,"name":1,"written":2,"write":4,"current":1,"writer":2,"complet":1,"argument":1,"control":1,"except":4,"support":1,"error":1,"respons":1,"paramet":1,"format":3,"cach":4,"imag":3,"illeg":1,"provid":1,"render":1,"appropri":1,"string":1,"will":1,"method":1,"output":4,"occur":1,"found":1},"maxFreq":4,"totalTerms":62},"loc":17}