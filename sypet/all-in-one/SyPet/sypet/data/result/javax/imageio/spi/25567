{"id":25567,"className":"javax.imageio.spi.ServiceRegistry","methodName":"lookupProviders","signature":"\u003cjavax.imageio.spi.ServiceRegistry: java.util.Iterator\u003cT\u003e lookupProviders(java.lang.Class)\u003e","javadoc":"/** \n * Locates and incrementally instantiates the available providers of a given service using the context class loader.  This convenience method is equivalent to: \u003cpre\u003e ClassLoader cl \u003d Thread.currentThread().getContextClassLoader(); return Service.providers(service, cl); \u003c/pre\u003e\n * @param providerClass a \u003ccode\u003eClass\u003c/code\u003eobject indicating theclass or interface of the service providers being detected.\n * @return An \u003ccode\u003eIterator\u003c/code\u003e that yields provider objectsfor the given service, in some arbitrary order.  The iterator will throw an \u003ccode\u003eError\u003c/code\u003e if a provider-configuration file violates the specified format or if a provider class cannot be found and instantiated.\n * @exception IllegalArgumentException if\u003ccode\u003eproviderClass\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n */\n","tf":{"freq":{"theclass":1,"yield":1,"instanti":2,"servic":5,"use":1,"object":1,"violat":1,"lookup":1,"specifi":1,"arbitrari":1,"order":1,"given":2,"indic":1,"equival":1,"file":1,"thread":2,"current":1,"conveni":1,"argument":1,"increment":1,"detect":1,"objectsfor":1,"except":2,"locat":1,"error":1,"loader":3,"avail":1,"format":1,"illeg":1,"provid":9,"configur":1,"pre":2,"will":1,"context":2,"method":1,"iter":2,"found":1},"maxFreq":9,"totalTerms":58},"loc":6}