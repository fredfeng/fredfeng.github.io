{"id":25521,"className":"javax.imageio.spi.ImageWriterSpi","methodName":"canEncodeImage","signature":"\u003cjavax.imageio.spi.ImageWriterSpi: boolean canEncodeImage(javax.imageio.ImageTypeSpecifier)\u003e","javadoc":"/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the \u003ccode\u003eImageWriter\u003c/code\u003e implementation associated with this service provider is able to encode an image with the given layout.  The layout (\u003ci\u003ei.e.\u003c/i\u003e, the image\u0027s \u003ccode\u003eSampleModel\u003c/code\u003e and \u003ccode\u003eColorModel\u003c/code\u003e) is described by an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e object. \u003cp\u003e A return value of \u003ccode\u003etrue\u003c/code\u003e is not an absolute guarantee of successful encoding; the encoding process may still produce errors due to factors such as I/O errors, inconsistent or malformed data structures, etc.  The intent is that a reasonable inspection of the basic structure of the image be performed in order to determine if it is within the scope of the encoding format.  For example, a service provider for a format that can only encode greyscale would return \u003ccode\u003efalse\u003c/code\u003e if handed an RGB \u003ccode\u003eBufferedImage\u003c/code\u003e. Similarly, a service provider for a format that can encode 8-bit RGB imagery might refuse to encode an image with an associated alpha channel. \u003cp\u003e Different \u003ccode\u003eImageWriter\u003c/code\u003es, and thus service providers, may choose to be more or less strict.  For example, they might accept an image with premultiplied alpha even though it will have to be divided out of each pixel, at some loss of precision, in order to be stored.\n * @param type an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e specifying thelayout of the image to be written.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this writer is likely to be ableto encode images with the given layout.\n * @exception IllegalArgumentException if \u003ccode\u003etype\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e.\n */\n","tf":{"freq":{"fals":1,"store":1,"reason":1,"accept":1,"servic":4,"etc":1,"perform":1,"abl":1,"type":4,"greyscal":1,"though":1,"specifi":3,"premultipli":1,"buffer":1,"given":2,"basic":1,"precis":1,"writer":3,"argument":1,"except":2,"thelayout":1,"describ":1,"absolut":1,"format":3,"like":1,"imag":13,"provid":4,"bit":1,"encod":9,"malform":1,"determin":1,"will":1,"due":1,"even":1,"strict":1,"inspect":1,"ableto":1,"might":2,"inconsist":1,"model":2,"scope":1,"loss":1,"pixel":1,"structur":2,"data":1,"object":1,"refus":1,"hand":1,"order":2,"associ":2,"written":1,"alpha":2,"layout":3,"choos":1,"valu":1,"less":1,"similar":1,"may":2,"error":2,"thus":1,"guarante":1,"divid":1,"true":3,"still":1,"produc":1,"factor":1,"illeg":1,"intent":1,"process":1,"differ":1,"imageri":1,"color":1,"exampl":2,"within":1,"channel":1,"success":1,"sampl":1},"maxFreq":13,"totalTerms":127},"loc":0}