{"id":24994,"className":"javax.imageio.ImageWriteParam","methodName":"isCompressionLossless","signature":"\u003cjavax.imageio.ImageWriteParam: boolean isCompressionLossless()\u003e","javadoc":"/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the current compression type provides lossless compression.  If a plug-in provides only one mandatory compression type, then this method may be called without calling \u003ccode\u003esetCompressionType\u003c/code\u003e first. \u003cp\u003e If there are multiple compression types but none has been set, an \u003ccode\u003eIllegalStateException\u003c/code\u003e is thrown. \u003cp\u003e The default implementation checks whether compression is supported and the compression mode is \u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e.  If so, if \u003ccode\u003egetCompressionTypes()\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003egetCompressionType()\u003c/code\u003e is non-\u003ccode\u003enull\u003c/code\u003e \u003ccode\u003etrue\u003c/code\u003e is returned as a convenience.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the current compression type islossless.\n * @exception UnsupportedOperationException if the writer does notsupport compression.\n * @exception IllegalStateException if the compression mode is not\u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e.\n * @exception IllegalStateException if the set of legalcompression types is non-\u003ccode\u003enull\u003c/code\u003e and the current compression type is \u003ccode\u003enull\u003c/code\u003e.\n */\n","tf":{"freq":{"call":2,"unsupport":1,"legalcompress":1,"one":1,"state":3,"type":9,"islossless":1,"whether":1,"mode":2,"oper":1,"current":3,"none":1,"writer":1,"conveni":1,"lossless":2,"may":1,"except":7,"thrown":1,"support":1,"multipl":1,"check":1,"true":3,"provid":2,"without":1,"illeg":3,"notsupport":1,"non":2,"compress":14,"plug":1,"mandatori":1,"method":1,"first":1},"maxFreq":14,"totalTerms":72},"loc":15}