{"id":24996,"className":"javax.imageio.ImageWriteParam","methodName":"getCompressionQuality","signature":"\u003cjavax.imageio.ImageWriteParam: float getCompressionQuality()\u003e","javadoc":"/** \n * Returns the current compression quality setting. \u003cp\u003e If there are multiple compression types but none has been set, an \u003ccode\u003eIllegalStateException\u003c/code\u003e is thrown. \u003cp\u003e The default implementation checks that compression is supported and that the compression mode is \u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e.  If so, if \u003ccode\u003egetCompressionTypes()\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003egetCompressionType()\u003c/code\u003e is non-\u003ccode\u003enull\u003c/code\u003e, it returns the value of the \u003ccode\u003ecompressionQuality\u003c/code\u003e instance variable.\n * @return the current compression quality setting.\n * @exception UnsupportedOperationException if the writer does notsupport compression.\n * @exception IllegalStateException if the compression mode is not\u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e.\n * @exception IllegalStateException if the set of legalcompression types is non-\u003ccode\u003enull\u003c/code\u003e and the current compression type is \u003ccode\u003enull\u003c/code\u003e.\n * @see #setCompressionQuality\n */\n","tf":{"freq":{"unsupport":1,"except":7,"thrown":1,"support":1,"multipl":1,"check":1,"legalcompress":1,"variabl":1,"state":3,"qualiti":5,"type":5,"illeg":3,"notsupport":1,"instanc":1,"non":2,"mode":2,"compress":13,"oper":1,"current":3,"none":1,"valu":1,"writer":1},"maxFreq":13,"totalTerms":56},"loc":15}