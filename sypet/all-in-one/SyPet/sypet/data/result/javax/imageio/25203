{"id":25203,"className":"javax.imageio.ImageReader","methodName":"getImageTypes","signature":"\u003cjavax.imageio.ImageReader: java.util.Iterator\u003cjavax.imageio.ImageTypeSpecifier\u003e getImageTypes(int)\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eIterator\u003c/code\u003e containing possible image types to which the given image may be decoded, in the form of \u003ccode\u003eImageTypeSpecifiers\u003c/code\u003es.  At least one legal image type will be returned. \u003cp\u003e The first element of the iterator should be the most \"natural\" type for decoding the image with as little loss as possible.  For example, for a JPEG image the first entry should be an RGB image, even though the image data is stored internally in a YCbCr color space.\n * @param imageIndex the index of the image to be\u003ccode\u003eretrieved\u003c/code\u003e.\n * @return an \u003ccode\u003eIterator\u003c/code\u003e containing at least one\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e representing suggested image types for decoding the current given image.\n * @exception IllegalStateException if the input source has not been set.\n * @exception IndexOutOfBoundsException if the supplied index isout of bounds.\n * @exception IOException if an error occurs reading the formatinformation from the input source.\n * @see ImageReadParam#setDestination(BufferedImage)\n * @see ImageReadParam#setDestinationType(ImageTypeSpecifier)\n */\n","tf":{"freq":{"legal":1,"littl":1,"store":1,"loss":1,"least":2,"one":2,"isout":1,"state":1,"ycb":1,"data":1,"possibl":2,"natur":1,"space":1,"type":9,"though":1,"specifi":3,"buffer":1,"formatinform":1,"given":2,"current":1,"read":3,"decod":3,"element":1,"except":6,"index":4,"may":1,"error":1,"form":1,"repres":1,"entri":1,"suppli":1,"suggest":1,"imag":18,"illeg":1,"input":2,"color":1,"retriev":1,"contain":2,"intern":1,"will":1,"exampl":1,"sourc":2,"even":1,"iter":3,"first":2,"bound":2,"destin":2,"occur":1},"maxFreq":18,"totalTerms":99},"loc":0}