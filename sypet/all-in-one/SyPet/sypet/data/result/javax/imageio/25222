{"id":25222,"className":"javax.imageio.ImageReader","methodName":"readAsRenderedImage","signature":"\u003cjavax.imageio.ImageReader: java.awt.image.RenderedImage readAsRenderedImage(int,javax.imageio.ImageReadParam)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eRenderedImage\u003c/code\u003e object that contains the contents of the image indexed by \u003ccode\u003eimageIndex\u003c/code\u003e.  By default, the returned image is simply the \u003ccode\u003eBufferedImage\u003c/code\u003e returned by \u003ccode\u003eread(imageIndex, param)\u003c/code\u003e. \u003cp\u003e The semantics of this method may differ from those of the other \u003ccode\u003eread\u003c/code\u003e methods in several ways.  First, any destination image and/or image type set in the \u003ccode\u003eImageReadParam\u003c/code\u003e may be ignored.  Second, the usual listener calls are not guaranteed to be made, or to be meaningful if they are.  This is because the returned image may not be fully populated with pixel data at the time it is returned, or indeed at any time. \u003cp\u003e If the supplied \u003ccode\u003eImageReadParam\u003c/code\u003e contains optional setting values not supported by this reader (\u003ci\u003ee.g.\u003c/i\u003e source render size or any format-specific settings), they will be ignored. \u003cp\u003e The default implementation just calls  {@link #read \u003ccode\u003eread(imageIndex, param)\u003c/code\u003e}.\n * @param imageIndex the index of the image to be retrieved.\n * @param param an \u003ccode\u003eImageReadParam\u003c/code\u003e used to controlthe reading process, or \u003ccode\u003enull\u003c/code\u003e.\n * @return a \u003ccode\u003eRenderedImage\u003c/code\u003e object providing a view ofthe image.\n * @exception IllegalStateException if the input source has not beenset.\n * @exception IndexOutOfBoundsException if the supplied index isout of bounds.\n * @exception IllegalArgumentException if the set of source anddestination bands specified by \u003ccode\u003eparam.getSourceBands\u003c/code\u003e and \u003ccode\u003eparam.getDestinationBands\u003c/code\u003e differ in length or include indices that are out of bounds.\n * @exception IllegalArgumentException if the resulting imagewould have a width or height less than 1.\n * @exception IOException if an error occurs during reading.\n */\n","tf":{"freq":{"second":1,"isout":1,"type":1,"specifi":1,"controlth":1,"buffer":1,"time":2,"height":1,"band":3,"anddestin":1,"option":1,"argument":2,"imagewould":1,"except":10,"ignor":2,"index":8,"support":1,"width":1,"beenset":1,"format":1,"imag":18,"provid":1,"render":4,"size":1,"content":1,"input":1,"reader":1,"contain":2,"will":1,"sourc":4,"view":1,"result":1,"call":2,"simpli":1,"pixel":1,"link":1,"state":1,"made":1,"data":1,"way":1,"use":1,"inde":1,"object":2,"popul":1,"indic":1,"ofth":1,"semant":1,"length":1,"read":10,"valu":1,"listen":1,"less":1,"usual":1,"just":1,"may":3,"includ":1,"error":1,"guarante":1,"fulli":1,"suppli":2,"meaning":1,"illeg":3,"sever":1,"process":1,"differ":2,"specif":1,"retriev":1,"method":2,"first":1,"bound":3,"occur":1,"destin":2},"maxFreq":18,"totalTerms":138},"loc":3}