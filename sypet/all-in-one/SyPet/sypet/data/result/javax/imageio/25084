{"id":25084,"className":"javax.imageio.ImageWriter","methodName":"replacePixels","signature":"\u003cjavax.imageio.ImageWriter: void replacePixels(java.awt.image.RenderedImage,javax.imageio.ImageWriteParam)\u003e","javadoc":"/** \n * Replaces a portion of an image already present in the output with a portion of the given image.  The image data must match, or be convertible to, the image layout of the existing image. \u003cp\u003e The destination region is specified in the \u003ccode\u003eparam\u003c/code\u003e argument, and will be clipped to the image boundaries and the region supplied to \u003ccode\u003eprepareReplacePixels\u003c/code\u003e.  At least one pixel of the source must not be clipped, or an exception is thrown. \u003cp\u003e An \u003ccode\u003eImageWriteParam\u003c/code\u003e may optionally be supplied to control the writing process.  If \u003ccode\u003eparam\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a default write param will be used. \u003cp\u003e If the supplied \u003ccode\u003eImageWriteParam\u003c/code\u003e contains optional setting values not supported by this writer (\u003ci\u003ee.g.\u003c/i\u003e progressive encoding or any format-specific settings), they will be ignored. \u003cp\u003e This method may only be called after a call to \u003ccode\u003eprepareReplacePixels\u003c/code\u003e, or else an \u003ccode\u003eIllegalStateException\u003c/code\u003e will be thrown. \u003cp\u003e The default implementation throws an \u003ccode\u003eIllegalStateException\u003c/code\u003e if the output is \u003ccode\u003enull\u003c/code\u003e, and otherwise throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @param image a \u003ccode\u003eRenderedImage\u003c/code\u003e containing sourcepixels.\n * @param param an \u003ccode\u003eImageWriteParam\u003c/code\u003e, or\u003ccode\u003enull\u003c/code\u003e to use a default \u003ccode\u003eImageWriteParam\u003c/code\u003e.\n * @exception IllegalStateException if the output has notbeen set.\n * @exception UnsupportedOperationException if\u003ccode\u003ecanReplacePixels(imageIndex)\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IllegalStateException if there is no previous call to\u003ccode\u003eprepareReplacePixels\u003c/code\u003e without a matching call to \u003ccode\u003eendReplacePixels\u003c/code\u003e.\n * @exception IllegalArgumentException if any of the following are true:\u003cul\u003e \u003cli\u003e \u003ccode\u003eimage\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e. \u003cli\u003e \u003ccode\u003eparam\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e. \u003cli\u003e the intersected region does not contain at least one pixel. \u003cli\u003e the layout of \u003ccode\u003eimage\u003c/code\u003e does not match, or this writer cannot convert it to, the existing image layout. \u003c/ul\u003e\n * @exception IOException if an I/O error occurs during writing.\n */\n","tf":{"freq":{"fals":1,"progress":1,"unsupport":2,"least":2,"must":2,"specifi":1,"given":1,"oper":2,"writer":2,"option":2,"follow":1,"argument":2,"control":1,"index":1,"except":14,"thrown":2,"ignor":1,"support":1,"format":1,"imag":16,"without":1,"prepar":3,"els":1,"render":1,"present":1,"encod":1,"intersect":1,"contain":3,"will":4,"notbeen":1,"sourc":1,"match":3,"output":3,"boundari":1,"otherwis":1,"region":3,"call":4,"pixel":8,"one":2,"data":1,"state":4,"convert":2,"use":2,"layout":3,"write":7,"valu":1,"exist":2,"end":1,"portion":2,"clip":2,"may":2,"error":1,"previous":1,"true":1,"suppli":3,"illeg":5,"sourcepixel":1,"process":1,"specif":1,"replac":7,"alreadi":1,"method":1,"occur":1,"destin":1},"maxFreq":16,"totalTerms":153},"loc":3}