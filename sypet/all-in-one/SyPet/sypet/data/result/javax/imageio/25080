{"id":25080,"className":"javax.imageio.ImageWriter","methodName":"prepareInsertEmpty","signature":"\u003cjavax.imageio.ImageWriter: void prepareInsertEmpty(int,javax.imageio.ImageTypeSpecifier,int,int,javax.imageio.metadata.IIOMetadata,java.util.List,javax.imageio.ImageWriteParam)\u003e","javadoc":"/** \n * Begins the insertion of a new image with undefined pixel values into an existing image stream.  Existing images with an index greater than \u003ccode\u003eimageIndex\u003c/code\u003e are preserved, and their indices are each increased by 1.  A value for \u003ccode\u003eimageIndex\u003c/code\u003e of -1 may be used to signify an index one larger than the previous largest index; that is, it will cause the image to be logically appended to the end of the sequence.  If the output is an \u003ccode\u003eImageOutputStream\u003c/code\u003e, the entirety of the stream must be both readable and writeable. \u003cp\u003e The image contents may be supplied later using the \u003ccode\u003ereplacePixels\u003c/code\u003e method. The insertion is not complete until a call to \u003ccode\u003eendInsertEmpty\u003c/code\u003e occurs.  Calls to \u003ccode\u003eprepareReplacePixels\u003c/code\u003e, \u003ccode\u003ereplacePixels\u003c/code\u003e, and \u003ccode\u003eendReplacePixels\u003c/code\u003e may occur between calls to \u003ccode\u003eprepareInsertEmpty\u003c/code\u003e and \u003ccode\u003eendInsertEmpty\u003c/code\u003e.  However, calls to \u003ccode\u003eprepareInsertEmpty\u003c/code\u003e cannot be nested, and calls to \u003ccode\u003eprepareWriteEmpty\u003c/code\u003e and \u003ccode\u003eprepareInsertEmpty\u003c/code\u003e may not be interspersed. \u003cp\u003e If \u003ccode\u003ecanInsertEmpty(imageIndex)\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown. \u003cp\u003e An \u003ccode\u003eImageWriteParam\u003c/code\u003e may optionally be supplied to control the writing process.  If \u003ccode\u003eparam\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a default write param will be used. \u003cp\u003e If the supplied \u003ccode\u003eImageWriteParam\u003c/code\u003e contains optional setting values not supported by this writer (\u003ci\u003ee.g.\u003c/i\u003e progressive encoding or any format-specific settings), they will be ignored. \u003cp\u003e The default implementation throws an \u003ccode\u003eIllegalStateException\u003c/code\u003e if the output is \u003ccode\u003enull\u003c/code\u003e, and otherwise throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.\n * @param imageIndex the index at which to write the image.\n * @param imageType an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e describingthe layout of the image.\n * @param width the width of the image.\n * @param height the height of the image.\n * @param imageMetadata an \u003ccode\u003eIIOMetadata\u003c/code\u003e objectrepresenting image metadata, or \u003ccode\u003enull\u003c/code\u003e.\n * @param thumbnails a \u003ccode\u003eList\u003c/code\u003e of\u003ccode\u003eBufferedImage\u003c/code\u003e thumbnails for this image, or \u003ccode\u003enull\u003c/code\u003e.\n * @param param an \u003ccode\u003eImageWriteParam\u003c/code\u003e, or\u003ccode\u003enull\u003c/code\u003e to use a default \u003ccode\u003eImageWriteParam\u003c/code\u003e.\n * @exception IllegalStateException if the output has notbeen set.\n * @exception UnsupportedOperationException if\u003ccode\u003ecanInsertEmpty(imageIndex)\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\n * @exception IndexOutOfBoundsException if \u003ccode\u003eimageIndex\u003c/code\u003eis less than -1 or greater than the largest available index.\n * @exception IllegalStateException if a previous call to\u003ccode\u003eprepareInsertEmpty\u003c/code\u003e has been made without a corresponding call to \u003ccode\u003eendInsertEmpty\u003c/code\u003e.\n * @exception IllegalStateException if a previous call to\u003ccode\u003eprepareWriteEmpty\u003c/code\u003e has been made without a corresponding call to \u003ccode\u003eendWriteEmpty\u003c/code\u003e.\n * @exception IllegalArgumentException if \u003ccode\u003eimageType\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003ethumbnails\u003c/code\u003e contains \u003ccode\u003enull\u003c/code\u003e references or objects other than \u003ccode\u003eBufferedImage\u003c/code\u003es.\n * @exception IllegalArgumentException if width or height are lessthan 1.\n * @exception IOException if an I/O error occurs during writing.\n */\n","tf":{"freq":{"progress":1,"fals":2,"unsupport":3,"greater":2,"type":3,"signifi":1,"describingth":1,"must":1,"objectrepres":1,"specifi":1,"buffer":2,"entireti":1,"height":3,"refer":1,"oper":3,"lessthan":1,"sequenc":1,"writer":1,"undefin":1,"howev":1,"option":2,"metadata":2,"argument":2,"control":1,"append":1,"ignor":1,"thrown":1,"except":19,"index":12,"support":1,"width":3,"preserv":1,"avail":1,"format":1,"imag":28,"without":2,"prepar":8,"logic":1,"largest":2,"writeabl":1,"content":1,"encod":1,"thumbnail":3,"ometadata":1,"contain":2,"will":4,"notbeen":1,"output":4,"otherwis":1,"increas":1,"call":9,"stream":3,"pixel":5,"correspond":2,"one":1,"readabl":1,"made":2,"state":4,"use":4,"object":1,"indic":1,"layout":1,"write":11,"valu":3,"exist":2,"less":1,"end":6,"complet":1,"may":5,"error":1,"previous":3,"later":1,"larger":1,"nest":1,"list":1,"suppli":3,"illeg":6,"empti":13,"begin":1,"process":1,"specif":1,"caus":1,"interspers":1,"replac":4,"method":1,"insert":12,"bound":1,"occur":3},"maxFreq":28,"totalTerms":259},"loc":3}