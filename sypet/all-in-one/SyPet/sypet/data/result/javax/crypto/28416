{"id":28416,"className":"javax.crypto.KeyAgreement","methodName":"doPhase","signature":"\u003cjavax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)\u003e","javadoc":"/** \n * Executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement.\n * @param key the key for this phase. For example, in the case ofDiffie-Hellman between 2 parties, this would be the other party\u0027s Diffie-Hellman public key.\n * @param lastPhase flag which indicates whether or not this is the lastphase of this key agreement.\n * @return the (intermediate) key resulting from this phase, or nullif this phase does not yield a key\n * @exception InvalidKeyException if the given key is inappropriate forthis phase.\n * @exception IllegalStateException if this key agreement has not beeninitialized.\n */\n","tf":{"freq":{"hellman":2,"result":1,"diffi":2,"last":1,"inappropri":1,"yield":1,"one":1,"next":1,"state":1,"whether":1,"intermedi":1,"forthi":1,"given":2,"indic":1,"invalid":1,"nullif":1,"key":12,"beeniniti":1,"except":4,"lastphas":1,"agreement":4,"involv":1,"receiv":1,"illeg":1,"flag":1,"exampl":1,"execut":1,"phase":7,"parti":3},"maxFreq":12,"totalTerms":57},"loc":4}