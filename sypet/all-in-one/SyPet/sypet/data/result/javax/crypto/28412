{"id":28412,"className":"javax.crypto.KeyAgreement","methodName":"init","signature":"\u003cjavax.crypto.KeyAgreement: void init(java.security.Key)\u003e","javadoc":"/** \n * Initializes this key agreement with the given key, which is required to contain all the algorithm parameters required for this key agreement. \u003cp\u003e If this key agreement requires any random bytes, it will get them using the {@link SecureRandom \u003ccode\u003eSecureRandom\u003c/code\u003e}implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.)\n * @param key the party\u0027s private information. For example, in the caseof the Diffie-Hellman key agreement, this would be the party\u0027s own Diffie-Hellman private key.\n * @exception InvalidKeyException if the given key isinappropriate for this key agreement, e.g., is of the wrong type or has an incompatible algorithm type.\n */\n","tf":{"freq":{"hellman":2,"diffi":2,"caseof":1,"highest":1,"link":1,"use":2,"type":2,"algorithm":2,"isinappropri":1,"requir":3,"invalid":1,"given":2,"none":1,"initi":1,"key":10,"except":2,"prioriti":1,"instal":2,"random":6,"paramet":1,"agreement":5,"init":1,"suppli":1,"incompat":1,"provid":3,"inform":1,"system":1,"secur":3,"contain":1,"exampl":1,"will":2,"wrong":1,"sourc":2,"parti":2},"maxFreq":10,"totalTerms":69},"loc":3}