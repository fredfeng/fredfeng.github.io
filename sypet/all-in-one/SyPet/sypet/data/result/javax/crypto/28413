{"id":28413,"className":"javax.crypto.KeyAgreement","methodName":"init","signature":"\u003cjavax.crypto.KeyAgreement: void init(java.security.Key,java.security.SecureRandom)\u003e","javadoc":"/** \n * Initializes this key agreement with the given key and source of randomness. The given key is required to contain all the algorithm parameters required for this key agreement. \u003cp\u003e If the key agreement algorithm requires random bytes, it gets them from the given source of randomness, \u003ccode\u003erandom\u003c/code\u003e. However, if the underlying algorithm implementation does not require any random bytes, \u003ccode\u003erandom\u003c/code\u003e is ignored.\n * @param key the party\u0027s private information. For example, in the caseof the Diffie-Hellman key agreement, this would be the party\u0027s own Diffie-Hellman private key.\n * @param random the source of randomness\n * @exception InvalidKeyException if the given key isinappropriate for this key agreement, e.g., is of the wrong type or has an incompatible algorithm type.\n */\n","tf":{"freq":{"hellman":2,"except":2,"ignor":1,"diffi":2,"caseof":1,"agreement":5,"random":8,"paramet":1,"init":1,"type":2,"incompat":1,"algorithm":4,"inform":1,"isinappropri":1,"requir":4,"invalid":1,"given":4,"contain":1,"exampl":1,"wrong":1,"sourc":3,"initi":1,"howev":1,"key":11,"parti":2},"maxFreq":11,"totalTerms":62},"loc":12}