{"id":28467,"className":"javax.crypto.Cipher","methodName":"getInstance","signature":"\u003cjavax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eCipher\u003c/code\u003e object that implements the specified transformation. \u003cp\u003e A new Cipher object encapsulating the CipherSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param transformation the name of the transformation,e.g., \u003ci\u003eDES/CBC/PKCS5Padding\u003c/i\u003e. See the Cipher section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#Cipher\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard transformation names.\n * @param provider the provider.\n * @return a cipher that implements the requested transformation.\n * @exception NoSuchAlgorithmException if \u003ccode\u003etransformation\u003c/code\u003eis null, empty, in an invalid format, or if a CipherSpi implementation for the specified algorithm is not available from the specified Provider object.\n * @exception NoSuchPaddingException if \u003ccode\u003etransformation\u003c/code\u003econtains a padding scheme that is not available.\n * @exception IllegalArgumentException if the \u003ccode\u003eprovider\u003c/code\u003eis null.\n * @see java.security.Provider\n */\n","tf":{"freq":{"root":1,"object":5,"algorithm":3,"specifi":5,"technot":1,"transform":7,"document":1,"scheme":1,"invalid":1,"request":1,"name":4,"spi":2,"regist":1,"href":1,"note":1,"cryptographi":1,"argument":1,"pad":3,"except":6,"standard":3,"avail":2,"list":1,"format":1,"illeg":1,"provid":8,"section":1,"empti":1,"instanc":1,"guid":1,"inform":1,"secur":2,"architectur":1,"contain":1,"encapsul":1,"cipher":7,"html":1,"java":2},"maxFreq":8,"totalTerms":82},"loc":57}