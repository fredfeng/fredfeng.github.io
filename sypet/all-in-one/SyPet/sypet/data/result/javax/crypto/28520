{"id":28520,"className":"javax.crypto.EncryptedPrivateKeyInfo","methodName":"getKeySpec","signature":"\u003cjavax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.lang.String)\u003e","javadoc":"/** \n * Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.\n * @param decryptKey key used for decrypting the encrypted data.\n * @param providerName the name of provider whose Cipherimplementation will be used.\n * @return the PKCS8EncodedKeySpec object.\n * @exception NullPointerException if \u003ccode\u003edecryptKey\u003c/code\u003eor \u003ccode\u003eproviderName\u003c/code\u003e is null.\n * @exception NoSuchProviderException if no provider\u003ccode\u003eproviderName\u003c/code\u003e is registered.\n * @exception NoSuchAlgorithmException if cannot find appropriatecipher to decrypt the encrypted data.\n * @exception InvalidKeyException if \u003ccode\u003edecryptKey\u003c/code\u003ecannot be used to decrypt the encrypted data or the decryption result is not a valid PKCS8KeySpec.\n * @since 1.5\n */\n","tf":{"freq":{"spec":4,"valid":1,"result":1,"except":8,"whose":1,"data":4,"use":3,"cipherimplement":1,"object":2,"provid":6,"extract":1,"algorithm":1,"appropriateciph":1,"encod":2,"decrypt":7,"invalid":1,"encrypt":4,"enclos":1,"name":4,"will":1,"regist":1,"pointer":1,"find":1,"key":9},"maxFreq":9,"totalTerms":66},"loc":14}