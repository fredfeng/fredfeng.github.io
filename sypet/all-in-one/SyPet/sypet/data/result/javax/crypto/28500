{"id":28500,"className":"javax.crypto.Cipher","methodName":"updateAAD","signature":"\u003cjavax.crypto.Cipher: void updateAAD(byte[],int,int)\u003e","javadoc":"/** \n * Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer. \u003cp\u003e Calls to this method provide AAD to the cipher when operating in modes such as AEAD (GCM/CCM).  If this cipher is operating in either GCM or CCM mode, all AAD must be supplied before beginning operations on the ciphertext (via the  {@code update} and {@code doFinal} methods).\n * @param src the buffer containing the AAD\n * @param offset the offset in {@code src} where the AAD input starts\n * @param len the number of AAD bytes\n * @throws IllegalArgumentException if the {@code src}byte array is null, or the  {@code offset} or {@code length}is less than 0, or the sum of the  {@code offset} and{@code len} is greater than the length of the{@code src} byte array\n * @throws IllegalStateException if this cipher is in a wrong state(e.g., has not been initialized), does not accept AAD, or if operating in either GCM or CCM mode and one of the  {@code update}methods has already been called for the active encryption/decryption operation\n * @throws UnsupportedOperationException if the corresponding methodin the  {@code CipherSpi} has not been overridden by animplementation\n * @since 1.7\n */\n","tf":{"freq":{"unsupport":1,"via":1,"greater":1,"overridden":1,"accept":1,"must":1,"buffer":2,"oper":6,"encrypt":1,"spi":1,"argument":1,"except":3,"number":1,"provid":2,"continu":1,"input":1,"updat":4,"start":1,"contain":1,"animplement":1,"multi":1,"array":2,"call":2,"correspond":1,"one":1,"data":1,"state":2,"use":1,"sum":1,"activ":1,"mode":3,"authent":1,"subset":1,"decrypt":1,"length":2,"src":4,"initi":1,"methodin":1,"offset":4,"less":1,"addit":1,"ciphertext":1,"suppli":1,"len":2,"illeg":2,"begin":1,"either":2,"cipher":4,"method":3,"wrong":1,"alreadi":1,"part":1},"maxFreq":6,"totalTerms":84},"loc":15}