{"id":28443,"className":"javax.crypto.Mac","methodName":"doFinal","signature":"\u003cjavax.crypto.Mac: void doFinal(byte[],int)\u003e","javadoc":"/** \n * Finishes the MAC operation. \u003cp\u003eA call to this method resets this \u003ccode\u003eMac\u003c/code\u003e object to the state it was in when previously initialized via a call to \u003ccode\u003einit(Key)\u003c/code\u003e or \u003ccode\u003einit(Key, AlgorithmParameterSpec)\u003c/code\u003e. That is, the object is reset and available to generate another MAC from the same key, if desired, via new calls to \u003ccode\u003eupdate\u003c/code\u003e and \u003ccode\u003edoFinal\u003c/code\u003e. (In order to reuse this \u003ccode\u003eMac\u003c/code\u003e object with a different key, it must be reinitialized via a call to \u003ccode\u003einit(Key)\u003c/code\u003e or \u003ccode\u003einit(Key, AlgorithmParameterSpec)\u003c/code\u003e. \u003cp\u003eThe MAC result is stored in \u003ccode\u003eoutput\u003c/code\u003e, starting at \u003ccode\u003eoutOffset\u003c/code\u003e inclusive.\n * @param output the buffer where the MAC result is stored\n * @param outOffset the offset in \u003ccode\u003eoutput\u003c/code\u003e where the MAC isstored\n * @exception ShortBufferException if the given output buffer is too smallto hold the result\n * @exception IllegalStateException if this \u003ccode\u003eMac\u003c/code\u003e has not beeninitialized.\n */\n","tf":{"freq":{"spec":2,"result":3,"call":4,"via":3,"store":2,"state":2,"mac":3,"object":3,"anoth":1,"desir":1,"reus":1,"must":1,"isstor":1,"algorithm":2,"buffer":3,"inclus":1,"given":1,"order":1,"oper":1,"smallto":1,"reset":2,"initi":1,"offset":3,"key":6,"beeniniti":1,"except":4,"previous":1,"hold":1,"paramet":2,"init":4,"avail":1,"reiniti":1,"illeg":1,"finish":1,"differ":1,"updat":1,"start":1,"generat":1,"method":1,"output":4},"maxFreq":6,"totalTerms":75},"loc":14}