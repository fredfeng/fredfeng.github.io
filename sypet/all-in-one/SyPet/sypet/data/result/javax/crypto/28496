{"id":28496,"className":"javax.crypto.Cipher","methodName":"unwrap","signature":"\u003cjavax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)\u003e","javadoc":"/** \n * Unwrap a previously wrapped key.\n * @param wrappedKey the key to be unwrapped.\n * @param wrappedKeyAlgorithm the algorithm associated with the wrappedkey.\n * @param wrappedKeyType the type of the wrapped key. This must be one of\u003ccode\u003eSECRET_KEY\u003c/code\u003e, \u003ccode\u003ePRIVATE_KEY\u003c/code\u003e, or \u003ccode\u003ePUBLIC_KEY\u003c/code\u003e.\n * @return the unwrapped key.\n * @exception IllegalStateException if this cipher is in a wrong state(e.g., has not been initialized).\n * @exception NoSuchAlgorithmException if no installed providerscan create keys of type \u003ccode\u003ewrappedKeyType\u003c/code\u003e for the \u003ccode\u003ewrappedKeyAlgorithm\u003c/code\u003e.\n * @exception InvalidKeyException if \u003ccode\u003ewrappedKey\u003c/code\u003e does notrepresent a wrapped key of type \u003ccode\u003ewrappedKeyType\u003c/code\u003e for the \u003ccode\u003ewrappedKeyAlgorithm\u003c/code\u003e.\n */\n","tf":{"freq":{"wrap":11,"wrappedkey":1,"except":6,"unwrap":4,"previous":1,"creat":1,"instal":1,"one":1,"state":2,"providerscan":1,"notrepres":1,"type":6,"illeg":1,"must":1,"algorithm":5,"invalid":1,"associ":1,"wrong":1,"cipher":1,"initi":1,"key":15},"maxFreq":15,"totalTerms":63},"loc":22}