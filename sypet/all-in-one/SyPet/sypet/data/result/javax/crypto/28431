{"id":28431,"className":"javax.crypto.Mac","methodName":"getInstance","signature":"\u003cjavax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eMac\u003c/code\u003e object that implements the specified MAC algorithm. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new Mac object encapsulating the MacSpi implementation from the first Provider that supports the specified algorithm is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the standard name of the requested MAC algorithm.See the Mac section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#Mac\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @return the new \u003ccode\u003eMac\u003c/code\u003e object.\n * @exception NoSuchAlgorithmException if no Provider supports aMacSpi implementation for the specified algorithm.\n * @see java.security.Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"mac":7,"object":3,"technot":1,"algorithm":8,"specifi":3,"document":1,"request":1,"spi":2,"name":4,"regist":2,"href":1,"note":1,"cryptographi":1,"travers":1,"except":2,"may":1,"support":2,"standard":4,"list":2,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":5,"architectur":1,"start":1,"retriev":1,"encapsul":1,"java":2,"html":1,"method":2,"prefer":1,"first":1},"maxFreq":8,"totalTerms":78},"loc":14}