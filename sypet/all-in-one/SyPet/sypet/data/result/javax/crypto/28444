{"id":28444,"className":"javax.crypto.Mac","methodName":"doFinal","signature":"\u003cjavax.crypto.Mac: byte[] doFinal(byte[])\u003e","javadoc":"/** \n * Processes the given array of bytes and finishes the MAC operation. \u003cp\u003eA call to this method resets this \u003ccode\u003eMac\u003c/code\u003e object to the state it was in when previously initialized via a call to \u003ccode\u003einit(Key)\u003c/code\u003e or \u003ccode\u003einit(Key, AlgorithmParameterSpec)\u003c/code\u003e. That is, the object is reset and available to generate another MAC from the same key, if desired, via new calls to \u003ccode\u003eupdate\u003c/code\u003e and \u003ccode\u003edoFinal\u003c/code\u003e. (In order to reuse this \u003ccode\u003eMac\u003c/code\u003e object with a different key, it must be reinitialized via a call to \u003ccode\u003einit(Key)\u003c/code\u003e or \u003ccode\u003einit(Key, AlgorithmParameterSpec)\u003c/code\u003e.\n * @param input data in bytes\n * @return the MAC result.\n * @exception IllegalStateException if this \u003ccode\u003eMac\u003c/code\u003e has not beeninitialized.\n */\n","tf":{"freq":{"spec":2,"result":1,"call":4,"via":3,"data":1,"state":2,"mac":3,"object":3,"anoth":1,"desir":1,"reus":1,"must":1,"algorithm":2,"order":1,"given":1,"oper":1,"reset":2,"initi":1,"key":6,"beeniniti":1,"except":2,"previous":1,"paramet":2,"init":4,"avail":1,"reiniti":1,"illeg":1,"process":1,"differ":1,"finish":1,"input":1,"updat":1,"generat":1,"method":1,"array":1},"maxFreq":6,"totalTerms":58},"loc":8}