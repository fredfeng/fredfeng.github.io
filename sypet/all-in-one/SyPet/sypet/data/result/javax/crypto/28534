{"id":28534,"className":"javax.crypto.SecretKeyFactory","methodName":"getInstance","signature":"\u003cjavax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eSecretKeyFactory\u003c/code\u003e object that converts secret keys of the specified algorithm. \u003cp\u003e A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param algorithm the standard name of the requested secret-keyalgorithm. See the SecretKeyFactory section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @param provider the provider.\n * @return the new \u003ccode\u003eSecretKeyFactory\u003c/code\u003e object.\n * @exception NullPointerException if the specified algorithmis null.\n * @exception NoSuchAlgorithmException if a SecretKeyFactorySpiimplementation for the specified algorithm is not available from the specified Provider object.\n * @exception IllegalArgumentException if the \u003ccode\u003eprovider\u003c/code\u003eis null.\n * @see java.security.Provider\n */\n","tf":{"freq":{"root":1,"convert":1,"object":6,"algorithm":6,"specifi":6,"technot":1,"document":1,"factori":7,"spi":1,"name":4,"request":1,"regist":1,"spiimplement":1,"href":1,"note":1,"key":8,"cryptographi":1,"argument":1,"except":6,"standard":4,"algorithmi":1,"avail":1,"list":1,"illeg":1,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":2,"architectur":1,"encapsul":1,"pointer":1,"secret":9,"java":2,"html":1,"keyalgorithm":1},"maxFreq":9,"totalTerms":93},"loc":6}