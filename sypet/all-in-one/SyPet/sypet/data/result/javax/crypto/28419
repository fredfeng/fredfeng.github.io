{"id":28419,"className":"javax.crypto.KeyAgreement","methodName":"generateSecret","signature":"\u003cjavax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)\u003e","javadoc":"/** \n * Creates the shared secret and returns it as a \u003ccode\u003eSecretKey\u003c/code\u003e object of the specified algorithm. \u003cp\u003eThis method resets this \u003ccode\u003eKeyAgreement\u003c/code\u003e object, so that it can be reused for further key agreements. Unless this key agreement is reinitialized with one of the \u003ccode\u003einit\u003c/code\u003e methods, the same private information and algorithm parameters will be used for subsequent key agreements.\n * @param algorithm the requested secret-key algorithm\n * @return the shared secret key\n * @exception IllegalStateException if this key agreement has not beencompleted yet\n * @exception NoSuchAlgorithmException if the specified secret-keyalgorithm is not available\n * @exception InvalidKeyException if the shared secret-key material cannotbe used to generate a secret key of the specified algorithm (e.g., the key material is too short)\n */\n","tf":{"freq":{"one":1,"state":1,"use":2,"object":2,"reus":1,"algorithm":6,"specifi":3,"share":3,"invalid":1,"unless":1,"request":1,"reset":1,"subsequ":1,"key":12,"except":6,"cannotb":1,"creat":1,"beencomplet":1,"agreement":5,"paramet":1,"init":1,"avail":1,"reiniti":1,"illeg":1,"inform":1,"materi":2,"generat":2,"will":1,"secret":8,"keyalgorithm":1,"method":2,"yet":1},"maxFreq":12,"totalTerms":73},"loc":4}