{"id":28532,"className":"javax.crypto.SecretKeyFactory","methodName":"getInstance","signature":"\u003cjavax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eSecretKeyFactory\u003c/code\u003e object that converts secret keys of the specified algorithm. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi implementation from the first Provider that supports the specified algorithm is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the standard name of the requested secret-keyalgorithm. See the SecretKeyFactory section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @return the new \u003ccode\u003eSecretKeyFactory\u003c/code\u003e object.\n * @exception NullPointerException if the specified algorithmis null.\n * @exception NoSuchAlgorithmException if no Provider supports aSecretKeyFactorySpi implementation for the specified algorithm.\n * @see java.security.Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"convert":1,"object":3,"technot":1,"algorithm":7,"specifi":4,"document":1,"factori":7,"request":1,"name":4,"spi":2,"regist":2,"href":1,"key":8,"note":1,"cryptographi":1,"travers":1,"except":4,"may":1,"support":2,"standard":4,"algorithmi":1,"list":2,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":5,"architectur":1,"start":1,"retriev":1,"encapsul":1,"pointer":1,"secret":9,"java":2,"html":1,"keyalgorithm":1,"method":2,"prefer":1,"first":1},"maxFreq":9,"totalTerms":101},"loc":3}