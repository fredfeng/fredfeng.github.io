{"id":28432,"className":"javax.crypto.Mac","methodName":"getInstance","signature":"\u003cjavax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eMac\u003c/code\u003e object that implements the specified MAC algorithm. \u003cp\u003e A new Mac object encapsulating the MacSpi implementation from the specified provider is returned.  The specified provider must be registered in the security provider list. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the standard name of the requested MAC algorithm.See the Mac section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#Mac\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.\n * @param provider the name of the provider.\n * @return the new \u003ccode\u003eMac\u003c/code\u003e object.\n * @exception NoSuchAlgorithmException if a MacSpiimplementation for the specified algorithm is not available from the specified provider.\n * @exception NoSuchProviderException if the specified provider is notregistered in the security provider list.\n * @exception IllegalArgumentException if the \u003ccode\u003eprovider\u003c/code\u003eis null or empty.\n * @see java.security.Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"mac":7,"object":3,"must":1,"technot":1,"algorithm":7,"specifi":6,"document":1,"spi":1,"name":5,"request":1,"regist":2,"spiimplement":1,"href":1,"note":1,"cryptographi":1,"argument":1,"notregist":1,"except":6,"may":1,"standard":4,"avail":1,"list":3,"illeg":1,"provid":14,"section":1,"empti":1,"instanc":1,"guid":1,"inform":1,"secur":6,"architectur":1,"retriev":1,"encapsul":1,"java":2,"html":1,"method":1},"maxFreq":14,"totalTerms":92},"loc":5}