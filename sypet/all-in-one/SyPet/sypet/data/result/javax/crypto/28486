{"id":28486,"className":"javax.crypto.Cipher","methodName":"update","signature":"\u003cjavax.crypto.Cipher: int update(byte[],int,int,byte[],int)\u003e","javadoc":"/** \n * Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. \u003cp\u003eThe first \u003ccode\u003einputLen\u003c/code\u003e bytes in the \u003ccode\u003einput\u003c/code\u003e buffer, starting at \u003ccode\u003einputOffset\u003c/code\u003e inclusive, are processed, and the result is stored in the \u003ccode\u003eoutput\u003c/code\u003e buffer, starting at \u003ccode\u003eoutputOffset\u003c/code\u003e inclusive. \u003cp\u003eIf the \u003ccode\u003eoutput\u003c/code\u003e buffer is too small to hold the result, a \u003ccode\u003eShortBufferException\u003c/code\u003e is thrown. In this case, repeat this call with a larger output buffer. Use {@link #getOutputSize(int) getOutputSize} to determine how bigthe output buffer should be. \u003cp\u003eIf \u003ccode\u003einputLen\u003c/code\u003e is zero, this method returns a length of zero. \u003cp\u003eNote: this method should be copy-safe, which means the \u003ccode\u003einput\u003c/code\u003e and \u003ccode\u003eoutput\u003c/code\u003e buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.\n * @param input the input buffer\n * @param inputOffset the offset in \u003ccode\u003einput\u003c/code\u003e where the inputstarts\n * @param inputLen the input length\n * @param output the buffer for the result\n * @param outputOffset the offset in \u003ccode\u003eoutput\u003c/code\u003e where the resultis stored\n * @return the number of bytes stored in \u003ccode\u003eoutput\u003c/code\u003e\n * @exception IllegalStateException if this cipher is in a wrong state(e.g., has not been initialized)\n * @exception ShortBufferException if the given output buffer is too smallto hold the result\n */\n","tf":{"freq":{"store":3,"zero":2,"copi":2,"resulti":1,"buffer":12,"given":1,"oper":1,"refer":1,"encrypt":1,"smallto":1,"except":5,"thrown":1,"multipl":1,"hold":2,"number":1,"continu":1,"size":2,"input":12,"updat":1,"start":2,"determin":1,"unprocess":1,"output":14,"small":1,"array":1,"result":5,"call":1,"link":1,"state":2,"data":2,"use":1,"bigth":1,"anoth":1,"repeat":1,"inclus":2,"decrypt":1,"inputstart":1,"length":2,"mean":1,"initi":2,"offset":6,"note":1,"safe":1,"depend":1,"larger":1,"len":3,"illeg":1,"overwritten":1,"process":2,"wrong":1,"cipher":2,"method":2,"part":2,"first":1},"maxFreq":14,"totalTerms":120},"loc":17}