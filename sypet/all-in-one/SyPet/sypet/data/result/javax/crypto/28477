{"id":28477,"className":"javax.crypto.Cipher","methodName":"init","signature":"\u003cjavax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)\u003e","javadoc":"/** \n * Initializes this cipher with a key and a set of algorithm parameters. \u003cp\u003eThe cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or  key unwrapping, depending on the value of \u003ccode\u003eopmode\u003c/code\u003e. \u003cp\u003eIf this cipher requires any algorithm parameters and \u003ccode\u003eparams\u003c/code\u003e is null, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an \u003ccode\u003eInvalidAlgorithmParameterException\u003c/code\u003e if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using {@link #getParameters() getParameters} or{@link #getIV() getIV} (if the parameter is an IV).\u003cp\u003eIf this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. \u003cp\u003eIf this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the  {@link SecureRandom \u003ccode\u003eSecureRandom\u003c/code\u003e}implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.) \u003cp\u003eNote that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.\n * @param opmode the operation mode of this cipher (this is one of thefollowing: \u003ccode\u003eENCRYPT_MODE\u003c/code\u003e, \u003ccode\u003eDECRYPT_MODE\u003c/code\u003e, \u003ccode\u003eWRAP_MODE\u003c/code\u003e or \u003ccode\u003eUNWRAP_MODE\u003c/code\u003e)\n * @param key the encryption key\n * @param params the algorithm parameters\n * @exception InvalidKeyException if the given key is inappropriate forinitializing this cipher, or its keysize exceeds the maximum allowable keysize (as determined from the configured jurisdiction policy files).\n * @exception InvalidAlgorithmParameterException if the given algorithmparameters are inappropriate for this cipher, or this cipher requires algorithm parameters and \u003ccode\u003eparams\u003c/code\u003e is null, or the given algorithm parameters imply a cryptographic strength that would exceed the legal limits (as determined from the configured jurisdiction policy files).\n */\n","tf":{"freq":{"acquir":1,"unwrap":2,"deriv":1,"reason":1,"keysiz":2,"algorithmparamet":1,"feedback":1,"requir":5,"given":3,"invalid":3,"fail":1,"scheme":1,"equival":1,"oper":2,"cryptograph":1,"file":2,"encrypt":3,"impli":1,"none":1,"key":9,"follow":1,"limit":1,"wrap":2,"except":5,"creat":1,"prioriti":1,"random":7,"init":1,"polici":2,"provid":5,"instanc":1,"configur":2,"input":1,"system":1,"maximum":1,"determin":2,"will":3,"word":1,"sourc":2,"legal":1,"allow":1,"inappropri":2,"highest":1,"one":2,"link":3,"state":1,"use":4,"thefollow":1,"object":1,"mode":1,"algorithm":8,"jurisdict":2,"decrypt":2,"rais":1,"valu":3,"initi":8,"four":1,"note":1,"pad":1,"includ":1,"previous":1,"strength":1,"depend":1,"instal":2,"exceed":2,"paramet":15,"suppos":1,"suppli":1,"opmod":2,"lose":1,"specif":2,"secur":3,"retriev":1,"generat":3,"foriniti":1,"cipher":13,"necessarili":1},"maxFreq":15,"totalTerms":179},"loc":3}