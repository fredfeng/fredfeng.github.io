{"id":28450,"className":"javax.crypto.ExemptionMechanism","methodName":"getInstance","signature":"\u003cjavax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eExemptionMechanism\u003c/code\u003e object that implements the specified exemption mechanism algorithm. \u003cp\u003e A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param algorithm the standard name of the requested exemption mechanism.See the ExemptionMechanism section in the \u003ca href\u003d \"{docRoot}/../technotes/guides/security/StandardNames.html#Exemption\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard exemption mechanism names.\n * @param provider the provider.\n * @return the new \u003ccode\u003eExemptionMechanism\u003c/code\u003e object.\n * @exception NullPointerException if \u003ccode\u003ealgorithm\u003c/code\u003eis null.\n * @exception NoSuchAlgorithmException if an ExemptionMechanismSpiimplementation for the specified algorithm is not available from the specified Provider object.\n * @exception IllegalArgumentException if the \u003ccode\u003eprovider\u003c/code\u003eis null.\n * @see java.security.Provider\n */\n","tf":{"freq":{"root":1,"object":6,"algorithm":6,"specifi":5,"technot":1,"document":1,"spi":1,"name":4,"request":1,"regist":1,"spiimplement":1,"href":1,"note":1,"cryptographi":1,"argument":1,"except":6,"exempt":10,"standard":4,"avail":1,"list":1,"illeg":1,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":2,"architectur":1,"mechan":9,"encapsul":1,"pointer":1,"html":1,"java":2},"maxFreq":10,"totalTerms":84},"loc":6}