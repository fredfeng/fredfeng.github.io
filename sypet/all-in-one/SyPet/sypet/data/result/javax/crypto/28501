{"id":28501,"className":"javax.crypto.Cipher","methodName":"updateAAD","signature":"\u003cjavax.crypto.Cipher: void updateAAD(java.nio.ByteBuffer)\u003e","javadoc":"/** \n * Continues a multi-part update of the Additional Authentication Data (AAD). \u003cp\u003e Calls to this method provide AAD to the cipher when operating in modes such as AEAD (GCM/CCM).  If this cipher is operating in either GCM or CCM mode, all AAD must be supplied before beginning operations on the ciphertext (via the  {@code update} and {@code doFinal} methods).\u003cp\u003e All  {@code src.remaining()} bytes starting at{@code src.position()} are processed.Upon return, the input buffer\u0027s position will be equal to its limit; its limit will not have changed.\n * @param src the buffer containing the AAD\n * @throws IllegalArgumentException if the {@code src ByteBuffer}is null\n * @throws IllegalStateException if this cipher is in a wrong state(e.g., has not been initialized), does not accept AAD, or if operating in either GCM or CCM mode and one of the  {@code update}methods has already been called for the active encryption/decryption operation\n * @throws UnsupportedOperationException if the corresponding methodin the  {@code CipherSpi} has not been overridden by animplementation\n * @since 1.7\n */\n","tf":{"freq":{"unsupport":1,"via":1,"overridden":1,"accept":1,"must":1,"buffer":3,"oper":6,"encrypt":1,"spi":1,"limit":2,"argument":1,"except":3,"provid":1,"continu":1,"input":1,"updat":4,"start":1,"contain":1,"animplement":1,"multi":1,"will":2,"posit":2,"upon":1,"call":2,"correspond":1,"one":1,"data":1,"state":2,"activ":1,"mode":3,"authent":1,"decrypt":1,"src":4,"initi":1,"methodin":1,"addit":1,"ciphertext":1,"suppli":1,"equal":1,"illeg":2,"begin":1,"process":1,"either":2,"remain":1,"method":3,"cipher":4,"wrong":1,"alreadi":1,"chang":1,"part":1},"maxFreq":6,"totalTerms":79},"loc":14}