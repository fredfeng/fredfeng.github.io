{"id":28538,"className":"javax.crypto.SecretKeyFactory","methodName":"getKeySpec","signature":"\u003cjavax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)\u003e","javadoc":"/** \n * Returns a specification (key material) of the given key object in the requested format.\n * @param key the key\n * @param keySpec the requested format in which the key material shall bereturned\n * @return the underlying key specification (key material) in therequested format\n * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key (e.g., the algorithms associated with \u003ccode\u003ekey\u003c/code\u003e and \u003ccode\u003ekeySpec\u003c/code\u003e do not match, or \u003ccode\u003ekey\u003c/code\u003e references a key on a cryptographic hardware device whereas \u003ccode\u003ekeySpec\u003c/code\u003e is the specification of a software-based key), or the given key cannot be dealt with (e.g., the given key has an algorithm or format not supported by this secret-key factory).\n */\n","tf":{"freq":{"spec":5,"object":1,"algorithm":2,"isinappropri":1,"given":4,"invalid":1,"bereturn":1,"associ":1,"refer":1,"factori":1,"cryptograph":1,"request":3,"key":21,"softwar":1,"therequest":1,"dealt":1,"except":2,"wherea":1,"support":1,"format":4,"shall":1,"specif":4,"materi":3,"base":1,"secret":1,"hardwar":1,"match":1,"devic":1},"maxFreq":21,"totalTerms":67},"loc":22}