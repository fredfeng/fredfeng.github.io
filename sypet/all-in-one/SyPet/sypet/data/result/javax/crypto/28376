{"id":28376,"className":"javax.crypto.SealedObject","methodName":"getObject","signature":"\u003cjavax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)\u003e","javadoc":"/** \n * Retrieves the original (encapsulated) object. \u003cp\u003eThe encapsulated object is unsealed (using the given Cipher, assuming that the Cipher is already properly initialized) and de-serialized, before it is returned.\n * @param c the cipher used to unseal the object\n * @return the original object.\n * @exception NullPointerException if the given cipher is null.\n * @exception IOException if an error occurs during de-serialiazation\n * @exception ClassNotFoundException if an error occurs duringde-serialiazation\n * @exception IllegalBlockSizeException if the given cipher is a blockcipher, no padding has been requested, and the total input length is not a multiple of the cipher\u0027s block size\n * @exception BadPaddingException if the given cipher has beeninitialized for decryption, and padding has been specified, but the input data does not have proper expected padding bytes\n */\n","tf":{"freq":{"total":1,"data":1,"use":2,"block":2,"object":5,"specifi":1,"expect":1,"decrypt":1,"given":4,"request":1,"length":1,"blockciph":1,"initi":1,"proper":2,"pad":4,"beeniniti":1,"except":10,"assum":1,"multipl":1,"error":2,"origin":2,"bad":1,"illeg":1,"size":2,"serialiaz":2,"input":2,"unseal":2,"retriev":1,"encapsul":2,"pointer":1,"alreadi":1,"cipher":7,"duringd":1,"serial":1,"occur":2,"found":1},"maxFreq":10,"totalTerms":72},"loc":19}