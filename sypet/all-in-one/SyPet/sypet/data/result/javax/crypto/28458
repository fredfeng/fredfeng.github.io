{"id":28458,"className":"javax.crypto.ExemptionMechanism","methodName":"genExemptionBlob","signature":"\u003cjavax.crypto.ExemptionMechanism: int genExemptionBlob(byte[])\u003e","javadoc":"/** \n * Generates the exemption mechanism key blob, and stores the result in the \u003ccode\u003eoutput\u003c/code\u003e buffer. \u003cp\u003eIf the \u003ccode\u003eoutput\u003c/code\u003e buffer is too small to hold the result, a \u003ccode\u003eShortBufferException\u003c/code\u003e is thrown. In this case, repeat this call with a larger output buffer. Use {@link #getOutputSize(int) getOutputSize} to determine how bigthe output buffer should be.\n * @param output the buffer for the result\n * @return the number of bytes stored in \u003ccode\u003eoutput\u003c/code\u003e\n * @exception IllegalStateException if this exemption mechanism is ina wrong state (e.g., has not been initialized).\n * @exception ShortBufferException if the given output buffer is too smallto hold the result.\n * @exception ExemptionMechanismException if problem(s) encountered in theprocess of generating.\n */\n","tf":{"freq":{"result":4,"call":1,"store":2,"link":1,"state":2,"use":1,"bigth":1,"repeat":1,"buffer":8,"theprocess":1,"given":1,"ina":1,"smallto":1,"initi":1,"key":1,"exempt":4,"gen":1,"except":7,"thrown":1,"hold":2,"larger":1,"problem":1,"number":1,"illeg":1,"size":2,"blob":2,"encount":1,"mechan":3,"generat":2,"determin":1,"wrong":1,"output":9,"small":1},"maxFreq":9,"totalTerms":68},"loc":9}