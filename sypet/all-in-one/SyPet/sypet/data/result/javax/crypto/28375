{"id":28375,"className":"javax.crypto.SealedObject","methodName":"getObject","signature":"\u003cjavax.crypto.SealedObject: java.lang.Object getObject(java.security.Key)\u003e","javadoc":"/** \n * Retrieves the original (encapsulated) object. \u003cp\u003eThis method creates a cipher for the algorithm that had been used in the sealing operation. If the default provider package provides an implementation of that algorithm, an instance of Cipher containing that implementation is used. If the algorithm is not available in the default package, other packages are searched. The Cipher object is initialized for decryption, using the given \u003ccode\u003ekey\u003c/code\u003e and the parameters (if any) that had been used in the sealing operation. \u003cp\u003eThe encapsulated object is unsealed and de-serialized, before it is returned.\n * @param key the key used to unseal the object.\n * @return the original object.\n * @exception IOException if an error occurs during de-serialiazation.\n * @exception ClassNotFoundException if an error occurs duringde-serialiazation.\n * @exception NoSuchAlgorithmException if the algorithm to unseal theobject is not available.\n * @exception InvalidKeyException if the given key cannot be used to unsealthe object (e.g., it has the wrong algorithm).\n * @exception NullPointerException if \u003ccode\u003ekey\u003c/code\u003e is null.\n */\n","tf":{"freq":{"use":6,"object":7,"algorithm":6,"decrypt":1,"invalid":1,"given":2,"oper":2,"seal":2,"search":1,"unsealth":1,"initi":1,"key":6,"except":10,"error":2,"creat":1,"origin":2,"paramet":1,"avail":2,"provid":2,"instanc":1,"serialiaz":2,"unseal":3,"retriev":1,"contain":1,"encapsul":2,"pointer":1,"wrong":1,"cipher":3,"method":1,"theobject":1,"duringd":1,"serial":1,"found":1,"occur":2},"maxFreq":10,"totalTerms":78},"loc":18}