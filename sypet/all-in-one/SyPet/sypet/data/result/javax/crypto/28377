{"id":28377,"className":"javax.crypto.SealedObject","methodName":"getObject","signature":"\u003cjavax.crypto.SealedObject: java.lang.Object getObject(java.security.Key,java.lang.String)\u003e","javadoc":"/** \n * Retrieves the original (encapsulated) object. \u003cp\u003eThis method creates a cipher for the algorithm that had been used in the sealing operation, using an implementation of that algorithm from the given \u003ccode\u003eprovider\u003c/code\u003e. The Cipher object is initialized for decryption, using the given \u003ccode\u003ekey\u003c/code\u003e and the parameters (if any) that had been used in the sealing operation. \u003cp\u003eThe encapsulated object is unsealed and de-serialized, before it is returned.\n * @param key the key used to unseal the object.\n * @param provider the name of the provider of the algorithm to unsealthe object.\n * @return the original object.\n * @exception IllegalArgumentException if the given provider is nullor empty.\n * @exception IOException if an error occurs during de-serialiazation.\n * @exception ClassNotFoundException if an error occurs duringde-serialiazation.\n * @exception NoSuchAlgorithmException if the algorithm to unseal theobject is not available.\n * @exception NoSuchProviderException if the given provider is notconfigured.\n * @exception InvalidKeyException if the given key cannot be used to unsealthe object (e.g., it has the wrong algorithm).\n * @exception NullPointerException if \u003ccode\u003ekey\u003c/code\u003e is null.\n */\n","tf":{"freq":{"use":6,"object":8,"nullor":1,"algorithm":6,"decrypt":1,"invalid":1,"given":5,"oper":2,"seal":2,"name":1,"initi":1,"unsealth":2,"key":6,"argument":1,"except":14,"error":2,"creat":1,"origin":2,"paramet":1,"avail":1,"provid":6,"illeg":1,"empti":1,"serialiaz":2,"notconfigur":1,"unseal":3,"retriev":1,"encapsul":2,"pointer":1,"wrong":1,"cipher":2,"method":1,"theobject":1,"duringd":1,"serial":1,"found":1,"occur":2},"maxFreq":14,"totalTerms":92},"loc":16}