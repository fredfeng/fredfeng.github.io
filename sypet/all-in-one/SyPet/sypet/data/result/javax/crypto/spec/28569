{"id":28569,"className":"javax.crypto.spec.SecretKeySpec","methodName":"SecretKeySpec","signature":"\u003cjavax.crypto.spec.SecretKeySpec: void SecretKeySpec(byte[],java.lang.String)\u003e","javadoc":"/** \n * Constructs a secret key from the given byte array. \u003cp\u003eThis constructor does not check if the given bytes indeed specify a secret key of the specified algorithm. For example, if the algorithm is DES, this constructor does not check if \u003ccode\u003ekey\u003c/code\u003e is 8 bytes long, and also does not check for weak or semi-weak keys. In order for those checks to be performed, an algorithm-specific \u003ci\u003ekey specification\u003c/i\u003e class (in this case: {@link DESKeySpec DESKeySpec}) should be used.\n * @param key the key material of the secret key. The contents ofthe array are copied to protect against subsequent modification.\n * @param algorithm the name of the secret-key algorithm to be associatedwith the given key material. See Appendix A in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA\"\u003e Java Cryptography Architecture Reference Guide\u003c/a\u003e for information about standard algorithm names.\n * @exception IllegalArgumentException if \u003ccode\u003ealgorithm\u003c/code\u003eis null or \u003ccode\u003ekey\u003c/code\u003e is null or empty.\n */\n","tf":{"freq":{"spec":4,"root":1,"link":1,"use":1,"associatedwith":1,"inde":1,"perform":1,"crypto":2,"copi":1,"technot":1,"algorithm":7,"specifi":2,"given":3,"order":1,"refer":1,"name":2,"ofth":1,"subsequ":1,"href":1,"key":12,"cryptographi":1,"constructor":2,"argument":1,"app":1,"except":2,"standard":1,"check":4,"semi":1,"illeg":1,"empti":1,"guid":2,"content":1,"inform":1,"specif":2,"secur":1,"architectur":1,"materi":2,"exampl":1,"skey":2,"secret":5,"java":1,"html":1,"appendix":1,"weak":2,"construct":1,"also":1,"modif":1,"array":2},"maxFreq":12,"totalTerms":88},"loc":10}