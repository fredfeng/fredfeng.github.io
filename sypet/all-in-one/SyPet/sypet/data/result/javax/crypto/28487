{"id":28487,"className":"javax.crypto.Cipher","methodName":"update","signature":"\u003cjavax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)\u003e","javadoc":"/** \n * Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. \u003cp\u003eAll \u003ccode\u003einput.remaining()\u003c/code\u003e bytes starting at \u003ccode\u003einput.position()\u003c/code\u003e are processed. The result is stored in the output buffer. Upon return, the input buffer\u0027s position will be equal to its limit; its limit will not have changed. The output buffer\u0027s position will have advanced by n, where n is the value returned by this method; the output buffer\u0027s limit will not have changed. \u003cp\u003eIf \u003ccode\u003eoutput.remaining()\u003c/code\u003e bytes are insufficient to hold the result, a \u003ccode\u003eShortBufferException\u003c/code\u003e is thrown. In this case, repeat this call with a larger output buffer. Use {@link #getOutputSize(int) getOutputSize} to determine how bigthe output buffer should be. \u003cp\u003eNote: this method should be copy-safe, which means the \u003ccode\u003einput\u003c/code\u003e and \u003ccode\u003eoutput\u003c/code\u003e buffers can reference the same block of memory and no unprocessed input data is overwritten when the result is copied into the output buffer.\n * @param input the input ByteBuffer\n * @param output the output ByteByffer\n * @return the number of bytes stored in \u003ccode\u003eoutput\u003c/code\u003e\n * @exception IllegalStateException if this cipher is in a wrong state(e.g., has not been initialized)\n * @exception IllegalArgumentException if input and output are thesame object\n * @exception ReadOnlyBufferException if the output buffer is read-only\n * @exception ShortBufferException if there is insufficient space in theoutput buffer\n * @since 1.5\n */\n","tf":{"freq":{"memori":1,"store":2,"copi":2,"buffer":14,"theoutput":1,"oper":1,"refer":1,"encrypt":1,"thesam":1,"argument":1,"limit":3,"except":9,"thrown":1,"multipl":1,"hold":1,"number":1,"continu":1,"insuffici":2,"size":2,"byffer":1,"input":8,"updat":1,"start":1,"advanc":1,"determin":1,"will":4,"unprocess":1,"output":15,"posit":3,"upon":1,"result":3,"call":1,"link":1,"state":2,"data":2,"use":1,"bigth":1,"block":1,"object":1,"anoth":1,"repeat":1,"space":1,"decrypt":1,"read":2,"mean":1,"valu":1,"initi":2,"note":1,"safe":1,"depend":1,"larger":1,"equal":1,"illeg":2,"overwritten":1,"process":2,"remain":2,"wrong":1,"cipher":2,"method":2,"chang":2,"part":2},"maxFreq":15,"totalTerms":127},"loc":17}