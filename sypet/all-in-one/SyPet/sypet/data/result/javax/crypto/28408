{"id":28408,"className":"javax.crypto.KeyAgreement","methodName":"getInstance","signature":"\u003cjavax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eKeyAgreement\u003c/code\u003e object that implements the specified key agreement algorithm. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyAgreement object encapsulating the KeyAgreementSpi implementation from the first Provider that supports the specified algorithm is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the standard name of the requested key agreementalgorithm. See the KeyAgreement section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names.\n * @return the new \u003ccode\u003eKeyAgreement\u003c/code\u003e object.\n * @exception NullPointerException if the specified algorithmis null.\n * @exception NoSuchAlgorithmException if no Provider supports aKeyAgreementSpi implementation for the specified algorithm.\n * @see java.security.Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"object":3,"technot":1,"algorithm":7,"specifi":4,"document":1,"request":1,"name":4,"spi":2,"regist":2,"href":1,"key":9,"note":1,"cryptographi":1,"travers":1,"except":4,"may":1,"support":2,"standard":4,"algorithmi":1,"agreement":8,"list":2,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":5,"agreementalgorithm":1,"architectur":1,"start":1,"retriev":1,"encapsul":1,"pointer":1,"java":2,"html":1,"method":2,"prefer":1,"first":1},"maxFreq":9,"totalTerms":93},"loc":14}