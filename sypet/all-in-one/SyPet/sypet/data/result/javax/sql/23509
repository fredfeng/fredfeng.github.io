{"id":23509,"className":"javax.sql.RowSet","methodName":"setCharacterStream","signature":"\u003cjavax.sql.RowSet: void setCharacterStream(java.lang.String,java.io.Reader,int)\u003e","javadoc":"/** \n * Sets the designated parameter to the given \u003ccode\u003eReader\u003c/code\u003e object, which is the given number of characters long. When a very large UNICODE value is input to a \u003ccode\u003eLONGVARCHAR\u003c/code\u003e parameter, it may be more practical to send it via a \u003ccode\u003ejava.io.Reader\u003c/code\u003e object. The data will be read from the stream as needed until end-of-file is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.\n * @param parameterName the name of the parameter\n * @param reader the \u003ccode\u003ejava.io.Reader\u003c/code\u003e object thatcontains the UNICODE data used as the designated parameter\n * @param length the number of characters in the stream\n * @exception SQLException if a database access error occurs orthis method is called on a closed \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method\n * @since 1.4\n */\n","tf":{"freq":{"need":1,"via":1,"send":1,"lexcept":1,"necessari":1,"thatcontain":1,"close":1,"given":2,"file":1,"callabl":1,"except":3,"support":1,"charact":3,"number":2,"format":1,"databas":2,"statement":1,"input":1,"reader":4,"will":2,"subclass":1,"call":1,"stream":5,"data":2,"convers":1,"use":1,"object":5,"reach":1,"name":2,"practic":1,"length":1,"read":1,"driver":2,"valu":1,"end":1,"note":1,"may":1,"standard":2,"error":1,"paramet":5,"supportthi":1,"orthi":1,"access":1,"lfeatur":1,"either":1,"larg":1,"java":3,"method":2,"design":2,"occur":1},"maxFreq":5,"totalTerms":81},"loc":0}