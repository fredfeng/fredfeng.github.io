{"id":23890,"className":"javax.sql.rowset.spi.SyncFactory","methodName":"setLogger","signature":"\u003cjavax.sql.rowset.spi.SyncFactory: void setLogger(java.util.logging.Logger)\u003e","javadoc":"/** \n * Sets the logging object to be used by the \u003ccode\u003eSyncProvider\u003c/code\u003e implementation provided by the \u003ccode\u003eSyncFactory\u003c/code\u003e. All \u003ccode\u003eSyncProvider\u003c/code\u003e implementations can log their events to this object and the application can retrieve a handle to this object using the \u003ccode\u003egetLogger\u003c/code\u003e method. \u003cp\u003e This method checks to see that there is an  {@code SQLPermission}object  which grants the permission  {@code setSyncFactory}before allowing the method to succeed.  If a {@code SecurityManager} exists and its{@code checkPermission} method denies calling {@code setLogger}, this method throws a {@code java.lang.SecurityException}.\n * @param logger A Logger object instance\n * @throws java.lang.SecurityException if a security manager exists and its{@code checkPermission} method denies calling {@code setLogger}\n * @throws NullPointerException if the logger is null\n * @see SecurityManager#checkPermission\n */\n","tf":{"freq":{"call":2,"grant":1,"allow":1,"use":2,"object":5,"lang":2,"applic":1,"sync":4,"event":1,"factori":2,"logger":7,"permiss":4,"exist":2,"deni":2,"lpermiss":1,"except":3,"succeed":1,"check":4,"manag":3,"provid":3,"log":2,"instanc":1,"handl":1,"secur":5,"retriev":1,"pointer":1,"method":6,"java":2},"maxFreq":7,"totalTerms":70},"loc":12}