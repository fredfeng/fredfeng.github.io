{"id":23893,"className":"javax.sql.rowset.spi.SyncFactory","methodName":"setJNDIContext","signature":"\u003cjavax.sql.rowset.spi.SyncFactory: void setJNDIContext(javax.naming.Context)\u003e","javadoc":"/** \n * Sets the initial JNDI context from which SyncProvider implementations can be retrieved from a JNDI namespace \u003cp\u003e This method checks to see that there is an  {@code SQLPermission}object  which grants the permission  {@code setSyncFactory}before allowing the method to succeed.  If a {@code SecurityManager} exists and its{@code checkPermission} method denies calling {@code setJNDIContext}, this method throws a {@code java.lang.SecurityException}.\n * @param ctx a valid JNDI context\n * @throws SyncFactoryException if the supplied JNDI context is null\n * @throws java.lang.SecurityException if a security manager exists and its{@code checkPermission} method denies calling {@code setJNDIContext}\n * @see SecurityManager#checkPermission\n */\n","tf":{"freq":{"valid":1,"call":2,"grant":1,"allow":1,"object":1,"lang":2,"namespac":1,"sync":3,"factori":2,"permiss":4,"ctx":1,"initi":1,"exist":2,"deni":2,"lpermiss":1,"except":3,"succeed":1,"check":4,"manag":3,"suppli":1,"provid":1,"secur":5,"retriev":1,"context":6,"method":5,"java":2},"maxFreq":6,"totalTerms":57},"loc":10}