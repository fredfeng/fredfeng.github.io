{"id":23820,"className":"javax.sql.rowset.BaseRowSet","methodName":"setDate","signature":"\u003cjavax.sql.rowset.BaseRowSet: void setDate(int,java.sql.Date,java.util.Calendar)\u003e","javadoc":"/** \n * Sets the designated parameter to the given \u003ccode\u003ejava.sql.Date\u003c/code\u003e object. When the DBMS does not store time zone information, the driver will use the given \u003ccode\u003eCalendar\u003c/code\u003e object to construct the SQL \u003ccode\u003eDATE\u003c/code\u003e value to send to the database. With a \u003ccode\u003eCalendar\u003c/code\u003e object, the driver can calculate the date taking into account a custom time zone.  If no \u003ccode\u003eCalendar\u003c/code\u003e object is specified, the driver uses the time zone of the Virtual Machine that is running the application. \u003cP\u003e The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command when the method \u003ccode\u003eexecute\u003c/code\u003e is called. Methods such as \u003ccode\u003eexecute\u003c/code\u003e and \u003ccode\u003epopulate\u003c/code\u003e must be provided in any class that extends this class and implements one or more of the standard JSR-114 \u003ccode\u003eRowSet\u003c/code\u003e interfaces. \u003cP\u003e NOTE: \u003ccode\u003eJdbcRowSet\u003c/code\u003e does not require the \u003ccode\u003epopulate\u003c/code\u003e method as it is undefined in this class. \u003cP\u003e Calls made to the method \u003ccode\u003egetParams\u003c/code\u003e after this version of \u003ccode\u003esetDate\u003c/code\u003e has been called will return an array containing the parameter values that have been set.  In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given \u003ccode\u003ejava.sql.Date\u003c/code\u003e object. The second element is the value set for \u003ci\u003ecal\u003c/i\u003e. The parameter number is indicated by an element\u0027s position in the array returned by the method \u003ccode\u003egetParams\u003c/code\u003e, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the date being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by \u003ccode\u003egetParams\u003c/code\u003e. \u003cP\u003e Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number \u003ci\u003eparameterIndex\u003c/i\u003e is \u003ci\u003eparameterIndex\u003c/i\u003e -1.\n * @param parameterIndex the ordinal number of the placeholder parameterin this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \u003ccode\u003e1\u003c/code\u003e or greater\n * @param x a \u003ccode\u003ejava.sql.Date\u003c/code\u003e object representing an SQL\u003ccode\u003eDATE\u003c/code\u003e value\n * @param cal a \u003ccode\u003ejava.util.Calendar\u003c/code\u003e object to use whenwhen constructing the date\n * @throws SQLException if an error occurs or theparameter index is out of bounds\n * @see #getParams\n */\n","tf":{"freq":{"whenwhen":1,"greater":1,"send":1,"second":6,"store":2,"lexcept":1,"zero":1,"must":2,"specifi":1,"time":3,"requir":1,"given":3,"undefin":1,"jdbc":1,"custom":1,"element":9,"index":4,"calcul":1,"number":4,"provid":1,"databas":1,"row":4,"inform":1,"machin":1,"start":1,"contain":2,"will":5,"word":1,"parameterin":1,"execut":2,"posit":1,"util":1,"array":9,"virtual":1,"call":3,"correspond":1,"one":1,"made":1,"use":3,"theparamet":1,"object":9,"date":8,"run":1,"applic":1,"version":1,"popul":2,"indic":1,"ordin":1,"command":2,"valu":9,"driver":3,"cal":2,"note":1,"calendar":4,"error":1,"standard":1,"repres":2,"paramet":13,"suppli":1,"placehold":5,"sql":3,"take":1,"appropri":1,"intern":1,"account":1,"java":4,"method":7,"construct":2,"first":4,"bound":1,"design":1,"zone":3,"occur":1},"maxFreq":13,"totalTerms":184},"loc":12}