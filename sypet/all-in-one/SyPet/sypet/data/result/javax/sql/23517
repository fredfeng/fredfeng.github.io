{"id":23517,"className":"javax.sql.RowSet","methodName":"setObject","signature":"\u003cjavax.sql.RowSet: void setObject(int,java.lang.Object,int,int)\u003e","javadoc":"/** \n * Sets the designated parameter in this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command with the given Java \u003ccode\u003eObject\u003c/code\u003e.  For integral values, the \u003ccode\u003ejava.lang\u003c/code\u003e equivalent objects should be used (for example, an instance of the class \u003ccode\u003eInteger\u003c/code\u003e for an \u003ccode\u003eint\u003c/code\u003e). If the second argument is an \u003ccode\u003eInputStream\u003c/code\u003e then the stream must contain the number of bytes specified by scaleOrLength.  If the second argument is a \u003ccode\u003eReader\u003c/code\u003e then the reader must contain the number of characters specified    * by scaleOrLength. If these conditions are not true the driver will generate a \u003ccode\u003eSQLException\u003c/code\u003e when the prepared statement is executed. \u003cp\u003eThe given Java object will be converted to the targetSqlType before being sent to the database. \u003cP\u003e If the object is of a class implementing \u003ccode\u003eSQLData\u003c/code\u003e, the rowset should call the method \u003ccode\u003eSQLData.writeSQL\u003c/code\u003e to write the object to an \u003ccode\u003eSQLOutput\u003c/code\u003e data stream. If, on the other hand, the object is of a class implementing \u003ccode\u003eRef\u003c/code\u003e, \u003ccode\u003eBlob\u003c/code\u003e, \u003ccode\u003eClob\u003c/code\u003e,  \u003ccode\u003eNClob\u003c/code\u003e, \u003ccode\u003eStruct\u003c/code\u003e, \u003ccode\u003ejava.net.URL\u003c/code\u003e, or \u003ccode\u003eArray\u003c/code\u003e, the driver should pass it to the database as a value of the corresponding SQL type. \u003cP\u003e \u003cp\u003eNote that this method may be used to pass datatabase-specific abstract data types.\n * @param parameterIndex the first parameter is 1, the second is 2, ...\n * @param x the object containing the input parameter value\n * @param targetSqlType the SQL type (as defined in \u003ccode\u003ejava.sql.Types\u003c/code\u003e)to be sent to the database. The scale argument may further qualify this type.\n * @param scaleOrLength for \u003ccode\u003ejava.sql.Types.DECIMAL\u003c/code\u003eor \u003ccode\u003ejava.sql.Types.NUMERIC types\u003c/code\u003e, this is the number of digits after the decimal point. For Java Object types \u003ccode\u003eInputStream\u003c/code\u003e and \u003ccode\u003eReader\u003c/code\u003e, this is the length of the data in the stream or reader.  For all other types, this value will be ignored.\n * @exception SQLException if a database access error occurs\n * @see java.sql.Types\n */\n","tf":{"freq":{"integr":1,"second":3,"lexcept":2,"type":13,"must":2,"ldata":2,"specifi":2,"sent":2,"nclob":1,"given":2,"equival":1,"argument":3,"except":1,"ignor":1,"index":1,"charact":1,"rowset":1,"number":3,"loutput":1,"row":1,"prepar":1,"databas":4,"instanc":1,"digit":1,"statement":1,"input":3,"reader":4,"contain":3,"will":3,"execut":1,"array":1,"defin":1,"scale":4,"call":1,"stream":5,"correspond":1,"clob":1,"data":3,"use":2,"convert":1,"object":10,"decim":1,"net":1,"lang":1,"hand":1,"struct":1,"command":1,"length":4,"write":2,"valu":4,"driver":2,"note":1,"condit":1,"may":2,"error":1,"paramet":4,"true":1,"access":1,"pass":2,"blob":1,"point":1,"ref":1,"specif":1,"sql":6,"datatabas":1,"generat":1,"exampl":1,"target":2,"java":9,"method":2,"first":1,"integ":1,"qualifi":1,"design":1,"occur":1},"maxFreq":13,"totalTerms":158},"loc":0}