{"id":23661,"className":"javax.sql.rowset.Joinable","methodName":"setMatchColumn","signature":"\u003cjavax.sql.rowset.Joinable: void setMatchColumn(int)\u003e","javadoc":"/** \n * Sets the designated column as the match column for this \u003ccode\u003eRowSet\u003c/code\u003e object. A \u003ccode\u003eJoinRowSet\u003c/code\u003e object can now add this \u003ccode\u003eRowSet\u003c/code\u003e object based on the match column. \u003cp\u003e Sub-interfaces such as the \u003ccode\u003eCachedRowSet\u003c/code\u003e\u003csup\u003e\u003cfont size\u003d-2\u003eTM\u003c/font\u003e\u003c/sup\u003e interface define the method \u003ccode\u003eCachedRowSet.setKeyColumns\u003c/code\u003e, which allows primary key semantics to be enforced on specific columns. Implementations of the \u003ccode\u003esetMatchColumn(int columnIdx)\u003c/code\u003e method should ensure that the constraints on the key columns are maintained when a \u003ccode\u003eCachedRowSet\u003c/code\u003e object sets a primary key column as a match column.\n * @param columnIdx an \u003ccode\u003eint\u003c/code\u003e identifying the index of the column to beset as the match column\n * @throws SQLException if an invalid column index is set\n * @see #setMatchColumn(int[])\n * @see #unsetMatchColumn(int)\n */\n","tf":{"freq":{"defin":1,"sub":1,"allow":1,"maintain":1,"lexcept":1,"constraint":1,"identifi":1,"object":4,"sup":2,"add":1,"ensur":1,"invalid":1,"beset":1,"semant":1,"key":4,"primari":2,"index":2,"idx":2,"enforc":1,"font":2,"cach":3,"join":1,"row":6,"size":1,"specif":1,"now":1,"unset":1,"base":1,"column":17,"method":2,"match":8,"design":1},"maxFreq":17,"totalTerms":74},"loc":0}