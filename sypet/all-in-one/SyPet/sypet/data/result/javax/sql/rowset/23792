{"id":23792,"className":"javax.sql.rowset.BaseRowSet","methodName":"setNull","signature":"\u003cjavax.sql.rowset.BaseRowSet: void setNull(int,int,java.lang.String)\u003e","javadoc":"/** \n * Sets the designated parameter to SQL \u003ccode\u003eNULL\u003c/code\u003e. Although this version of the  method \u003ccode\u003esetNull\u003c/code\u003e is intended for user-defined and \u003ccode\u003eREF\u003c/code\u003e parameters, this method may be used to set a null parameter for any JDBC type. The following are user-defined types: \u003ccode\u003eSTRUCT\u003c/code\u003e, \u003ccode\u003eDISTINCT\u003c/code\u003e, and \u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, and named array types. \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e To be portable, applications must give the SQL type code and the fully qualified SQL type name when specifying a \u003ccode\u003eNULL\u003c/code\u003e user-defined or \u003ccode\u003eREF\u003c/code\u003e parameter. In the case of a user-defined type, the name is the type name of the parameter itself.  For a \u003ccode\u003eREF\u003c/code\u003e parameter, the name is the type name of the referenced type.  If a JDBC technology-enabled driver does not need the type code or type name information, it may ignore it. \u003cP\u003e If the parameter does not have a user-defined or \u003ccode\u003eREF\u003c/code\u003e type, the given \u003ccode\u003etypeName\u003c/code\u003e parameter is ignored. \u003cP\u003e The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command when the method \u003ccode\u003eexecute\u003c/code\u003e is called. Methods such as \u003ccode\u003eexecute\u003c/code\u003e and \u003ccode\u003epopulate\u003c/code\u003e must be provided in any class that extends this class and implements one or more of the standard JSR-114 \u003ccode\u003eRowSet\u003c/code\u003e interfaces. \u003cP\u003e NOTE: \u003ccode\u003eJdbcRowSet\u003c/code\u003e does not require the \u003ccode\u003epopulate\u003c/code\u003e method as it is undefined in this class. \u003cP\u003e Calls made to the method \u003ccode\u003egetParams\u003c/code\u003e after this version of \u003ccode\u003esetNull\u003c/code\u003e has been called will return an \u003ccode\u003eObject\u003c/code\u003e array containing the parameter values that have been set.  In that array, the element that represents the values set with this method will itself be an array. The first element of that array is \u003ccode\u003enull\u003c/code\u003e. The second element is the value set for \u003ci\u003esqlType\u003c/i\u003e, and the third element is the value set for \u003ci\u003etypeName\u003c/i\u003e. The parameter number is indicated by an element\u0027s position in the array returned by the method \u003ccode\u003egetParams\u003c/code\u003e, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the second placeholder parameter is being set to \u003ccode\u003enull\u003c/code\u003e, the array containing it will be the second element in the array returned by \u003ccode\u003egetParams\u003c/code\u003e. \u003cP\u003e Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number \u003ci\u003eparameterIndex\u003c/i\u003e is \u003ci\u003eparameterIndex\u003c/i\u003e -1.\n * @param parameterIndex the ordinal number of the placeholder parameterin this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \u003ccode\u003e1\u003c/code\u003e or greater\n * @param sqlType a value from \u003ccode\u003ejava.sql.Types\u003c/code\u003e\n * @param typeName the fully qualified name of an SQL user-defined type,which is ignored if the parameter is not a user-defined type or \u003ccode\u003eREF\u003c/code\u003e value\n * @throws SQLException if an error occurs or the given parameter indexis out of bounds\n * @see #getParams\n */\n","tf":{"freq":{"need":1,"greater":1,"second":6,"store":1,"lexcept":1,"zero":1,"type":20,"must":3,"specifi":1,"referenc":1,"although":1,"requir":1,"given":2,"undefin":1,"jdbc":1,"follow":1,"element":10,"index":3,"ignor":3,"enabl":1,"number":4,"third":1,"provid":1,"row":4,"inform":1,"start":1,"contain":2,"will":4,"word":1,"parameterin":1,"execut":2,"posit":1,"array":10,"defin":7,"call":3,"give":1,"portabl":1,"correspond":1,"one":1,"made":1,"use":1,"indexi":1,"object":3,"applic":1,"version":2,"popul":2,"indic":1,"ordin":1,"name":11,"command":2,"driver":1,"valu":9,"note":2,"may":2,"error":1,"standard":1,"repres":1,"paramet":22,"fulli":2,"suppli":1,"technolog":1,"placehold":5,"sql":3,"appropri":1,"intern":1,"java":1,"method":9,"intend":1,"first":4,"user":7,"bound":1,"qualifi":2,"design":1,"occur":1},"maxFreq":22,"totalTerms":213},"loc":16}