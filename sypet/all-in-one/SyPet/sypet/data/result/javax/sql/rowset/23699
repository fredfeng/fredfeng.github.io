{"id":23699,"className":"javax.sql.rowset.CachedRowSet","methodName":"toCollection","signature":"\u003cjavax.sql.rowset.CachedRowSet: java.util.Collection\u003c?\u003e toCollection()\u003e","javadoc":"/** \n * Converts this \u003ccode\u003eCachedRowSet\u003c/code\u003e object to a \u003ccode\u003eCollection\u003c/code\u003e object that contains all of this \u003ccode\u003eCachedRowSet\u003c/code\u003e object\u0027s data. Implementations have some latitude in how they can represent this \u003ccode\u003eCollection\u003c/code\u003e object because of the abstract nature of the \u003ccode\u003eCollection\u003c/code\u003e framework. Each row must be fully represented in either a general purpose \u003ccode\u003eCollection\u003c/code\u003e implementation or a specialized \u003ccode\u003eCollection\u003c/code\u003e implementation, such as a \u003ccode\u003eTreeMap\u003c/code\u003e object or a \u003ccode\u003eVector\u003c/code\u003e object. An SQL \u003ccode\u003eNULL\u003c/code\u003e column value must be represented as a \u003ccode\u003enull\u003c/code\u003e in the Java programming language. \u003cP\u003e The standard reference implementation for the \u003ccode\u003eCachedRowSet\u003c/code\u003e interface uses a \u003ccode\u003eTreeMap\u003c/code\u003e object for the rowset, with the values in each row being contained in  \u003ccode\u003eVector\u003c/code\u003e objects. It is expected that most implementations will do the same. \u003cP\u003e The \u003ccode\u003eTreeMap\u003c/code\u003e type of collection guarantees that the map will be in ascending key order, sorted according to the natural order for the key\u0027s class. Each key references a \u003ccode\u003eVector\u003c/code\u003e object that corresponds to one row of a \u003ccode\u003eRowSet\u003c/code\u003e object. Therefore, the size of each \u003ccode\u003eVector\u003c/code\u003e object  must be exactly equal to the number of columns in the \u003ccode\u003eRowSet\u003c/code\u003e object. The key used by the \u003ccode\u003eTreeMap\u003c/code\u003e collection is determined by the implementation, which may choose to leverage a set key that is available within the internal \u003ccode\u003eRowSet\u003c/code\u003e tabular structure by virtue of a key already set either on the \u003ccode\u003eRowSet\u003c/code\u003e object itself or on the underlying SQL data. \u003cP\u003e\n * @return a \u003ccode\u003eCollection\u003c/code\u003e object that contains the values ineach row in this \u003ccode\u003eCachedRowSet\u003c/code\u003e object\n * @throws SQLException if an error occurs generating the collection\n * @see #toCollection(int)\n * @see #toCollection(String)\n */\n","tf":{"freq":{"lexcept":1,"natur":2,"languag":1,"type":1,"must":3,"expect":1,"tree":4,"refer":2,"exact":1,"latitud":1,"purpos":1,"key":6,"ineach":1,"rowset":1,"avail":1,"number":1,"row":12,"size":1,"program":1,"contain":3,"determin":1,"column":2,"will":2,"ascend":1,"collect":12,"sort":1,"structur":1,"correspond":1,"one":1,"data":2,"convert":1,"use":2,"object":15,"therefor":1,"tabular":1,"virtu":1,"order":2,"vector":4,"map":5,"choos":1,"valu":3,"leverag":1,"may":1,"error":1,"standard":1,"repres":3,"guarante":1,"fulli":1,"equal":1,"cach":4,"accord":1,"framework":1,"general":1,"either":2,"string":1,"generat":1,"intern":1,"alreadi":1,"java":1,"special":1,"within":1,"occur":1},"maxFreq":15,"totalTerms":132},"loc":0}