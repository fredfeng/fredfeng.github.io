{"id":23723,"className":"javax.sql.rowset.CachedRowSet","methodName":"rowSetPopulated","signature":"\u003cjavax.sql.rowset.CachedRowSet: void rowSetPopulated(javax.sql.RowSetEvent,int)\u003e","javadoc":"/** \n * Notifies registered listeners that a RowSet object in the given RowSetEvent object has populated a number of additional rows. The \u003ccode\u003enumRows\u003c/code\u003e parameter ensures that this event will only be fired every \u003ccode\u003enumRow\u003c/code\u003e. \u003cp\u003e The source of the event can be retrieved with the method event.getSource.\n * @param event a \u003ccode\u003eRowSetEvent\u003c/code\u003e object that contains the\u003ccode\u003eRowSet\u003c/code\u003e object that is the source of the events\n * @param numRows when populating, the number of rows interval on which the\u003ccode\u003eCachedRowSet\u003c/code\u003e populated should fire; the default value is zero; cannot be less than \u003ccode\u003efetchSize\u003c/code\u003e or zero\n */\n","tf":{"freq":{"object":4,"zero":2,"ensur":1,"popul":4,"given":1,"event":7,"regist":1,"valu":1,"listen":1,"everi":1,"less":1,"notifi":1,"fetch":1,"addit":1,"paramet":1,"number":2,"cach":1,"row":11,"fire":2,"size":1,"interv":1,"num":3,"retriev":1,"contain":1,"will":1,"sourc":3,"method":1},"maxFreq":11,"totalTerms":56},"loc":0}