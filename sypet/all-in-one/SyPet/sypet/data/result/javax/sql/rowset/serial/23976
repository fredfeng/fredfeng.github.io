{"id":23976,"className":"javax.sql.rowset.serial.SerialBlob","methodName":"SerialBlob","signature":"\u003cjavax.sql.rowset.serial.SerialBlob: void SerialBlob(java.sql.Blob)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eSerialBlob\u003c/code\u003e object that is a serialized version of the given \u003ccode\u003eBlob\u003c/code\u003e object. \u003cP\u003e The new \u003ccode\u003eSerialBlob\u003c/code\u003e object is initialized with the data from the \u003ccode\u003eBlob\u003c/code\u003e object; therefore, the \u003ccode\u003eBlob\u003c/code\u003e object should have previously brought the SQL \u003ccode\u003eBLOB\u003c/code\u003e value\u0027s data over to the client from the database. Otherwise, the new \u003ccode\u003eSerialBlob\u003c/code\u003e object will contain no data.\n * @param blob the \u003ccode\u003eBlob\u003c/code\u003e object from which this\u003ccode\u003eSerialBlob\u003c/code\u003e object is to be constructed; cannot be null.\n * @throws SerialException if an error occurs during serialization\n * @throws SQLException if the \u003ccode\u003eBlob\u003c/code\u003e passed to thisto this constructor is a \u003ccode\u003enull\u003c/code\u003e.\n * @see java.sql.Blob\n */\n","tf":{"freq":{"otherwis":1,"thisto":1,"client":1,"data":3,"lexcept":1,"brought":1,"therefor":1,"object":8,"version":1,"given":1,"valu":1,"initi":1,"constructor":1,"except":1,"previous":1,"error":1,"databas":1,"pass":1,"blob":12,"sql":1,"contain":1,"will":1,"java":1,"construct":2,"serial":8,"occur":1},"maxFreq":12,"totalTerms":54},"loc":15}