{"id":23815,"className":"javax.sql.rowset.BaseRowSet","methodName":"setObject","signature":"\u003cjavax.sql.rowset.BaseRowSet: void setObject(int,java.lang.Object)\u003e","javadoc":"/** \n * Sets the designated parameter to an \u003ccode\u003eObject\u003c/code\u003e in the Java programming language. The second parameter must be an \u003ccode\u003eObject\u003c/code\u003e type.  For integral values, the \u003ccode\u003ejava.lang\u003c/code\u003e equivalent objects should be used. For example, use the class \u003ccode\u003eInteger\u003c/code\u003e for an \u003ccode\u003eint\u003c/code\u003e. \u003cP\u003e The JDBC specification defines a standard mapping from Java \u003ccode\u003eObject\u003c/code\u003e types to SQL types.  The driver will use this standard mapping to  convert the given object to its corresponding SQL type before sending it to the database. If the object has a custom mapping (is of a class implementing \u003ccode\u003eSQLData\u003c/code\u003e), the driver should call the method \u003ccode\u003eSQLData.writeSQL\u003c/code\u003e to write the object to the SQL data stream. \u003cP\u003e If, on the other hand, the object is of a class implementing \u003ccode\u003eRef\u003c/code\u003e, \u003ccode\u003eBlob\u003c/code\u003e, \u003ccode\u003eClob\u003c/code\u003e, \u003ccode\u003eStruct\u003c/code\u003e, or \u003ccode\u003eArray\u003c/code\u003e, the driver should pass it to the database as a value of the corresponding SQL type. \u003cP\u003e This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one interface. \u003cP\u003e Note that this method may be used to pass database-specific abstract data types. \u003cP\u003e The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command when the method \u003ccode\u003eexecute\u003c/code\u003e is called. Methods such as \u003ccode\u003eexecute\u003c/code\u003e and \u003ccode\u003epopulate\u003c/code\u003e must be provided in any class that extends this class and implements one or more of the standard JSR-114 \u003ccode\u003eRowSet\u003c/code\u003e interfaces. \u003cp\u003e NOTE: \u003ccode\u003eJdbcRowSet\u003c/code\u003e does not require the \u003ccode\u003epopulate\u003c/code\u003e method as it is undefined in this class. \u003cP\u003e After this method has been called, a call to the method \u003ccode\u003egetParams\u003c/code\u003e will return an object array of the current command parameters, which will include the \u003ccode\u003eObject\u003c/code\u003e set for placeholder parameter number \u003ccode\u003eparameterIndex\u003c/code\u003e. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number \u003ci\u003eparameterIndex\u003c/i\u003e is element number \u003ci\u003eparameterIndex\u003c/i\u003e -1.\n * @param parameterIndex the ordinal number of the placeholder parameterin this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \u003ccode\u003e1\u003c/code\u003e or greater\n * @param x the object containing the input parameter value\n * @throws SQLException if an error occurs theparameter index is out of bounds, or there is ambiguity in the implementation of the object being set\n * @see #getParams\n */\n","tf":{"freq":{"greater":1,"integr":1,"send":1,"second":2,"store":1,"lexcept":1,"languag":1,"zero":1,"type":6,"must":3,"ldata":2,"requir":1,"given":1,"equival":1,"undefin":1,"jdbc":1,"custom":1,"element":3,"index":5,"except":1,"number":5,"provid":1,"row":4,"databas":3,"input":1,"start":1,"program":1,"contain":1,"will":4,"parameterin":1,"execut":2,"array":4,"defin":1,"call":4,"stream":1,"correspond":3,"clob":1,"one":2,"data":2,"convert":1,"use":4,"theparamet":1,"object":16,"ambigu":2,"lang":1,"hand":1,"popul":2,"ordin":1,"struct":1,"current":1,"command":3,"map":3,"write":2,"driver":3,"valu":4,"note":2,"may":1,"includ":1,"error":1,"standard":3,"paramet":13,"suppli":1,"pass":2,"blob":1,"ref":1,"specif":2,"placehold":3,"appropri":1,"exampl":2,"intern":1,"java":3,"method":9,"first":1,"integ":1,"bound":1,"design":1,"occur":1},"maxFreq":16,"totalTerms":175},"loc":7}