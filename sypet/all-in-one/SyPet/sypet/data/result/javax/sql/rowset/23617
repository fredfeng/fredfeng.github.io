{"id":23617,"className":"javax.sql.rowset.JdbcRowSet","methodName":"getAutoCommit","signature":"\u003cjavax.sql.rowset.JdbcRowSet: boolean getAutoCommit()\u003e","javadoc":"/** \n * Each \u003ccode\u003eJdbcRowSet\u003c/code\u003e contains a \u003ccode\u003eConnection\u003c/code\u003e object from the original \u003ccode\u003eResultSet\u003c/code\u003e or JDBC properties passed to it. This method wraps the \u003ccode\u003eConnection\u003c/code\u003e\u0027s \u003ccode\u003egetAutoCommit\u003c/code\u003e method to allow an application to determine the \u003ccode\u003eJdbcRowSet\u003c/code\u003e transaction behavior. \u003cp\u003e Sets this connection\u0027s auto-commit mode to the given state. If a connection is in auto-commit mode, then all its SQL statements will be executed and committed as individual transactions. Otherwise, its SQL statements are grouped into transactions that are terminated by a call to either the method commit or the method rollback. By default, new connections are in auto-commit mode.\n * @throws SQLException if a database access error occurs\n * @see java.sql.Connection#getAutoCommit()\n */\n","tf":{"freq":{"otherwis":1,"call":1,"result":1,"connect":6,"allow":1,"behavior":1,"lexcept":1,"state":1,"rollback":1,"object":1,"applic":1,"mode":3,"given":1,"commit":8,"jdbc":2,"individu":1,"wrap":1,"error":1,"origin":1,"access":1,"databas":1,"row":2,"pass":1,"statement":2,"either":1,"termin":1,"sql":1,"transact":3,"contain":1,"determin":1,"will":1,"auto":6,"java":1,"method":4,"properti":1,"group":1,"execut":1,"occur":1},"maxFreq":8,"totalTerms":65},"loc":0}