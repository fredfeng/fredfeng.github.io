{"id":23814,"className":"javax.sql.rowset.BaseRowSet","methodName":"setObject","signature":"\u003cjavax.sql.rowset.BaseRowSet: void setObject(int,java.lang.Object,int)\u003e","javadoc":"/** \n * Sets the value of the designated parameter with the given \u003ccode\u003eObject\u003c/code\u003e value. This method is like \u003ccode\u003esetObject(int parameterIndex, Object x, int targetSqlType, int scale)\u003c/code\u003e except that it assumes a scale of zero. \u003cP\u003e The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command when the method \u003ccode\u003eexecute\u003c/code\u003e is called. Methods such as \u003ccode\u003eexecute\u003c/code\u003e and \u003ccode\u003epopulate\u003c/code\u003e must be provided in any class that extends this class and implements one or more of the standard JSR-114 \u003ccode\u003eRowSet\u003c/code\u003e interfaces. \u003cP\u003e NOTE: \u003ccode\u003eJdbcRowSet\u003c/code\u003e does not require the \u003ccode\u003epopulate\u003c/code\u003e method as it is undefined in this class. \u003cP\u003e Calls made to the method \u003ccode\u003egetParams\u003c/code\u003e after this version of \u003ccode\u003esetObject\u003c/code\u003e has been called will return an array containing the parameter values that have been set.  In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given \u003ccode\u003eObject\u003c/code\u003e instance. The second element is the value set for \u003ci\u003etargetSqlType\u003c/i\u003e. The parameter number is indicated by an element\u0027s position in the array returned by the method \u003ccode\u003egetParams\u003c/code\u003e, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the object being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by \u003ccode\u003egetParams\u003c/code\u003e. \u003cP\u003e Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number \u003ci\u003eparameterIndex\u003c/i\u003e is element number \u003ci\u003eparameterIndex\u003c/i\u003e -1.\n * @param parameterIndex the ordinal number of the placeholder parameterin this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \u003ccode\u003e1\u003c/code\u003e or greater\n * @param x the \u003ccode\u003eObject\u003c/code\u003e containing the input parameter value;must be an \u003ccode\u003eObject\u003c/code\u003e type\n * @param targetSqlType the SQL type (as defined in \u003ccode\u003ejava.sql.Types\u003c/code\u003e)to be sent to the database. If a non-standard \u003ci\u003etargetSqlType\u003c/i\u003e is supplied, this method will not throw a \u003ccode\u003eSQLException\u003c/code\u003e. This allows implicit support for non-standard SQL types.\n * @throws SQLException if an error occurs or the parameter indexis out of bounds\n * @see #getParams\n */\n","tf":{"freq":{"greater":1,"store":1,"second":6,"implicit":1,"lexcept":2,"zero":2,"type":8,"must":3,"sent":1,"requir":1,"given":2,"undefin":1,"jdbc":1,"element":10,"except":1,"index":4,"support":1,"number":5,"like":1,"provid":1,"databas":1,"row":4,"non":2,"instanc":1,"input":1,"start":1,"contain":3,"will":5,"word":1,"parameterin":1,"execut":2,"posit":1,"array":9,"defin":1,"call":3,"scale":2,"allow":1,"correspond":1,"one":1,"made":1,"indexi":1,"object":11,"version":1,"popul":2,"indic":1,"ordin":1,"command":2,"valu":10,"note":1,"assum":1,"error":1,"standard":3,"repres":1,"paramet":16,"suppli":2,"sql":5,"placehold":5,"appropri":1,"intern":1,"target":4,"java":1,"method":9,"first":4,"bound":1,"design":1,"occur":1},"maxFreq":16,"totalTerms":182},"loc":12}