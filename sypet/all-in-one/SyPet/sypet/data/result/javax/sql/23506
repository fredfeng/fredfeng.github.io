{"id":23506,"className":"javax.sql.RowSet","methodName":"setBinaryStream","signature":"\u003cjavax.sql.RowSet: void setBinaryStream(int,java.io.InputStream,int)\u003e","javadoc":"/** \n * Sets the designated parameter in this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command to the given \u003ccode\u003ejava.io.InputStream\u003c/code\u003e value. It may be more practical to send a very large binary value via a \u003ccode\u003ejava.io.InputStream\u003c/code\u003e rather than as a \u003ccode\u003eLONGVARBINARY\u003c/code\u003e parameter. The driver will read the data from the stream as needed until it reaches end-of-file. \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.\n * @param parameterIndex the first parameter is 1, the second is 2, ...\n * @param x the java input stream which contains the binary parameter value\n * @param length the number of bytes in the stream\n * @exception SQLException if a database access error occurs\n */\n","tf":{"freq":{"need":1,"stream":8,"binari":3,"send":1,"via":1,"second":1,"lexcept":1,"data":1,"object":3,"reach":1,"given":1,"file":1,"length":1,"command":1,"practic":1,"rather":1,"read":1,"valu":3,"driver":1,"note":1,"end":1,"except":1,"index":1,"may":1,"error":1,"standard":2,"paramet":5,"number":1,"access":1,"databas":1,"row":1,"either":1,"input":3,"larg":1,"contain":1,"subclass":1,"will":1,"java":4,"first":1,"design":1,"occur":1},"maxFreq":8,"totalTerms":64},"loc":0}