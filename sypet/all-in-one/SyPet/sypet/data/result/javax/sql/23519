{"id":23519,"className":"javax.sql.RowSet","methodName":"setObject","signature":"\u003cjavax.sql.RowSet: void setObject(int,java.lang.Object,int)\u003e","javadoc":"/** \n * Sets the designated parameter in this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command with a Java \u003ccode\u003eObject\u003c/code\u003e.  For integral values, the \u003ccode\u003ejava.lang\u003c/code\u003e equivalent objects should be used. This method is like \u003ccode\u003esetObject\u003c/code\u003e above, but the scale used is the scale of the second parameter.  Scalar values have a scale of zero.  Literal values have the scale present in the literal. \u003cP\u003e Even though it is supported, it is not recommended that this method be called with floating point input values.\n * @param parameterIndex the first parameter is 1, the second is 2, ...\n * @param x the object containing the input parameter value\n * @param targetSqlType the SQL type (as defined in \u003ccode\u003ejava.sql.Types\u003c/code\u003e)to be sent to the database\n * @exception SQLException if a database access error occurs\n */\n","tf":{"freq":{"defin":1,"scale":4,"call":1,"integr":1,"second":2,"lexcept":1,"use":2,"object":6,"type":3,"zero":1,"lang":1,"recommend":1,"though":1,"sent":1,"equival":1,"command":1,"valu":5,"except":1,"index":1,"liter":2,"support":1,"error":1,"scalar":1,"paramet":5,"access":1,"like":1,"databas":2,"row":1,"point":1,"present":1,"input":2,"sql":2,"contain":1,"target":1,"method":2,"java":3,"even":1,"first":1,"design":1,"occur":1},"maxFreq":6,"totalTerms":67},"loc":0}