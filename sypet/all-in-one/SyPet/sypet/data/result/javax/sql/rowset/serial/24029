{"id":24029,"className":"javax.sql.rowset.serial.SerialClob","methodName":"setCharacterStream","signature":"\u003cjavax.sql.rowset.serial.SerialClob: java.io.Writer setCharacterStream(long)\u003e","javadoc":"/** \n * Retrieves a stream to be used to write a stream of Unicode characters to the \u003ccode\u003eCLOB\u003c/code\u003e value that this \u003ccode\u003eSerialClob\u003c/code\u003e object represents, at position \u003ccode\u003epos\u003c/code\u003e. This method forwards the \u003ccode\u003esetCharacterStream()\u003c/code\u003e call to the underlying \u003ccode\u003eClob\u003c/code\u003e object in the event that this \u003ccode\u003eSerialClob\u003c/code\u003e object is instantiated with a \u003ccode\u003eClob\u003c/code\u003e object. If this \u003ccode\u003eSerialClob\u003c/code\u003e object is instantiated with a \u003ccode\u003echar\u003c/code\u003e array, a \u003ccode\u003eSerialException\u003c/code\u003e is thrown.\n * @param pos the position at which to start writing to the\u003ccode\u003eCLOB\u003c/code\u003e value\n * @return a stream to which Unicode encoded characters can be written\n * @throws SerialException if the SerialClob is not instantiated witha Clob object that supports \u003ccode\u003esetCharacterStream\u003c/code\u003e\n * @throws SQLException if there is an error accessing the\u003ccode\u003eCLOB\u003c/code\u003e value\n * @see #getCharacterStream\n */\n","tf":{"freq":{"call":1,"stream":7,"instanti":3,"clob":7,"lexcept":1,"use":1,"object":6,"pos":2,"forward":1,"event":1,"written":1,"write":2,"valu":3,"except":2,"thrown":1,"support":1,"error":1,"repres":1,"charact":6,"access":1,"witha":1,"encod":1,"start":1,"retriev":1,"unicod":2,"method":1,"posit":2,"serial":6,"array":1},"maxFreq":7,"totalTerms":65},"loc":9}