{"id":23660,"className":"javax.sql.rowset.RowSetMetaDataImpl","methodName":"isWrapperFor","signature":"\u003cjavax.sql.rowset.RowSetMetaDataImpl: boolean isWrapperFor(java.lang.Class)\u003e","javadoc":"/** \n * Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does. Returns false otherwise. If this implements the interface then return true, else if this is a wrapper then return the result of recursively calling \u003ccode\u003eisWrapperFor\u003c/code\u003e on the wrapped object. If this does not implement the interface and is not a wrapper, return false. This method should be implemented as a low-cost operation compared to \u003ccode\u003eunwrap\u003c/code\u003e so that callers can use this method to avoid expensive \u003ccode\u003eunwrap\u003c/code\u003e calls that may fail. If this method returns true then calling \u003ccode\u003eunwrap\u003c/code\u003e with the same argument should succeed.\n * @param interfaces a Class defining an interface.\n * @return true if this implements the interface or directly or indirectly wraps an object that does.\n * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapperfor an object with the given interface.\n * @since 1.6\n */\n","tf":{"freq":{"otherwis":1,"fals":2,"caller":1,"defin":1,"result":1,"call":3,"unwrap":3,"lexcept":1,"use":1,"object":4,"whether":1,"indirect":2,"avoid":1,"given":1,"fail":1,"wrapper":5,"oper":1,"direct":2,"argument":2,"wrap":2,"may":1,"succeed":1,"wrapperfor":1,"error":1,"true":4,"cost":1,"els":1,"either":1,"sql":1,"determin":1,"expens":1,"java":1,"method":3,"low":1,"compar":1,"recurs":1,"occur":1},"maxFreq":5,"totalTerms":58},"loc":3}