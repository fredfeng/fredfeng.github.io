{"id":23720,"className":"javax.sql.rowset.CachedRowSet","methodName":"commit","signature":"\u003cjavax.sql.rowset.CachedRowSet: void commit()\u003e","javadoc":"/** \n * Each \u003ccode\u003eCachedRowSet\u003c/code\u003e object\u0027s \u003ccode\u003eSyncProvider\u003c/code\u003e contains a \u003ccode\u003eConnection\u003c/code\u003e object from the \u003ccode\u003eResultSet\u003c/code\u003e or JDBC properties passed to it\u0027s constructors. This method wraps the \u003ccode\u003eConnection\u003c/code\u003e commit method to allow flexible auto commit or non auto commit transactional control support. \u003cp\u003e Makes all changes that are performed by the \u003ccode\u003eacceptChanges()\u003c/code\u003e method since the previous commit/rollback permanent. This method should be used only when auto-commit mode has been disabled.\n * @throws SQLException if a database access error occurs or thisConnection object within this \u003ccode\u003eCachedRowSet\u003c/code\u003e is in auto-commit mode\n * @see java.sql.Connection#setAutoCommit\n */\n","tf":{"freq":{"result":1,"connect":4,"allow":1,"accept":1,"lexcept":1,"use":1,"rollback":1,"perform":1,"object":3,"mode":2,"sync":1,"commit":8,"constructor":1,"wrap":1,"control":1,"support":1,"error":1,"previous":1,"cach":2,"access":1,"provid":1,"databas":1,"row":2,"flexibl":1,"pass":1,"non":1,"sql":1,"disabl":1,"transact":1,"contain":1,"auto":5,"java":1,"method":4,"within":1,"properti":1,"chang":2,"make":1,"occur":1,"perman":1},"maxFreq":8,"totalTerms":62},"loc":0}