{"id":23694,"className":"javax.sql.rowset.CachedRowSet","methodName":"undoDelete","signature":"\u003cjavax.sql.rowset.CachedRowSet: void undoDelete()\u003e","javadoc":"/** \n * Cancels the deletion of the current row and notifies listeners that a row has changed. After this method is called, the current row is no longer marked for deletion. This method can be called at any time during the lifetime of the rowset. \u003cP\u003e In addition, multiple cancellations of row deletions can be made by adjusting the position of the cursor using any of the cursor position control methods such as: \u003cul\u003e \u003cli\u003e\u003ccode\u003eCachedRowSet.absolute\u003c/code\u003e \u003cli\u003e\u003ccode\u003eCachedRowSet.first\u003c/code\u003e \u003cli\u003e\u003ccode\u003eCachedRowSet.last\u003c/code\u003e \u003c/ul\u003e\n * @throws SQLException if (1) the current row has not been deleted or(2) the cursor is on the insert row, before the first row, or after the last row\n * @see javax.sql.rowset.CachedRowSet#undoInsert\n * @see java.sql.ResultSet#cancelRowUpdates\n */\n","tf":{"freq":{"lifetim":1,"result":1,"call":2,"cursor":3,"last":2,"delet":5,"undo":2,"lexcept":1,"made":1,"use":1,"cancel":3,"time":1,"javax":1,"current":3,"adjust":1,"longer":1,"listen":1,"notifi":1,"addit":1,"control":1,"multipl":1,"rowset":2,"mark":1,"absolut":1,"cach":4,"row":13,"sql":2,"updat":1,"java":1,"method":3,"chang":1,"insert":2,"first":2,"posit":2},"maxFreq":13,"totalTerms":69},"loc":0}