{"id":23930,"className":"javax.sql.rowset.spi.SyncResolver","methodName":"nextConflict","signature":"\u003cjavax.sql.rowset.spi.SyncResolver: boolean nextConflict()\u003e","javadoc":"/** \n * Moves the cursor down from its current position to the next row that contains a conflict value. A \u003ccode\u003eSyncResolver\u003c/code\u003e object\u0027s cursor is initially positioned before the first conflict row; the first call to the method \u003ccode\u003enextConflict\u003c/code\u003e makes the first conflict row the current row; the second call makes the second conflict row the current row, and so on. \u003cp\u003e A call to the method \u003ccode\u003enextConflict\u003c/code\u003e will implicitly close an input stream if one is open and will clear the \u003ccode\u003eSyncResolver\u003c/code\u003e object\u0027s warning chain.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the new current row is valid; \u003ccode\u003efalse\u003c/code\u003eif there are no more rows\n * @throws SQLException if a database access error occurs or the result set typeis \u003ccode\u003eTYPE_FORWARD_ONLY\u003c/code\u003e\n */\n","tf":{"freq":{"fals":1,"warn":1,"result":1,"valid":1,"call":3,"stream":1,"cursor":2,"second":2,"next":4,"one":1,"lexcept":1,"implicit":1,"typei":1,"object":2,"close":1,"clear":1,"open":1,"sync":2,"current":4,"valu":1,"initi":1,"move":1,"error":1,"true":1,"resolv":2,"access":1,"databas":1,"row":8,"input":1,"chain":1,"contain":1,"will":2,"conflict":7,"method":2,"posit":2,"first":3,"make":2,"occur":1},"maxFreq":8,"totalTerms":70},"loc":0}