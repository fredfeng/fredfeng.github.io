{"id":23891,"className":"javax.sql.rowset.spi.SyncFactory","methodName":"setLogger","signature":"\u003cjavax.sql.rowset.spi.SyncFactory: void setLogger(java.util.logging.Logger,java.util.logging.Level)\u003e","javadoc":"/** \n * Sets the logging object that is used by \u003ccode\u003eSyncProvider\u003c/code\u003e implementations provided by the \u003ccode\u003eSyncFactory\u003c/code\u003e SPI. All \u003ccode\u003eSyncProvider\u003c/code\u003e implementations can log their events to this object and the application can retrieve a handle to this object using the \u003ccode\u003egetLogger\u003c/code\u003e method. \u003cp\u003e This method checks to see that there is an  {@code SQLPermission}object  which grants the permission  {@code setSyncFactory}before allowing the method to succeed.  If a {@code SecurityManager} exists and its{@code checkPermission} method denies calling {@code setLogger}, this method throws a {@code java.lang.SecurityException}.\n * @param logger a Logger object instance\n * @param level a Level object instance indicating the degree of loggingrequired\n * @throws java.lang.SecurityException if a security manager exists and its{@code checkPermission} method denies calling {@code setLogger}\n * @throws java.util.logging.LoggingPermission if a security manager exists and its{@code checkPermission} method denies calling {@code setLevel}\n * @throws NullPointerException if the logger is null\n * @see SecurityManager#checkPermission\n * @see LoggingPermission\n */\n","tf":{"freq":{"call":3,"grant":1,"allow":1,"use":2,"object":6,"loggingrequir":1,"lang":2,"applic":1,"level":3,"indic":1,"sync":4,"event":1,"factori":2,"logger":7,"permiss":7,"exist":3,"deni":3,"lpermiss":1,"except":3,"succeed":1,"check":5,"manag":4,"provid":3,"log":5,"instanc":2,"handl":1,"degre":1,"secur":6,"retriev":1,"pointer":1,"method":7,"java":3,"util":1},"maxFreq":7,"totalTerms":93},"loc":13}