{"id":23702,"className":"javax.sql.rowset.CachedRowSet","methodName":"getSyncProvider","signature":"\u003cjavax.sql.rowset.CachedRowSet: javax.sql.rowset.spi.SyncProvider getSyncProvider()\u003e","javadoc":"/** \n * Retrieves the \u003ccode\u003eSyncProvider\u003c/code\u003e implementation for this \u003ccode\u003eCachedRowSet\u003c/code\u003e object. Internally, this method is used by a rowset to trigger read or write actions between the rowset and the data source. For example, a rowset may need to get a handle on the the rowset reader (\u003ccode\u003eRowSetReader\u003c/code\u003e object) from the \u003ccode\u003eSyncProvider\u003c/code\u003e to allow the rowset to be populated. \u003cpre\u003e RowSetReader rowsetReader \u003d null; SyncProvider provider \u003d SyncFactory.getInstance(\"javax.sql.rowset.provider.RIOptimisticProvider\"); if (provider instanceof RIOptimisticProvider) { rowsetReader \u003d provider.getRowSetReader(); } \u003c/pre\u003e Assuming \u003ci\u003erowsetReader\u003c/i\u003e is a private, accessible field within the rowset implementation, when an application calls the \u003ccode\u003eexecute\u003c/code\u003e method, it in turn calls on the reader\u0027s \u003ccode\u003ereadData\u003c/code\u003e method to populate the \u003ccode\u003eRowSet\u003c/code\u003e object. \u003cpre\u003e rowsetReader.readData((RowSetInternal)this); \u003c/pre\u003e \u003cP\u003e In addition, an application can use the \u003ccode\u003eSyncProvider\u003c/code\u003e object returned by this method to call methods that return information about the \u003ccode\u003eSyncProvider\u003c/code\u003e object, including information about the vendor, version, provider identification, synchronization grade, and locks it currently has set.\n * @return the \u003ccode\u003eSyncProvider\u003c/code\u003e object that was set when the rowsetwas instantiated, or if none was was set, the default provider\n * @throws SQLException if an error occurs while returning the\u003ccode\u003eSyncProvider\u003c/code\u003e object\n * @see #setSyncProvider\n */\n","tf":{"freq":{"need":1,"instanti":1,"lexcept":1,"javax":1,"action":1,"none":1,"turn":1,"rowset":11,"provid":17,"row":6,"instanc":1,"inform":2,"reader":9,"sourc":1,"rowsetwa":1,"execut":1,"call":3,"allow":1,"data":3,"identif":1,"use":2,"object":7,"applic":2,"version":1,"popul":2,"sync":10,"factori":1,"write":1,"current":1,"read":3,"grade":1,"trigger":1,"addit":1,"may":1,"assum":1,"includ":1,"error":1,"vendor":1,"lock":1,"cach":1,"access":1,"handl":1,"field":1,"sql":1,"optimist":2,"pre":4,"retriev":1,"exampl":1,"intern":2,"method":5,"within":1,"occur":1},"maxFreq":17,"totalTerms":125},"loc":0}