{"id":23511,"className":"javax.sql.RowSet","methodName":"setAsciiStream","signature":"\u003cjavax.sql.RowSet: void setAsciiStream(java.lang.String,java.io.InputStream)\u003e","javadoc":"/** \n * Sets the designated parameter to the given input stream. When a very large ASCII value is input to a \u003ccode\u003eLONGVARCHAR\u003c/code\u003e parameter, it may be more practical to send it via a \u003ccode\u003ejava.io.InputStream\u003c/code\u003e. Data will be read from the stream as needed until end-of-file is reached.  The JDBC driver will do any necessary conversion from ASCII to the database char format. \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e Consult your JDBC driver documentation to determine if it might be more efficient to use a version of \u003ccode\u003esetAsciiStream\u003c/code\u003e which takes a length parameter.\n * @param parameterName the name of the parameter\n * @param x the Java input stream that contains the ASCII parameter value\n * @exception SQLException if a database access error occurs orthis method is called on a closed \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n * @since 1.6\n */\n","tf":{"freq":{"need":1,"send":1,"via":1,"lexcept":1,"necessari":1,"close":1,"given":1,"callabl":1,"file":1,"effici":1,"except":2,"support":2,"format":1,"databas":2,"statement":1,"input":4,"determin":1,"contain":1,"will":2,"subclass":1,"call":1,"might":1,"stream":8,"convers":1,"data":1,"use":1,"object":2,"version":1,"ascii":2,"reach":1,"document":1,"name":2,"practic":1,"length":1,"read":1,"driver":3,"valu":2,"end":1,"note":2,"consult":1,"may":1,"standard":2,"error":1,"paramet":6,"orthi":1,"access":1,"lfeatur":1,"either":1,"larg":1,"take":1,"java":3,"method":2,"design":1,"occur":1},"maxFreq":8,"totalTerms":84},"loc":0}