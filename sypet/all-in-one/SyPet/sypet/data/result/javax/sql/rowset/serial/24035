{"id":24035,"className":"javax.sql.rowset.serial.SerialArray","methodName":"SerialArray","signature":"\u003cjavax.sql.rowset.serial.SerialArray: void SerialArray(java.sql.Array)\u003e","javadoc":"/** \n * Constructs a new \u003ccode\u003eSerialArray\u003c/code\u003e object from the given \u003ccode\u003eArray\u003c/code\u003e object. \u003cP\u003e This constructor does not do custom mapping.  If the base type of the array is an SQL structured type and custom mapping is desired, the constructor \u003ccode\u003eSerialArray(Array array, Map map)\u003c/code\u003e should be used. \u003cP\u003e The new \u003ccode\u003eSerialArray\u003c/code\u003e object contains the same elements as the \u003ccode\u003eArray\u003c/code\u003e object from which it is built, except when the base type is the SQL type \u003ccode\u003eBLOB\u003c/code\u003e, \u003ccode\u003eCLOB\u003c/code\u003e, \u003ccode\u003eDATALINK\u003c/code\u003e or \u003ccode\u003eJAVA_OBJECT\u003c/code\u003e. In this case, each element in the new \u003ccode\u003eSerialArray\u003c/code\u003e object is the appropriate serialized form, that is, a \u003ccode\u003eSerialBlob\u003c/code\u003e, \u003ccode\u003eSerialClob\u003c/code\u003e, \u003ccode\u003eSerialDatalink\u003c/code\u003e, or \u003ccode\u003eSerialJavaObject\u003c/code\u003e object. \u003cP\u003e Note: (1) The \u003ccode\u003eArray\u003c/code\u003e object from which a \u003ccode\u003eSerialArray\u003c/code\u003e object is created must have materialized the SQL \u003ccode\u003eARRAY\u003c/code\u003e value\u0027s data on the client before it is passed to the constructor.  Otherwise, the new \u003ccode\u003eSerialArray\u003c/code\u003e object will contain no data. \u003cp\u003e Note: (2) The \u003ccode\u003eArray\u003c/code\u003e object supplied to this constructor cannot return \u003ccode\u003enull\u003c/code\u003e for any \u003ccode\u003eArray.getArray()\u003c/code\u003e methods. \u003ccode\u003eSerialArray\u003c/code\u003e cannot serialize \u003ccode\u003enull\u003c/code\u003e array values.\n * @param array the \u003ccode\u003eArray\u003c/code\u003e object to be serialized\n * @throws SerialException if an error occurs serializing the\u003ccode\u003eArray\u003c/code\u003e object\n * @throws SQLException if a database access error occurs or the\u003ci\u003earray\u003c/i\u003e parameter is \u003ccode\u003enull\u003c/code\u003e.\n */\n","tf":{"freq":{"otherwis":1,"client":1,"structur":1,"clob":1,"lexcept":1,"data":2,"use":1,"object":13,"desir":1,"type":4,"must":1,"given":1,"datalink":1,"map":4,"valu":2,"built":1,"note":2,"custom":2,"constructor":4,"element":2,"except":2,"error":2,"form":1,"creat":1,"paramet":1,"suppli":1,"access":1,"databas":1,"pass":1,"blob":1,"materi":1,"appropri":1,"contain":2,"will":1,"base":2,"method":1,"java":1,"construct":1,"serial":17,"occur":2,"array":22},"maxFreq":22,"totalTerms":109},"loc":47}