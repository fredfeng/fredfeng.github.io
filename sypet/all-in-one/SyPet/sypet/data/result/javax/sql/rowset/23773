{"id":23773,"className":"javax.sql.rowset.BaseRowSet","methodName":"setTransactionIsolation","signature":"\u003cjavax.sql.rowset.BaseRowSet: void setTransactionIsolation(int)\u003e","javadoc":"/** \n * Sets the transaction isolation property for this JDBC \u003ccode\u003eRowSet\u003c/code\u003e object to the given constant. The DBMS will use this transaction isolation level for transactions if it can. \u003cp\u003e For \u003ccode\u003eRowSet\u003c/code\u003e implementations such as the \u003ccode\u003eCachedRowSet\u003c/code\u003e that operate in a disconnected environment, the \u003ccode\u003eSyncProvider\u003c/code\u003e object being used offers complementary locking and data integrity options. The options described below are pertinent only to connected \u003ccode\u003eRowSet\u003c/code\u003e objects (\u003ccode\u003eJdbcRowSet\u003c/code\u003e objects).\n * @param level one of the following constants, listed in ascending order:\u003ccode\u003eConnection.TRANSACTION_NONE\u003c/code\u003e, \u003ccode\u003eConnection.TRANSACTION_READ_UNCOMMITTED\u003c/code\u003e, \u003ccode\u003eConnection.TRANSACTION_READ_COMMITTED\u003c/code\u003e, \u003ccode\u003eConnection.TRANSACTION_REPEATABLE_READ\u003c/code\u003e, or \u003ccode\u003eConnection.TRANSACTION_SERIALIZABLE\u003c/code\u003e\n * @throws SQLException if the given parameter is not one of the Connectionconstants\n * @see javax.sql.rowset.spi.SyncFactory\n * @see javax.sql.rowset.spi.SyncProvider\n * @see #getTransactionIsolation\n */\n","tf":{"freq":{"integr":1,"connect":6,"one":2,"lexcept":1,"data":1,"use":2,"object":4,"pertin":1,"level":2,"order":1,"given":2,"oper":1,"sync":3,"factori":1,"javax":2,"spi":2,"isol":4,"jdbc":1,"option":2,"follow":1,"constant":2,"rowset":2,"paramet":1,"environ":1,"lock":1,"complementari":1,"describ":1,"list":1,"cach":1,"offer":1,"provid":2,"row":5,"sql":2,"transact":5,"will":1,"disconnect":1,"properti":1,"ascend":1,"connectionconst":1},"maxFreq":6,"totalTerms":71},"loc":17}