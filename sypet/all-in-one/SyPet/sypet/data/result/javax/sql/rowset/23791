{"id":23791,"className":"javax.sql.rowset.BaseRowSet","methodName":"setNull","signature":"\u003cjavax.sql.rowset.BaseRowSet: void setNull(int,int)\u003e","javadoc":"/** \n * Sets the designated parameter to SQL \u003ccode\u003eNULL\u003c/code\u003e. Note that the parameter\u0027s SQL type must be specified using one of the type codes defined in \u003ccode\u003ejava.sql.Types\u003c/code\u003e.  This SQL type is specified in the second parameter. \u003cp\u003e Note that the second parameter tells the DBMS the data type of the value being set to \u003ccode\u003eNULL\u003c/code\u003e. Some DBMSs require this information, so it is required in order to make code more portable. \u003cP\u003e The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command when the method \u003ccode\u003eexecute\u003c/code\u003e is called. Methods such as \u003ccode\u003eexecute\u003c/code\u003e and \u003ccode\u003epopulate\u003c/code\u003e must be provided in any class that extends this class and implements one or more of the standard JSR-114 \u003ccode\u003eRowSet\u003c/code\u003e interfaces. \u003cP\u003e NOTE: \u003ccode\u003eJdbcRowSet\u003c/code\u003e does not require the \u003ccode\u003epopulate\u003c/code\u003e method as it is undefined in this class. \u003cP\u003e Calls made to the method \u003ccode\u003egetParams\u003c/code\u003e after this version of \u003ccode\u003esetNull\u003c/code\u003e has been called will return an \u003ccode\u003eObject\u003c/code\u003e array containing the parameter values that have been set.  In that array, the element that represents the values set with this method will itself be an array. The first element of that array is \u003ccode\u003enull\u003c/code\u003e. The second element is the value set for \u003ci\u003esqlType\u003c/i\u003e. The parameter number is indicated by an element\u0027s position in the array returned by the method \u003ccode\u003egetParams\u003c/code\u003e, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the second placeholder parameter is being set to \u003ccode\u003enull\u003c/code\u003e, the array containing it will be the second element in the array returned by \u003ccode\u003egetParams\u003c/code\u003e. \u003cP\u003e Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number \u003ci\u003eparameterIndex\u003c/i\u003e is \u003ci\u003eparameterIndex\u003c/i\u003e -1.\n * @param parameterIndex the ordinal number of the placeholder parameterin this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \u003ccode\u003e1\u003c/code\u003e or greater\n * @param sqlType an \u003ccode\u003eint\u003c/code\u003e that is one of the SQL type codesdefined in the class  {@link java.sql.Types}. If a non-standard \u003ci\u003esqlType\u003c/i\u003e is supplied, this method will not throw a \u003ccode\u003eSQLException\u003c/code\u003e. This allows implicit support for non-standard SQL types.\n * @throws SQLException if a database access error occurs or the givenparameter index is out of bounds\n * @see #getParams\n */\n","tf":{"freq":{"greater":1,"store":1,"second":8,"implicit":1,"lexcept":2,"zero":1,"type":11,"must":3,"specifi":2,"requir":3,"undefin":1,"jdbc":1,"mss":1,"element":9,"index":4,"support":1,"number":4,"provid":1,"databas":1,"row":4,"non":2,"inform":1,"start":1,"contain":2,"will":5,"word":1,"parameterin":1,"execut":2,"make":1,"posit":1,"array":9,"defin":1,"call":3,"givenparamet":1,"allow":1,"portabl":1,"correspond":1,"link":1,"one":3,"data":1,"made":1,"use":1,"object":3,"version":1,"popul":2,"order":1,"indic":1,"ordin":1,"command":2,"valu":7,"tell":1,"note":3,"error":1,"standard":3,"repres":1,"paramet":16,"suppli":2,"access":1,"codesdefin":1,"sql":5,"placehold":5,"appropri":1,"intern":1,"method":8,"java":2,"first":4,"bound":1,"design":1,"occur":1},"maxFreq":16,"totalTerms":177},"loc":14}