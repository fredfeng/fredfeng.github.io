{"id":23813,"className":"javax.sql.rowset.BaseRowSet","methodName":"setObject","signature":"\u003cjavax.sql.rowset.BaseRowSet: void setObject(int,java.lang.Object,int,int)\u003e","javadoc":"/** \n * Sets the designated parameter to an \u003ccode\u003eObject\u003c/code\u003e in the Java programming language. The second parameter must be an \u003ccode\u003eObject\u003c/code\u003e type.  For integral values, the \u003ccode\u003ejava.lang\u003c/code\u003e equivalent objects should be used. For example, use the class \u003ccode\u003eInteger\u003c/code\u003e for an \u003ccode\u003eint\u003c/code\u003e. \u003cP\u003e The driver converts this object to the specified target SQL type before sending it to the database. If the object has a custom mapping (is of a class implementing \u003ccode\u003eSQLData\u003c/code\u003e), the driver should call the method \u003ccode\u003eSQLData.writeSQL\u003c/code\u003e to write the object to the SQL data stream. If, on the other hand, the object is of a class implementing \u003ccode\u003eRef\u003c/code\u003e, \u003ccode\u003eBlob\u003c/code\u003e, \u003ccode\u003eClob\u003c/code\u003e, \u003ccode\u003eStruct\u003c/code\u003e, or \u003ccode\u003eArray\u003c/code\u003e, the driver should pass it to the database as a value of the corresponding SQL type. \u003cP\u003e \u003cp\u003eNote that this method may be used to pass database- specific abstract data types. \u003cP\u003e The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this \u003ccode\u003eRowSet\u003c/code object\u0027s command when the method \u003ccode\u003eexecute\u003c/code\u003e is called. Methods such as \u003ccode\u003eexecute\u003c/code\u003e and \u003ccode\u003epopulate\u003c/code\u003e must be provided in any class that extends this class and implements one or more of the standard JSR-114 \u003ccode\u003eRowSet\u003c/code\u003e interfaces. \u003cP\u003e NOTE: \u003ccode\u003eJdbcRowSet\u003c/code\u003e does not require the \u003ccode\u003epopulate\u003c/code\u003e method as it is undefined in this class. \u003cP\u003e Calls made to the method \u003ccode\u003egetParams\u003c/code\u003e after this version of \u003ccode\u003esetObject\u003c/code\u003e has been called will return an array containing the parameter values that have been set.  In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given \u003ccode\u003eObject\u003c/code\u003e instance, and the second element is the value set for \u003ci\u003etargetSqlType\u003c/i\u003e.  The third element is the value set for \u003ci\u003escale\u003c/i\u003e, which the driver will ignore if the type of the object being set is not \u003ccode\u003ejava.sql.Types.NUMERIC\u003c/code\u003e or \u003ccode\u003ejava.sql.Types.DECIMAL\u003c/code\u003e. The parameter number is indicated by an element\u0027s position in the array returned by the method \u003ccode\u003egetParams\u003c/code\u003e, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the object being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by \u003ccode\u003egetParams\u003c/code\u003e. \u003cP\u003e Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number \u003ci\u003eparameterIndex\u003c/i\u003e is element number \u003ci\u003eparameterIndex\u003c/i\u003e -1.\n * @param parameterIndex the ordinal number of the placeholder parameterin this \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \u003ccode\u003e1\u003c/code\u003e or greater\n * @param x the \u003ccode\u003eObject\u003c/code\u003e containing the input parameter value;must be an \u003ccode\u003eObject\u003c/code\u003e type\n * @param targetSqlType the SQL type (as defined in \u003ccode\u003ejava.sql.Types\u003c/code\u003e)to be sent to the database. The \u003ccode\u003escale\u003c/code\u003e argument may further qualify this type. If a non-standard \u003ci\u003etargetSqlType\u003c/i\u003e is supplied, this method will not throw a \u003ccode\u003eSQLException\u003c/code\u003e. This allows implicit support for non-standard SQL types.\n * @param scale for the types \u003ccode\u003ejava.sql.Types.DECIMAL\u003c/code\u003e and\u003ccode\u003ejava.sql.Types.NUMERIC\u003c/code\u003e, this is the number of digits after the decimal point.  For all other types, this value will be ignored.\n * @throws SQLException if an error occurs or the parameter index is out of bounds\n * @see #getParams\n */\n","tf":{"freq":{"greater":1,"send":1,"integr":1,"second":7,"store":1,"implicit":1,"lexcept":2,"languag":1,"zero":1,"type":19,"must":4,"ldata":2,"specifi":1,"sent":1,"requir":1,"given":1,"equival":1,"undefin":1,"jdbc":1,"custom":1,"argument":1,"element":11,"index":4,"ignor":2,"support":1,"number":6,"third":1,"provid":1,"databas":4,"row":4,"non":2,"instanc":1,"digit":1,"input":1,"start":1,"program":1,"contain":3,"will":7,"word":1,"parameterin":1,"execut":2,"posit":1,"array":10,"defin":1,"scale":3,"call":4,"stream":1,"allow":1,"correspond":2,"one":1,"clob":1,"made":1,"data":2,"convert":1,"use":3,"object":16,"decim":1,"lang":1,"version":1,"hand":1,"popul":2,"indic":1,"ordin":1,"struct":1,"map":1,"write":2,"command":2,"driver":4,"valu":12,"note":2,"may":2,"error":1,"standard":3,"repres":1,"paramet":16,"suppli":2,"pass":2,"blob":1,"point":1,"ref":1,"specif":1,"placehold":5,"sql":8,"appropri":1,"target":4,"exampl":1,"intern":1,"java":7,"method":10,"first":4,"integ":1,"bound":1,"qualifi":1,"design":1,"occur":1},"maxFreq":19,"totalTerms":262},"loc":13}