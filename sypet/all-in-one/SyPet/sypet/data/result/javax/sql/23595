{"id":23595,"className":"javax.sql.StatementEvent","methodName":"StatementEvent","signature":"\u003cjavax.sql.StatementEvent: void StatementEvent(javax.sql.PooledConnection,java.sql.PreparedStatement)\u003e","javadoc":"/** \n * Constructs a \u003ccode\u003eStatementEvent\u003c/code\u003e with the specified \u003ccode\u003ePooledConnection\u003c/code\u003e and \u003ccode\u003ePreparedStatement\u003c/code\u003e.  The \u003ccode\u003eSQLException\u003c/code\u003e contained in the event defaults to null. \u003cp\u003e\n * @param con                   The \u003ccode\u003ePooledConnection\u003c/code\u003e that the closed or invalid\u003ccode\u003ePreparedStatement\u003c/code\u003eis associated with.\n * @param statement             The \u003ccode\u003ePreparedStatement\u003c/code\u003e that is bieng closed or is invalid\u003cp\u003e\n * @throws IllegalArgumentException if \u003ccode\u003econ\u003c/code\u003e is null.\n * @since 1.6\n */\n","tf":{"freq":{"argument":1,"con":2,"except":1,"connect":2,"lexcept":1,"illeg":1,"prepar":3,"specifi":1,"close":2,"statement":6,"invalid":2,"associ":1,"pool":2,"event":3,"contain":1,"construct":1,"bieng":1},"maxFreq":6,"totalTerms":31},"loc":7}