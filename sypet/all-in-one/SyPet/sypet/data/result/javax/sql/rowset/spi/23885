{"id":23885,"className":"javax.sql.rowset.spi.SyncFactory","methodName":"registerProvider","signature":"\u003cjavax.sql.rowset.spi.SyncFactory: void registerProvider(java.lang.String)\u003e","javadoc":"/** \n * Adds the the given synchronization provider to the factory register. Guidelines are provided in the \u003ccode\u003eSyncProvider\u003c/code\u003e specification for the required naming conventions for \u003ccode\u003eSyncProvider\u003c/code\u003e implementations. \u003cp\u003e Synchronization providers bound to a JNDI context can be registered by binding a SyncProvider instance to a JNDI namespace. \u003cul\u003e \u003cpre\u003e SyncProvider p \u003d new MySyncProvider(); InitialContext ic \u003d new InitialContext(); ic.bind (\"jdbc/rowset/MySyncProvider\", p); \u003c/pre\u003e \u003c/ul\u003e Furthermore, an initial JNDI context should be set with the \u003ccode\u003eSyncFactory\u003c/code\u003e using the \u003ccode\u003esetJNDIContext\u003c/code\u003e method. The \u003ccode\u003eSyncFactory\u003c/code\u003e leverages this context to search for available \u003ccode\u003eSyncProvider\u003c/code\u003e objects bound to the JNDI context and its child nodes.\n * @param providerID A \u003ccode\u003eString\u003c/code\u003e object with the unique ID of thesynchronization provider being registered\n * @throws SyncFactoryException if an attempt is made to supply an emptyor null provider name\n * @see #setJNDIContext\n */\n","tf":{"freq":{"attempt":1,"furthermor":1,"convent":1,"guidelin":1,"made":1,"use":1,"object":2,"add":1,"child":1,"uniqu":1,"namespac":1,"requir":1,"given":1,"search":1,"sync":10,"factori":4,"name":2,"regist":4,"initi":3,"leverag":1,"jdbc":1,"emptyor":1,"except":1,"rowset":1,"suppli":1,"thesynchron":1,"avail":1,"provid":14,"instanc":1,"node":1,"specif":1,"pre":2,"string":1,"context":8,"method":1,"bind":2,"bound":2},"maxFreq":14,"totalTerms":79},"loc":8}