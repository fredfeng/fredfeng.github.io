{"id":23696,"className":"javax.sql.rowset.CachedRowSet","methodName":"undoUpdate","signature":"\u003cjavax.sql.rowset.CachedRowSet: void undoUpdate()\u003e","javadoc":"/** \n * Immediately reverses the last update operation if the row has been modified. This method can be called to reverse updates on all columns until all updates in a row have been rolled back to their state just prior to the last synchronization (\u003ccode\u003eacceptChanges\u003c/code\u003e) or population. This method may also be called while performing updates to the insert row. \u003cP\u003e \u003ccode\u003eundoUpdate\u003c/code\u003e may be called at any time during the lifetime of a rowset; however, after a synchronization has occurred, this method has no effect until further modification to the rowset data has occurred.\n * @throws SQLException if the cursor is before the first row or after the lastrow in in this \u003ccode\u003eCachedRowSet\u003c/code\u003e object\n * @see #undoDelete\n * @see #undoInsert\n * @see java.sql.ResultSet#cancelRowUpdates\n */\n","tf":{"freq":{"lifetim":1,"result":1,"call":3,"cursor":1,"last":2,"delet":1,"undo":4,"accept":1,"lexcept":1,"data":1,"state":1,"cancel":1,"perform":1,"object":1,"prior":1,"roll":1,"revers":2,"popul":1,"time":1,"oper":1,"lastrow":1,"immedi":1,"howev":1,"just":1,"may":2,"rowset":2,"back":1,"cach":1,"row":6,"sql":1,"effect":1,"updat":7,"column":1,"modifi":1,"java":1,"method":3,"chang":1,"insert":2,"first":1,"also":1,"modif":1,"occur":2},"maxFreq":7,"totalTerms":66},"loc":0}