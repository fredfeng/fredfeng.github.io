{"id":23518,"className":"javax.sql.RowSet","methodName":"setObject","signature":"\u003cjavax.sql.RowSet: void setObject(java.lang.String,java.lang.Object,int,int)\u003e","javadoc":"/** \n * Sets the value of the designated parameter with the given object. The second argument must be an object type; for integral values, the \u003ccode\u003ejava.lang\u003c/code\u003e equivalent objects should be used. \u003cp\u003eThe given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface \u003ccode\u003eSQLData\u003c/code\u003e), the JDBC driver should call the method \u003ccode\u003eSQLData.writeSQL\u003c/code\u003e to write it to the SQL data stream. If, on the other hand, the object is of a class implementing \u003ccode\u003eRef\u003c/code\u003e, \u003ccode\u003eBlob\u003c/code\u003e, \u003ccode\u003eClob\u003c/code\u003e,  \u003ccode\u003eNClob\u003c/code\u003e, \u003ccode\u003eStruct\u003c/code\u003e, \u003ccode\u003ejava.net.URL\u003c/code\u003e, or \u003ccode\u003eArray\u003c/code\u003e, the driver should pass it to the database as a value of the corresponding SQL type. \u003cP\u003e Note that this method may be used to pass datatabase- specific abstract data types.\n * @param parameterName the name of the parameter\n * @param x the object containing the input parameter value\n * @param targetSqlType the SQL type (as defined in java.sql.Types) to besent to the database. The scale argument may further qualify this type.\n * @param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,this is the number of digits after the decimal point.  For all other types, this value will be ignored.\n * @exception SQLException if a database access error occurs orthis method is called on a closed \u003ccode\u003eCallableStatement\u003c/code\u003e\n * @exception SQLFeatureNotSupportedException if \u003ccode\u003etargetSqlType\u003c/code\u003e isa \u003ccode\u003eARRAY\u003c/code\u003e, \u003ccode\u003eBLOB\u003c/code\u003e, \u003ccode\u003eCLOB\u003c/code\u003e, \u003ccode\u003eDATALINK\u003c/code\u003e, \u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \u003ccode\u003eNCHAR\u003c/code\u003e, \u003ccode\u003eNCLOB\u003c/code\u003e, \u003ccode\u003eNVARCHAR\u003c/code\u003e, \u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \u003ccode\u003eREF\u003c/code\u003e, \u003ccode\u003eROWID\u003c/code\u003e, \u003ccode\u003eSQLXML\u003c/code\u003e or  \u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type\n * @see Types\n * @see #getObject\n * @since 1.4\n */\n","tf":{"freq":{"integr":1,"second":1,"lexcept":1,"type":16,"ldata":2,"must":1,"close":1,"sent":1,"nclob":1,"given":3,"equival":1,"callabl":1,"custom":1,"argument":2,"except":3,"ignor":1,"support":2,"number":1,"databas":4,"statement":1,"digit":1,"input":1,"besent":1,"contain":1,"will":2,"array":1,"scale":2,"call":2,"defin":1,"stream":1,"correspond":1,"clob":1,"data":4,"convert":1,"use":2,"object":9,"decim":1,"net":1,"lang":1,"hand":1,"struct":1,"name":2,"isa":1,"map":1,"write":2,"driver":3,"valu":5,"note":1,"may":2,"error":1,"paramet":4,"orthi":1,"access":1,"pass":2,"lfeatur":1,"blob":1,"point":1,"ref":1,"specif":1,"sql":6,"datatabas":1,"target":3,"java":6,"method":3,"qualifi":1,"design":1,"occur":1},"maxFreq":16,"totalTerms":134},"loc":0}