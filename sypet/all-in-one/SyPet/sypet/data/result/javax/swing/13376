{"id":13376,"className":"javax.swing.JEditorPane","methodName":"setEditorKit","signature":"\u003cjavax.swing.JEditorPane: void setEditorKit(javax.swing.text.EditorKit)\u003e","javadoc":"/** \n * Sets the currently installed kit for handling content.  This is the bound property that establishes the content type of the editor. Any old kit is first deinstalled, then if kit is non-\u003ccode\u003enull\u003c/code\u003e, the new kit is installed, and a default document created for it. A \u003ccode\u003ePropertyChange\u003c/code\u003e event (\"editorKit\") is always fired when \u003ccode\u003esetEditorKit\u003c/code\u003e is called. \u003cp\u003e \u003cem\u003eNOTE: This has the side effect of changing the model, because the \u003ccode\u003eEditorKit\u003c/code\u003e is the source of how a particular type of content is modeled.  This method will cause \u003ccode\u003esetDocument\u003c/code\u003e to be called on behalf of the caller to ensure integrity of the internal state.\u003c/em\u003e\n * @param kit the desired editor behavior\n * @see #getEditorKit\n * @beaninfo description: the currently installed kit for handling content bound: true expert: true\n */\n","tf":{"freq":{"expert":1,"caller":1,"behalf":1,"call":2,"old":1,"model":2,"integr":1,"beaninfo":1,"behavior":1,"state":1,"particular":1,"desir":1,"type":2,"ensur":1,"deinstal":1,"document":2,"side":1,"event":1,"current":2,"kit":11,"creat":1,"alway":1,"instal":3,"descript":1,"establish":1,"true":2,"fire":1,"handl":2,"non":1,"content":4,"editor":7,"caus":1,"effect":1,"intern":1,"will":1,"method":1,"sourc":1,"properti":2,"chang":2,"first":1,"bound":2},"maxFreq":11,"totalTerms":72},"loc":13}