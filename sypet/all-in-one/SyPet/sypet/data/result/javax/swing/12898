{"id":12898,"className":"javax.swing.JLayer","methodName":"setLayerEventMask","signature":"\u003cjavax.swing.JLayer: void setLayerEventMask(long)\u003e","javadoc":"/** \n * Enables the events from JLayer and \u003cb\u003eall its descendants\u003c/b\u003e defined by the specified event mask parameter to be delivered to the {@link LayerUI#eventDispatched(AWTEvent,JLayer)} method.\u003cp/\u003e Events are delivered provided that  {@code LayerUI} is setfor this  {@code JLayer} and the {@code JLayer}is displayable. \u003cp/\u003e The following example shows how to correctly use this method in the  {@code LayerUI} implementations:\u003cpre\u003e public void installUI(JComponent c) { super.installUI(c); JLayer l \u003d (JLayer) c; // this LayerUI will receive only key and focus events l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK | AWTEvent.FOCUS_EVENT_MASK); } public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l \u003d (JLayer) c; // JLayer must be returned to its initial state l.setLayerEventMask(0); } \u003c/pre\u003e By default  {@code JLayer} receives no events and its event mask is {@code 0}.\n * @param layerEventMask the bitmask of event types to receive\n * @see #getLayerEventMask()\n * @see LayerUI#eventDispatched(AWTEvent,JLayer)\n * @see Component#isDisplayable()\n */\n","tf":{"freq":{"uninstal":2,"defin":1,"link":1,"state":1,"mask":7,"use":1,"show":1,"type":1,"must":1,"specifi":1,"jcompon":2,"setfor":1,"correct":1,"event":14,"tevent":4,"focus":1,"dispatch":2,"initi":1,"key":1,"follow":1,"enabl":1,"instal":2,"paramet":1,"layer":10,"receiv":3,"display":2,"provid":1,"compon":1,"bitmask":1,"pre":2,"will":1,"deliv":2,"exampl":1,"method":2,"descend":1,"jlayer":11},"maxFreq":14,"totalTerms":87},"loc":13}