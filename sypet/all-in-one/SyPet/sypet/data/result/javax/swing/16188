{"id":16188,"className":"javax.swing.Spring","methodName":"scale","signature":"\u003cjavax.swing.Spring: javax.swing.Spring scale(javax.swing.Spring,float)\u003e","javadoc":"/** \n * Returns a spring whose \u003cem\u003eminimum\u003c/em\u003e, \u003cem\u003epreferred\u003c/em\u003e, \u003cem\u003emaximum\u003c/em\u003e and \u003cem\u003evalue\u003c/em\u003e properties are each multiples of the properties of the argument spring, \u003ccode\u003es\u003c/code\u003e. Minimum and maximum properties are swapped when \u003ccode\u003efactor\u003c/code\u003e is negative (in accordance with the rules of interval arithmetic). \u003cp\u003e When factor is, for example, 0.5f the result represents \u0027the mid-point\u0027 of its input - an operation that is useful for centering components in a container.\n * @param s the spring to scale\n * @param factor amount to scale by.\n * @return  a spring whose properties are those of the input spring \u003ccode\u003es\u003c/code\u003emultiplied by \u003ccode\u003efactor\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003es\u003c/code\u003e is null\n * @since 1.5\n */\n","tf":{"freq":{"scale":3,"result":1,"minimum":2,"arithmet":1,"use":1,"spring":5,"amount":1,"center":1,"oper":1,"rule":1,"multipli":1,"valu":1,"argument":1,"except":1,"multipl":1,"whose":2,"repres":1,"factor":4,"accord":1,"interv":1,"point":1,"input":2,"compon":1,"maximum":2,"contain":1,"exampl":1,"pointer":1,"negat":1,"swap":1,"properti":4,"mid":1,"prefer":1},"maxFreq":5,"totalTerms":48},"loc":4}