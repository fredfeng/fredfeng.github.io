{"id":15941,"className":"javax.swing.SpinnerNumberModel","methodName":"setMinimum","signature":"\u003cjavax.swing.SpinnerNumberModel: void setMinimum(java.lang.Comparable)\u003e","javadoc":"/** \n * Changes the lower bound for numbers in this sequence. If \u003ccode\u003eminimum\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, then there is no lower bound.  No bounds checking is done here; the new \u003ccode\u003eminimum\u003c/code\u003e value may invalidate the \u003ccode\u003e(minimum \u0026lt;\u003d value \u0026lt\u003d maximum)\u003c/code\u003e invariant enforced by the constructors.  This is to simplify updating the model, naturally one should ensure that the invariant is true before calling the \u003ccode\u003egetNextValue\u003c/code\u003e, \u003ccode\u003egetPreviousValue\u003c/code\u003e, or \u003ccode\u003esetValue\u003c/code\u003e methods. \u003cp\u003e Typically this property is a \u003ccode\u003eNumber\u003c/code\u003e of the same type as the \u003ccode\u003evalue\u003c/code\u003e however it\u0027s possible to use any \u003ccode\u003eComparable\u003c/code\u003e with a \u003ccode\u003ecompareTo\u003c/code\u003e method for a \u003ccode\u003eNumber\u003c/code\u003e with the same type as the value. For example if value was a \u003ccode\u003eLong\u003c/code\u003e, \u003ccode\u003eminimum\u003c/code\u003e might be a Date subclass defined like this: \u003cpre\u003e MyDate extends Date {  // Date already implements Comparable public int compareTo(Long o) { long t \u003d getTime(); return (t \u003c o.longValue() ? -1 : (t \u003d\u003d o.longValue() ? 0 : 1)); } } \u003c/pre\u003e \u003cp\u003e This method fires a \u003ccode\u003eChangeEvent\u003c/code\u003e if the \u003ccode\u003eminimum\u003c/code\u003e has changed.\n * @param minimum a \u003ccode\u003eComparable\u003c/code\u003e that has a\u003ccode\u003ecompareTo\u003c/code\u003e method for \u003ccode\u003eNumber\u003c/code\u003es with the same type as \u003ccode\u003evalue\u003c/code\u003e\n * @see #getMinimum\n * @see #setMaximum\n * @see SpinnerModel#addChangeListener\n */\n","tf":{"freq":{"defin":1,"might":1,"call":1,"model":2,"lower":2,"minimum":8,"one":1,"next":1,"typic":1,"use":1,"possibl":1,"natur":1,"add":1,"date":4,"type":3,"ensur":1,"time":1,"invalid":1,"event":1,"sequenc":1,"valu":11,"howev":1,"listen":1,"constructor":1,"may":1,"previous":1,"check":1,"enforc":1,"done":1,"true":1,"number":4,"like":1,"fire":1,"invari":2,"spinner":1,"simplifi":1,"updat":1,"pre":2,"maximum":2,"subclass":1,"exampl":1,"alreadi":1,"method":4,"properti":1,"chang":4,"compar":6,"bound":3},"maxFreq":11,"totalTerms":90},"loc":6}