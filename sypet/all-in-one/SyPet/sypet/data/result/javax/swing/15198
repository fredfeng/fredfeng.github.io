{"id":15198,"className":"javax.swing.AbstractButton","methodName":"setContentAreaFilled","signature":"\u003cjavax.swing.AbstractButton: void setContentAreaFilled(boolean)\u003e","javadoc":"/** \n * Sets the \u003ccode\u003econtentAreaFilled\u003c/code\u003e property. If \u003ccode\u003etrue\u003c/code\u003e the button will paint the content area.  If you wish to have a transparent button, such as an icon only button, for example, then you should set this to \u003ccode\u003efalse\u003c/code\u003e. Do not call \u003ccode\u003esetOpaque(false)\u003c/code\u003e. The default value for the the \u003ccode\u003econtentAreaFilled\u003c/code\u003e property is \u003ccode\u003etrue\u003c/code\u003e. \u003cp\u003e This function may cause the component\u0027s opaque property to change. \u003cp\u003e The exact behavior of calling this function varies on a component-by-component and L\u0026F-by-L\u0026F basis.\n * @param b if true, the content should be filled; if falsethe content area is not filled\n * @see #isContentAreaFilled\n * @see #setOpaque\n * @beaninfo bound: true attribute: visualUpdate true description: Whether the button should paint the content area or leave it transparent.\n */\n","tf":{"freq":{"fals":2,"call":2,"beaninfo":1,"wish":1,"behavior":1,"whether":1,"function":2,"transpar":2,"opaqu":3,"attribut":1,"area":7,"button":4,"exact":1,"valu":1,"icon":1,"may":1,"falseth":1,"fill":6,"descript":1,"true":5,"paint":2,"content":8,"visual":1,"caus":1,"updat":1,"compon":3,"leav":1,"exampl":1,"will":1,"properti":3,"chang":1,"basi":1,"bound":1,"vari":1},"maxFreq":8,"totalTerms":70},"loc":9}