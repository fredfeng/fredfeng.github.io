{"id":21247,"className":"javax.swing.text.JTextComponent$AccessibleJTextComponent","methodName":"getCharacterBounds","signature":"\u003cjavax.swing.text.JTextComponent$AccessibleJTextComponent: java.awt.Rectangle getCharacterBounds(int)\u003e","javadoc":"/** \n * Determines the bounding box of the character at the given index into the string.  The bounds are returned in local coordinates.  If the index is invalid a null rectangle is returned. The screen coordinates returned are \"unscrolled coordinates\" if the JTextComponent is contained in a JScrollPane in which case the resulting rectangle should be composed with the parent coordinates.  A good algorithm to use is: \u003cnf\u003e Accessible a: AccessibleText at \u003d a.getAccessibleText(); AccessibleComponent ac \u003d a.getAccessibleComponent(); Rectangle r \u003d at.getCharacterBounds(); Point p \u003d ac.getLocation(); r.x +\u003d p.x; r.y +\u003d p.y; \u003c/nf\u003e Note: the JTextComponent must have a valid size (e.g. have been added to a parent container whose ancestor container is a valid top-level window) for this method to be able to return a meaningful (non-null) value.\n * @param i the index into the String \u003e\u003d 0\n * @return the screen coordinates of the character\u0027s bounding box\n */\n","tf":{"freq":{"valid":2,"result":1,"unscrol":1,"use":1,"good":1,"abl":1,"rectangl":3,"must":1,"algorithm":1,"level":1,"invalid":1,"given":1,"valu":1,"jscroll":1,"ancestor":1,"note":1,"top":1,"coordin":5,"screen":2,"locat":1,"text":2,"index":3,"whose":1,"charact":4,"compos":1,"parent":2,"meaning":1,"access":5,"non":1,"size":1,"pane":1,"point":1,"window":1,"jtext":2,"compon":4,"string":2,"determin":1,"contain":3,"ad":1,"method":1,"box":2,"local":1,"bound":5},"maxFreq":5,"totalTerms":74},"loc":37}