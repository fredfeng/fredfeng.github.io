{"id":13694,"className":"javax.swing.JDialog","methodName":"setDefaultLookAndFeelDecorated","signature":"\u003cjavax.swing.JDialog: void setDefaultLookAndFeelDecorated(boolean)\u003e","javadoc":"/** \n * Provides a hint as to whether or not newly created  {@code JDialog}s should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel. If  {@code defaultLookAndFeelDecorated} is true,the current  {@code LookAndFeel} supports providing windowdecorations, and the current window manager supports undecorated windows, then newly created  {@code JDialog}s will have their Window decorations provided by the current  {@code LookAndFeel}. Otherwise, newly created  {@code JDialog}s will have their Window decorations provided by the current window manager. \u003cp\u003e You can get the same effect on a single JDialog by doing the following: \u003cpre\u003e JDialog dialog \u003d new JDialog(); dialog.setUndecorated(true); dialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG); \u003c/pre\u003e\n * @param defaultLookAndFeelDecorated A hint as to whether or not currentlook and feel should provide window decorations\n * @see javax.swing.LookAndFeel#getSupportsWindowDecorations\n * @since 1.4\n */\n","tf":{"freq":{"otherwis":1,"root":1,"singl":1,"currentlook":1,"whether":2,"close":1,"decor":9,"style":1,"javax":1,"current":5,"windowdecor":1,"swing":1,"dialog":3,"border":1,"widget":1,"jdialog":6,"follow":1,"look":7,"feel":8,"support":3,"creat":3,"titl":1,"manag":2,"true":2,"hint":2,"provid":6,"jroot":1,"pane":2,"newli":3,"window":10,"effect":1,"undecor":2,"pre":2,"will":2},"maxFreq":10,"totalTerms":94},"loc":7}