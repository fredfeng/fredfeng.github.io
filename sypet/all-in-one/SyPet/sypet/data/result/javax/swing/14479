{"id":14479,"className":"javax.swing.SpinnerDateModel","methodName":"setEnd","signature":"\u003cjavax.swing.SpinnerDateModel: void setEnd(java.lang.Comparable)\u003e","javadoc":"/** \n * Changes the upper limit for \u003ccode\u003eDate\u003c/code\u003es in this sequence. If \u003ccode\u003estart\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, then there is no upper limit.  No bounds checking is done here: the new start value may invalidate the \u003ccode\u003e(start \u0026lt;\u003d value \u0026lt;\u003d end)\u003c/code\u003e invariant enforced by the constructors.  This is to simplify updating the model.  Naturally, one should ensure that the invariant is true before calling the \u003ccode\u003enextValue\u003c/code\u003e, \u003ccode\u003epreviousValue\u003c/code\u003e, or \u003ccode\u003esetValue\u003c/code\u003e methods. \u003cp\u003e Typically this property is a \u003ccode\u003eDate\u003c/code\u003e however it\u0027s possible to use \u003ccode\u003eComparable\u003c/code\u003e with a \u003ccode\u003ecompareTo\u003c/code\u003e method for \u003ccode\u003eDate\u003c/code\u003es.  See \u003ccode\u003esetStart\u003c/code\u003e for an example. \u003cp\u003e This method fires a \u003ccode\u003eChangeEvent\u003c/code\u003e if the \u003ccode\u003eend\u003c/code\u003e has changed.\n * @param end defines the last date in the sequence\n * @see #getEnd\n * @see #setStart\n * @see #addChangeListener\n */\n","tf":{"freq":{"defin":1,"call":1,"model":1,"last":1,"next":1,"one":1,"typic":1,"use":1,"possibl":1,"natur":1,"add":1,"date":4,"ensur":1,"upper":2,"invalid":1,"event":1,"sequenc":2,"valu":5,"howev":1,"listen":1,"end":5,"constructor":1,"limit":2,"may":1,"previous":1,"check":1,"enforc":1,"done":1,"true":1,"fire":1,"invari":2,"simplifi":1,"updat":1,"start":5,"exampl":1,"method":3,"properti":1,"chang":4,"compar":2,"bound":1},"maxFreq":5,"totalTerms":65},"loc":6}