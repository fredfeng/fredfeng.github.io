{"id":12459,"className":"javax.swing.DefaultListSelectionModel","methodName":"removeSelectionInterval","signature":"\u003cjavax.swing.DefaultListSelectionModel: void removeSelectionInterval(int,int)\u003e","javadoc":"/** \n * Changes the selection to be the set difference of the current selection and the indices between  {@code index0} and {@code index1} inclusive.{@code index0} doesn\u0027t have to be less than or equal to {@code index1}. \u003cp\u003e In  {@code SINGLE_INTERVAL_SELECTION} selection mode, if the removalwould produce two disjoint selections, the removal is extended through the greater end of the selection. For example, if the selection is {@code 0-10} and you supply indices {@code 5,6} (in any order) theresulting selection is  {@code 0-4}. \u003cp\u003e If this represents a change to the current selection, then each {@code ListSelectionListener} is notified of the change.\u003cp\u003e If either index is  {@code -1}, this method does nothing and returns without exception. Otherwise, if either index is less than  {@code -1}, an  {@code IndexOutOfBoundsException} is thrown.\n * @param index0 one end of the interval\n * @param index1 other end of the interval\n * @throws IndexOutOfBoundsException if either index is less than {@code -1}(and neither index is  {@code -1})\n * @see #addListSelectionListener\n */\n","tf":{"freq":{"otherwis":1,"greater":1,"one":1,"add":1,"removalwould":1,"mode":1,"inclus":1,"indic":2,"order":1,"current":2,"noth":1,"listen":2,"less":3,"end":3,"notifi":1,"thrown":1,"except":3,"index":12,"repres":1,"select":11,"disjoint":1,"remov":2,"equal":1,"produc":1,"suppli":1,"theresult":1,"list":2,"without":1,"neither":1,"interv":3,"differ":1,"two":1,"either":3,"exampl":1,"method":1,"chang":3,"bound":2},"maxFreq":12,"totalTerms":76},"loc":3}