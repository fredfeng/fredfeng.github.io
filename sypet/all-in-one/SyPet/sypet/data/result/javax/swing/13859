{"id":13859,"className":"javax.swing.JComponent","methodName":"paint","signature":"\u003cjavax.swing.JComponent: void paint(java.awt.Graphics)\u003e","javadoc":"/** \n * Invoked by Swing to draw components. Applications should not invoke \u003ccode\u003epaint\u003c/code\u003e directly, but should instead use the \u003ccode\u003erepaint\u003c/code\u003e method to schedule the component for redrawing. \u003cp\u003e This method actually delegates the work of painting to three protected methods: \u003ccode\u003epaintComponent\u003c/code\u003e, \u003ccode\u003epaintBorder\u003c/code\u003e, and \u003ccode\u003epaintChildren\u003c/code\u003e.  They\u0027re called in the order listed to ensure that children appear on top of component itself. Generally speaking, the component and its children should not paint in the insets area allocated to the border. Subclasses can just override this method, as always.  A subclass that just wants to specialize the UI (look and feel) delegate\u0027s \u003ccode\u003epaint\u003c/code\u003e method should just override \u003ccode\u003epaintComponent\u003c/code\u003e.\n * @param g  the \u003ccode\u003eGraphics\u003c/code\u003e context in which to paint\n * @see #paintComponent\n * @see #paintBorder\n * @see #paintChildren\n * @see #getComponentGraphics\n * @see #repaint\n */\n","tf":{"freq":{"call":1,"graphic":2,"appear":1,"schedul":1,"use":1,"children":4,"applic":1,"redraw":1,"ensur":1,"draw":1,"area":1,"deleg":2,"order":1,"three":1,"swing":1,"border":3,"want":1,"top":1,"look":1,"just":3,"direct":1,"work":1,"feel":1,"alway":1,"inset":1,"invok":2,"speak":1,"paint":13,"list":1,"general":1,"compon":8,"context":1,"subclass":2,"instead":1,"repaint":2,"actual":1,"special":1,"method":5,"alloc":1},"maxFreq":13,"totalTerms":74},"loc":87}