{"id":23421,"className":"javax.swing.colorchooser.DefaultSwatchChooserPanel","methodName":"getDisplayedMnemonicIndex","signature":"\u003cjavax.swing.colorchooser.DefaultSwatchChooserPanel: int getDisplayedMnemonicIndex()\u003e","javadoc":"/** \n * Provides a hint to the look and feel as to the index of the character in \u003ccode\u003egetDisplayName\u003c/code\u003e that should be visually identified as the mnemonic. The look and feel should only use this if \u003ccode\u003egetMnemonic\u003c/code\u003e returns a value \u003e 0. \u003cp\u003e The return value here is a hint, it is ultimately up to the look and feel to honor the return value in some meaningful way. For example, a look and feel may wish to render each \u003ccode\u003eAbstractColorChooserPanel\u003c/code\u003e in a \u003ccode\u003eJTabbedPane\u003c/code\u003e, and further use this return value to underline a character in the \u003ccode\u003egetDisplayName\u003c/code\u003e. \u003cp\u003e This implementation looks up the value from the default \u003ccode\u003eColorChooser.rgbDisplayedMnemonicIndex\u003c/code\u003e, or if it isn\u0027t available (or not an \u003ccode\u003eInteger\u003c/code\u003e) returns -1. The lookup for the default is done through the \u003ccode\u003eUIManager\u003c/code\u003e: \u003ccode\u003eUIManager.get(\"ColorChooser.swatchesDisplayedMnemonicIndex\");\u003c/code\u003e.\n * @return Character index to render mnemonic for; -1 to provide novisual identifier for this panel.\n * @see #getMnemonic\n * @since 1.4\n */\n","tf":{"freq":{"panel":2,"ultim":1,"wish":1,"mnemon":7,"use":2,"way":1,"chooser":3,"identifi":2,"swatch":1,"lookup":1,"underlin":1,"name":2,"valu":5,"look":5,"feel":4,"index":5,"may":1,"charact":3,"honor":1,"manag":2,"done":1,"avail":1,"rgb":1,"hint":2,"display":5,"meaning":1,"provid":2,"pane":1,"render":2,"jtab":1,"visual":1,"color":3,"novisu":1,"exampl":1,"integ":1},"maxFreq":7,"totalTerms":74},"loc":3}