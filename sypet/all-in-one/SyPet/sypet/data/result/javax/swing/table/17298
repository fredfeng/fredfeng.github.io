{"id":17298,"className":"javax.swing.table.TableColumnModel","methodName":"getColumnIndexAtX","signature":"\u003cjavax.swing.table.TableColumnModel: int getColumnIndexAtX(int)\u003e","javadoc":"/** \n * Returns the index of the column that lies on the horizontal point, \u003ccode\u003exPosition\u003c/code\u003e; or -1 if it lies outside the any of the column\u0027s bounds. In keeping with Swing\u0027s separable model architecture, a TableColumnModel does not know how the table columns actually appear on screen.  The visual presentation of the columns is the responsibility of the view/controller object using this model (typically JTable).  The view/controller need not display the columns sequentially from left to right.  For example, columns could be displayed from right to left to accomodate a locale preference or some columns might be hidden at the request of the user.  Because the model does not know how the columns are laid out on screen, the given \u003ccode\u003exPosition\u003c/code\u003e should not be considered to be a coordinate in 2D graphics space.  Instead, it should be considered to be a width from the start of the first column in the model.  If the column index for a given X coordinate in 2D space is required, \u003ccode\u003eJTable.columnAtPoint\u003c/code\u003e can be used instead.\n * @return  the index of the column; or -1 if no column is found\n * @see javax.swing.JTable#columnAtPoint\n */\n","tf":{"freq":{"need":1,"appear":1,"requir":1,"given":2,"javax":1,"request":1,"swing":2,"right":2,"sequenti":1,"coordin":2,"control":2,"screen":2,"index":4,"respons":1,"width":1,"display":2,"present":1,"visual":1,"start":1,"outsid":1,"separ":1,"column":16,"view":2,"prefer":1,"posit":2,"jtabl":3,"might":1,"model":5,"graphic":1,"accomod":1,"typic":1,"use":2,"object":1,"space":2,"consid":2,"horizont":1,"left":2,"know":2,"point":3,"architectur":1,"tabl":2,"hidden":1,"exampl":1,"instead":2,"actual":1,"laid":1,"local":1,"first":1,"user":1,"lie":2,"bound":1,"found":1,"keep":1},"maxFreq":16,"totalTerms":96},"loc":0}