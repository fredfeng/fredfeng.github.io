{"id":13726,"className":"javax.swing.KeyStroke","methodName":"getKeyStroke","signature":"\u003cjavax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int,boolean)\u003e","javadoc":"/** \n * Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released. \u003cp\u003e The \"virtual key\" constants defined in java.awt.event.KeyEvent can be used to specify the key code. For example:\u003cul\u003e \u003cli\u003ejava.awt.event.KeyEvent.VK_ENTER \u003cli\u003ejava.awt.event.KeyEvent.VK_TAB \u003cli\u003ejava.awt.event.KeyEvent.VK_SPACE \u003c/ul\u003e Alternatively, the key code may be obtained by calling \u003ccode\u003ejava.awt.event.KeyEvent.getExtendedKeyCodeForChar\u003c/code\u003e. The modifiers consist of any combination of:\u003cul\u003e \u003cli\u003ejava.awt.event.InputEvent.SHIFT_DOWN_MASK \u003cli\u003ejava.awt.event.InputEvent.CTRL_DOWN_MASK \u003cli\u003ejava.awt.event.InputEvent.META_DOWN_MASK \u003cli\u003ejava.awt.event.InputEvent.ALT_DOWN_MASK \u003cli\u003ejava.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK \u003c/ul\u003e The old modifiers \u003cul\u003e \u003cli\u003ejava.awt.event.InputEvent.SHIFT_MASK \u003cli\u003ejava.awt.event.InputEvent.CTRL_MASK \u003cli\u003ejava.awt.event.InputEvent.META_MASK \u003cli\u003ejava.awt.event.InputEvent.ALT_MASK \u003cli\u003ejava.awt.event.InputEvent.ALT_GRAPH_MASK \u003c/ul\u003e also can be used, but they are mapped to _DOWN_ modifiers. Since these numbers are all different powers of two, any combination of them is an integer in which each bit represents a different modifier key. Use 0 to specify no modifiers.\n * @param keyCode an int specifying the numeric code for a keyboard key\n * @param modifiers a bitwise-ored combination of any modifiers\n * @param onKeyRelease \u003ccode\u003etrue\u003c/code\u003e if the KeyStroke should representa key release; \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return a KeyStroke object for that key\n * @see java.awt.event.KeyEvent\n * @see java.awt.event.InputEvent\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"virtual":1,"defin":1,"call":1,"old":1,"press":1,"bitwis":1,"representa":1,"use":3,"ore":1,"object":1,"activ":1,"whether":1,"specifi":4,"stroke":4,"share":1,"releas":3,"given":1,"altern":1,"event":34,"map":1,"combin":3,"power":1,"key":22,"keyboard":1,"may":1,"constant":1,"repres":1,"consist":1,"numer":2,"true":1,"number":1,"instanc":1,"bit":1,"two":1,"differ":2,"input":11,"awt":17,"obtain":1,"modifi":8,"exampl":1,"java":17,"integ":1,"also":1},"maxFreq":34,"totalTerms":162},"loc":7}