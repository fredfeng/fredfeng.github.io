{"id":14833,"className":"javax.swing.JTable","methodName":"getCellRenderer","signature":"\u003cjavax.swing.JTable: javax.swing.table.TableCellRenderer getCellRenderer(int,int)\u003e","javadoc":"/** \n * Returns an appropriate renderer for the cell specified by this row and column. If the \u003ccode\u003eTableColumn\u003c/code\u003e for this column has a non-null renderer, returns that.  If not, finds the class of the data in this column (using \u003ccode\u003egetColumnClass\u003c/code\u003e) and returns the default renderer for this type of data. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e Throughout the table package, the internal implementations always use this method to provide renderers so that this default behavior can be safely overridden by a subclass.\n * @param row       the row of the cell to render, where 0 is the first row\n * @param column    the column of the cell to render,where 0 is the first column\n * @return the assigned renderer; if \u003ccode\u003enull\u003c/code\u003ereturns the default renderer for this type of object\n * @see javax.swing.table.DefaultTableCellRenderer\n * @see javax.swing.table.TableColumn#setCellRenderer\n * @see #setDefaultRenderer\n */\n","tf":{"freq":{"assign":1,"overridden":1,"behavior":1,"data":2,"use":2,"object":1,"type":2,"specifi":1,"javax":2,"swing":2,"find":1,"note":1,"throughout":1,"safe":1,"alway":1,"cell":6,"provid":1,"row":4,"non":1,"render":12,"tabl":6,"appropri":1,"column":9,"intern":1,"subclass":1,"method":1,"first":2},"maxFreq":12,"totalTerms":65},"loc":8}