{"id":16905,"className":"javax.swing.tree.DefaultMutableTreeNode","methodName":"pathFromAncestorEnumeration","signature":"\u003cjavax.swing.tree.DefaultMutableTreeNode: java.util.Enumeration pathFromAncestorEnumeration(javax.swing.tree.TreeNode)\u003e","javadoc":"/** \n * Creates and returns an enumeration that follows the path from \u003ccode\u003eancestor\u003c/code\u003e to this node.  The enumeration\u0027s \u003ccode\u003enextElement()\u003c/code\u003e method first returns \u003ccode\u003eancestor\u003c/code\u003e, then the child of \u003ccode\u003eancestor\u003c/code\u003e that is an ancestor of this node, and so on, and finally returns this node.  Creation of the enumeration is O(m) where m is the number of nodes between this node and \u003ccode\u003eancestor\u003c/code\u003e, inclusive.  Each \u003ccode\u003enextElement()\u003c/code\u003e message is O(1).\u003cP\u003e Modifying the tree by inserting, removing, or moving a node invalidates any enumerations created before the modification.\n * @see #isNodeAncestor\n * @see #isNodeDescendant\n * @exception IllegalArgumentException if \u003ccode\u003eancestor\u003c/code\u003e isnot an ancestor of this node\n * @return  an enumeration for following the path from an ancestor ofthis node to this one\n */\n","tf":{"freq":{"creation":1,"one":1,"next":2,"child":1,"inclus":1,"isnot":1,"tree":1,"invalid":1,"path":3,"ancestor":10,"move":1,"follow":2,"argument":1,"element":2,"except":2,"creat":2,"messag":1,"remov":1,"number":1,"illeg":1,"ofthi":1,"node":10,"modifi":1,"method":1,"descend":1,"insert":1,"first":1,"modif":1},"maxFreq":10,"totalTerms":53},"loc":3}