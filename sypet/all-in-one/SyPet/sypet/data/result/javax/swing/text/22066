{"id":22066,"className":"javax.swing.text.View","methodName":"modelToView","signature":"\u003cjavax.swing.text.View: java.awt.Shape modelToView(int,java.awt.Shape,javax.swing.text.Position$Bias)\u003e","javadoc":"/** \n * Provides a mapping, for a given character, from the document model coordinate space to the view coordinate space.\n * @param pos the position of the desired character (\u003e\u003d0)\n * @param a the area of the view, which encompasses the requested character\n * @param b the bias toward the previous character or thenext character represented by the offset, in case the position is a boundary of two views; \u003ccode\u003eb\u003c/code\u003e will have one of these values: \u003cul\u003e \u003cli\u003e \u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e \u003cli\u003e \u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e \u003c/ul\u003e\n * @return the bounding box, in view coordinate space,of the character at the specified position\n * @exception BadLocationException  if the specified position doesnot represent a valid location in the associated document\n * @exception IllegalArgumentException if \u003ccode\u003eb\u003c/code\u003e is not one of thelegal \u003ccode\u003ePosition.Bias\u003c/code\u003e values listed above\n * @see View#viewToModel\n */\n","tf":{"freq":{"theleg":1,"valid":1,"model":3,"backward":1,"one":2,"desir":1,"space":3,"specifi":2,"pos":1,"document":2,"area":1,"given":1,"toward":1,"associ":1,"forward":1,"request":1,"map":1,"doesnot":1,"valu":2,"bias":4,"offset":1,"argument":1,"coordin":3,"locat":2,"except":4,"previous":1,"charact":6,"repres":2,"list":1,"bad":1,"illeg":1,"provid":1,"two":1,"will":1,"box":1,"encompass":1,"view":7,"thenext":1,"posit":7,"boundari":1,"bound":1},"maxFreq":7,"totalTerms":76},"loc":0}