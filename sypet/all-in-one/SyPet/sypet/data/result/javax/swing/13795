{"id":13795,"className":"javax.swing.JFileChooser","methodName":"showDialog","signature":"\u003cjavax.swing.JFileChooser: int showDialog(java.awt.Component,java.lang.String)\u003e","javadoc":"/** \n * Pops a custom file chooser dialog with a custom approve button. For example, the following code pops up a file chooser with a \"Run Application\" button (instead of the normal \"Save\" or \"Open\" button): \u003cpre\u003e filechooser.showDialog(parentFrame, \"Run Application\"); \u003c/pre\u003e Alternatively, the following code does the same thing: \u003cpre\u003e JFileChooser chooser \u003d new JFileChooser(null); chooser.setApproveButtonText(\"Run Application\"); chooser.showDialog(parentFrame, null); \u003c/pre\u003e \u003c!--PENDING(jeff) - the following method should be added to the api: showDialog(Component parent);--\u003e \u003c!--PENDING(kwalrath) - should specify modality and what \"depends\" means.--\u003e \u003cp\u003e The \u003ccode\u003eparent\u003c/code\u003e argument determines two things: the frame on which the open dialog depends and the component whose position the look and feel should consider when placing the dialog.  If the parent is a \u003ccode\u003eFrame\u003c/code\u003e object (such as a \u003ccode\u003eJFrame\u003c/code\u003e) then the dialog depends on the frame and the look and feel positions the dialog relative to the frame (for example, centered over the frame). If the parent is a component, then the dialog depends on the frame containing the component, and is positioned relative to the component (for example, centered over the component). If the parent is \u003ccode\u003enull\u003c/code\u003e, then the dialog depends on no visible window, and it\u0027s placed in a look-and-feel-dependent position such as the center of the screen.\n * @param parent  the parent component of the dialog;can be \u003ccode\u003enull\u003c/code\u003e\n * @param approveButtonText the text of the \u003ccode\u003eApproveButton\u003c/code\u003e\n * @return  the return state of the file chooser on popdown:\u003cul\u003e \u003cli\u003eJFileChooser.CANCEL_OPTION \u003cli\u003eJFileChooser.APPROVE_OPTION \u003cli\u003eJFileChooser.ERROR_OPTION if an error occurs or the dialog is dismissed \u003c/ul\u003e\n * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.\n * @see java.awt.GraphicsEnvironment#isHeadless\n */\n","tf":{"freq":{"save":1,"normal":1,"jeff":1,"show":4,"pop":2,"specifi":1,"center":3,"open":2,"altern":1,"button":6,"file":3,"relat":2,"place":2,"custom":2,"follow":3,"argument":1,"screen":1,"except":2,"text":3,"whose":1,"environ":2,"parent":9,"kwalrath":1,"headless":3,"awt":1,"frame":8,"window":1,"determin":1,"contain":1,"posit":4,"thing":2,"graphic":2,"visibl":1,"state":1,"chooser":11,"object":1,"popdown":1,"filechoos":1,"run":3,"applic":3,"consid":1,"approv":4,"api":1,"mean":1,"dialog":13,"modal":1,"look":3,"jframe":1,"feel":3,"error":1,"depend":6,"true":1,"jfile":5,"two":1,"compon":7,"pre":4,"instead":1,"exampl":3,"ad":1,"java":1,"method":1,"dismiss":1,"occur":1},"maxFreq":13,"totalTerms":161},"loc":30}