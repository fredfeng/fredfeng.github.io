{"id":16263,"className":"javax.swing.JFrame","methodName":"setDefaultLookAndFeelDecorated","signature":"\u003cjavax.swing.JFrame: void setDefaultLookAndFeelDecorated(boolean)\u003e","javadoc":"/** \n * Provides a hint as to whether or not newly created \u003ccode\u003eJFrame\u003c/code\u003es should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel. If \u003ccode\u003edefaultLookAndFeelDecorated\u003c/code\u003e is true, the current \u003ccode\u003eLookAndFeel\u003c/code\u003e supports providing window decorations, and the current window manager supports undecorated windows, then newly created \u003ccode\u003eJFrame\u003c/code\u003es will have their Window decorations provided by the current \u003ccode\u003eLookAndFeel\u003c/code\u003e. Otherwise, newly created \u003ccode\u003eJFrame\u003c/code\u003es will have their Window decorations provided by the current window manager. \u003cp\u003e You can get the same effect on a single JFrame by doing the following: \u003cpre\u003e JFrame frame \u003d new JFrame(); frame.setUndecorated(true); frame.getRootPane().setWindowDecorationStyle(JRootPane.FRAME); \u003c/pre\u003e\n * @param defaultLookAndFeelDecorated A hint as to whether or not currentlook and feel should provide window decorations\n * @see javax.swing.LookAndFeel#getSupportsWindowDecorations\n * @since 1.4\n */\n","tf":{"freq":{"otherwis":1,"root":1,"singl":1,"currentlook":1,"whether":2,"close":1,"decor":10,"style":1,"javax":1,"current":5,"swing":1,"border":1,"widget":1,"follow":1,"jframe":6,"look":7,"feel":8,"support":3,"creat":3,"titl":1,"manag":2,"true":2,"hint":2,"provid":6,"jroot":1,"pane":2,"newli":3,"frame":3,"window":11,"effect":1,"undecor":2,"pre":2,"will":2},"maxFreq":11,"totalTerms":95},"loc":7}