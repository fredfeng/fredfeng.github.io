{"id":16211,"className":"javax.swing.Timer","methodName":"setCoalesce","signature":"\u003cjavax.swing.Timer: void setCoalesce(boolean)\u003e","javadoc":"/** \n * Sets whether the \u003ccode\u003eTimer\u003c/code\u003e coalesces multiple pending \u003ccode\u003eActionEvent\u003c/code\u003e firings. A busy application may not be able to keep up with a \u003ccode\u003eTimer\u003c/code\u003e\u0027s event generation, causing multiple action events to be queued.  When processed, the application sends these events one after the other, causing the \u003ccode\u003eTimer\u003c/code\u003e\u0027s listeners to receive a sequence of events with no delay between them. Coalescing avoids this situation by reducing multiple pending events to a single event. \u003ccode\u003eTimer\u003c/code\u003es coalesce events by default.\n * @param flag specify \u003ccode\u003efalse\u003c/code\u003e to turn off coalescing\n */\n","tf":{"freq":{"fals":1,"send":1,"singl":1,"one":1,"abl":1,"situat":1,"applic":2,"whether":1,"specifi":1,"avoid":1,"event":8,"timer":4,"sequenc":1,"busi":1,"action":2,"listen":1,"pend":2,"turn":1,"may":1,"multipl":3,"queu":1,"receiv":1,"fire":1,"process":1,"coalesc":5,"flag":1,"caus":2,"generat":1,"reduc":1,"delay":1,"keep":1},"maxFreq":8,"totalTerms":51},"loc":10}