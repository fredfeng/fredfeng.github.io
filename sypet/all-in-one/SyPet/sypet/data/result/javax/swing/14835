{"id":14835,"className":"javax.swing.JTable","methodName":"getCellEditor","signature":"\u003cjavax.swing.JTable: javax.swing.table.TableCellEditor getCellEditor(int,int)\u003e","javadoc":"/** \n * Returns an appropriate editor for the cell specified by \u003ccode\u003erow\u003c/code\u003e and \u003ccode\u003ecolumn\u003c/code\u003e. If the \u003ccode\u003eTableColumn\u003c/code\u003e for this column has a non-null editor, returns that.  If not, finds the class of the data in this column (using \u003ccode\u003egetColumnClass\u003c/code\u003e) and returns the default editor for this type of data. \u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e Throughout the table package, the internal implementations always use this method to provide editors so that this default behavior can be safely overridden by a subclass.\n * @param row       the row of the cell to edit, where 0 is the first row\n * @param column    the column of the cell to edit,where 0 is the first column\n * @return          the editor for this cell;if \u003ccode\u003enull\u003c/code\u003e return the default editor for this type of cell\n * @see DefaultCellEditor\n */\n","tf":{"freq":{"safe":1,"throughout":1,"overridden":1,"behavior":1,"alway":1,"cell":7,"edit":2,"data":2,"use":2,"type":2,"provid":1,"row":4,"specifi":1,"non":1,"editor":8,"appropri":1,"tabl":2,"subclass":1,"intern":1,"column":8,"method":1,"first":2,"note":1,"find":1},"maxFreq":8,"totalTerms":53},"loc":8}