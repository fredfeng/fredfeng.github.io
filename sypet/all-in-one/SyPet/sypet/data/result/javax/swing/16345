{"id":16345,"className":"javax.swing.SwingUtilities","methodName":"invokeAndWait","signature":"\u003cjavax.swing.SwingUtilities: void invokeAndWait(java.lang.Runnable)\u003e","javadoc":"/** \n * Causes \u003ccode\u003edoRun.run()\u003c/code\u003e to be executed synchronously on the AWT event dispatching thread.  This call blocks until all pending AWT events have been processed and (then) \u003ccode\u003edoRun.run()\u003c/code\u003e returns. This method should be used when an application thread needs to update the GUI. It shouldn\u0027t be called from the event dispatching thread. Here\u0027s an example that creates a new application thread that uses \u003ccode\u003einvokeAndWait\u003c/code\u003e to print a string from the event dispatching thread and then, when that\u0027s finished, print a string from the application thread. \u003cpre\u003e final Runnable doHelloWorld \u003d new Runnable() { public void run() { System.out.println(\"Hello World on \" + Thread.currentThread()); } }; Thread appThread \u003d new Thread() { public void run() { try { SwingUtilities.invokeAndWait(doHelloWorld); } catch (Exception e) { e.printStackTrace(); } System.out.println(\"Finished on \" + Thread.currentThread()); } }; appThread.start(); \u003c/pre\u003e Note that if the \u003ccode\u003eRunnable.run\u003c/code\u003e method throws an uncaught exception (on the event dispatching thread) it\u0027s caught and rethrown, as an \u003ccode\u003eInvocationTargetException\u003c/code\u003e, on the caller\u0027s thread. \u003cp\u003e Additional documentation and examples for this method can be found in \u003cA HREF\u003d\"http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html\"\u003eHow to Use Threads\u003c/a\u003e, in \u003cem\u003eThe Java Tutorial\u003c/em\u003e. \u003cp\u003e As of 1.3 this method is just a cover for \u003ccode\u003ejava.awt.EventQueue.invokeAndWait()\u003c/code\u003e.\n * @exception InterruptedException if we\u0027re interrupted while waiting forthe event dispatching thread to finish excecuting \u003ccode\u003edoRun.run()\u003c/code\u003e\n * @exception InvocationTargetException  if an exception is thrownwhile running \u003ccode\u003edoRun\u003c/code\u003e\n * @see #invokeLater\n */\n","tf":{"freq":{"forth":1,"need":1,"queue":1,"com":1,"wait":5,"tutori":2,"cover":1,"println":2,"event":7,"thread":19,"swing":1,"except":8,"creat":1,"invok":5,"rethrown":1,"invoc":2,"finish":3,"excecut":1,"awt":1,"system":2,"updat":1,"start":1,"http":1,"execut":1,"stack":1,"util":1,"caller":1,"call":2,"use":3,"block":1,"run":11,"sun":1,"applic":3,"document":1,"uisw":1,"current":2,"dispatch":5,"caught":1,"runnabl":3,"note":1,"pend":1,"just":1,"app":2,"addit":1,"later":1,"trace":1,"uncaught":1,"thrownwhil":1,"interrupt":2,"print":3,"misc":1,"process":1,"hello":3,"caus":1,"pre":2,"string":2,"book":1,"exampl":2,"target":2,"html":1,"method":4,"java":3,"world":3,"found":1},"maxFreq":19,"totalTerms":148},"loc":3}