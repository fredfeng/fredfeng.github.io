{"id":16341,"className":"javax.swing.SwingUtilities","methodName":"paintComponent","signature":"\u003cjavax.swing.SwingUtilities: void paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int)\u003e","javadoc":"/** \n * Paints a component to the specified \u003ccode\u003eGraphics\u003c/code\u003e. This method is primarily useful to render \u003ccode\u003eComponent\u003c/code\u003es that don\u0027t exist as part of the visible containment hierarchy, but are used for rendering.  For example, if you are doing your own rendering and want to render some text (or even HTML), you could make use of \u003ccode\u003eJLabel\u003c/code\u003e\u0027s text rendering support and have it paint directly by way of this method, without adding the label to the visible containment hierarchy. \u003cp\u003e This method makes use of \u003ccode\u003eCellRendererPane\u003c/code\u003e to handle the actual painting, and is only recommended if you use one component for rendering.  If you make use of multiple components to handle the rendering, as \u003ccode\u003eJTable\u003c/code\u003e does, use \u003ccode\u003eCellRendererPane\u003c/code\u003e directly.  Otherwise, as described below, you could end up with a \u003ccode\u003eCellRendererPane\u003c/code\u003e per \u003ccode\u003eComponent\u003c/code\u003e. \u003cp\u003e If \u003ccode\u003ec\u003c/code\u003e\u0027s parent is not a \u003ccode\u003eCellRendererPane\u003c/code\u003e, a new \u003ccode\u003eCellRendererPane\u003c/code\u003e is created, \u003ccode\u003ec\u003c/code\u003e is added to it, and the \u003ccode\u003eCellRendererPane\u003c/code\u003e is added to \u003ccode\u003ep\u003c/code\u003e.  If \u003ccode\u003ec\u003c/code\u003e\u0027s parent is a \u003ccode\u003eCellRendererPane\u003c/code\u003e and the \u003ccode\u003eCellRendererPane\u003c/code\u003es parent is not \u003ccode\u003ep\u003c/code\u003e, it is added to \u003ccode\u003ep\u003c/code\u003e. \u003cp\u003e The component should either descend from \u003ccode\u003eJComponent\u003c/code\u003e or be another kind of lightweight component. A lightweight component is one whose \"lightweight\" property (returned by the \u003ccode\u003eComponent\u003c/code\u003e \u003ccode\u003eisLightweight\u003c/code\u003e method) is true. If the Component is not lightweight, bad things map happen: crashes, exceptions, painting problems...\n * @param g  the \u003ccode\u003eGraphics\u003c/code\u003e object to draw on\n * @param c  the \u003ccode\u003eComponent\u003c/code\u003e to draw\n * @param p  the intermediate \u003ccode\u003eContainer\u003c/code\u003e\n * @param x  an int specifying the left side of the area draw in, in pixels,measured from the left edge of the graphics context\n * @param y  an int specifying the top of the area to draw in, in pixelsmeasured down from the top edge of the graphics context\n * @param w  an int specifying the width of the area draw in, in pixels\n * @param h  an int specifying the height of the area draw in, in pixels\n * @see CellRendererPane\n * @see java.awt.Component#isLightweight\n */\n","tf":{"freq":{"primarili":1,"intermedi":1,"specifi":5,"draw":6,"jcompon":1,"height":1,"happen":1,"crash":1,"except":1,"text":2,"support":1,"multipl":1,"creat":1,"whose":1,"width":1,"cell":9,"describ":1,"parent":3,"paint":5,"label":1,"bad":1,"without":1,"render":16,"awt":1,"contain":3,"even":1,"lightweight":6,"properti":1,"make":3,"thing":1,"jtabl":1,"otherwis":1,"graphic":4,"edg":2,"pixel":3,"visibl":2,"one":2,"way":1,"jlabel":1,"use":7,"hierarchi":2,"object":1,"anoth":1,"recommend":1,"kind":1,"area":4,"side":1,"map":1,"left":2,"exist":1,"want":1,"end":1,"top":2,"direct":2,"true":1,"problem":1,"pane":9,"handl":2,"either":1,"compon":13,"per":1,"pixelsmeasur":1,"context":2,"exampl":1,"ad":4,"actual":1,"java":1,"measur":1,"method":4,"descend":1,"part":1},"maxFreq":16,"totalTerms":168},"loc":3}