{"id":21879,"className":"javax.swing.text.DefaultCaret","methodName":"setUpdatePolicy","signature":"\u003cjavax.swing.text.DefaultCaret: void setUpdatePolicy(int)\u003e","javadoc":"/** \n * Sets the caret movement policy on the document updates. Normally the caret updates its absolute position within the document on insertions occurred before or at the caret position and on removals before the caret position. \u0027Absolute position\u0027 means here the position relative to the start of the document. For example if a character is typed within editable text component it is inserted at the caret position and the caret moves to the next absolute position within the document due to insertion and if \u003ccode\u003eBACKSPACE\u003c/code\u003e is typed then caret decreases its absolute position due to removal of a character before it. Sometimes it may be useful to turn off the caret position updates so that the caret stays at the same absolute position within the document position regardless of any document updates. \u003cp\u003e The following update policies are allowed: \u003cul\u003e \u003cli\u003e\u003ccode\u003eNEVER_UPDATE\u003c/code\u003e: the caret stays at the same absolute position in the document regardless of any document updates, except when document length becomes less than the current caret position due to removal. In that case caret position is adjusted to the end of the document. The caret doesn\u0027t try to keep itself visible by scrolling the associated view when using this policy. \u003c/li\u003e \u003cli\u003e\u003ccode\u003eALWAYS_UPDATE\u003c/code\u003e: the caret always tracks document changes. For regular changes it increases its position if an insertion occurs before or at its current position, and decreases position if a removal occurs before its current position. For undo/redo updates it is always moved to the position where update occurred. The caret also tries to keep itself visible by calling \u003ccode\u003eadjustVisibility\u003c/code\u003e method.\u003c/li\u003e \u003cli\u003e\u003ccode\u003eUPDATE_WHEN_ON_EDT\u003c/code\u003e: acts like \u003ccode\u003eALWAYS_UPDATE\u003c/code\u003e if the document updates are performed on the Event Dispatching Thread and like \u003ccode\u003eNEVER_UPDATE\u003c/code\u003e if updates are performed on other thread. \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e The default property value is \u003ccode\u003eUPDATE_WHEN_ON_EDT\u003c/code\u003e.\n * @param policy one of the following values : \u003ccode\u003eUPDATE_WHEN_ON_EDT\u003c/code\u003e,\u003ccode\u003eNEVER_UPDATE\u003c/code\u003e, \u003ccode\u003eALWAYS_UPDATE\u003c/code\u003e\n * @throws IllegalArgumentException if invalid value is passed\n * @see #getUpdatePolicy\n * @see #adjustVisibility\n * @see #UPDATE_WHEN_ON_EDT\n * @see #NEVER_UPDATE\n * @see #ALWAYS_UPDATE\n * @since 1.5\n */\n","tf":{"freq":{"decreas":2,"undo":1,"normal":1,"perform":2,"type":2,"becom":1,"invalid":1,"event":1,"thread":2,"movement":1,"relat":1,"move":2,"follow":2,"argument":1,"turn":1,"text":1,"except":2,"charact":2,"scroll":1,"alway":2,"remov":4,"polici":6,"absolut":6,"like":2,"updat":12,"start":1,"redo":1,"due":3,"properti":1,"view":1,"posit":19,"increas":1,"call":1,"allow":1,"visibl":4,"one":1,"next":1,"use":2,"document":12,"associ":1,"length":1,"current":3,"adjust":3,"mean":1,"valu":3,"dispatch":1,"sometim":1,"less":1,"end":1,"regardless":2,"may":1,"stay":2,"regular":1,"edit":1,"track":1,"illeg":1,"pass":1,"caret":15,"compon":1,"exampl":1,"method":1,"within":4,"chang":2,"act":1,"insert":4,"also":1,"occur":4,"keep":2},"maxFreq":19,"totalTerms":170},"loc":3}