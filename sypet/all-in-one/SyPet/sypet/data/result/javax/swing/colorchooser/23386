{"id":23386,"className":"javax.swing.colorchooser.AbstractColorChooserPanel","methodName":"getDisplayedMnemonicIndex","signature":"\u003cjavax.swing.colorchooser.AbstractColorChooserPanel: int getDisplayedMnemonicIndex()\u003e","javadoc":"/** \n * Provides a hint to the look and feel as to the index of the character in \u003ccode\u003egetDisplayName\u003c/code\u003e that should be visually identified as the mnemonic. The look and feel should only use this if \u003ccode\u003egetMnemonic\u003c/code\u003e returns a value \u003e 0. \u003cp\u003e The return value here is a hint, it is ultimately up to the look and feel to honor the return value in some meaningful way. For example, a look and feel may wish to render each \u003ccode\u003eAbstractColorChooserPanel\u003c/code\u003e in a \u003ccode\u003eJTabbedPane\u003c/code\u003e, and further use this return value to underline a character in the \u003ccode\u003egetDisplayName\u003c/code\u003e. \u003cp\u003e This implementation returns -1, indicating the \u003ccode\u003eAbstractColorChooserPanel\u003c/code\u003e does not support a mnemonic, subclasses wishing a mnemonic will need to override this.\n * @return Character index to render mnemonic for; -1 to provide novisual identifier for this panel.\n * @see #getMnemonic\n * @since 1.4\n */\n","tf":{"freq":{"need":1,"panel":3,"ultim":1,"wish":2,"mnemon":7,"use":2,"way":1,"chooser":2,"identifi":2,"underlin":1,"indic":1,"name":2,"valu":4,"look":4,"feel":4,"index":3,"may":1,"support":1,"charact":3,"honor":1,"hint":2,"display":3,"meaning":1,"provid":2,"pane":1,"render":2,"jtab":1,"visual":1,"color":2,"novisu":1,"will":1,"subclass":1,"exampl":1},"maxFreq":7,"totalTerms":65},"loc":3}