{"id":22065,"className":"javax.swing.text.View","methodName":"getNextVisualPositionFrom","signature":"\u003cjavax.swing.text.View: int getNextVisualPositionFrom(int,javax.swing.text.Position$Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])\u003e","javadoc":"/** \n * Provides a way to determine the next visually represented model location at which one might place a caret. Some views may not be visible, they might not be in the same order found in the model, or they just might not allow access to some of the locations in the model.\n * @param pos the position to convert \u003e\u003d 0\n * @param a the allocated region in which to render\n * @param direction the direction from the current position that canbe thought of as the arrow keys typically found on a keyboard. This will be one of the following values: \u003cul\u003e \u003cli\u003eSwingConstants.WEST \u003cli\u003eSwingConstants.EAST \u003cli\u003eSwingConstants.NORTH \u003cli\u003eSwingConstants.SOUTH \u003c/ul\u003e\n * @return the location within the model that best represents the nextlocation visual position\n * @exception BadLocationException\n * @exception IllegalArgumentException if \u003ccode\u003edirection\u003c/code\u003edoesn\u0027t have one of the legal values above\n */\n","tf":{"freq":{"legal":1,"canb":1,"region":1,"might":3,"model":4,"allow":1,"arrow":1,"visibl":1,"one":3,"next":2,"typic":1,"thought":1,"way":1,"convert":1,"pos":1,"order":1,"nextloc":1,"current":1,"best":1,"valu":2,"swing":4,"place":1,"key":1,"follow":1,"argument":1,"direct":3,"just":1,"except":4,"keyboard":1,"locat":4,"may":1,"constant":4,"repres":2,"bad":1,"access":1,"illeg":1,"provid":1,"render":1,"caret":1,"visual":3,"determin":1,"will":1,"within":1,"view":1,"posit":4,"found":2,"alloc":1},"maxFreq":4,"totalTerms":77},"loc":64}