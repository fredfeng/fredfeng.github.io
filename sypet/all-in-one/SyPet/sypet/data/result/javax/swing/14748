{"id":14748,"className":"javax.swing.JTable","methodName":"getCellRect","signature":"\u003cjavax.swing.JTable: java.awt.Rectangle getCellRect(int,int,boolean)\u003e","javadoc":"/** \n * Returns a rectangle for the cell that lies at the intersection of \u003ccode\u003erow\u003c/code\u003e and \u003ccode\u003ecolumn\u003c/code\u003e. If \u003ccode\u003eincludeSpacing\u003c/code\u003e is true then the value returned has the full height and width of the row and column specified. If it is false, the returned rectangle is inset by the intercell spacing to return the true bounds of the rendering or editing component as it will be set during rendering. \u003cp\u003e If the column index is valid but the row index is less than zero the method returns a rectangle with the \u003ccode\u003ey\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e values set appropriately and the \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ewidth\u003c/code\u003e values both set to zero. In general, when either the row or column indices indicate a cell outside the appropriate range, the method returns a rectangle depicting the closest edge of the closest cell that is within the table\u0027s range. When both row and column indices are out of range the returned rectangle covers the closest point of the closest cell. \u003cp\u003e In all cases, calculations that use this method to calculate results along one axis will not fail because of anomalies in calculations along the other axis. When the cell is not valid the \u003ccode\u003eincludeSpacing\u003c/code\u003e parameter is ignored.\n * @param row                   the row index where the desired cellis located\n * @param column                the column index where the desired cellis located in the display; this is not necessarily the same as the column index in the data model for the table; the {@link #convertColumnIndexToView(int)}method may be used to convert a data model column index to a display column index\n * @param includeSpacing        if false, return the true cell bounds -computed by subtracting the intercell spacing from the height and widths of the column and row models\n * @return  the rectangle containing the cell at location\u003ccode\u003erow\u003c/code\u003e,\u003ccode\u003ecolumn\u003c/code\u003e\n * @see #getIntercellSpacing\n */\n","tf":{"freq":{"fals":2,"anomali":1,"intercel":3,"desir":2,"zero":2,"specifi":1,"cover":1,"height":3,"fail":1,"rang":3,"closest":4,"along":2,"ignor":1,"index":8,"width":3,"cell":8,"calcul":3,"display":2,"rect":1,"row":9,"render":2,"outsid":1,"contain":1,"intersect":1,"will":2,"column":13,"comput":1,"view":1,"valid":2,"result":1,"model":3,"axi":2,"edg":1,"link":1,"one":1,"data":2,"convert":2,"use":2,"space":6,"rectangl":6,"indic":3,"full":1,"celli":2,"valu":3,"less":1,"may":1,"locat":3,"depict":1,"includ":3,"inset":1,"paramet":1,"edit":1,"true":3,"general":1,"subtract":1,"point":1,"either":1,"compon":1,"appropri":2,"tabl":2,"method":4,"within":1,"necessarili":1,"bound":2,"lie":1},"maxFreq":13,"totalTerms":153},"loc":54}