{"id":22197,"className":"javax.swing.text.AbstractDocument","methodName":"replace","signature":"\u003cjavax.swing.text.AbstractDocument: void replace(int,int,java.lang.String,javax.swing.text.AttributeSet)\u003e","javadoc":"/** \n * Deletes the region of text from \u003ccode\u003eoffset\u003c/code\u003e to \u003ccode\u003eoffset + length\u003c/code\u003e, and replaces it with \u003ccode\u003etext\u003c/code\u003e. It is up to the implementation as to how this is implemented, some implementations may treat this as two distinct operations: a remove followed by an insert, others may treat the replace as one atomic operation.\n * @param offset index of child element\n * @param length length of text to delete, may be 0 indicating don\u0027tdelete anything\n * @param text text to insert, \u003ccode\u003enull\u003c/code\u003e indicates no text to insert\n * @param attrs AttributeSet indicating attributes of inserted text,\u003ccode\u003enull\u003c/code\u003e is legal, and typically treated as an empty attributeset, but exact interpretation is left to the subclass\n * @exception BadLocationException the given position is not a validposition within the document\n * @since 1.4\n */\n","tf":{"freq":{"legal":1,"region":1,"atom":1,"anyth":1,"delet":2,"one":1,"interpret":1,"typic":1,"distinct":1,"child":1,"document":1,"attribut":2,"given":1,"indic":3,"oper":2,"exact":1,"length":3,"attributeset":1,"left":1,"offset":3,"follow":1,"element":1,"locat":1,"except":2,"may":3,"text":7,"index":1,"validposit":1,"remov":1,"attr":1,"bad":1,"empti":1,"two":1,"tdelet":1,"replac":3,"subclass":1,"within":1,"insert":4,"posit":1,"treat":3},"maxFreq":7,"totalTerms":65},"loc":24}