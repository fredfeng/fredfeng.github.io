{"id":22412,"className":"javax.swing.text.NavigationFilter","methodName":"getNextVisualPositionFrom","signature":"\u003cjavax.swing.text.NavigationFilter: int getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position$Bias,int,javax.swing.text.Position.Bias[])\u003e","javadoc":"/** \n * Returns the next visual position to place the caret at from an existing position. The default implementation simply forwards the method to the root View. Subclasses may wish to further restrict the location based on additional criteria.\n * @param text JTextComponent containing text\n * @param pos Position used in determining next position\n * @param bias Bias used in determining next position\n * @param direction the direction from the current position that canbe thought of as the arrow keys typically found on a keyboard. This will be one of the following values: \u003cul\u003e \u003cli\u003eSwingConstants.WEST \u003cli\u003eSwingConstants.EAST \u003cli\u003eSwingConstants.NORTH \u003cli\u003eSwingConstants.SOUTH \u003c/ul\u003e\n * @param biasRet Used to return resulting Bias of next position\n * @return the location within the model that best represents the nextlocation visual position\n * @exception BadLocationException\n * @exception IllegalArgumentException if \u003ccode\u003edirection\u003c/code\u003edoesn\u0027t have one of the legal values above\n */\n","tf":{"freq":{"canb":1,"wish":1,"root":1,"arrow":1,"pos":1,"forward":1,"place":1,"bias":4,"swing":4,"key":1,"follow":1,"argument":1,"except":4,"text":2,"bad":1,"restrict":1,"visual":3,"contain":1,"determin":2,"subclass":1,"will":1,"view":1,"posit":9,"legal":1,"ret":1,"result":1,"simpli":1,"model":1,"next":5,"one":2,"typic":1,"use":3,"thought":1,"nextloc":1,"current":1,"best":1,"valu":2,"exist":1,"direct":3,"addit":1,"locat":3,"may":1,"keyboard":1,"constant":4,"criteria":1,"repres":1,"illeg":1,"caret":1,"compon":1,"jtext":1,"base":1,"method":1,"within":1,"found":1},"maxFreq":9,"totalTerms":90},"loc":4}