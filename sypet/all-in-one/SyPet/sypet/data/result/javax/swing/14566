{"id":14566,"className":"javax.swing.SwingWorker","methodName":"firePropertyChange","signature":"\u003cjavax.swing.SwingWorker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)\u003e","javadoc":"/** \n * Reports a bound property update to any registered listeners. No event is fired if  {@code old} and {@code new} are equal and non-null.\u003cp\u003e This  {@code SwingWorker} will be the source forany generated events. \u003cp\u003e When called off the \u003ci\u003eEvent Dispatch Thread\u003c/i\u003e {@code PropertyChangeListeners} are notified asynchronously onthe \u003ci\u003eEvent Dispatch Thread\u003c/i\u003e. \u003cp\u003e Note: This is merely a convenience wrapper. All work is delegated to {@code PropertyChangeSupport} from {@link #getPropertyChangeSupport}.\n * @param propertyName the programmatic name of the property that waschanged\n * @param oldValue the old value of the property\n * @param newValue the new value of the property\n */\n","tf":{"freq":{"call":1,"asynchron":1,"old":3,"programmat":1,"link":1,"deleg":1,"wrapper":1,"event":4,"name":2,"thread":2,"report":1,"regist":1,"worker":1,"valu":4,"dispatch":2,"swing":1,"listen":2,"conveni":1,"note":1,"work":1,"notifi":1,"support":2,"forani":1,"onth":1,"equal":1,"fire":2,"non":1,"updat":1,"waschang":1,"generat":1,"will":1,"sourc":1,"mere":1,"chang":4,"properti":9,"bound":1},"maxFreq":9,"totalTerms":61},"loc":4}