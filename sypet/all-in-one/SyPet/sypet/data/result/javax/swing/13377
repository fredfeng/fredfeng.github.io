{"id":13377,"className":"javax.swing.JEditorPane","methodName":"getEditorKitForContentType","signature":"\u003cjavax.swing.JEditorPane: javax.swing.text.EditorKit getEditorKitForContentType(java.lang.String)\u003e","javadoc":"/** \n * Fetches the editor kit to use for the given type of content.  This is called when a type is requested that doesn\u0027t match the currently installed type. If the component doesn\u0027t have an \u003ccode\u003eEditorKit\u003c/code\u003e registered for the given type, it will try to create an \u003ccode\u003eEditorKit\u003c/code\u003e from the default \u003ccode\u003eEditorKit\u003c/code\u003e registry. If that fails, a \u003ccode\u003ePlainEditorKit\u003c/code\u003e is used on the assumption that all text documents can be represented as plain text. \u003cp\u003e This method can be reimplemented to use some other kind of type registry.  This can be reimplemented to use the Java Activation Framework, for example.\n * @param type the non-\u003ccode\u003enull\u003c/code\u003e content type\n * @return the editor kit\n */\n","tf":{"freq":{"call":1,"use":4,"activ":1,"type":8,"kind":1,"document":1,"given":2,"fail":1,"request":1,"current":1,"regist":1,"plain":2,"kit":7,"fetch":1,"text":2,"creat":1,"repres":1,"instal":1,"registri":2,"framework":1,"non":1,"content":3,"reimplement":2,"editor":7,"compon":1,"exampl":1,"will":1,"java":1,"method":1,"match":1,"assumpt":1},"maxFreq":8,"totalTerms":60},"loc":16}