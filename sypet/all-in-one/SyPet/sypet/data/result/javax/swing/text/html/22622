{"id":22622,"className":"javax.swing.text.html.HTMLDocument","methodName":"setOuterHTML","signature":"\u003cjavax.swing.text.html.HTMLDocument: void setOuterHTML(javax.swing.text.Element,java.lang.String)\u003e","javadoc":"/** \n * Replaces the given element in the parent with the contents specified as an HTML string. \u003cp\u003eThis will be seen as at least two events, n inserts followed by a remove.\u003c/p\u003e \u003cp\u003eWhen replacing a leaf this will attempt to make sure there is a newline present if one is needed. This may result in an additional element being inserted. Consider, if you were to replace a character element that contained a newline with \u0026lt;img\u0026gt; this would create two elements, one for the image, ane one for the newline.\u003c/p\u003e \u003cp\u003eIf you try to replace the element at length you will most likely end up with two elements, eg \u003ccode\u003esetOuterHTML(getCharacterElement (getLength()), \"blah\")\u003c/code\u003e will result in two leaf elements at the end, one representing \u0027blah\u0027, and the other representing the end element.\u003c/p\u003e \u003cp\u003eConsider the following structure (the \u003ccode\u003eelem\u003c/code\u003e parameter is \u003cb\u003ein bold\u003c/b\u003e).\u003c/p\u003e \u003cpre\u003e \u0026lt;body\u003e | \u003cb\u003e\u0026lt;div\u003e\u003c/b\u003e /  \\ \u0026lt;p\u003e   \u0026lt;p\u003e \u003c/pre\u003e \u003cp\u003eInvoking \u003ccode\u003esetOuterHTML(elem, \"\u0026lt;ul\u003e\u0026lt;li\u003e\")\u003c/code\u003e results in the following structure (new elements are \u003cfont color\u003d\"red\"\u003ein red\u003c/font\u003e).\u003c/p\u003e \u003cpre\u003e \u0026lt;body\u003e | \u003cfont color\u003d\"red\"\u003e\u0026lt;ul\u003e\u003c/font\u003e \\ \u003cfont color\u003d\"red\"\u003e\u0026lt;li\u003e\u003c/font\u003e \u003c/pre\u003e \u003cp\u003eIf either \u003ccode\u003eelem\u003c/code\u003e or \u003ccode\u003ehtmlText\u003c/code\u003e parameter is \u003ccode\u003enull\u003c/code\u003e, no changes are made to the document.\u003c/p\u003e \u003cp\u003eFor this to work correcty, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the \u003ccode\u003ecreateDefaultDocument\u003c/code\u003e method.\u003c/p\u003e\n * @param elem the element to replace\n * @param htmlText the string to be parsed and inserted in place of \u003ccode\u003eelem\u003c/code\u003e\n * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set\n * @since 1.3\n */\n","tf":{"freq":{"need":1,"via":1,"least":1,"img":1,"leaf":2,"correcti":1,"must":1,"specifi":1,"bold":1,"given":1,"event":1,"place":1,"kit":3,"sure":1,"follow":3,"work":1,"ane":1,"element":11,"except":1,"text":2,"charact":2,"creat":3,"invok":1,"font":6,"remov":1,"parent":1,"imag":1,"like":1,"content":1,"present":1,"editor":3,"bodi":2,"contain":1,"will":5,"notbeen":1,"parser":2,"make":1,"blah":2,"attempt":1,"result":3,"structur":2,"one":4,"state":1,"made":1,"div":1,"newlin":3,"consid":2,"document":4,"length":2,"end":3,"addit":1,"may":1,"repres":2,"paramet":2,"seen":1,"illeg":1,"elem":5,"two":4,"either":1,"red":4,"outer":3,"color":3,"pre":4,"replac":5,"string":2,"method":1,"html":2,"chang":1,"insert":3,"pars":1},"maxFreq":11,"totalTerms":145},"loc":26}