{"id":16919,"className":"javax.swing.tree.DefaultMutableTreeNode","methodName":"getPreviousLeaf","signature":"\u003cjavax.swing.tree.DefaultMutableTreeNode: javax.swing.tree.DefaultMutableTreeNode getPreviousLeaf()\u003e","javadoc":"/** \n * Returns the leaf before this node or null if this node is the first leaf in the tree. \u003cp\u003e In this implementation of the \u003ccode\u003eMutableNode\u003c/code\u003e interface, this operation is very inefficient. In order to determine the previous node, this method first performs a linear search in the parent\u0027s child-list in order to find the current node. \u003cp\u003e That implementation makes the operation suitable for short traversals from a known position. But to traverse all of the leaves in the tree, you should use \u003ccode\u003edepthFirstEnumeration\u003c/code\u003e to enumerate the nodes in the tree and use \u003ccode\u003eisLeaf\u003c/code\u003e on each node to determine which are leaves.\n * @see #depthFirstEnumeration\n * @see #isLeaf\n * @return  returns the leaf before this node\n */\n","tf":{"freq":{"mutabl":1,"suitabl":1,"use":2,"perform":1,"leaf":6,"child":1,"order":2,"tree":3,"oper":2,"search":1,"current":1,"find":1,"travers":2,"linear":1,"previous":2,"parent":1,"list":1,"ineffici":1,"depth":2,"node":8,"determin":2,"leav":2,"method":1,"known":1,"first":4,"make":1,"posit":1},"maxFreq":8,"totalTerms":52},"loc":14}