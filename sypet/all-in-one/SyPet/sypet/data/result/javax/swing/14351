{"id":14351,"className":"javax.swing.JList","methodName":"getToolTipText","signature":"\u003cjavax.swing.JList: java.lang.String getToolTipText(java.awt.event.MouseEvent)\u003e","javadoc":"/** \n * Returns the tooltip text to be used for the given event. This overrides {@code JComponent}\u0027s  {@code getToolTipText} to first check the cellrenderer component for the cell over which the event occurred, returning its tooltip text, if any. This implementation allows you to specify tooltip text on the cell level, by using  {@code setToolTipText} on yourcell renderer component. \u003cp\u003e \u003cbold\u003eNote:\u003c/bold\u003e For \u003ccode\u003eJList\u003c/code\u003e to properly display the tooltips of its renderers in this manner, \u003ccode\u003eJList\u003c/code\u003e must be a registered component with the \u003ccode\u003eToolTipManager\u003c/code\u003e. This registration is done automatically in the constructor. However, if at a later point \u003ccode\u003eJList\u003c/code\u003e is unregistered, by way of a call to {@code setToolTipText(null)}, tips from the renderers will no longer display.\n * @param event the {@code MouseEvent} to fetch the tooltip text for\n * @see JComponent#setToolTipText\n * @see JComponent#getToolTipText\n */\n","tf":{"freq":{"call":1,"allow":1,"tool":7,"way":1,"use":2,"yourcel":1,"automat":1,"mous":1,"must":1,"tip":8,"specifi":1,"jcompon":3,"bold":2,"level":1,"given":1,"event":4,"longer":1,"regist":1,"proper":1,"howev":1,"note":1,"constructor":1,"fetch":1,"text":10,"check":1,"later":1,"manag":1,"done":1,"cell":2,"display":2,"registr":1,"cellrender":1,"render":3,"point":1,"compon":3,"will":1,"jlist":3,"manner":1,"unregist":1,"first":1,"tooltip":5,"occur":1},"maxFreq":10,"totalTerms":83},"loc":42}