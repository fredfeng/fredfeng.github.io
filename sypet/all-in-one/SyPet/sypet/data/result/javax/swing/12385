{"id":12385,"className":"javax.swing.FocusManager","methodName":"setCurrentManager","signature":"\u003cjavax.swing.FocusManager: void setCurrentManager(javax.swing.FocusManager)\u003e","javadoc":"/** \n * Sets the current \u003ccode\u003eKeyboardFocusManager\u003c/code\u003e instance for the calling thread\u0027s context. If \u003ccode\u003enull\u003c/code\u003e is specified, then the current \u003ccode\u003eKeyboardFocusManager\u003c/code\u003e is replaced with a new instance of \u003ccode\u003eDefaultKeyboardFocusManager\u003c/code\u003e. \u003cp\u003e If a \u003ccode\u003eSecurityManager\u003c/code\u003e is installed, the calling thread must be granted the \u003ccode\u003eAWTPermission\u003c/code\u003e \"replaceKeyboardFocusManager\" in order to replace the the current \u003ccode\u003eKeyboardFocusManager\u003c/code\u003e. If this permission is not granted, this method will throw a \u003ccode\u003eSecurityException\u003c/code\u003e, and the current \u003ccode\u003eKeyboardFocusManager\u003c/code\u003e will be unchanged.\n * @param aFocusManager the new \u003ccode\u003eKeyboardFocusManager\u003c/code\u003efor this thread\u0027s context\n * @see #getCurrentManager\n * @see java.awt.DefaultKeyboardFocusManager\n * @throws SecurityException if the calling thread does not have permissionto replace the current \u003ccode\u003eKeyboardFocusManager\u003c/code\u003e\n */\n","tf":{"freq":{"call":3,"except":2,"keyboard":9,"unchang":1,"grant":2,"manag":13,"instal":1,"must":1,"instanc":2,"specifi":1,"awt":1,"secur":3,"order":1,"permissionto":1,"thread":4,"replac":4,"will":2,"permiss":1,"current":7,"context":2,"tpermiss":1,"java":1,"method":1,"focus":10},"maxFreq":13,"totalTerms":74},"loc":11}