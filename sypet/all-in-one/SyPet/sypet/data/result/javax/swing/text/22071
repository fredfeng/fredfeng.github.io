{"id":22071,"className":"javax.swing.text.View","methodName":"changedUpdate","signature":"\u003cjavax.swing.text.View: void changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\u003e","javadoc":"/** \n * Gives notification from the document that attributes were changed in a location that this view is responsible for. To reduce the burden to subclasses, this functionality is spread out into the following calls that subclasses can reimplement: \u003col\u003e \u003cli\u003e {@link #updateChildren updateChildren} is calledif there were any changes to the element this view is responsible for.  If this view has child views that are represent the child elements, then this method should do whatever is necessary to make sure the child views correctly represent the model. \u003cli\u003e {@link #forwardUpdate forwardUpdate} is calledto forward the DocumentEvent to the appropriate child views. \u003cli\u003e {@link #updateLayout updateLayout} is called togive the view a chance to either repair its layout, to reschedule layout, or do nothing. \u003c/ol\u003e\n * @param e the change information from the associated document\n * @param a the current allocation of the view\n * @param f the factory to use to rebuild if the view has children\n * @see View#changedUpdate\n */\n","tf":{"freq":{"call":2,"model":1,"give":1,"link":3,"use":1,"children":3,"reschedul":1,"necessari":1,"function":1,"child":4,"notif":1,"document":3,"attribut":1,"correct":1,"associ":1,"forward":3,"burden":1,"factori":1,"event":1,"layout":4,"current":1,"noth":1,"togiv":1,"rebuild":1,"repair":1,"whatev":1,"sure":1,"follow":1,"element":2,"locat":1,"calledto":1,"respons":2,"repres":2,"inform":1,"reimplement":1,"either":1,"updat":8,"appropri":1,"subclass":2,"method":1,"reduc":1,"view":10,"chang":5,"spread":1,"make":1,"alloc":1,"chanc":1,"calledif":1},"maxFreq":10,"totalTerms":87},"loc":15}