{"id":13623,"className":"javax.swing.CellRendererPane","methodName":"paintComponent","signature":"\u003cjavax.swing.CellRendererPane: void paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int,boolean)\u003e","javadoc":"/** \n * Paint a cell renderer component c on graphics object g.  Before the component is drawn it\u0027s reparented to this (if that\u0027s necessary), it\u0027s bounds are set to w,h and the graphics object is (effectively) translated to x,y. If it\u0027s a JComponent, double buffering is temporarily turned off. After the component is painted it\u0027s bounds are reset to -w, -h, 0, 0 so that, if it\u0027s the last renderer component painted, it will not start consuming input. The Container p is the component we\u0027re actually drawing on, typically it\u0027s equal to this.getParent(). If shouldValidate is true the component c will be validated before painted.\n */\n","tf":{"freq":{"valid":2,"graphic":2,"last":1,"typic":1,"object":2,"necessari":1,"repar":1,"draw":1,"buffer":1,"consum":1,"jcompon":1,"reset":1,"drawn":1,"turn":1,"temporarili":1,"cell":1,"true":1,"parent":1,"equal":1,"paint":5,"translat":1,"render":2,"input":1,"effect":1,"compon":7,"start":1,"contain":1,"will":2,"actual":1,"bound":2},"maxFreq":7,"totalTerms":46},"loc":41}