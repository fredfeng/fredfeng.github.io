{"id":15772,"className":"javax.swing.LookAndFeel","methodName":"makeKeyBindings","signature":"\u003cjavax.swing.LookAndFeel: javax.swing.text.JTextComponent.KeyBinding[] makeKeyBindings(java.lang.Object[])\u003e","javadoc":"/** \n * Convenience method for building an array of  {@code KeyBindings}. While this method is not deprecated, developers should instead use  {@code ActionMap} and {@code InputMap} forsupplying key bindings. \u003cp\u003e This method returns an array of  {@code KeyBindings}, one for each alternating  {@code key-action} pair in {@code keyBindingList}. A  {@code key} can either be a {@code String} in the formatspecified by the \u003ccode\u003eKeyStroke.getKeyStroke\u003c/code\u003e method, or a  {@code KeyStroke}. The  {@code action} part of the pair is a{@code String} that corresponds to the name of the {@code Action}. \u003cp\u003e The following example illustrates creating a  {@code KeyBinding} arrayfrom six alternating  {@code key-action} pairs:\u003cpre\u003e JTextComponent.KeyBinding[] multilineBindings \u003d makeKeyBindings( new Object[] { \"UP\", DefaultEditorKit.upAction, \"DOWN\", DefaultEditorKit.downAction, \"PAGE_UP\", DefaultEditorKit.pageUpAction, \"PAGE_DOWN\", DefaultEditorKit.pageDownAction, \"ENTER\", DefaultEditorKit.insertBreakAction, \"TAB\", DefaultEditorKit.insertTabAction }); \u003c/pre\u003e If  {@code keyBindingList\u0027s} length is odd, the last element isignored. \u003cp\u003e Supplying a  {@code null} value for either the {@code key} or{@code action} part of the {@code key-action} pair results increating a  {@code KeyBinding} with the corresponding value{@code null}. As other parts of Swing\u0027s expect  {@code non-null} valuesin a  {@code KeyBinding}, you should avoid supplying  {@code null} aseither the  {@code key} or {@code action} part of the {@code key-action}pair.\n * @param keyBindingList an array of {@code key-action} pairs\n * @return an array of {@code KeyBindings}\n * @throws NullPointerException if {@code keyBindingList} is {@code null}\n * @throws ClassCastException if the {@code key} part of the pair isnot a  {@code KeyStroke} or {@code String}, or the {@code action} part of the pair is not a {@code String}\n * @see ActionMap\n * @see InputMap\n * @see KeyStroke#getKeyStroke\n */\n","tf":{"freq":{"deprec":1,"aseith":1,"last":1,"tab":1,"expect":1,"avoid":1,"stroke":6,"altern":2,"page":2,"action":18,"swing":1,"multilin":1,"key":29,"kit":6,"follow":1,"isignor":1,"element":1,"except":2,"creat":1,"valuesin":1,"non":1,"input":2,"editor":6,"cast":1,"pointer":1,"odd":1,"make":2,"array":4,"result":1,"pair":8,"correspond":2,"increat":1,"one":1,"use":1,"object":1,"build":1,"six":1,"isnot":1,"name":1,"map":4,"length":1,"formatspecifi":1,"valu":2,"develop":1,"conveni":1,"arrayfrom":1,"forsuppli":1,"list":4,"suppli":2,"either":2,"jtext":1,"compon":1,"pre":2,"string":4,"instead":1,"exampl":1,"method":4,"part":6,"insert":2,"bind":15,"illustr":1},"maxFreq":29,"totalTerms":173},"loc":14}