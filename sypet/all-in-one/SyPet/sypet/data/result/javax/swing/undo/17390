{"id":17390,"className":"javax.swing.undo.UndoableEdit","methodName":"replaceEdit","signature":"\u003cjavax.swing.undo.UndoableEdit: boolean replaceEdit(javax.swing.undo.UndoableEdit)\u003e","javadoc":"/** \n * Returns true if this \u003ccode\u003eUndoableEdit\u003c/code\u003e should replace \u003ccode\u003eanEdit\u003c/code\u003e. This method is used by \u003ccode\u003eCompoundEdit\u003c/code\u003e and the \u003ccode\u003eUndoManager\u003c/code\u003e; it is called if \u003ccode\u003eanEdit\u003c/code\u003e could not be added to the current edit (\u003ccode\u003eaddEdit\u003c/code\u003e returns false). \u003cp\u003e This method provides a way for an edit to replace an existing edit. \u003cp\u003eThis message is the opposite of addEdit--anEdit has typically already been queued in an \u003ccode\u003eUndoManager\u003c/code\u003e (or other UndoableEditListener), and the receiver is being given a chance to take its place.\u003c/p\u003e \u003cp\u003eIf true is returned, from now on anEdit must return false from canUndo() and canRedo(), and must throw the appropriate exception on undo() or redo().\u003c/p\u003e\n * @param anEdit the edit that replaces the current edit\n * @return true if this edit should replace \u003ccode\u003eanEdit\u003c/code\u003e\n */\n","tf":{"freq":{"fals":2,"call":1,"compound":1,"undo":4,"undoabl":2,"typic":1,"use":1,"way":1,"add":2,"opposit":1,"must":2,"given":1,"current":2,"place":1,"exist":1,"listen":1,"except":1,"manag":2,"messag":1,"edit":18,"queu":1,"true":3,"receiv":1,"provid":1,"now":1,"appropri":1,"take":1,"redo":2,"replac":5,"ad":1,"method":2,"alreadi":1,"chanc":1},"maxFreq":18,"totalTerms":67},"loc":0}