{"id":16356,"className":"javax.swing.SwingUtilities","methodName":"notifyAction","signature":"\u003cjavax.swing.SwingUtilities: boolean notifyAction(javax.swing.Action,javax.swing.KeyStroke,java.awt.event.KeyEvent,java.lang.Object,int)\u003e","javadoc":"/** \n * Invokes \u003ccode\u003eactionPerformed\u003c/code\u003e on \u003ccode\u003eaction\u003c/code\u003e if \u003ccode\u003eaction\u003c/code\u003e is enabled (and non- {@code null}). The command for the ActionEvent is determined by: \u003col\u003e \u003cli\u003eIf the action was registered via \u003ccode\u003eregisterKeyboardAction\u003c/code\u003e, then the command string passed in ( {@code null} will be used if {@code null} was passed in).\u003cli\u003eAction value with name Action.ACTION_COMMAND_KEY, unless  {@code null}. \u003cli\u003eString value of the KeyEvent, unless \u003ccode\u003egetKeyChar\u003c/code\u003e returns KeyEvent.CHAR_UNDEFINED.. \u003c/ol\u003e This will return true if \u003ccode\u003eaction\u003c/code\u003e is non- {@code null} andactionPerformed is invoked on it.\n * @since 1.3\n */\n","tf":{"freq":{"notifi":1,"keyboard":1,"via":1,"invok":2,"enabl":1,"true":1,"use":1,"perform":2,"pass":2,"non":2,"andact":1,"unless":2,"event":3,"name":1,"string":2,"determin":1,"will":2,"action":10,"command":2,"regist":2,"valu":2,"key":3},"maxFreq":10,"totalTerms":45},"loc":45}