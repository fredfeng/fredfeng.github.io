{"id":21019,"className":"javax.swing.event.DocumentEvent","methodName":"getChange","signature":"\u003cjavax.swing.event.DocumentEvent: javax.swing.event.DocumentEvent$ElementChange getChange(javax.swing.text.Element)\u003e","javadoc":"/** \n * Gets the change information for the given element. The change information describes what elements were added and removed and the location.  If there were no changes, null is returned. \u003cp\u003e This method is for observers to discover the structural changes that were made.  This means that only elements that existed prior to the mutation (and still exist after the mutatino) need to have ElementChange records. The changes made available need not be recursive. \u003cp\u003e For example, if the an element is removed from it\u0027s parent, this method should report that the parent changed and provide an ElementChange implementation that describes the change to the parent.  If the child element removed had children, these elements do not need to be reported as removed. \u003cp\u003e If an child element is insert into a parent element, the parent element should report a change.  If the child element also had elements inserted into it (grandchildren to the parent) these elements need not report change.\n * @param elem the element\n * @return the change information, or null if theelement was not modified\n */\n","tf":{"freq":{"need":4,"structur":1,"made":2,"children":1,"prior":1,"child":3,"observ":1,"given":1,"report":4,"grandchildren":1,"mean":1,"exist":2,"element":15,"locat":1,"remov":4,"mutatino":1,"parent":6,"describ":2,"still":1,"avail":1,"mutat":1,"provid":1,"elem":1,"discov":1,"inform":3,"record":1,"modifi":1,"exampl":1,"ad":1,"method":2,"theelement":1,"chang":13,"insert":2,"also":1,"recurs":1},"maxFreq":15,"totalTerms":84},"loc":0}