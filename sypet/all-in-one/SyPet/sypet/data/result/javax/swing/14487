{"id":14487,"className":"javax.swing.SpinnerDateModel","methodName":"setValue","signature":"\u003cjavax.swing.SpinnerDateModel: void setValue(java.lang.Object)\u003e","javadoc":"/** \n * Sets the current \u003ccode\u003eDate\u003c/code\u003e for this sequence. If \u003ccode\u003evalue\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown.  No bounds checking is done here: the new value may invalidate the \u003ccode\u003e(start \u0026lt\u003d value \u0026lt end)\u003c/code\u003e invariant enforced by the constructors.  Naturally, one should ensure that the \u003ccode\u003e(start \u0026lt;\u003d value \u0026lt;\u003d maximum)\u003c/code\u003e invariant is true before calling the \u003ccode\u003enextValue\u003c/code\u003e, \u003ccode\u003epreviousValue\u003c/code\u003e, or \u003ccode\u003esetValue\u003c/code\u003e methods. \u003cp\u003e This method fires a \u003ccode\u003eChangeEvent\u003c/code\u003e if the \u003ccode\u003evalue\u003c/code\u003e has changed.\n * @param value the current (non \u003ccode\u003enull\u003c/code\u003e)\u003ccode\u003eDate\u003c/code\u003e for this sequence\n * @throws IllegalArgumentException if value is \u003ccode\u003enull\u003c/code\u003eor not a \u003ccode\u003eDate\u003c/code\u003e\n * @see #getDate\n * @see #getValue\n * @see #addChangeListener\n */\n","tf":{"freq":{"call":1,"next":1,"one":1,"natur":1,"add":1,"date":4,"ensur":1,"invalid":1,"event":1,"sequenc":2,"current":2,"valu":12,"listen":1,"end":1,"constructor":1,"argument":2,"may":1,"thrown":1,"except":2,"previous":1,"check":1,"enforc":1,"done":1,"true":1,"illeg":2,"fire":1,"invari":2,"non":1,"start":2,"maximum":1,"method":2,"chang":3,"bound":1},"maxFreq":12,"totalTerms":57},"loc":9}