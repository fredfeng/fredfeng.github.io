{"id":13216,"className":"javax.swing.JTextField","methodName":"JTextField","signature":"\u003cjavax.swing.JTextField: void JTextField(javax.swing.text.Document,java.lang.String,int)\u003e","javadoc":"/** \n * Constructs a new \u003ccode\u003eJTextField\u003c/code\u003e that uses the given text storage model and the given number of columns. This is the constructor through which the other constructors feed. If the document is \u003ccode\u003enull\u003c/code\u003e, a default model is created.\n * @param doc  the text storage to use; if this is \u003ccode\u003enull\u003c/code\u003e,a default will be provided by calling the \u003ccode\u003ecreateDefaultModel\u003c/code\u003e method\n * @param text  the initial string to display, or \u003ccode\u003enull\u003c/code\u003e\n * @param columns  the number of columns to use to calculatethe preferred width \u003e\u003d 0; if \u003ccode\u003ecolumns\u003c/code\u003e is set to zero, the preferred width will be whatever naturally results from the component implementation\n * @exception IllegalArgumentException if \u003ccode\u003ecolumns\u003c/code\u003e \u003c 0\n */\n","tf":{"freq":{"result":1,"call":1,"model":3,"natur":1,"use":3,"zero":1,"document":1,"given":2,"feed":1,"initi":1,"whatev":1,"constructor":2,"argument":1,"except":2,"text":4,"creat":2,"width":2,"number":2,"display":1,"storag":2,"illeg":1,"provid":1,"field":2,"compon":1,"jtext":1,"string":1,"calculateth":1,"column":5,"will":2,"method":1,"construct":1,"prefer":2},"maxFreq":5,"totalTerms":53},"loc":15}