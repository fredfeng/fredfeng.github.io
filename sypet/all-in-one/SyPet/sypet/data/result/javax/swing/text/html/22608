{"id":22608,"className":"javax.swing.text.html.HTMLDocument","methodName":"getReader","signature":"\u003cjavax.swing.text.html.HTMLDocument: javax.swing.text.html.HTMLEditorKit$ParserCallback getReader(int,int,int,javax.swing.text.html.HTML$Tag)\u003e","javadoc":"/** \n * Returns the reader for the parser to use to load the document with HTML.  This is implemented to return an instance of \u003ccode\u003eHTMLDocument.HTMLReader\u003c/code\u003e. Subclasses can reimplement this method to change how the document gets structured if desired. (For example, to handle custom tags, or structurally represent character style elements.) \u003cp\u003eThis is a convenience method for \u003ccode\u003egetReader(int, int, int, HTML.Tag, TRUE)\u003c/code\u003e.\n * @param popDepth   the number of \u003ccode\u003eElementSpec.EndTagTypes\u003c/code\u003eto generate before inserting\n * @param pushDepth  the number of \u003ccode\u003eElementSpec.StartTagTypes\u003c/code\u003ewith a direction of \u003ccode\u003eElementSpec.JoinNextDirection\u003c/code\u003e that should be generated before inserting, but after the end tags have been generated\n * @param insertTag  the first tag to start inserting into document\n * @return the reader used by the parser to load the document\n */\n","tf":{"freq":{"spec":3,"structur":2,"tag":7,"next":1,"use":2,"pop":1,"type":2,"desir":1,"push":1,"document":5,"style":1,"end":2,"conveni":1,"custom":1,"direct":2,"element":4,"repres":1,"charact":1,"number":2,"join":1,"depth":2,"instanc":1,"handl":1,"reimplement":1,"reader":5,"start":2,"generat":3,"subclass":1,"exampl":1,"method":2,"load":2,"chang":1,"insert":4,"first":1,"parser":2},"maxFreq":7,"totalTerms":70},"loc":3}