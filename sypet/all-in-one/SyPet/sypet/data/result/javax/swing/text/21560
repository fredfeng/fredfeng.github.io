{"id":21560,"className":"javax.swing.text.MaskFormatter","methodName":"stringToValue","signature":"\u003cjavax.swing.text.MaskFormatter: java.lang.Object stringToValue(java.lang.String)\u003e","javadoc":"/** \n * Parses the text, returning the appropriate Object representation of the String \u003ccode\u003evalue\u003c/code\u003e. This strips the literal characters as necessary and invokes supers \u003ccode\u003estringToValue\u003c/code\u003e, so that if you have specified a value class (\u003ccode\u003esetValueClass\u003c/code\u003e) an instance of it will be created. This will throw a \u003ccode\u003eParseException\u003c/code\u003e if the value does not match the current mask.  Refer to  {@link #setValueContainsLiteralCharacters} for detailson how literals are treated.\n * @throws ParseException if there is an error in the conversion\n * @param value String to convert\n * @see #setValueContainsLiteralCharacters\n * @return Object representation of text\n */\n","tf":{"freq":{"link":1,"convers":1,"convert":1,"mask":1,"object":2,"necessari":1,"specifi":1,"refer":1,"current":1,"valu":9,"liter":4,"text":2,"except":2,"error":1,"charact":3,"creat":1,"invok":1,"strip":1,"represent":2,"instanc":1,"appropri":1,"string":4,"contain":2,"detailson":1,"will":2,"match":1,"pars":3,"treat":1},"maxFreq":9,"totalTerms":52},"loc":3}