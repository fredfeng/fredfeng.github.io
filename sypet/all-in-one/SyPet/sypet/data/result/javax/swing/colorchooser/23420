{"id":23420,"className":"javax.swing.colorchooser.DefaultSwatchChooserPanel","methodName":"getMnemonic","signature":"\u003cjavax.swing.colorchooser.DefaultSwatchChooserPanel: int getMnemonic()\u003e","javadoc":"/** \n * Provides a hint to the look and feel as to the \u003ccode\u003eKeyEvent.VK\u003c/code\u003e constant that can be used as a mnemonic to access the panel. A return value \u003c\u003d 0 indicates there is no mnemonic. \u003cp\u003e The return value here is a hint, it is ultimately up to the look and feel to honor the return value in some meaningful way. \u003cp\u003e This implementation looks up the value from the default \u003ccode\u003eColorChooser.swatchesMnemonic\u003c/code\u003e, or if it isn\u0027t available (or not an \u003ccode\u003eInteger\u003c/code\u003e) returns -1. The lookup for the default is done through the \u003ccode\u003eUIManager\u003c/code\u003e: \u003ccode\u003eUIManager.get(\"ColorChooser.swatchesMnemonic\");\u003c/code\u003e.\n * @return KeyEvent.VK constant identifying the mnemonic; \u003c\u003d 0 for nomnemonic\n * @see #getDisplayedMnemonicIndex\n * @since 1.4\n */\n","tf":{"freq":{"panel":1,"ultim":1,"mnemon":7,"use":1,"way":1,"chooser":2,"identifi":1,"swatch":2,"lookup":1,"indic":1,"event":2,"valu":4,"key":2,"look":3,"feel":2,"index":1,"constant":2,"honor":1,"manag":2,"done":1,"display":1,"hint":2,"avail":1,"meaning":1,"access":1,"provid":1,"nomnemon":1,"color":2,"integ":1},"maxFreq":7,"totalTerms":49},"loc":3}