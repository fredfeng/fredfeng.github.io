{"id":16713,"className":"javax.swing.tree.TreePath","methodName":"isDescendant","signature":"\u003cjavax.swing.tree.TreePath: boolean isDescendant(javax.swing.tree.TreePath)\u003e","javadoc":"/** \n * Returns true if \u003ccode\u003eaTreePath\u003c/code\u003e is a descendant of this {@code TreePath}. A  {@code TreePath} {@code P1} is a descendant of a{@code TreePath} {@code P2}if  {@code P1} contains all of the elements that make up{@code P2\u0027s} path.For example, if this object has the path  {@code [a, b]}, and \u003ccode\u003eaTreePath\u003c/code\u003e has the path  {@code [a, b, c]}, then \u003ccode\u003eaTreePath\u003c/code\u003e is a descendant of this object. However, if \u003ccode\u003eaTreePath\u003c/code\u003e has the path  {@code [a]}, then it is not a descendant of this object.  By this definition a  {@code TreePath} is always considered a descendant of itself.That is, \u003ccode\u003eaTreePath.isDescendant(aTreePath)\u003c/code\u003e returns {@code true}.\n * @param aTreePath the {@code TreePath} to check\n * @return true if \u003ccode\u003eaTreePath\u003c/code\u003e is a descendant of this path\n */\n","tf":{"freq":{"element":1,"check":1,"alway":1,"true":3,"object":3,"consid":1,"tree":13,"contain":1,"definit":1,"path":18,"exampl":1,"descend":8,"howev":1,"make":1},"maxFreq":18,"totalTerms":54},"loc":17}