{"id":13896,"className":"javax.swing.JComponent","methodName":"registerKeyboardAction","signature":"\u003cjavax.swing.JComponent: void registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)\u003e","javadoc":"/** \n * This method is now obsolete, please use a combination of \u003ccode\u003egetActionMap()\u003c/code\u003e and \u003ccode\u003egetInputMap()\u003c/code\u003e for similiar behavior. For example, to bind the \u003ccode\u003eKeyStroke\u003c/code\u003e \u003ccode\u003eaKeyStroke\u003c/code\u003e to the \u003ccode\u003eAction\u003c/code\u003e \u003ccode\u003eanAction\u003c/code\u003e now use: \u003cpre\u003e component.getInputMap().put(aKeyStroke, aCommand); component.getActionMap().put(aCommmand, anAction); \u003c/pre\u003e The above assumes you want the binding to be applicable for \u003ccode\u003eWHEN_FOCUSED\u003c/code\u003e. To register bindings for other focus states use the \u003ccode\u003egetInputMap\u003c/code\u003e method that takes an integer. \u003cp\u003e Register a new keyboard action. \u003ccode\u003eanAction\u003c/code\u003e will be invoked if a key event matching \u003ccode\u003eaKeyStroke\u003c/code\u003e occurs and \u003ccode\u003eaCondition\u003c/code\u003e is verified. The \u003ccode\u003eKeyStroke\u003c/code\u003e object defines a particular combination of a keyboard key and one or more modifiers (alt, shift, ctrl, meta). \u003cp\u003e The \u003ccode\u003eaCommand\u003c/code\u003e will be set in the delivered event if specified. \u003cp\u003e The \u003ccode\u003eaCondition\u003c/code\u003e can be one of: \u003cblockquote\u003e \u003cDL\u003e \u003cDT\u003eWHEN_FOCUSED \u003cDD\u003eThe action will be invoked only when the keystroke occurs while the component has the focus. \u003cDT\u003eWHEN_IN_FOCUSED_WINDOW \u003cDD\u003eThe action will be invoked when the keystroke occurs while the component has the focus or if the component is in the window that has the focus. Note that the component need not be an immediate descendent of the window -- it can be anywhere in the window\u0027s containment hierarchy. In other words, whenever \u003cem\u003eany\u003c/em\u003e component in the window has the focus, the action registered with this component is invoked. \u003cDT\u003eWHEN_ANCESTOR_OF_FOCUSED_COMPONENT \u003cDD\u003eThe action will be invoked when the keystroke occurs while the component has the focus or if the component is an ancestor of the component that has the focus. \u003c/DL\u003e \u003c/blockquote\u003e \u003cp\u003e The combination of keystrokes and conditions lets you define high level (semantic) action events for a specified keystroke+modifier combination (using the KeyStroke class) and direct to a parent or child of a component that has the focus, or to the component itself. In other words, in any hierarchical structure of components, an arbitrary key-combination can be immediately directed to the appropriate component in the hierarchy, and cause a specific method to be invoked (usually by way of adapter objects). \u003cp\u003e If an action has already been registered for the receiving container, with the same charCode and the same modifiers, \u003ccode\u003eanAction\u003c/code\u003e will replace the action.\n * @param anAction  the \u003ccode\u003eAction\u003c/code\u003e to be registered\n * @param aCommand  the command to be set in the delivered event\n * @param aKeyStroke the \u003ccode\u003eKeyStroke\u003c/code\u003e to bind to the action\n * @param aCondition the condition that needs to be met, see above\n * @see KeyStroke\n */\n","tf":{"freq":{"need":2,"anywher":1,"obsolet":1,"particular":1,"ctrl":1,"similiar":1,"keystrok":5,"specifi":2,"arbitrari":1,"stroke":9,"level":1,"event":4,"blockquot":2,"commmand":1,"verifi":1,"action":19,"combin":5,"focus":8,"key":12,"invok":6,"parent":1,"input":3,"window":4,"now":2,"contain":2,"will":6,"word":2,"match":1,"defin":2,"put":2,"structur":1,"behavior":1,"one":2,"state":1,"way":1,"use":4,"hierarchi":2,"adapt":1,"object":2,"applic":1,"meta":1,"child":1,"met":1,"pleas":1,"alt":1,"semant":1,"command":4,"map":5,"regist":6,"immedi":2,"ancestor":1,"note":1,"want":1,"usual":1,"direct":2,"condit":5,"hierarch":1,"whenev":1,"keyboard":3,"assum":1,"receiv":1,"specif":1,"caus":1,"compon":15,"appropri":1,"pre":2,"take":1,"replac":1,"exampl":1,"modifi":3,"deliv":2,"alreadi":1,"method":3,"high":1,"descend":1,"bind":4,"integ":1,"shift":1,"occur":4},"maxFreq":19,"totalTerms":209},"loc":13}