{"id":12750,"className":"javax.swing.JTree","methodName":"removeSelectionInterval","signature":"\u003cjavax.swing.JTree: void removeSelectionInterval(int,int)\u003e","javadoc":"/** \n * Removes the specified rows (inclusive) from the selection. If the specified indices are within the viewable set of rows, or bound the viewable set of rows, then the specified indices are constrained by the viewable set of rows. If the specified indices are not within the viewable set of rows, or do not bound the viewable set of rows, then the selection is unchanged. For example, if the row count is  {@code 10}, and this method is invoked with  {@code -1, 20}, then the specified range bounds the viewable range, and this is treated as if invoked with  {@code 0, 9}. On the other hand, if this were invoked with  {@code -10, -1}, then the specified range does not bound the viewable set of rows, and the selection is unchanged. \u003cp\u003e The parameters are not order dependent. That is,  {@code removeSelectionInterval(x, y)} is equivalent to{@code removeSelectionInterval(y, x)}.\n * @param index0 the first row to remove from the selection\n * @param index1 the last row to remove from the selection\n */\n","tf":{"freq":{"constrain":1,"last":1,"count":1,"specifi":6,"hand":1,"inclus":1,"indic":3,"order":1,"viewabl":7,"equival":1,"rang":3,"index":2,"unchang":2,"select":8,"invok":3,"depend":1,"remov":6,"paramet":1,"row":10,"interv":3,"exampl":1,"method":1,"within":2,"first":1,"bound":4,"treat":1},"maxFreq":10,"totalTerms":72},"loc":7}