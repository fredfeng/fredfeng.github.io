{"id":21751,"className":"javax.swing.text.ComponentView","methodName":"setParent","signature":"\u003cjavax.swing.text.ComponentView: void setParent(javax.swing.text.View)\u003e","javadoc":"/** \n * Sets the parent for a child view. The parent calls this on the child to tell it who its parent is, giving the view access to things like the hosting Container.  The superclass behavior is executed, followed by a call to createComponent if the parent view parameter is non-null and a component has not yet been created. The embedded components parent is then set to the value returned by \u003ccode\u003egetContainer\u003c/code\u003e. If the parent view parameter is null, this view is being cleaned up, thus the component is removed from its parent. \u003cp\u003e The changing of the component hierarchy will touch the component lock, which is the one thing that is not safe from the View hierarchy.  Therefore, this functionality is executed immediately if on the event thread, or is queued on the event queue if called from another thread (notification of change from an asynchronous update).\n * @param p the parent\n */\n","tf":{"freq":{"asynchron":1,"queue":1,"call":3,"give":1,"behavior":1,"one":1,"hierarchi":2,"anoth":1,"therefor":1,"function":1,"child":2,"notif":1,"clean":1,"event":2,"thread":2,"immedi":1,"tell":1,"valu":1,"follow":1,"safe":1,"host":1,"creat":2,"thus":1,"queu":1,"lock":1,"remov":1,"paramet":2,"parent":9,"like":1,"access":1,"embed":1,"non":1,"superclass":1,"updat":1,"touch":1,"compon":6,"contain":2,"will":1,"chang":2,"view":6,"execut":2,"thing":2,"yet":1},"maxFreq":9,"totalTerms":73},"loc":28}