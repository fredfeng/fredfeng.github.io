{"id":12749,"className":"javax.swing.JTree","methodName":"addSelectionInterval","signature":"\u003cjavax.swing.JTree: void addSelectionInterval(int,int)\u003e","javadoc":"/** \n * Adds the specified rows (inclusive) to the selection. If the specified indices are within the viewable set of rows, or bound the viewable set of rows, then the specified indices are constrained by the viewable set of rows. If the indices are not within the viewable set of rows, or do not bound the viewable set of rows, then the selection is unchanged. For example, if the row count is  {@code 10}, and this method is invoked with {@code -1, 20}, then the specified indices bounds the viewable range, and this is treated as if invoked with  {@code 0, 9}. On the other hand, if this were invoked with  {@code -10, -1}, then the specified indices do not bound the viewable set of rows, and the selection is unchanged. \u003cp\u003e The parameters are not order dependent. That is,  {@code addSelectionInterval(x, y)} is equivalent to{@code addSelectionInterval(y, x)}.\n * @param index0 the first index in the range to add to the selection\n * @param index1 the last index in the range to add to the selection\n */\n","tf":{"freq":{"constrain":1,"last":1,"count":1,"add":6,"specifi":5,"hand":1,"inclus":1,"indic":5,"order":1,"viewabl":7,"equival":1,"rang":3,"index":4,"unchang":2,"select":8,"invok":3,"depend":1,"paramet":1,"row":8,"interv":3,"exampl":1,"method":1,"within":2,"first":1,"bound":4,"treat":1},"maxFreq":8,"totalTerms":73},"loc":7}