{"id":19656,"className":"javax.swing.plaf.metal.MetalRootPaneUI","methodName":"propertyChange","signature":"\u003cjavax.swing.plaf.metal.MetalRootPaneUI: void propertyChange(java.beans.PropertyChangeEvent)\u003e","javadoc":"/** \n * Invoked when a property changes. \u003ccode\u003eMetalRootPaneUI\u003c/code\u003e is primarily interested in events originating from the \u003ccode\u003eJRootPane\u003c/code\u003e it has been installed on identifying the property \u003ccode\u003ewindowDecorationStyle\u003c/code\u003e. If the \u003ccode\u003ewindowDecorationStyle\u003c/code\u003e has changed to a value other than \u003ccode\u003eJRootPane.NONE\u003c/code\u003e, this will add a \u003ccode\u003eComponent\u003c/code\u003e to the \u003ccode\u003eJRootPane\u003c/code\u003e to render the window decorations, as well as installing a \u003ccode\u003eBorder\u003c/code\u003e on the \u003ccode\u003eJRootPane\u003c/code\u003e. On the other hand, if the \u003ccode\u003ewindowDecorationStyle\u003c/code\u003e has changed to \u003ccode\u003eJRootPane.NONE\u003c/code\u003e, this will remove the \u003ccode\u003eComponent\u003c/code\u003e that has been added to the \u003ccode\u003eJRootPane\u003c/code\u003e as well resetting the Border to what it was before \u003ccode\u003einstallUI\u003c/code\u003e was invoked.\n * @param e A PropertyChangeEvent object describing the event sourceand the property that has changed.\n */\n","tf":{"freq":{"root":1,"identifi":1,"object":1,"well":2,"add":1,"primarili":1,"decor":4,"hand":1,"style":3,"metal":1,"event":3,"interest":1,"reset":1,"valu":1,"border":2,"invok":2,"instal":3,"remov":1,"origin":1,"describ":1,"jroot":6,"pane":7,"render":1,"sourceand":1,"window":4,"compon":2,"will":2,"ad":1,"chang":6,"properti":5},"maxFreq":7,"totalTerms":67},"loc":30}