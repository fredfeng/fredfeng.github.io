{"id":13925,"className":"javax.swing.JComponent","methodName":"setAutoscrolls","signature":"\u003cjavax.swing.JComponent: void setAutoscrolls(boolean)\u003e","javadoc":"/** \n * Sets the \u003ccode\u003eautoscrolls\u003c/code\u003e property. If \u003ccode\u003etrue\u003c/code\u003e mouse dragged events will be synthetically generated when the mouse is dragged outside of the component\u0027s bounds and mouse motion has paused (while the button continues to be held down). The synthetic events make it appear that the drag gesture has resumed in the direction established when the component\u0027s boundary was crossed.  Components that support autoscrolling must handle \u003ccode\u003emouseDragged\u003c/code\u003e events by calling \u003ccode\u003escrollRectToVisible\u003c/code\u003e with a rectangle that contains the mouse event\u0027s location.  All of the Swing components that support item selection and are typically displayed in a \u003ccode\u003eJScrollPane\u003c/code\u003e (\u003ccode\u003eJTable\u003c/code\u003e, \u003ccode\u003eJList\u003c/code\u003e, \u003ccode\u003eJTree\u003c/code\u003e, \u003ccode\u003eJTextArea\u003c/code\u003e, and \u003ccode\u003eJEditorPane\u003c/code\u003e) already handle mouse dragged events in this way.  To enable autoscrolling in any other component, add a mouse motion listener that calls \u003ccode\u003escrollRectToVisible\u003c/code\u003e. For example, given a \u003ccode\u003eJPanel\u003c/code\u003e, \u003ccode\u003emyPanel\u003c/code\u003e: \u003cpre\u003e MouseMotionListener doScrollRectToVisible \u003d new MouseMotionAdapter() { public void mouseDragged(MouseEvent e) { Rectangle r \u003d new Rectangle(e.getX(), e.getY(), 1, 1); ((JPanel)e.getSource()).scrollRectToVisible(r); } }; myPanel.addMouseMotionListener(doScrollRectToVisible); \u003c/pre\u003e The default value of the \u003ccode\u003eautoScrolls\u003c/code\u003e property is \u003ccode\u003efalse\u003c/code\u003e.\n * @param autoscrolls if true, synthetic mouse dragged eventsare generated when the mouse is dragged outside of a component\u0027s bounds and the mouse button continues to be held down; otherwise false\n * @see #getAutoscrolls\n * @see JViewport\n * @see JScrollPane\n * @beaninfo expert: true description: Determines if this component automatically scrolls its contents when dragged.\n */\n","tf":{"freq":{"fals":2,"appear":1,"mous":15,"must":1,"given":1,"button":2,"event":6,"motion":5,"swing":1,"jscroll":2,"support":2,"synthet":3,"scroll":7,"enabl":1,"select":1,"autoscrol":6,"descript":1,"display":1,"rect":5,"continu":2,"content":1,"paus":1,"outsid":2,"determin":1,"contain":1,"will":1,"auto":1,"jlist":1,"sourc":1,"properti":2,"boundari":1,"make":1,"cross":1,"expert":1,"otherwis":1,"panel":2,"jtabl":1,"call":2,"beaninfo":1,"visibl":5,"typic":1,"way":1,"jpanel":2,"adapt":1,"add":2,"automat":1,"resum":1,"rectangl":3,"jtree":1,"area":1,"valu":1,"listen":3,"gestur":1,"direct":1,"held":2,"locat":1,"drag":9,"establish":1,"true":3,"handl":2,"pane":3,"eventsar":1,"compon":7,"jtext":1,"pre":2,"generat":2,"item":1,"exampl":1,"jviewport":1,"alreadi":1,"jeditor":1,"bound":2},"maxFreq":15,"totalTerms":154},"loc":13}