{"id":12391,"className":"javax.swing.LayoutStyle","methodName":"getPreferredGap","signature":"\u003cjavax.swing.LayoutStyle: int getPreferredGap(javax.swing.JComponent,javax.swing.JComponent,javax.swing.ComponentPlacement,int,java.awt.Container)\u003e","javadoc":"/** \n * Returns the amount of space to use between two components. The return value indicates the distance to place \u003ccode\u003ecomponent2\u003c/code\u003e relative to \u003ccode\u003ecomponent1\u003c/code\u003e. For example, the following returns the amount of space to place between \u003ccode\u003ecomponent2\u003c/code\u003e and \u003ccode\u003ecomponent1\u003c/code\u003e when \u003ccode\u003ecomponent2\u003c/code\u003e is placed vertically above \u003ccode\u003ecomponent1\u003c/code\u003e: \u003cpre\u003e int gap \u003d getPreferredGap(component1, component2, ComponentPlacement.RELATED, SwingConstants.NORTH, parent); \u003c/pre\u003e The \u003ccode\u003etype\u003c/code\u003e parameter indicates the relation between the two components.  If the two components will be contained in the same parent and are showing similar logically related items, use \u003ccode\u003eRELATED\u003c/code\u003e.  If the two components will be contained in the same parent but show logically unrelated items use \u003ccode\u003eUNRELATED\u003c/code\u003e.  Some look and feels may not distinguish between the \u003ccode\u003eRELATED\u003c/code\u003e and \u003ccode\u003eUNRELATED\u003c/code\u003e types. \u003cp\u003e The return value is not intended to take into account the current size and position of \u003ccode\u003ecomponent2\u003c/code\u003e or \u003ccode\u003ecomponent1\u003c/code\u003e.  The return value may take into consideration various properties of the components.  For example, the space may vary based on font size, or the preferred size of the component.\n * @param component1 the \u003ccode\u003eJComponent\u003c/code\u003e\u003ccode\u003ecomponent2\u003c/code\u003e is being placed relative to\n * @param component2 the \u003ccode\u003eJComponent\u003c/code\u003e being placed\n * @param position the position \u003ccode\u003ecomponent2\u003c/code\u003e is being placedrelative to \u003ccode\u003ecomponent1\u003c/code\u003e; one of \u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e, \u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e, \u003ccode\u003eSwingConstants.EAST\u003c/code\u003e or \u003ccode\u003eSwingConstants.WEST\u003c/code\u003e\n * @param type how the two components are being placed\n * @param parent the parent of \u003ccode\u003ecomponent2\u003c/code\u003e; this may differfrom the actual parent and it may be \u003ccode\u003enull\u003c/code\u003e\n * @return the amount of space to place between the two components\n * @throws NullPointerException if \u003ccode\u003ecomponent1\u003c/code\u003e,\u003ccode\u003ecomponent2\u003c/code\u003e or \u003ccode\u003etype\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @throws IllegalArgumentException if \u003ccode\u003eposition\u003c/code\u003e is notone of \u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e, \u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e, \u003ccode\u003eSwingConstants.EAST\u003c/code\u003e or \u003ccode\u003eSwingConstants.WEST\u003c/code\u003e\n * @see LookAndFeel#getLayoutStyle\n * @since 1.6\n */\n","tf":{"freq":{"show":2,"type":4,"amount":3,"jcompon":2,"relat":4,"swing":9,"place":7,"follow":1,"argument":1,"except":2,"unrel":1,"vertic":1,"font":1,"parent":6,"logic":2,"size":3,"placedrel":1,"contain":2,"will":2,"distanc":1,"pointer":1,"distinguish":1,"properti":1,"prefer":3,"posit":4,"gap":3,"vari":1,"placement":1,"one":1,"use":3,"space":4,"style":1,"indic":2,"consider":1,"layout":1,"current":1,"valu":3,"various":1,"noton":1,"similar":1,"look":2,"feel":2,"may":5,"constant":9,"differfrom":1,"paramet":1,"illeg":1,"two":6,"compon":27,"pre":2,"take":2,"item":2,"exampl":2,"base":1,"actual":1,"account":1,"intend":1},"maxFreq":27,"totalTerms":156},"loc":0}