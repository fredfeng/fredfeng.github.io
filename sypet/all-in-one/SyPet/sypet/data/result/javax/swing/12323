{"id":12323,"className":"javax.swing.Painter","methodName":"paint","signature":"\u003cjavax.swing.Painter: void paint(java.awt.Graphics2D,T,int,int)\u003e","javadoc":"/** \n * \u003cp\u003eRenders to the given  {@link java.awt.Graphics2D} object. Implementationsof this method \u003cem\u003emay\u003c/em\u003e modify state on the \u003ccode\u003eGraphics2D\u003c/code\u003e, and are not required to restore that state upon completion. In most cases, it is recommended that the caller pass in a scratch graphics object. The \u003ccode\u003eGraphics2D\u003c/code\u003e must never be null.\u003c/p\u003e \u003cp\u003eState on the graphics object may be honored by the \u003ccode\u003epaint\u003c/code\u003e method, but may not be. For instance, setting the antialiasing rendering hint on the graphics may or may not be respected by the \u003ccode\u003ePainter\u003c/code\u003e implementation.\u003c/p\u003e \u003cp\u003eThe supplied object parameter acts as an optional configuration argument. For example, it could be of type \u003ccode\u003eComponent\u003c/code\u003e. A \u003ccode\u003ePainter\u003c/code\u003e that expected it could then read state from that \u003ccode\u003eComponent\u003c/code\u003e and use the state for painting. For example, an implementation may read the backgroundColor and use that.\u003c/p\u003e \u003cp\u003eGenerally, to enhance reusability, most standard \u003ccode\u003ePainter\u003c/code\u003es ignore this parameter. They can thus be reused in any context. The \u003ccode\u003eobject\u003c/code\u003e may be null. Implementations must not throw a NullPointerException if the object parameter is null.\u003c/p\u003e \u003cp\u003eFinally, the \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e arguments specify the width and height that the \u003ccode\u003ePainter\u003c/code\u003e should paint into. More specifically, the specified width and height instruct the painter that it should paint fully within this width and height. Any specified clip on the \u003ccode\u003eg\u003c/code\u003e param will further constrain the region.\u003c/p\u003e \u003cp\u003eFor example, suppose I have a \u003ccode\u003ePainter\u003c/code\u003e implementation that draws a gradient. The gradient goes from white to black. It \"stretches\" to fill the painted region. Thus, if I use this \u003ccode\u003ePainter\u003c/code\u003e to paint a 500 x 500 region, the far left would be black, the far right would be white, and a smooth gradient would be painted between. I could then, without modification, reuse the \u003ccode\u003ePainter\u003c/code\u003e to paint a region that is 20x20 in size. This region would also be black on the left, white on the right, and a smooth gradient painted between.\u003c/p\u003e\n * @param g The Graphics2D to render to. This must not be null.\n * @param object an optional configuration parameter. This may be null.\n * @param width width of the area to paint.\n * @param height height of the area to paint.\n */\n","tf":{"freq":{"constrain":1,"implementationsof":1,"type":1,"reus":2,"must":3,"specifi":3,"draw":1,"expect":1,"height":6,"requir":1,"instruct":1,"given":1,"right":2,"black":3,"option":2,"argument":2,"except":1,"ignor":1,"honor":1,"width":6,"white":3,"far":2,"paint":12,"without":1,"size":1,"render":3,"instanc":1,"awt":1,"configur":2,"stretch":1,"will":1,"restor":1,"pointer":1,"upon":1,"region":5,"caller":1,"goe":1,"graphic":7,"smooth":2,"link":1,"state":5,"use":3,"object":7,"recommend":1,"area":2,"read":2,"left":2,"painter":8,"complet":1,"clip":1,"scratch":1,"may":8,"antialias":1,"standard":1,"thus":2,"fill":1,"paramet":4,"suppos":1,"fulli":1,"hint":1,"suppli":1,"general":1,"pass":1,"specif":1,"never":1,"compon":2,"color":1,"background":1,"context":1,"modifi":1,"exampl":3,"java":1,"method":2,"within":1,"act":1,"enhanc":1,"also":1,"modif":1,"respect":1,"reusabl":1,"gradient":4},"maxFreq":12,"totalTerms":169},"loc":0}