{"id":24909,"className":"javax.net.ssl.SSLEngine","methodName":"getDelegatedTask","signature":"\u003cjavax.net.ssl.SSLEngine: java.lang.Runnable getDelegatedTask()\u003e","javadoc":"/** \n * Returns a delegated \u003ccode\u003eRunnable\u003c/code\u003e task for this \u003ccode\u003eSSLEngine\u003c/code\u003e. \u003cP\u003e \u003ccode\u003eSSLEngine\u003c/code\u003e operations may require the results of operations that block, or may take an extended period of time to complete.  This method is used to obtain an outstanding  {@link java.lang.Runnable} operation (task).  Each task must be assigneda thread (possibly the current) to perform the  {@link java.lang.Runnable#run() run} operation.  Once the\u003ccode\u003erun\u003c/code\u003e method returns, the \u003ccode\u003eRunnable\u003c/code\u003e object is no longer needed and may be discarded. \u003cP\u003e Delegated tasks run in the \u003ccode\u003eAccessControlContext\u003c/code\u003e in place when this object was created. \u003cP\u003e A call to this method will return each outstanding task exactly once. \u003cP\u003e Multiple delegated tasks can be run in parallel.\n * @return  a delegated \u003ccode\u003eRunnable\u003c/code\u003e task, or nullif none are available.\n */\n","tf":{"freq":{"need":1,"call":1,"result":1,"link":2,"block":1,"use":1,"possibl":1,"perform":1,"object":2,"discard":1,"run":5,"lang":2,"must":1,"time":1,"requir":1,"deleg":5,"oper":4,"nullif":1,"exact":1,"thread":1,"current":1,"lengin":2,"none":1,"longer":1,"place":1,"runnabl":5,"assigneda":1,"complet":1,"parallel":1,"control":1,"may":3,"outstand":2,"multipl":1,"creat":1,"task":8,"avail":1,"access":1,"period":1,"obtain":1,"take":1,"will":1,"context":1,"method":3,"java":2},"maxFreq":8,"totalTerms":76},"loc":0}