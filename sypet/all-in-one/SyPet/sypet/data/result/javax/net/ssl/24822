{"id":24822,"className":"javax.net.ssl.TrustManagerFactory","methodName":"getInstance","signature":"\u003cjavax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eTrustManagerFactory\u003c/code\u003e object that acts as a factory for trust managers. \u003cp\u003e A new TrustManagerFactory object encapsulating the TrustManagerFactorySpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param algorithm the standard name of the requested trust managementalgorithm.  See the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html\"\u003e Java Secure Socket Extension Reference Guide \u003c/a\u003e for information about standard algorithm names.\n * @param provider an instance of the provider.\n * @return the new \u003ccode\u003eTrustManagerFactory\u003c/code\u003e object.\n * @throws NoSuchAlgorithmException if a TrustManagerFactorySpiimplementation for the specified algorithm is not available from the specified Provider object.\n * @throws IllegalArgumentException if the provider is null.\n * @throws NullPointerException if algorithm is null.\n * @see java.security.Provider\n */\n","tf":{"freq":{"root":1,"managementalgorithm":1,"object":6,"specifi":4,"algorithm":5,"technot":1,"refer":1,"extens":1,"factori":6,"spi":1,"name":2,"request":1,"socket":1,"regist":1,"spiimplement":1,"href":1,"note":1,"argument":1,"except":3,"standard":2,"manag":6,"trust":7,"avail":1,"list":1,"illeg":1,"provid":8,"instanc":2,"guid":3,"inform":1,"ref":1,"secur":3,"encapsul":1,"pointer":1,"java":2,"html":1,"act":1,"jsse":1},"maxFreq":8,"totalTerms":82},"loc":7}