{"id":24820,"className":"javax.net.ssl.TrustManagerFactory","methodName":"getInstance","signature":"\u003cjavax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eTrustManagerFactory\u003c/code\u003e object that acts as a factory for trust managers. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new TrustManagerFactory object encapsulating the TrustManagerFactorySpi implementation from the first Provider that supports the specified algorithm is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param algorithm the standard name of the requested trust managementalgorithm.  See the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html\"\u003e Java Secure Socket Extension Reference Guide \u003c/a\u003e for information about standard algorithm names.\n * @return the new \u003ccode\u003eTrustManagerFactory\u003c/code\u003e object.\n * @exception NoSuchAlgorithmException if no Provider supports aTrustManagerFactorySpi implementation for the specified algorithm.\n * @exception NullPointerException if algorithm is null.\n * @see java.security.Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"managementalgorithm":1,"object":3,"technot":1,"specifi":2,"algorithm":6,"refer":1,"extens":1,"factori":6,"request":1,"name":2,"spi":2,"socket":1,"regist":2,"href":1,"note":1,"travers":1,"except":4,"may":1,"support":2,"standard":2,"manag":6,"trust":7,"list":2,"provid":8,"instanc":1,"guid":3,"inform":1,"ref":1,"secur":6,"start":1,"retriev":1,"encapsul":1,"pointer":1,"java":2,"html":1,"method":2,"act":1,"prefer":1,"first":1,"jsse":1},"maxFreq":8,"totalTerms":92},"loc":7}