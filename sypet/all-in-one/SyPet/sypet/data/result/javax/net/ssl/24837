{"id":24837,"className":"javax.net.ssl.SSLContext","methodName":"getInstance","signature":"\u003cjavax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eSSLContext\u003c/code\u003e object that implements the specified secure socket protocol. \u003cp\u003e A new SSLContext object encapsulating the SSLContextSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.\n * @param protocol the standard name of the requested protocol.See the SSLContext section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard protocol names.\n * @param provider an instance of the provider.\n * @return the new \u003ccode\u003eSSLContext\u003c/code\u003e object.\n * @throws NoSuchAlgorithmException if a KeyManagerFactorySpiimplementation for the specified protocol is not available from the specified Provider object.\n * @throws IllegalArgumentException if the provider name is null.\n * @throws NullPointerException if protocol is null.\n * @see java.security.Provider\n */\n","tf":{"freq":{"root":1,"object":6,"algorithm":2,"specifi":5,"technot":1,"document":1,"factori":1,"spi":1,"name":5,"request":1,"regist":1,"socket":1,"spiimplement":1,"href":1,"key":1,"note":1,"cryptographi":1,"argument":1,"except":3,"protocol":6,"standard":4,"manag":1,"avail":1,"list":1,"lcontext":6,"illeg":1,"provid":8,"section":1,"instanc":2,"guid":1,"inform":1,"secur":3,"architectur":1,"encapsul":1,"pointer":1,"html":1,"java":2},"maxFreq":8,"totalTerms":77},"loc":6}