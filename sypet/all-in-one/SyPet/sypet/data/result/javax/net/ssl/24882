{"id":24882,"className":"javax.net.ssl.X509ExtendedTrustManager","methodName":"checkServerTrusted","signature":"\u003cjavax.net.ssl.X509ExtendedTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)\u003e","javadoc":"/** \n * Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters. \u003cp\u003e The authentication type is the key exchange algorithm portion of the cipher suites represented as a String, such as \"RSA\", \"DHE_DSS\". Note: for some exportable cipher suites, the key exchange algorithm is determined at run time during the handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5, the authType should be RSA_EXPORT when an ephemeral RSA key is used for the key exchange, and RSA when the key from the server certificate is used. Checking is case-sensitive. \u003cp\u003e If the \u003ccode\u003esocket\u003c/code\u003e parameter is an instance of {@link javax.net.ssl.SSLSocket}, and the endpoint identification algorithm of the \u003ccode\u003eSSLParameters\u003c/code\u003e is non-empty, to prevent man-in-the-middle attacks, the address that the \u003ccode\u003esocket\u003c/code\u003e connected to should be checked against the peer\u0027s identity presented in the end-entity X509 certificate, as specified in the endpoint identification algorithm. \u003cp\u003e If the \u003ccode\u003esocket\u003c/code\u003e parameter is an instance of {@link javax.net.ssl.SSLSocket}, and the algorithm constraints of the \u003ccode\u003eSSLParameters\u003c/code\u003e is non-null, for every certificate in the certification path, fields such as subject public key, the signature algorithm, key usage, extended key usage, etc. need to conform to the algorithm constraints in place on this socket.\n * @param chain the peer certificate chain\n * @param authType the key exchange algorithm used\n * @param socket the socket used for this connection. This parametercan be null, which indicates that implementations need not check the ssl parameters\n * @throws IllegalArgumentException if null or zero-length array is passedin for the \u003ccode\u003echain\u003c/code\u003e parameter or if null or zero-length string is passed in for the \u003ccode\u003eauthType\u003c/code\u003e parameter\n * @throws CertificateException if the certificate chain is not trustedby this TrustManager\n * @see SSLParameters#getEndpointIdentificationAlgorithm\n * @see SSLParameters#setEndpointIdentificationAlgorithm(String)\n * @see SSLParameters#getAlgorithmConstraints\n * @see SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)\n */\n","tf":{"freq":{"need":2,"passedin":1,"etc":1,"ssl":4,"zero":2,"type":5,"specifi":1,"handshak":1,"time":1,"given":1,"ephemer":1,"javax":2,"socket":6,"place":1,"everi":1,"key":9,"argument":1,"except":2,"sensit":1,"prevent":1,"partial":1,"provid":1,"endpoint":4,"instanc":3,"non":2,"present":1,"entiti":1,"determin":1,"auth":3,"array":1,"valid":1,"connect":2,"subject":1,"link":2,"identif":4,"constraint":5,"use":4,"build":1,"run":1,"net":2,"signatur":1,"algorithm":13,"authent":2,"indic":1,"ident":1,"length":2,"path":2,"middl":1,"end":1,"man":1,"note":1,"portion":1,"complet":1,"peer":3,"lsocket":2,"certif":9,"export":1,"lparamet":6,"check":4,"repres":1,"manag":1,"trust":2,"paramet":6,"illeg":1,"exchang":4,"pass":1,"empti":1,"field":1,"conform":1,"address":1,"chain":5,"trustedbi":1,"string":3,"suit":2,"base":1,"cipher":2,"server":2,"usag":2,"attack":1,"parametercan":1},"maxFreq":13,"totalTerms":178},"loc":0}