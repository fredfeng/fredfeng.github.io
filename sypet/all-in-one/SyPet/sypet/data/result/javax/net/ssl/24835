{"id":24835,"className":"javax.net.ssl.SSLContext","methodName":"getInstance","signature":"\u003cjavax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eSSLContext\u003c/code\u003e object that implements the specified secure socket protocol. \u003cp\u003e This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SSLContext object encapsulating the SSLContextSpi implementation from the first Provider that supports the specified protocol is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @param protocol the standard name of the requested protocol.See the SSLContext section in the \u003ca href\u003d \" {@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard protocol names.\n * @return the new \u003ccode\u003eSSLContext\u003c/code\u003e object.\n * @exception NoSuchAlgorithmException if no Provider supports aTrustManagerFactorySpi implementation for the specified protocol.\n * @exception NullPointerException if protocol is null.\n * @see java.security.Provider\n */\n","tf":{"freq":{"via":1,"root":1,"link":1,"object":3,"algorithm":2,"technot":1,"specifi":3,"document":1,"factori":1,"request":1,"name":4,"spi":2,"regist":2,"socket":1,"href":1,"note":1,"cryptographi":1,"travers":1,"except":4,"protocol":7,"may":1,"support":2,"standard":4,"manag":1,"trust":1,"list":2,"lcontext":6,"provid":8,"section":1,"instanc":1,"guid":1,"inform":1,"secur":6,"architectur":1,"start":1,"retriev":1,"encapsul":1,"pointer":1,"java":2,"html":1,"method":2,"prefer":1,"first":1},"maxFreq":8,"totalTerms":86},"loc":6}