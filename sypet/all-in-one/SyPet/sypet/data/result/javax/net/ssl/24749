{"id":24749,"className":"javax.net.ssl.HttpsURLConnection","methodName":"getPeerPrincipal","signature":"\u003cjavax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()\u003e","javadoc":"/** \n * Returns the server\u0027s principal which was established as part of defining the session. \u003cP\u003e Note: Subclasses should override this method. If not overridden, it will default to returning the X500Principal of the server\u0027s end-entity certificate for certificate-based ciphersuites, or throw an SSLPeerUnverifiedException for non-certificate based ciphersuites, such as Kerberos.\n * @return the server\u0027s principal. Returns an X500Principal of theend-entity certiticate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites.\n * @throws SSLPeerUnverifiedException if the peer was not verified\n * @throws IllegalStateException if this method is called beforethe connection has been established.\n * @see #getServerCertificates()\n * @see #getLocalPrincipal()\n * @since 1.5\n */\n","tf":{"freq":{"call":1,"defin":1,"connect":1,"overridden":1,"state":1,"kerbero":3,"unverifi":2,"theend":1,"verifi":1,"note":1,"end":1,"peer":2,"certif":4,"except":3,"lpeer":2,"establish":2,"ciphersuit":2,"beforeth":1,"certit":1,"illeg":1,"non":1,"entiti":2,"session":1,"suit":2,"will":1,"subclass":1,"base":3,"cipher":2,"method":2,"server":4,"local":1,"part":1,"princip":7},"maxFreq":7,"totalTerms":60},"loc":6}