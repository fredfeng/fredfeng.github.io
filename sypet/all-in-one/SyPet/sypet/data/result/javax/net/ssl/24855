{"id":24855,"className":"javax.net.ssl.ExtendedSSLSession","methodName":"getLocalSupportedSignatureAlgorithms","signature":"\u003cjavax.net.ssl.ExtendedSSLSession: java.lang.String[] getLocalSupportedSignatureAlgorithms()\u003e","javadoc":"/** \n * Obtains an array of supported signature algorithms that the local side is willing to use. \u003cp\u003e Note: this method is used to indicate to the peer which signature algorithms may be used for digital signatures in TLS 1.2. It is not meaningful for TLS versions prior to 1.2. \u003cp\u003e The signature algorithm name must be a standard Java Security name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on). See Appendix A in the \u003ca href\u003d \"../../../technotes/guides/security/crypto/CryptoSpec.html#AppA\"\u003e Java Cryptography Architecture API Specification \u0026amp; Reference \u003c/a\u003e for information about standard algorithm names. \u003cp\u003e Note: the local supported signature algorithms should conform to the algorithm constraints specified by {@link SSLParameters#getAlgorithmConstraints getAlgorithmConstraints()}method in \u003ccode\u003eSSLParameters\u003c/code\u003e.\n * @return An array of supported signature algorithms, in descendingorder of preference.  The return value is an empty array if no signature algorithm is supported.\n * @see SSLParameters#getAlgorithmConstraints\n */\n","tf":{"freq":{"spec":1,"link":1,"constraint":4,"use":3,"crypto":2,"signatur":8,"must":1,"specifi":1,"technot":1,"algorithm":12,"version":1,"prior":1,"descendingord":1,"indic":1,"refer":1,"side":1,"name":3,"valu":1,"href":1,"note":2,"cryptographi":1,"peer":1,"app":1,"lparamet":3,"may":1,"support":5,"standard":2,"meaning":1,"empti":1,"guid":1,"digit":1,"inform":1,"specif":1,"obtain":1,"secur":2,"conform":1,"architectur":1,"will":1,"html":1,"method":2,"java":2,"appendix":1,"local":3,"prefer":1,"amp":1,"array":3},"maxFreq":12,"totalTerms":87},"loc":0}