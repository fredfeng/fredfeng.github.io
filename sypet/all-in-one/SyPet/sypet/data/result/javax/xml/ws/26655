{"id":26655,"className":"javax.xml.ws.Dispatch","methodName":"invokeAsync","signature":"\u003cjavax.xml.ws.Dispatch: java.util.concurrent.Future\u003c?\u003e invokeAsync(T,javax.xml.ws.AsyncHandler)\u003e","javadoc":"/** \n * Invoke a service operation asynchronously. The method returns without waiting for the response to the operation invocation, the results of the operation are communicated to the client via the passed in \u003ccode\u003ehandler\u003c/code\u003e. \u003cp\u003e The client is responsible for ensuring that the \u003ccode\u003emsg\u003c/code\u003e object when marshalled is formed according to the requirements of the protocol binding in use.\n * @param msg An object that will form the message or payload ofthe message used to invoke the operation.\n * @param handler The handler object that will receive theresponse to the operation invocation.\n * @return A \u003ccode\u003eFuture\u003c/code\u003e object that may be used to check the statusof the operation invocation. This object MUST NOT be used to try to obtain the results of the operation - the object returned from \u003ccode\u003eFuture\u0026lt;?\u003e.get()\u003c/code\u003e is implementation dependent and any use of it will result in non-portable behaviour.\n * @throws WebServiceException If there is any error in the configuration ofthe \u003ccode\u003eDispatch\u003c/code\u003e instance\n */\n","tf":{"freq":{"result":3,"asynchron":1,"via":1,"client":2,"portabl":1,"behaviour":1,"servic":2,"payload":1,"use":5,"wait":1,"object":6,"ensur":1,"requir":1,"oper":7,"ofth":2,"dispatch":1,"marshal":1,"except":1,"may":1,"protocol":1,"futur":2,"error":1,"check":1,"respons":2,"form":2,"depend":1,"messag":2,"invok":3,"therespons":1,"web":1,"receiv":1,"accord":1,"without":1,"msg":2,"invoc":3,"async":1,"instanc":1,"non":1,"pass":1,"statusof":1,"configur":1,"obtain":1,"communic":1,"will":3,"method":1,"bind":1,"handler":3},"maxFreq":7,"totalTerms":80},"loc":0}