{"id":26450,"className":"javax.xml.bind.attachment.AttachmentUnmarshaller","methodName":"getAttachmentAsByteArray","signature":"\u003cjavax.xml.bind.attachment.AttachmentUnmarshaller: byte[] getAttachmentAsByteArray(java.lang.String)\u003e","javadoc":"/** \n * \u003cp\u003eRetrieve the attachment identified by content-id, \u003ccode\u003ecid\u003c/code\u003e,  as a \u003ctt\u003ebyte[]\u003c/tt\u003e\u003c/p\u003e.\n * @param cid It is expected to be a valid lexical form of the XML Schema\u003ccode\u003exs:anyURI\u003c/code\u003e datatype. If \u003ccode\u003e {@link #isXOPPackage()}\u003d\u003dtrue\u003c/code\u003e, it must be a valid URI per the \u003ccode\u003ecid:\u003c/code\u003e URI scheme (see \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2387.txt\"\u003eRFC 2387\u003c/a\u003e)\n * @return byte[] representation of attachment identified by cid.\n * @throws IllegalArgumentException if the attachment for the given cid is not found.\n */\n","tf":{"freq":{"valid":2,"link":1,"www":1,"identifi":2,"org":1,"txt":1,"must":1,"rfc":2,"schema":1,"expect":1,"lexic":1,"given":1,"scheme":1,"datatyp":1,"href":1,"argument":1,"except":1,"form":1,"true":1,"illeg":1,"cid":5,"ppackag":1,"represent":1,"ietf":1,"content":1,"per":1,"http":1,"retriev":1,"attach":4,"found":1,"array":1},"maxFreq":5,"totalTerms":41},"loc":0}