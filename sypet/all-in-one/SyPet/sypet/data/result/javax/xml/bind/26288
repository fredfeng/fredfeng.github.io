{"id":26288,"className":"javax.xml.bind.Unmarshaller","methodName":"setEventHandler","signature":"\u003cjavax.xml.bind.Unmarshaller: void setEventHandler(javax.xml.bind.ValidationEventHandler)\u003e","javadoc":"/** \n * Allow an application to register a \u003ctt\u003eValidationEventHandler\u003c/tt\u003e. \u003cp\u003e The \u003ctt\u003eValidationEventHandler\u003c/tt\u003e will be called by the JAXB Provider if any validation errors are encountered during calls to any of the unmarshal methods.  If the client application does not register a \u003ctt\u003eValidationEventHandler\u003c/tt\u003e before invoking the unmarshal methods, then \u003ctt\u003eValidationEvents\u003c/tt\u003e will be handled by the default event handler which will terminate the unmarshal operation after the first error or fatal error is encountered. \u003cp\u003e Calling this method with a null parameter will cause the Unmarshaller to revert back to the default event handler.\n * @param handler the validation event handler\n * @throws JAXBException if an error was encountered while setting theevent handler\n */\n","tf":{"freq":{"call":3,"valid":6,"allow":1,"client":1,"unmarshal":1,"applic":2,"oper":1,"revert":1,"event":8,"unmarsh":3,"regist":2,"except":1,"error":4,"invok":1,"fatal":1,"paramet":1,"back":1,"provid":1,"handl":1,"termin":1,"caus":1,"theevent":1,"encount":3,"will":4,"method":3,"first":1,"handler":9},"maxFreq":9,"totalTerms":63},"loc":0}