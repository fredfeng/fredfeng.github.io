{"id":26278,"className":"javax.xml.bind.Unmarshaller","methodName":"unmarshal","signature":"\u003cjavax.xml.bind.Unmarshaller: javax.xml.bind.JAXBElement\u003cT\u003e unmarshal(org.w3c.dom.Node,java.lang.Class)\u003e","javadoc":"/** \n * Unmarshal XML data by JAXB mapped \u003ctt\u003edeclaredType\u003c/tt\u003e and return the resulting content tree. \u003cp\u003e Implements \u003ca href\u003d\"#unmarshalByDeclaredType\"\u003eUnmarshal by Declared Type\u003c/a\u003e\n * @param node the document/element to unmarshal XML data from. The caller must support at least Document and Element.\n * @param declaredType appropriate JAXB mapped class to hold \u003ctt\u003enode\u003c/tt\u003e\u0027s XML data.\n * @return \u003ca href\u003d\"#unmarshalDeclaredTypeReturn\"\u003eJAXB Element\u003c/a\u003e representation of \u003ctt\u003enode\u003c/tt\u003e\n * @throws JAXBException If any unexpected errors occur while unmarshalling\n * @throws UnmarshalException If the  {@link ValidationEventHandler ValidationEventHandler}returns false from its \u003ctt\u003ehandleEvent\u003c/tt\u003e method or the \u003ctt\u003eUnmarshaller\u003c/tt\u003e is unable to perform the XML to Java binding.  See \u003ca href\u003d\"#unmarshalEx\"\u003eUnmarshalling XML Data\u003c/a\u003e\n * @throws IllegalArgumentException If any parameter is null\n * @since JAXB2.0\n */\n","tf":{"freq":{"fals":1,"caller":1,"valid":2,"result":1,"unexpect":1,"least":1,"link":1,"data":4,"perform":1,"type":5,"unmarshal":3,"must":1,"document":2,"tree":1,"declar":5,"event":3,"unmarsh":8,"map":2,"href":3,"argument":1,"element":3,"except":3,"support":1,"error":1,"hold":1,"paramet":1,"illeg":1,"handl":1,"represent":1,"unabl":1,"content":1,"node":3,"appropri":1,"java":1,"method":1,"bind":1,"handler":2,"occur":1},"maxFreq":8,"totalTerms":72},"loc":0}