{"id":25815,"className":"javax.xml.stream.XMLStreamReader","methodName":"getTextCharacters","signature":"\u003cjavax.xml.stream.XMLStreamReader: int getTextCharacters(int,char[],int,int)\u003e","javadoc":"/** \n * Gets the the text associated with a CHARACTERS, SPACE or CDATA event. Text starting a \"sourceStart\" is copied into \"target\" starting at \"targetStart\". Up to \"length\" characters are copied.  The number of characters actually copied is returned. The \"sourceStart\" argument must be greater or equal to 0 and less than or equal to the number of characters associated with the event.  Usually, one requests text starting at a \"sourceStart\" of 0. If the number of characters actually copied is less than the \"length\", then there is no more text. Otherwise, subsequent calls need to be made until all text has been retrieved. For example: \u003ccode\u003e int length \u003d 1024; char[] myBuffer \u003d new char[ length ]; for ( int sourceStart \u003d 0 ; ; sourceStart +\u003d length ) { int nCopied \u003d stream.getTextCharacters( sourceStart, myBuffer, 0, length ); if (nCopied \u003c length) break; } \u003c/code\u003e XMLStreamException may be thrown if there are any XML errors in the underlying source. The \"targetStart\" argument must be greater than or equal to 0 and less than the length of \"target\", Length must be greater than 0 and \"targetStart + length\" must be less than or equal to length of \"target\".\n * @param sourceStart the index of the first character in the source array to copy\n * @param target the destination array\n * @param targetStart the start offset in the target array\n * @param length the number of characters to copy\n * @return the number of characters actually copied\n * @throws XMLStreamException if the underlying XML source is not well-formed\n * @throws IndexOutOfBoundsException if targetStart \u003c 0 or \u003e than the length of target\n * @throws IndexOutOfBoundsException if length \u003c 0 or targetStart + length \u003e length of target\n * @throws UnsupportedOperationException if this method is not supported\n * @throws NullPointerException is if target is null\n */\n","tf":{"freq":{"otherwis":1,"need":1,"call":1,"unsupport":1,"stream":1,"greater":3,"one":1,"made":1,"well":1,"copi":9,"must":4,"buffer":2,"lstream":2,"oper":1,"associ":2,"event":2,"request":1,"length":16,"offset":1,"subsequ":1,"less":4,"argument":2,"usual":1,"index":3,"thrown":1,"may":1,"except":6,"text":7,"support":1,"form":1,"error":1,"charact":9,"number":5,"equal":4,"start":17,"retriev":1,"exampl":1,"target":14,"pointer":1,"actual":3,"method":1,"sourc":10,"first":1,"bound":2,"destin":1,"array":3},"maxFreq":17,"totalTerms":153},"loc":0}