{"id":26738,"className":"javax.xml.ws.EndpointReference","methodName":"getPort","signature":"\u003cjavax.xml.ws.EndpointReference: T getPort(java.lang.Class,javax.xml.ws.WebServiceFeature[])\u003e","javadoc":"/** \n * The \u003ccode\u003egetPort\u003c/code\u003e method returns a proxy. If there are any reference parameters in the \u003ccode\u003eEndpointReference\u003c/code\u003e instance, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The parameter  \u003ccode\u003eserviceEndpointInterface\u003c/code\u003e specifies the service endpoint interface that is supported by the returned proxy. The \u003ccode\u003eEndpointReference\u003c/code\u003e instance specifies the endpoint that will be invoked by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly from the WSDL Metadata from this \u003ccode\u003eEndpointReference\u003c/code\u003e or from annotations on the \u003ccode\u003eserviceEndpointInterface\u003c/code\u003e.  For this method to successfully return a proxy, WSDL metadata MUST be available and the \u003ccode\u003eEndpointReference\u003c/code\u003e instance MUST contain an implementation understood \u003ccode\u003eserviceName\u003c/code\u003e metadata. \u003cp\u003e Because this port is not created from a \u003ccode\u003eService\u003c/code\u003e object, handlers will not automatically be configured, and the \u003ccode\u003eHandlerResolver\u003c/code\u003e and \u003ccode\u003eExecutor\u003c/code\u003e cannot be get or set for this port. The \u003ccode\u003eBindingProvider().getBinding().setHandlerChain()\u003c/code\u003e method can be used to manually configure handlers for this port.\n * @param serviceEndpointInterface Service endpoint interface\n * @param features  An array of \u003ccode\u003eWebServiceFeatures\u003c/code\u003e to configure on theproxy.  Supported features not in the \u003ccode\u003efeatures \u003c/code\u003e parameter will have their default values.\n * @return Object Proxy instance that supports thespecified service endpoint interface\n * @throws WebServiceException \u003cUL\u003e \u003cLI\u003eIf there is an error during creation of the proxy \u003cLI\u003eIf there is any missing WSDL metadata as required by this method \u003cLI\u003eIf this \u003ccode\u003eendpointReference\u003c/code\u003e is invalid \u003cLI\u003eIf an illegal \u003ccode\u003eserviceEndpointInterface\u003c/code\u003e is specified \u003cLI\u003eIf a feature is enabled that is not compatible with this port or is unsupported. \u003c/UL\u003e\n * @see java.lang.reflect.Proxy\n * @see WebServiceFeature\n */\n","tf":{"freq":{"unsupport":1,"appear":1,"servic":12,"specifi":3,"sent":1,"requir":1,"invalid":1,"refer":8,"understood":1,"thespecifi":1,"metadata":4,"theproxi":1,"except":1,"support":3,"respons":1,"creat":1,"enabl":1,"select":1,"invok":1,"runtim":1,"resolv":1,"avail":1,"provid":1,"endpoint":14,"header":1,"instanc":4,"system":1,"configur":4,"contain":1,"will":3,"compat":1,"array":1,"port":7,"creation":1,"use":1,"object":2,"lang":1,"automat":1,"indic":1,"annot":1,"name":1,"valu":1,"protocol":1,"error":1,"proxi":8,"messag":1,"executor":1,"paramet":5,"web":3,"accord":1,"illeg":1,"manual":1,"chain":1,"take":1,"featur":6,"java":1,"method":5,"bind":3,"success":1,"reflect":1,"miss":1,"handler":4},"maxFreq":14,"totalTerms":142},"loc":4}