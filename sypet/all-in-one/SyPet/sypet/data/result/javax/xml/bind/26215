{"id":26215,"className":"javax.xml.bind.Binder","methodName":"updateJAXB","signature":"\u003cjavax.xml.bind.Binder: java.lang.Object updateJAXB(XmlNode)\u003e","javadoc":"/** \n * Takes an XML node and updates its associated JAXB object and its descendants. \u003cp\u003e This operation can be thought of as an \"in-place\" unmarshalling. The difference is that instead of creating a whole new JAXB tree, this operation updates an existing tree, reusing as much JAXB objects as possible. \u003cp\u003e As a side-effect, this operation updates the association between XML nodes and JAXB objects.\n * @return Returns the updated JAXB object. Typically, this is the same object that was returned from earlier {@link #marshal(Object,Object)} or{@link #updateJAXB(Object)} method invocation,but it maybe a different object, for example when the name of the XML element has changed.\n * @throws JAXBException If any unexpected problem occurs updating corresponding JAXB mapped content.\n * @throws IllegalArgumentException If node parameter is null\n */\n","tf":{"freq":{"unexpect":1,"correspond":1,"link":2,"typic":1,"thought":1,"possibl":1,"object":9,"unmarshal":1,"reus":1,"tree":2,"oper":3,"associ":2,"side":1,"name":1,"map":1,"place":1,"marshal":1,"exist":1,"argument":1,"element":1,"except":2,"creat":1,"paramet":1,"problem":1,"illeg":1,"mayb":1,"invoc":1,"much":1,"content":1,"differ":2,"node":3,"earlier":1,"updat":7,"effect":1,"take":1,"whole":1,"exampl":1,"instead":1,"method":1,"chang":1,"descend":1,"occur":1},"maxFreq":9,"totalTerms":65},"loc":0}