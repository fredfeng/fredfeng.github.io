{"id":27703,"className":"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory","methodName":"getInstance","signature":"\u003cjavax.xml.crypto.dsig.keyinfo.KeyInfoFactory: javax.xml.crypto.dsig.keyinfo.KeyInfoFactory getInstance()\u003e","javadoc":"/** \n * Returns a \u003ccode\u003eKeyInfoFactory\u003c/code\u003e that supports the default XML processing mechanism and representation type (\"DOM\"). \u003cp\u003eThis method uses the standard JCA provider lookup mechanism to locate and instantiate a \u003ccode\u003eKeyInfoFactory\u003c/code\u003e implementation of the default mechanism type. It traverses the list of registered security \u003ccode\u003eProvider\u003c/code\u003es, starting with the most preferred \u003ccode\u003eProvider\u003c/code\u003e.  A new \u003ccode\u003eKeyInfoFactory\u003c/code\u003e object from the first \u003ccode\u003eProvider\u003c/code\u003e that supports the DOM mechanism is returned. \u003cp\u003e Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.\n * @return a new \u003ccode\u003eKeyInfoFactory\u003c/code\u003e\n * @throws NoSuchMechanismException if no \u003ccode\u003eProvider\u003c/code\u003e supports a\u003ccode\u003eKeyInfoFactory\u003c/code\u003e implementation for the DOM mechanism\n * @see Provider\n */\n","tf":{"freq":{"via":1,"instanti":1,"link":1,"use":1,"object":1,"type":2,"lookup":1,"info":5,"factori":5,"regist":2,"note":1,"key":5,"travers":1,"except":1,"may":1,"locat":1,"support":3,"standard":1,"list":2,"provid":9,"represent":1,"instanc":1,"process":1,"secur":3,"start":1,"retriev":1,"mechan":6,"method":2,"prefer":1,"first":1},"maxFreq":9,"totalTerms":63},"loc":3}