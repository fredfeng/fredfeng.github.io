{"id":25834,"className":"javax.xml.stream.XMLEventWriter","methodName":"add","signature":"\u003cjavax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)\u003e","javadoc":"/** \n * Add an event to the output stream Adding a START_ELEMENT will open a new namespace scope that will be closed when the corresponding END_ELEMENT is written. \u003ctable border\u003d\"2\" rules\u003d\"all\" cellpadding\u003d\"4\"\u003e \u003cthead\u003e \u003ctr\u003e \u003cth align\u003d\"center\" colspan\u003d\"2\"\u003e Required and optional fields for events added to the writer \u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003cth\u003eEvent Type\u003c/th\u003e \u003cth\u003eRequired Fields\u003c/th\u003e \u003cth\u003eOptional Fields\u003c/th\u003e \u003cth\u003eRequired Behavior\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e START_ELEMENT  \u003c/td\u003e \u003ctd\u003e QName name \u003c/td\u003e \u003ctd\u003e namespaces , attributes \u003c/td\u003e \u003ctd\u003e A START_ELEMENT will be written by writing the name, namespaces, and attributes of the event in XML 1.0 valid syntax for START_ELEMENTs. The name is written by looking up the prefix for the namespace uri.  The writer can be configured to respect prefixes of QNames.  If the writer is respecting prefixes it must use the prefix set on the QName.  The default behavior is to lookup the value for the prefix on the EventWriter\u0027s internal namespace context. Each attribute (if any) is written using the behavior specified in the attribute section of this table.  Each namespace (if any) is written using the behavior specified in the namespace section of this table. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e END_ELEMENT  \u003c/td\u003e \u003ctd\u003e Qname name  \u003c/td\u003e \u003ctd\u003e None \u003c/td\u003e \u003ctd\u003e A well formed END_ELEMENT tag is written. The name is written by looking up the prefix for the namespace uri.  The writer can be configured to respect prefixes of QNames.  If the writer is respecting prefixes it must use the prefix set on the QName.  The default behavior is to lookup the value for the prefix on the EventWriter\u0027s internal namespace context. If the END_ELEMENT name does not match the START_ELEMENT name an XMLStreamException is thrown. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e ATTRIBUTE  \u003c/td\u003e \u003ctd\u003e QName name , String value \u003c/td\u003e \u003ctd\u003e QName type \u003c/td\u003e \u003ctd\u003e An attribute is written using the same algorithm to find the lexical form as used in START_ELEMENT. The default is to use double quotes to wrap attribute values and to escape any double quotes found in the value.  The type value is ignored. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e NAMESPACE  \u003c/td\u003e \u003ctd\u003e String prefix, String namespaceURI, boolean isDefaultNamespaceDeclaration \u003c/td\u003e \u003ctd\u003e None  \u003c/td\u003e \u003ctd\u003e A namespace declaration is written.  If the namespace is a default namespace declaration (isDefault is true) then xmlns\u003d\"$namespaceURI\" is written and the prefix is optional.  If isDefault is false, the prefix must be declared and the writer must prepend xmlns to the prefix and write out a standard prefix declaration. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e PROCESSING_INSTRUCTION  \u003c/td\u003e \u003ctd\u003e   None\u003c/td\u003e \u003ctd\u003e   String target, String data\u003c/td\u003e \u003ctd\u003e   The data does not need to be present and may be null.  Target is required and many not be null. The writer will write data section directly after the target, enclosed in appropriate XML 1.0 syntax \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e COMMENT  \u003c/td\u003e \u003ctd\u003e None  \u003c/td\u003e \u003ctd\u003e String comment  \u003c/td\u003e \u003ctd\u003e If the comment is present (not null) it is written, otherwise an an empty comment is written \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e START_DOCUMENT  \u003c/td\u003e \u003ctd\u003e None  \u003c/td\u003e \u003ctd\u003e String encoding , boolean standalone, String version  \u003c/td\u003e \u003ctd\u003e A START_DOCUMENT event is not required to be written to the stream.  If present the attributes are written inside the appropriate XML declaration syntax \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e END_DOCUMENT  \u003c/td\u003e \u003ctd\u003e None \u003c/td\u003e \u003ctd\u003e None  \u003c/td\u003e \u003ctd\u003e Nothing is written to the output  \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e DTD  \u003c/td\u003e \u003ctd\u003e String DocumentTypeDefinition  \u003c/td\u003e \u003ctd\u003e None  \u003c/td\u003e \u003ctd\u003e The DocumentTypeDefinition is written to the output  \u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e\n * @param event the event to be added\n * @throws XMLStreamException\n */\n","tf":{"freq":{"need":1,"fals":1,"tag":1,"type":5,"lookup":2,"must":4,"close":1,"specifi":2,"center":1,"open":1,"namespac":15,"lexic":1,"requir":5,"qname":8,"event":9,"none":8,"writer":9,"border":1,"quot":2,"option":3,"mani":1,"wrap":1,"ignor":1,"thrown":1,"except":2,"colspan":1,"form":2,"align":1,"xmlns":2,"uri":2,"present":3,"encod":1,"syntax":3,"configur":2,"cellpad":1,"definit":2,"enclos":1,"prefix":15,"will":4,"match":1,"comment":3,"output":3,"otherwis":1,"valid":1,"stream":2,"scope":1,"correspond":1,"behavior":5,"data":3,"use":7,"well":1,"add":2,"escap":1,"version":1,"algorithm":1,"document":2,"attribut":7,"declar":6,"lstream":2,"rule":1,"written":16,"name":8,"write":3,"noth":1,"valu":6,"find":1,"direct":1,"thead":2,"look":2,"may":1,"standard":1,"tbodi":2,"prepend":1,"true":1,"standalon":1,"section":3,"empti":1,"field":3,"appropri":2,"tabl":4,"string":9,"target":3,"intern":2,"context":2,"ad":3,"insid":1,"respect":4,"found":1},"maxFreq":16,"totalTerms":263},"loc":0}