{"id":27582,"className":"javax.xml.crypto.dsig.XMLSignature","methodName":"sign","signature":"\u003cjavax.xml.crypto.dsig.XMLSignature: void sign(javax.xml.crypto.dsig.XMLSignContext)\u003e","javadoc":"/** \n * Signs this \u003ccode\u003eXMLSignature\u003c/code\u003e. \u003cp\u003eIf this method throws an exception, this \u003ccode\u003eXMLSignature\u003c/code\u003e and the \u003ccode\u003esignContext\u003c/code\u003e parameter will be left in the state that it was in prior to the invocation.\n * @param signContext the signing context\n * @throws ClassCastException if the type of \u003ccode\u003esignContext\u003c/code\u003e isnot compatible with this \u003ccode\u003eXMLSignature\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003esignContext\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n * @throws MarshalException if an exception occurs while marshalling\n * @throws XMLSignatureException if an unexpected exception occurs whilegenerating the signature\n */\n","tf":{"freq":{"except":7,"unexpect":1,"paramet":1,"state":1,"type":1,"signatur":1,"invoc":1,"prior":1,"sign":7,"isnot":1,"cast":1,"context":5,"will":1,"pointer":1,"lsignatur":4,"method":1,"left":1,"marshal":2,"whilegener":1,"occur":2,"compat":1},"maxFreq":7,"totalTerms":42},"loc":0}