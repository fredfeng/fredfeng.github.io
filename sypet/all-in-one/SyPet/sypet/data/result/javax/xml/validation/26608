{"id":26608,"className":"javax.xml.validation.Validator","methodName":"validate","signature":"\u003cjavax.xml.validation.Validator: void validate(javax.xml.transform.Source)\u003e","javadoc":"/** \n * Validates the specified input. \u003cp\u003eThis is just a convenience method for {@link #validate(Source source,Result result)}with \u003ccode\u003eresult\u003c/code\u003e of \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n * @param source XML to be validated. Must be an XML document or XML element and must not be null. For backwards compatibility, the results of attempting to validate anything other than a document or element are implementation-dependent. Implementations must either recognize and process the input or throw an IllegalArgumentException.\n * @throws IllegalArgumentException If the \u003ccode\u003eSource\u003c/code\u003e is an XML artifact that the implementation cannot validate (for example, a processing instruction).\n * @throws SAXException If the  {@link ErrorHandler} throws a {@link SAXException} orif a fatal error is found and the  {@link ErrorHandler} returnsnormally.\n * @throws IOException If the validator is processing a {@link javax.xml.transform.sax.SAXSource} and theunderlying  {@link org.xml.sax.XMLReader} throws an{@link IOException}.\n * @throws NullPointerException If \u003ccode\u003esource\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #validate(Source source,Result result)\n */\n","tf":{"freq":{"attempt":1,"result":6,"valid":8,"anyth":1,"xsourc":1,"backward":1,"link":7,"theunder":1,"orif":1,"org":1,"must":3,"specifi":1,"transform":1,"document":2,"instruct":1,"javax":1,"returnsnorm":1,"recogn":1,"conveni":1,"just":1,"argument":2,"element":2,"except":5,"error":3,"fatal":1,"depend":1,"xml":2,"illeg":2,"process":3,"input":2,"either":1,"artifact":1,"exampl":1,"pointer":1,"sax":2,"sourc":7,"method":1,"xexcept":2,"lreader":1,"found":1,"handler":2,"compat":1},"maxFreq":8,"totalTerms":85},"loc":4}