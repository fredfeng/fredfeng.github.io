{"id":26286,"className":"javax.xml.bind.Unmarshaller","methodName":"setValidating","signature":"\u003cjavax.xml.bind.Unmarshaller: void setValidating(boolean)\u003e","javadoc":"/** \n * Specifies whether or not the default validation mechanism of the \u003ctt\u003eUnmarshaller\u003c/tt\u003e should validate during unmarshal operations. By default, the \u003ctt\u003eUnmarshaller\u003c/tt\u003e does not validate. \u003cp\u003e This method may only be invoked before or after calling one of the unmarshal methods. \u003cp\u003e This method only controls the JAXB Provider\u0027s default unmarshal-time validation mechanism - it has no impact on clients that specify their own validating SAX 2.0 compliant parser.  Clients that specify their own unmarshal-time validation mechanism may wish to turn off the JAXB Provider\u0027s default validation mechanism via this API to avoid \"double validation\". \u003cp\u003e This method is deprecated as of JAXB 2.0 - please use the new {@link #setSchema(javax.xml.validation.Schema)} API.\n * @param validating true if the Unmarshaller should validate duringunmarshal, false otherwise\n * @throws JAXBException if an error occurred while enabling or disablingvalidation at unmarshal time\n * @throws UnsupportedOperationException could be thrown if this method isinvoked on an Unmarshaller created from a JAXBContext referencing JAXB 2.0 mapped classes\n * @deprecated since JAXB2.0, please see {@link #setSchema(javax.xml.validation.Schema)}\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"call":1,"valid":13,"unsupport":1,"deprec":2,"via":1,"client":2,"wish":1,"link":2,"one":1,"use":1,"unmarshal":4,"whether":1,"impact":1,"specifi":3,"referenc":1,"schema":4,"avoid":1,"time":3,"pleas":2,"oper":2,"javax":2,"unmarsh":5,"map":1,"disablingvalid":1,"duringunmarsh":1,"control":1,"turn":1,"thrown":1,"except":2,"may":2,"error":1,"creat":1,"isinvok":1,"enabl":1,"invok":1,"true":1,"xml":2,"provid":2,"mechan":4,"context":1,"compliant":1,"method":5,"parser":1,"occur":1},"maxFreq":13,"totalTerms":89},"loc":0}