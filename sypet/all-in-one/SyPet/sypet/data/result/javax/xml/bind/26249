{"id":26249,"className":"javax.xml.bind.JAXBContext","methodName":"newInstance","signature":"\u003cjavax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])\u003e","javadoc":"/** \n * \u003cp\u003e Obtain a new instance of a \u003ctt\u003eJAXBContext\u003c/tt\u003e class. \u003cp\u003e The client application must supply a list of classes that the new context object needs to recognize. Not only the new context will recognize all the classes specified, but it will also recognize any classes that are directly/indirectly referenced statically from the specified classes. Subclasses of referenced classes nor \u003ctt\u003e\u0026#64;XmlTransient\u003c/tt\u003e referenced classes are not registered with JAXBContext. For example, in the following Java code, if you do \u003ctt\u003enewInstance(Foo.class)\u003c/tt\u003e, the newly created  {@link JAXBContext}will recognize both \u003ctt\u003eFoo\u003c/tt\u003e and \u003ctt\u003eBar\u003c/tt\u003e, but not \u003ctt\u003eZot\u003c/tt\u003e or \u003ctt\u003eFooBar\u003c/tt\u003e: \u003cpre\u003e class Foo { \u0026#64;XmlTransient FooBar c; Bar b; } class Bar { int x; } class Zot extends Bar { int y; } class FooBar { } \u003c/pre\u003e Therefore, a typical client application only needs to specify the top-level classes, but it needs to be careful. \u003cp\u003e Note that for each java package registered with JAXBContext, when the optional package annotations exist, they must be processed. (see JLS, Section 7.4.1 \"Named Packages\"). \u003cp\u003e The steps involved in discovering the JAXB implementation is discussed in the class javadoc.\n * @param classesToBeBound list of java classes to be recognized by the new  {@link JAXBContext}. Can be empty, in which case a  {@link JAXBContext} that only knows aboutspec-defined classes will be returned.\n * @return A new instance of a \u003ctt\u003eJAXBContext\u003c/tt\u003e. Always non-null valid object.\n * @throws JAXBException if an error was encountered while creating the \u003ctt\u003eJAXBContext\u003c/tt\u003e, such as (but not limited to): \u003col\u003e \u003cli\u003eNo JAXB implementation was discovered \u003cli\u003eClasses use JAXB annotations incorrectly \u003cli\u003eClasses have colliding annotations (i.e., two classes with the same type name) \u003cli\u003eThe JAXB implementation was unable to locate provider-specific out-of-band information (such as additional files generated at the development time.) \u003c/ol\u003e\n * @throws IllegalArgumentException if the parameter contains  {@code null} (i.e., {@code newInstance(null);})\n * @since JAXB2.0\n */\n","tf":{"freq":{"need":3,"client":2,"foo":6,"javadoc":1,"type":1,"collid":1,"must":2,"specifi":3,"referenc":3,"zot":2,"time":1,"band":1,"level":1,"file":1,"care":1,"incorrect":1,"recogn":5,"option":1,"follow":1,"argument":1,"limit":1,"except":2,"creat":2,"alway":1,"xml":2,"involv":1,"provid":1,"non":1,"instanc":5,"inform":1,"newli":1,"discov":2,"obtain":1,"discuss":1,"contain":1,"subclass":1,"will":4,"bar":7,"valid":1,"defin":1,"aboutspec":1,"link":3,"typic":1,"use":1,"object":2,"therefor":1,"applic":2,"indirect":1,"annot":3,"name":2,"regist":2,"develop":1,"exist":1,"note":1,"top":1,"direct":1,"addit":1,"locat":1,"error":1,"paramet":1,"suppli":1,"list":2,"illeg":1,"know":1,"section":1,"empti":1,"unabl":1,"process":1,"two":1,"specif":1,"encount":1,"pre":2,"generat":1,"exampl":1,"context":10,"java":3,"also":1,"step":1,"bound":1},"maxFreq":10,"totalTerms":135},"loc":4}