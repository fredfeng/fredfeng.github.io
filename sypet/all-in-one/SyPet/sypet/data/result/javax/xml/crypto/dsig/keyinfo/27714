{"id":27714,"className":"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory","methodName":"newRetrievalMethod","signature":"\u003cjavax.xml.crypto.dsig.keyinfo.KeyInfoFactory: javax.xml.crypto.dsig.keyinfo.RetrievalMethod newRetrievalMethod(java.lang.String,java.lang.String,java.util.List)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eRetrievalMethod\u003c/code\u003e from the specified parameters.\n * @param uri the URI that identifies the \u003ccode\u003eKeyInfo\u003c/code\u003e informationto be retrieved\n * @param type a URI that identifies the type of \u003ccode\u003eKeyInfo\u003c/code\u003einformation to be retrieved (may be \u003ccode\u003enull\u003c/code\u003e)\n * @param transforms a list of {@link Transform}s. The list is defensively copied to protect against subsequent modification. May be \u003ccode\u003enull\u003c/code\u003e or empty.\n * @return a \u003ccode\u003eRetrievalMethod\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003euri\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @throws IllegalArgumentException if \u003ccode\u003euri\u003c/code\u003e is not RFC 2396compliant\n * @throws ClassCastException if \u003ccode\u003etransforms\u003c/code\u003e contains anyentries that are not of type  {@link Transform}\n */\n","tf":{"freq":{"link":2,"identifi":2,"type":3,"copi":1,"info":2,"specifi":1,"defens":1,"transform":4,"subsequ":1,"key":2,"argument":1,"may":2,"except":3,"creat":1,"paramet":1,"list":2,"uri":3,"illeg":1,"empti":1,"informationto":1,"inform":1,"cast":1,"anyentri":1,"retriev":5,"contain":1,"compliant":1,"pointer":1,"method":3,"modif":1},"maxFreq":5,"totalTerms":50},"loc":0}