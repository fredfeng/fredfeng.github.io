{"id":26222,"className":"javax.xml.bind.Marshaller","methodName":"marshal","signature":"\u003cjavax.xml.bind.Marshaller: void marshal(java.lang.Object,javax.xml.transform.Result)\u003e","javadoc":"/** \n * Marshal the content tree rooted at \u003ctt\u003ejaxbElement\u003c/tt\u003e into the specified \u003ctt\u003ejavax.xml.transform.Result\u003c/tt\u003e. \u003cp\u003e All JAXB Providers must at least support {@link javax.xml.transform.dom.DOMResult}, {@link javax.xml.transform.sax.SAXResult}, and {@link javax.xml.transform.stream.StreamResult}. It can support other derived classes of \u003ctt\u003eResult\u003c/tt\u003e as well.\n * @param jaxbElement The root of content tree to be marshalled.\n * @param result XML will be sent to this Result\n * @throws JAXBException If any unexpected problem occurs during the marshalling.\n * @throws MarshalException If the  {@link ValidationEventHandler ValidationEventHandler}returns false from its \u003ctt\u003ehandleEvent\u003c/tt\u003e method or the \u003ctt\u003eMarshaller\u003c/tt\u003e is unable to marshal \u003ctt\u003eobj\u003c/tt\u003e (or any object reachable from \u003ctt\u003eobj\u003c/tt\u003e).  See \u003ca href\u003d\"#elementMarshalling\"\u003e Marshalling a JAXB element\u003c/a\u003e.\n * @throws IllegalArgumentException If any of the method parameters are null\n */\n","tf":{"freq":{"fals":1,"valid":2,"result":5,"xresult":1,"stream":2,"unexpect":1,"root":2,"dom":1,"deriv":1,"least":1,"link":4,"object":1,"well":1,"must":1,"mresult":1,"specifi":1,"transform":4,"sent":1,"tree":2,"event":3,"javax":4,"href":1,"marshal":9,"argument":1,"element":4,"except":3,"support":2,"paramet":1,"problem":1,"xml":4,"illeg":1,"provid":1,"handl":1,"unabl":1,"content":2,"will":1,"sax":1,"obj":2,"method":2,"reachabl":1,"jaxb":2,"handler":2,"occur":1},"maxFreq":9,"totalTerms":84},"loc":0}