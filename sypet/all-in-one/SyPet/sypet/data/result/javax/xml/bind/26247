{"id":26247,"className":"javax.xml.bind.JAXBContext","methodName":"newInstance","signature":"\u003cjavax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.ClassLoader)\u003e","javadoc":"/** \n * \u003cp\u003e Obtain a new instance of a \u003ctt\u003eJAXBContext\u003c/tt\u003e class. \u003cp\u003e The client application must supply a context path which is a list of colon (\u0027:\u0027, \\u005Cu003A) separated java package names that contain schema-derived classes and/or fully qualified JAXB-annotated classes. Schema-derived code is registered with the JAXBContext by the ObjectFactory.class generated per package. Alternatively than being listed in the context path, programmer annotated JAXB mapped classes can be listed in a \u003ctt\u003ejaxb.index\u003c/tt\u003e resource file, format described below. Note that a java package can contain both schema-derived classes and user annotated JAXB classes. Additionally, the java package may contain JAXB package annotations  that must be processed. (see JLS, Section 7.4.1 \"Named Packages\"). \u003c/p\u003e \u003cp\u003e Every package listed on the contextPath must meet \u003cb\u003eone or both\u003c/b\u003e of the following conditions otherwise a \u003ctt\u003eJAXBException\u003c/tt\u003e will be thrown: \u003c/p\u003e \u003col\u003e \u003cli\u003eit must contain ObjectFactory.class\u003c/li\u003e \u003cli\u003eit must contain jaxb.index\u003c/li\u003e \u003c/ol\u003e \u003cp\u003e \u003cb\u003eFormat for jaxb.index\u003c/b\u003e \u003cp\u003e The file contains a newline-separated list of class names. Space and tab characters, as well as blank lines, are ignored. The comment character is \u0027#\u0027 (0x23); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8. Classes that are reachable, as defined in  {@link #newInstance(Class...)}, from the listed classes are also registered with JAXBContext. \u003cp\u003e Constraints on class name occuring in a \u003ctt\u003ejaxb.index\u003c/tt\u003e file are: \u003cul\u003e \u003cli\u003eMust not end with \".class\".\u003c/li\u003e \u003cli\u003eClass names are resolved relative to package containing \u003ctt\u003ejaxb.index\u003c/tt\u003e file. Only classes occuring directly in package containing \u003ctt\u003ejaxb.index\u003c/tt\u003e file are allowed.\u003c/li\u003e \u003cli\u003eFully qualified class names are not allowed. A qualified class name,relative to current package, is only allowed to specify a nested or inner class.\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e To maintain compatibility with JAXB 1.0 schema to java interface/implementation binding, enabled by schema customization \u003ctt\u003e\u0026lt;jaxb:globalBindings valueClass\u003d\"false\"\u003e\u003c/tt\u003e, the JAXB provider will ensure that each package on the context path has a \u003ctt\u003ejaxb.properties\u003c/tt\u003e file which contains a value for the \u003ctt\u003ejavax.xml.bind.context.factory\u003c/tt\u003e property and that all values resolve to the same provider.  This requirement does not apply to JAXB annotated classes. \u003cp\u003e If there are any global XML element name collisions across the various packages listed on the \u003ctt\u003econtextPath\u003c/tt\u003e, a \u003ctt\u003eJAXBException\u003c/tt\u003e will be thrown. \u003cp\u003e Mixing generated interface/impl bindings from multiple JAXB Providers in the same context path may result in a \u003ctt\u003eJAXBException\u003c/tt\u003e being thrown. \u003cp\u003e The steps involved in discovering the JAXB implementation is discussed in the class javadoc.\n * @param contextPath list of java package names that contain schemaderived class and/or java to schema (JAXB-annotated) mapped classes\n * @param classLoader This class loader will be used to locate the implementation classes.\n * @return a new instance of a \u003ctt\u003eJAXBContext\u003c/tt\u003e\n * @throws JAXBException if an error was encountered while creating the\u003ctt\u003eJAXBContext\u003c/tt\u003e such as \u003col\u003e \u003cli\u003efailure to locate either ObjectFactory.class or jaxb.index in the packages\u003c/li\u003e \u003cli\u003ean ambiguity among global elements contained in the contextPath\u003c/li\u003e \u003cli\u003efailure to locate a value for the context factory provider property\u003c/li\u003e \u003cli\u003emixing schema derived packages from different providers on the same contextPath\u003c/li\u003e \u003c/ol\u003e\n */\n","tf":{"freq":{"deriv":4,"maintain":1,"tab":1,"javadoc":1,"specifi":1,"schema":7,"among":1,"file":7,"relat":2,"collis":1,"element":2,"ignor":2,"multipl":1,"charact":4,"loader":2,"programm":1,"describ":1,"resolv":2,"involv":1,"meet":1,"provid":5,"instanc":4,"obtain":1,"encod":1,"discuss":1,"will":4,"schemaderiv":1,"comment":2,"link":1,"use":1,"line":2,"constraint":1,"space":1,"across":1,"applic":1,"ensur":1,"annot":6,"factori":5,"map":2,"current":1,"note":1,"end":1,"direct":1,"addit":1,"may":2,"blank":1,"failur":2,"fulli":2,"mix":2,"process":1,"differ":1,"either":1,"per":1,"encount":1,"reachabl":1,"fals":1,"client":1,"inner":1,"must":7,"requir":1,"altern":1,"javax":1,"everi":1,"follow":2,"custom":1,"thrown":3,"except":4,"index":7,"creat":1,"enabl":1,"global":3,"xml":1,"format":2,"discov":1,"appli":1,"separ":2,"contain":11,"properti":3,"jaxb":9,"compat":1,"otherwis":1,"result":1,"defin":1,"allow":3,"one":1,"colon":1,"object":3,"newlin":1,"well":1,"ambigu":1,"resourc":1,"name":9,"path":9,"regist":2,"valu":4,"various":1,"condit":1,"locat":3,"error":1,"impl":1,"nest":1,"list":8,"suppli":1,"section":1,"generat":2,"context":16,"java":6,"user":1,"first":1,"also":1,"bind":4,"step":1,"qualifi":3,"occur":2},"maxFreq":16,"totalTerms":265},"loc":4}