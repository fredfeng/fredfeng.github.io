{"id":26943,"className":"javax.xml.transform.TransformerFactory","methodName":"newInstance","signature":"\u003cjavax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()\u003e","javadoc":"/** \n * \u003cp\u003eObtain a new instance of a \u003ccode\u003eTransformerFactory\u003c/code\u003e. This static method creates a new factory instance This method uses the following ordered lookup procedure to determine the \u003ccode\u003eTransformerFactory\u003c/code\u003e implementation class to load:\u003c/p\u003e \u003cul\u003e \u003cli\u003e Use the \u003ccode\u003ejavax.xml.transform.TransformerFactory\u003c/code\u003e system property. \u003c/li\u003e \u003cli\u003e Use the properties file \"lib/jaxp.properties\" in the JRE directory. This configuration file is in standard \u003ccode\u003ejava.util.Properties \u003c/code\u003e format and contains the fully qualified name of the implementation class with the key being the system property defined above. The jaxp.properties file is read only once by the JAXP implementation and it\u0027s values are then cached for future use.  If the file does not exist when the first attempt is made to read from it, no further attempts are made to check for its existence.  It is not possible to change the value of any property in jaxp.properties after it has been read for the first time. \u003c/li\u003e \u003cli\u003e Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API will look for a classname in the file \u003ccode\u003eMETA-INF/services/javax.xml.transform.TransformerFactory\u003c/code\u003e in jars available to the runtime. \u003c/li\u003e \u003cli\u003e Platform default \u003ccode\u003eTransformerFactory\u003c/code\u003e instance. \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eOnce an application has obtained a reference to a \u003ccode\u003e TransformerFactory\u003c/code\u003e it can use the factory to configure and obtain transformer instances.\u003c/p\u003e\n * @return new TransformerFactory instance, never null.\n * @throws TransformerFactoryConfigurationError Thrown if the implementationis not available or cannot be instantiated.\n */\n","tf":{"freq":{"detail":1,"instanti":1,"servic":3,"possibl":1,"lookup":1,"time":1,"refer":1,"jar":1,"file":5,"javax":2,"key":1,"follow":1,"platform":1,"thrown":1,"creat":1,"runtim":1,"xml":2,"avail":3,"format":1,"procedur":1,"instanc":6,"configur":3,"system":2,"obtain":3,"jaxp":3,"determin":2,"contain":1,"will":1,"classnam":2,"load":1,"properti":8,"util":1,"attempt":2,"defin":1,"directori":1,"made":2,"use":6,"applic":1,"transform":11,"order":1,"factori":10,"name":1,"read":3,"valu":2,"exist":2,"look":1,"implementationi":1,"futur":1,"error":1,"standard":1,"check":1,"fulli":1,"cach":1,"never":1,"specif":1,"lib":1,"java":1,"method":2,"chang":1,"first":2,"qualifi":1},"maxFreq":11,"totalTerms":124},"loc":13}