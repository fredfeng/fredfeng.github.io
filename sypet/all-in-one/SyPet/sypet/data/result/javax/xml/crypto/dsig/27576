{"id":27576,"className":"javax.xml.crypto.dsig.XMLSignature","methodName":"validate","signature":"\u003cjavax.xml.crypto.dsig.XMLSignature: boolean validate(javax.xml.crypto.dsig.XMLValidateContext)\u003e","javadoc":"/** \n * Validates the signature according to the \u003ca href\u003d\"http://www.w3.org/TR/xmldsig-core/#sec-CoreValidation\"\u003e core validation processing rules\u003c/a\u003e. This method validates the signature using the existing state, it does not unmarshal and reinitialize the contents of the \u003ccode\u003eXMLSignature\u003c/code\u003e using the location information specified in the context. \u003cp\u003eThis method only validates the signature the first time it is invoked. On subsequent invocations, it returns a cached result.\n * @param validateContext the validating context\n * @return \u003ccode\u003etrue\u003c/code\u003e if the signature passed core validation,otherwise \u003ccode\u003efalse\u003c/code\u003e\n * @throws ClassCastException if the type of \u003ccode\u003evalidateContext\u003c/code\u003eis not compatible with this \u003ccode\u003eXMLSignature\u003c/code\u003e\n * @throws NullPointerException if \u003ccode\u003evalidateContext\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e\n * @throws XMLSignatureException if an unexpected error occurs duringvalidation that prevented the validation operation from completing\n */\n","tf":{"freq":{"fals":1,"otherwis":1,"result":1,"valid":12,"unexpect":1,"www":1,"state":1,"use":2,"type":1,"org":1,"signatur":4,"specifi":1,"xmldsig":1,"time":1,"oper":1,"rule":1,"unmarsh":1,"subsequ":1,"href":1,"exist":1,"complet":1,"except":3,"locat":1,"error":1,"duringvalid":1,"invok":1,"true":1,"prevent":1,"cach":1,"accord":1,"reiniti":1,"invoc":1,"pass":1,"process":1,"content":1,"inform":1,"cast":1,"http":1,"sec":1,"context":5,"pointer":1,"lsignatur":3,"core":4,"method":2,"first":1,"occur":1,"compat":1},"maxFreq":12,"totalTerms":74},"loc":0}