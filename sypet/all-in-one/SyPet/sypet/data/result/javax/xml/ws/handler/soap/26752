{"id":26752,"className":"javax.xml.ws.handler.soap.SOAPMessageContext","methodName":"getHeaders","signature":"\u003cjavax.xml.ws.handler.soap.SOAPMessageContext: java.lang.Object[] getHeaders(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,boolean)\u003e","javadoc":"/** \n * Gets headers that have a particular qualified name from the message in the message context. Note that a SOAP message can contain multiple headers with the same qualified name.\n * @param header The XML qualified name of the SOAP header(s).\n * @param context The JAXBContext that should be used to unmarshall theheader\n * @param allRoles If \u003ccode\u003etrue\u003c/code\u003e then returns headers for all SOAProles, if \u003ccode\u003efalse\u003c/code\u003e then only returns headers targetted at the roles currently being played by this SOAP node, see \u003ccode\u003egetRoles\u003c/code\u003e.\n * @return An array of unmarshalled headers; returns an empty array if nomessage is present in this message context or no headers match the supplied qualified name.\n * @throws WebServiceException If an error occurs when using the supplied\u003ccode\u003eJAXBContext\u003c/code\u003e to unmarshall. The cause of the \u003ccode\u003eWebServiceException\u003c/code\u003e is the original \u003ccode\u003eJAXBException\u003c/code\u003e.\n */\n","tf":{"freq":{"thehead":1,"fals":1,"servic":2,"use":2,"particular":1,"unmarshal":3,"name":4,"current":1,"role":3,"note":1,"except":3,"error":1,"multipl":1,"messag":4,"origin":1,"play":1,"true":1,"web":2,"suppli":2,"header":9,"empti":1,"present":1,"node":1,"caus":1,"contain":1,"context":5,"target":1,"match":1,"aprol":1,"qualifi":4,"occur":1,"array":2,"nomessag":1},"maxFreq":9,"totalTerms":65},"loc":0}