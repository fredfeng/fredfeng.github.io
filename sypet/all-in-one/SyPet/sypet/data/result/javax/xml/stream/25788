{"id":25788,"className":"javax.xml.stream.XMLStreamReader","methodName":"next","signature":"\u003cjavax.xml.stream.XMLStreamReader: int next()\u003e","javadoc":"/** \n * Get next parsing event - a processor may return all contiguous character data in a single chunk, or it may split it into several chunks. If the property javax.xml.stream.isCoalescing is set to true element content must be coalesced and only one CHARACTERS event must be returned for contiguous element content or CDATA Sections. By default entity references must be expanded and reported transparently to the application. An exception will be thrown if an entity reference cannot be expanded. If element content is empty (i.e. content is \"\") then no CHARACTERS event will be reported. \u003cp\u003eGiven the following XML:\u003cbr\u003e \u0026lt;foo\u003e\u0026lt;!--description--\u003econtent text\u0026lt;![CDATA[\u0026lt;greeting\u003eHello\u0026lt;/greeting\u003e]]\u003eother content\u0026lt;/foo\u003e\u003cbr\u003e The behavior of calling next() when being on foo will be:\u003cbr\u003e 1- the comment (COMMENT)\u003cbr\u003e 2- then the characters section (CHARACTERS)\u003cbr\u003e 3- then the CDATA section (another CHARACTERS)\u003cbr\u003e 4- then the next characters section (another CHARACTERS)\u003cbr\u003e 5- then the END_ELEMENT\u003cbr\u003e \u003cp\u003e\u003cb\u003eNOTE:\u003c/b\u003e empty element (such as \u0026lt;tag/\u003e) will be reported with  two separate events: START_ELEMENT, END_ELEMENT - This preserves parsing equivalency of empty element to \u0026lt;tag\u003e\u0026lt;/tag\u003e. This method will throw an IllegalStateException if it is called after hasNext() returns false.\n * @see javax.xml.stream.events.XMLEvent\n * @return the integer code corresponding to the current parse event\n * @throws NoSuchElementException if this is called when hasNext() returns false\n * @throws XMLStreamException  if there is an error processing the underlying XML source\n */\n","tf":{"freq":{"fals":2,"chunk":2,"singl":1,"tag":3,"foo":3,"must":3,"given":1,"equival":1,"refer":2,"javax":2,"event":6,"report":3,"expand":2,"processor":1,"follow":1,"element":6,"except":4,"thrown":1,"text":1,"charact":3,"descript":1,"preserv":1,"xml":2,"content":6,"coalesc":2,"entiti":2,"separ":1,"will":5,"sourc":1,"split":1,"properti":1,"comment":1,"call":3,"stream":2,"correspond":1,"behavior":1,"one":1,"next":6,"state":1,"data":1,"anoth":2,"applic":1,"transpar":1,"lstream":1,"current":1,"levent":1,"may":2,"error":1,"true":1,"contigu":2,"greet":2,"illeg":1,"section":4,"sever":1,"empti":3,"process":1,"hello":1,"two":1,"method":1,"integ":1,"pars":3},"maxFreq":6,"totalTerms":120},"loc":0}