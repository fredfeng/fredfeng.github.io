{"id":26279,"className":"javax.xml.bind.Unmarshaller","methodName":"unmarshal","signature":"\u003cjavax.xml.bind.Unmarshaller: java.lang.Object unmarshal(javax.xml.transform.Source)\u003e","javadoc":"/** \n * Unmarshal XML data from the specified XML Source and return the resulting content tree. \u003cp\u003e Implements \u003ca href\u003d\"#unmarshalGlobal\"\u003eUnmarshal Global Root Element\u003c/a\u003e. \u003cp\u003e \u003ca name\u003d\"saxParserPlugable\"\u003e\u003c/a\u003e \u003cb\u003eSAX 2.0 Parser Pluggability\u003c/b\u003e \u003cp\u003e A client application can choose not to use the default parser mechanism supplied with their JAXB provider.  Any SAX 2.0 compliant parser can be substituted for the JAXB provider\u0027s default mechanism.  To do so, the client application must properly configure a \u003ctt\u003eSAXSource\u003c/tt\u003e containing an \u003ctt\u003eXMLReader\u003c/tt\u003e implemented by the SAX 2.0 parser provider.  If the \u003ctt\u003eXMLReader\u003c/tt\u003e has an \u003ctt\u003eorg.xml.sax.ErrorHandler\u003c/tt\u003e registered on it, it will be replaced by the JAXB Provider so that validation errors can be reported via the \u003ctt\u003eValidationEventHandler\u003c/tt\u003e mechanism of JAXB.  If the \u003ctt\u003eSAXSource\u003c/tt\u003e does not contain an \u003ctt\u003eXMLReader\u003c/tt\u003e, then the JAXB provider\u0027s default parser mechanism will be used. \u003cp\u003e This parser replacement mechanism can also be used to replace the JAXB provider\u0027s unmarshal-time validation engine.  The client application must properly configure their SAX 2.0 compliant parser to perform validation (as shown in the example above).  Any \u003ctt\u003eSAXParserExceptions \u003c/tt\u003e encountered by the parser during the unmarshal operation will be processed by the JAXB provider and converted into JAXB \u003ctt\u003eValidationEvent\u003c/tt\u003e objects which will be reported back to the client via the \u003ctt\u003eValidationEventHandler\u003c/tt\u003e registered with the \u003ctt\u003eUnmarshaller\u003c/tt\u003e.  \u003ci\u003eNote:\u003c/i\u003e specifying a substitute validating SAX 2.0 parser for unmarshalling does not necessarily replace the validation engine used by the JAXB provider for performing on-demand validation. \u003cp\u003e The only way for a client application to specify an alternate parser mechanism to be used during unmarshal is via the \u003ctt\u003eunmarshal(SAXSource)\u003c/tt\u003e API.  All other forms of the unmarshal method (File, URL, Node, etc) will use the JAXB provider\u0027s default parser and validator mechanisms.\n * @param source the XML Source to unmarshal XML data from (providers areonly required to support SAXSource, DOMSource, and StreamSource)\n * @return the newly created root object of the java content tree\n * @throws JAXBException If any unexpected errors occur while unmarshalling\n * @throws UnmarshalException If the  {@link ValidationEventHandler ValidationEventHandler}returns false from its \u003ctt\u003ehandleEvent\u003c/tt\u003e method or the \u003ctt\u003eUnmarshaller\u003c/tt\u003e is unable to perform the XML to Java binding.  See \u003ca href\u003d\"#unmarshalEx\"\u003eUnmarshalling XML Data\u003c/a\u003e\n * @throws IllegalArgumentException If the Source parameter is null\n * @see #unmarshal(javax.xml.transform.Source,Class)\n */\n","tf":{"freq":{"fals":1,"via":3,"client":5,"root":2,"etc":1,"pluggabl":1,"perform":3,"unmarshal":5,"substitut":2,"must":2,"specifi":3,"time":1,"requir":1,"altern":1,"tree":2,"oper":1,"javax":1,"file":1,"event":6,"report":2,"proper":2,"href":2,"demand":1,"argument":1,"element":1,"areon":1,"except":4,"support":1,"form":1,"creat":1,"global":2,"shown":1,"xml":2,"provid":10,"content":2,"newli":1,"node":1,"configur":2,"contain":2,"compliant":2,"will":5,"sax":2,"sourc":6,"msourc":1,"parser":12,"lreader":3,"result":1,"valid":12,"stream":1,"unexpect":1,"xsourc":4,"xparser":1,"link":1,"data":3,"engin":2,"way":1,"convert":1,"use":6,"object":2,"org":1,"applic":4,"transform":1,"unmarsh":13,"name":1,"choos":1,"regist":2,"note":1,"plugabl":1,"error":3,"paramet":1,"back":1,"suppli":1,"illeg":1,"handl":1,"unabl":1,"process":1,"encount":1,"mechan":7,"replac":4,"exampl":1,"java":2,"method":2,"necessarili":1,"bind":1,"also":1,"occur":1,"handler":5},"maxFreq":13,"totalTerms":210},"loc":0}