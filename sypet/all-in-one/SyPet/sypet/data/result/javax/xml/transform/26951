{"id":26951,"className":"javax.xml.transform.TransformerFactory","methodName":"setFeature","signature":"\u003cjavax.xml.transform.TransformerFactory: void setFeature(java.lang.String,boolean)\u003e","javadoc":"/** \n * \u003cp\u003eSet a feature for this \u003ccode\u003eTransformerFactory\u003c/code\u003e and \u003ccode\u003eTransformer\u003c/code\u003es or \u003ccode\u003eTemplate\u003c/code\u003es created by this factory.\u003c/p\u003e \u003cp\u003e Feature names are fully qualified  {@link java.net.URI}s. Implementations may define their own features. An  {@link TransformerConfigurationException} is thrown if this \u003ccode\u003eTransformerFactory\u003c/code\u003e or the\u003ccode\u003eTransformer\u003c/code\u003es or \u003ccode\u003eTemplate\u003c/code\u003es it creates cannot support the feature. It is possible for an \u003ccode\u003eTransformerFactory\u003c/code\u003e to expose a feature value but be unable to change its state. \u003c/p\u003e \u003cp\u003eAll implementations are required to support the  {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.When the feature is:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003ccode\u003etrue\u003c/code\u003e: the implementation will limit XML processing to conform to implementation limits and behave in a secure fashion as defined by the implementation. Examples include resolving user defined style sheets and functions. If XML processing is limited for security reasons, it will be reported via a call to the registered {@link ErrorListener#fatalError(TransformerException exception)}. See  {@link #setErrorListener(ErrorListener listener)}. \u003c/li\u003e \u003cli\u003e \u003ccode\u003efalse\u003c/code\u003e: the implementation will processing XML according to the XML specifications without regard to possible implementation limits. \u003c/li\u003e \u003c/ul\u003e\n * @param name Feature name.\n * @param value Is feature state \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n * @throws TransformerConfigurationException if this \u003ccode\u003eTransformerFactory\u003c/code\u003eor the \u003ccode\u003eTransformer\u003c/code\u003es or \u003ccode\u003eTemplate\u003c/code\u003es it creates cannot support this feature.\n * @throws NullPointerException If the \u003ccode\u003ename\u003c/code\u003e parameter is null.\n */\n","tf":{"freq":{"fals":2,"via":1,"templat":3,"reason":1,"behav":1,"possibl":2,"function":1,"requir":1,"javax":1,"report":1,"limit":4,"thrown":1,"except":5,"support":3,"creat":3,"fatal":1,"resolv":1,"regard":1,"xml":1,"without":1,"configur":2,"will":3,"pointer":1,"lconstant":1,"defin":3,"call":1,"fashion":1,"link":5,"state":2,"net":1,"transform":10,"style":1,"factori":5,"name":4,"regist":1,"valu":2,"expos":1,"listen":4,"sheet":1,"may":1,"includ":1,"error":4,"paramet":1,"true":2,"fulli":1,"accord":1,"unabl":1,"process":3,"specif":1,"secur":2,"conform":1,"featur":11,"exampl":1,"java":1,"chang":1,"user":1,"qualifi":1},"maxFreq":11,"totalTerms":119},"loc":0}