{"id":26622,"className":"javax.xml.validation.SchemaFactory","methodName":"setFeature","signature":"\u003cjavax.xml.validation.SchemaFactory: void setFeature(java.lang.String,boolean)\u003e","javadoc":"/** \n * \u003cp\u003eSet a feature for this \u003ccode\u003eSchemaFactory\u003c/code\u003e, {@link Schema}s created by this factory, and by extension, {@link Validator}s and  {@link ValidatorHandler}s created by those  {@link Schema}s. \u003c/p\u003e \u003cp\u003eImplementors and developers should pay particular attention to how the special  {@link Schema} object returned by {@link #newSchema()} is processed. In some cases, for example, when the\u003ccode\u003eSchemaFactory\u003c/code\u003e and the class actually loading the schema come from different implementations, it may not be possible for \u003ccode\u003eSchemaFactory\u003c/code\u003e features to be inherited automatically. Developers should make sure that features, such as secure processing, are explicitly set in both places.\u003c/p\u003e \u003cp\u003eThe feature name is any fully-qualified URI. It is possible for a  {@link SchemaFactory} to expose a feature value butto be unable to change the current value.\u003c/p\u003e \u003cp\u003eAll implementations are required to support the  {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.When the feature is:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003ccode\u003etrue\u003c/code\u003e: the implementation will limit XML processing to conform to implementation limits. Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources. If XML processing is limited for security reasons, it will be reported via a call to the registered {@link ErrorHandler#fatalError(SAXParseException exception)}. See  {@link #setErrorHandler(ErrorHandler errorHandler)}. \u003c/li\u003e \u003cli\u003e \u003ccode\u003efalse\u003c/code\u003e: the implementation will processing XML according to the XML specifications without regard to possible implementation limits. \u003c/li\u003e \u003c/ul\u003e\n * @param name The feature name, which is a non-null fully-qualified URI.\n * @param value The requested value of the feature (true or false).\n * @throws SAXNotRecognizedException If the featurevalue can\u0027t be assigned or retrieved.\n * @throws SAXNotSupportedException When the{@link SchemaFactory} recognizes the feature name butcannot set the requested value.\n * @throws NullPointerException If \u003ccode\u003ename\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see #getFeature(String)\n */\n","tf":{"freq":{"fals":2,"assign":1,"via":1,"reason":1,"possibl":3,"particular":1,"amount":1,"eniti":1,"schema":11,"requir":1,"javax":1,"request":2,"report":1,"place":1,"recogn":2,"butto":1,"implementor":1,"sure":1,"limit":5,"except":5,"support":2,"creat":2,"fatal":1,"expans":1,"regard":1,"xml":1,"without":1,"non":1,"explicit":1,"xpars":1,"attent":1,"will":3,"pointer":1,"load":1,"lconstant":1,"make":1,"call":1,"valid":2,"link":11,"object":1,"automat":1,"consum":1,"resourc":1,"factori":6,"extens":1,"name":5,"current":1,"regist":1,"pay":1,"expos":1,"valu":5,"develop":2,"featurevalu":1,"may":1,"includ":1,"error":5,"come":1,"true":2,"fulli":2,"accord":1,"process":5,"unabl":1,"differ":1,"specif":1,"secur":2,"conform":1,"retriev":1,"larg":1,"string":1,"exampl":2,"featur":12,"actual":1,"butcannot":1,"special":1,"construct":1,"chang":1,"qualifi":2,"xnot":2,"handler":5},"maxFreq":12,"totalTerms":160},"loc":7}