{"id":27406,"className":"javax.xml.soap.SOAPElement","methodName":"getChildElements","signature":"\u003cjavax.xml.soap.SOAPElement: java.util.Iterator getChildElements()\u003e","javadoc":"/** \n * Returns an \u003ccode\u003eIterator\u003c/code\u003e over all the immediate child {@link Node}s of this element. This includes \u003ccode\u003ejavax.xml.soap.Text\u003c/code\u003e objects as well as \u003ccode\u003eSOAPElement\u003c/code\u003e objects. \u003cp\u003e Calling this method may cause child \u003ccode\u003eElement\u003c/code\u003e, \u003ccode\u003eSOAPElement\u003c/code\u003e and \u003ccode\u003eorg.w3c.dom.Text\u003c/code\u003e nodes to be replaced by \u003ccode\u003eSOAPElement\u003c/code\u003e, \u003ccode\u003eSOAPHeaderElement\u003c/code\u003e, \u003ccode\u003eSOAPBodyElement\u003c/code\u003e or \u003ccode\u003ejavax.xml.soap.Text\u003c/code\u003e nodes as appropriate for the type of this parent node. As a result the calling application must treat any existing references to these child nodes that have been obtained through DOM APIs as invalid and either discard them or refresh them with the values returned by this \u003ccode\u003eIterator\u003c/code\u003e. This behavior can be avoided by calling the equivalent DOM APIs. See {@link \u003ca HREF\u003d\"package-summary.html#package_description\"\u003ejavax.xml.soap\u003ca\u003e}for more details.\n * @return an iterator with the content of this \u003ccode\u003eSOAPElement\u003c/code\u003eobject\n */\n","tf":{"freq":{"result":1,"call":3,"detail":1,"dom":1,"behavior":1,"link":2,"object":3,"well":1,"discard":1,"org":1,"type":1,"must":1,"applic":1,"child":4,"avoid":1,"invalid":1,"equival":1,"refer":1,"javax":3,"valu":1,"immedi":1,"refresh":1,"exist":1,"element":9,"text":3,"may":1,"includ":1,"descript":1,"parent":1,"xml":3,"header":1,"content":1,"either":1,"obtain":1,"node":5,"bodi":1,"summari":1,"caus":1,"appropri":1,"replac":1,"html":1,"method":1,"soap":3,"iter":3,"treat":1},"maxFreq":9,"totalTerms":75},"loc":0}