{"id":26280,"className":"javax.xml.bind.Unmarshaller","methodName":"unmarshal","signature":"\u003cjavax.xml.bind.Unmarshaller: javax.xml.bind.JAXBElement\u003cT\u003e unmarshal(javax.xml.transform.Source,java.lang.Class)\u003e","javadoc":"/** \n * Unmarshal XML data from the specified XML Source by \u003ctt\u003edeclaredType\u003c/tt\u003e and return the resulting content tree. \u003cp\u003e Implements \u003ca href\u003d\"#unmarshalByDeclaredType\"\u003eUnmarshal by Declared Type\u003c/a\u003e \u003cp\u003e See \u003ca href\u003d\"#saxParserPlugable\"\u003eSAX 2.0 Parser Pluggability\u003c/a\u003e\n * @param source the XML Source to unmarshal XML data from (providers areonly required to support SAXSource, DOMSource, and StreamSource)\n * @param declaredType appropriate JAXB mapped class to hold \u003ctt\u003esource\u003c/tt\u003e\u0027s xml root element\n * @return Java content rooted by \u003ca href\u003d\"#unmarshalDeclaredTypeReturn\"\u003eJAXB Element\u003c/a\u003e\n * @throws JAXBException If any unexpected errors occur while unmarshalling\n * @throws UnmarshalException If the  {@link ValidationEventHandler ValidationEventHandler}returns false from its \u003ctt\u003ehandleEvent\u003c/tt\u003e method or the \u003ctt\u003eUnmarshaller\u003c/tt\u003e is unable to perform the XML to Java binding.  See \u003ca href\u003d\"#unmarshalEx\"\u003eUnmarshalling XML Data\u003c/a\u003e\n * @throws IllegalArgumentException If any parameter is null\n * @since JAXB2.0\n */\n","tf":{"freq":{"fals":1,"valid":2,"result":1,"stream":1,"unexpect":1,"xsourc":1,"root":2,"link":1,"pluggabl":1,"data":3,"perform":1,"type":5,"unmarshal":3,"specifi":1,"requir":1,"tree":1,"declar":5,"event":3,"unmarsh":8,"map":1,"href":4,"plugabl":1,"argument":1,"element":2,"except":3,"areon":1,"support":1,"error":1,"hold":1,"paramet":1,"xml":1,"illeg":1,"provid":1,"handl":1,"unabl":1,"content":2,"appropri":1,"sax":1,"method":1,"java":2,"sourc":5,"msourc":1,"bind":1,"parser":2,"handler":2,"occur":1},"maxFreq":8,"totalTerms":83},"loc":0}