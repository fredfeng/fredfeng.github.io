{"id":27615,"className":"javax.xml.crypto.dsig.XMLSignatureFactory","methodName":"newSignedInfo","signature":"\u003cjavax.xml.crypto.dsig.XMLSignatureFactory: javax.xml.crypto.dsig.SignedInfo newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List,java.lang.String)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eSignedInfo\u003c/code\u003e with the specified parameters.\n * @param cm the canonicalization method\n * @param sm the signature method\n * @param references a list of one or more {@link Reference}s. The list is defensively copied to protect against subsequent modification.\n * @param id the id (may be \u003ccode\u003enull\u003c/code\u003e)\n * @return a \u003ccode\u003eSignedInfo\u003c/code\u003e\n * @throws ClassCastException if any of the references are not oftype \u003ccode\u003eReference\u003c/code\u003e\n * @throws IllegalArgumentException if \u003ccode\u003ereferences\u003c/code\u003e is empty\n * @throws NullPointerException if \u003ccode\u003ecm\u003c/code\u003e, \u003ccode\u003esm\u003c/code\u003e, or\u003ccode\u003ereferences\u003c/code\u003e are \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"argument":1,"oftyp":1,"except":3,"may":1,"creat":1,"canonic":1,"one":1,"link":1,"paramet":1,"list":2,"illeg":1,"signatur":1,"copi":1,"empti":1,"defens":1,"info":3,"specifi":1,"sign":3,"cast":1,"refer":6,"pointer":1,"method":2,"subsequ":1,"modif":1},"maxFreq":6,"totalTerms":37},"loc":0}