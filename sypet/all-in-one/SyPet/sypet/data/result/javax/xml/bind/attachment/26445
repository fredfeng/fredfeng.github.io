{"id":26445,"className":"javax.xml.bind.attachment.AttachmentMarshaller","methodName":"addMtomAttachment","signature":"\u003cjavax.xml.bind.attachment.AttachmentMarshaller: java.lang.String addMtomAttachment(javax.activation.DataHandler,java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * \u003cp\u003eConsider MIME content \u003ccode\u003edata\u003c/code\u003e for optimized binary storage as an attachment. \u003cp\u003e This method is called by JAXB marshal process when  {@link #isXOPPackage()} is\u003ccode\u003etrue\u003c/code\u003e, for each element whose datatype is \"base64Binary\", as described in Step 3 in \u003ca href\u003d\"http://www.w3.org/TR/2005/REC-xop10-20050125/#creating_xop_packages\"\u003eCreating XOP Packages\u003c/a\u003e. \u003cp\u003e The method implementor determines whether \u003ccode\u003edata\u003c/code\u003e shall be attached separately or inlined as base64Binary data. If the implementation chooses to optimize the storage of the binary data as a MIME part, it is responsible for attaching \u003ccode\u003edata\u003c/code\u003e to the MIME-based package, and then assigning an unique content-id, cid, that identifies the MIME part within the MIME message. This method returns the cid, which enables the JAXB marshaller to marshal a XOP element that refers to that cid in place of marshalling the binary data. When the method returns null, the JAXB marshaller inlines \u003ccode\u003edata\u003c/code\u003e as base64binary data. \u003cp\u003e The caller of this method is required to meet the following constraint. If the element infoset item containing \u003ccode\u003edata\u003c/code\u003e has the attribute \u003ccode\u003exmime:contentType\u003c/code\u003e or if the JAXB property/field representing \u003ccode\u003edata\u003c/code\u003eis annotated with a known MIME type, \u003ccode\u003edata.getContentType()\u003c/code\u003e should be set to that MIME type. \u003cp\u003e The \u003ccode\u003eelementNamespace\u003c/code\u003e and \u003ccode\u003eelementLocalName\u003c/code\u003e parameters provide the context that contains the binary data. This information could be used by the MIME-based package processor to determine if the binary data should be inlined or optimized as an attachment.\n * @param data represents the data to be attached. Must be non-null.\n * @param elementNamespace the namespace URI of the element that encloses the base64Binary data. Can be empty but never null.\n * @param elementLocalName The local name of the element. Always a non-null valid string.\n * @return a valid content-id URI (see \u003ca href\u003d\"http://www.w3.org/TR/xop10/#RFC2387\"\u003eRFC 2387\u003c/a\u003e) that identifies the attachment containing \u003ccode\u003edata\u003c/code\u003e. Otherwise, null if the attachment was not added and should instead be inlined in the message.\n * @see \u003ca href\u003d\"http://www.w3.org/TR/2005/REC-xop10-20050125/\"\u003eXML-binary Optimized Packaging\u003c/a\u003e\n * @see \u003ca href\u003d\"http://www.w3.org/TR/xml-media-types/\"\u003eDescribing Media Content of Binary Data in XML\u003c/a\u003e\n */\n","tf":{"freq":{"mtom":1,"assign":1,"type":5,"must":1,"whether":1,"namespac":3,"uniqu":1,"requir":1,"refer":1,"processor":1,"inlin":4,"place":1,"infoset":1,"href":4,"marshal":5,"follow":1,"implementor":1,"element":9,"respons":1,"whose":1,"creat":2,"alway":1,"enabl":1,"describ":2,"xml":1,"meet":1,"provid":1,"cid":3,"non":2,"shall":1,"content":6,"inform":1,"http":4,"separ":1,"enclos":1,"contain":3,"determin":2,"known":1,"properti":1,"media":2,"otherwis":1,"caller":1,"valid":2,"call":1,"binari":11,"link":1,"data":18,"www":4,"use":1,"constraint":1,"identifi":2,"add":1,"org":4,"consid":1,"attribut":1,"annot":1,"name":3,"choos":1,"datatyp":1,"xop":4,"optim":4,"repres":2,"messag":2,"paramet":1,"xmime":1,"true":1,"storag":2,"ppackag":1,"empti":1,"field":1,"process":1,"never":1,"attach":8,"string":1,"item":1,"instead":1,"context":1,"base":6,"ad":1,"method":5,"local":3,"within":1,"part":2,"step":1},"maxFreq":18,"totalTerms":190},"loc":0}