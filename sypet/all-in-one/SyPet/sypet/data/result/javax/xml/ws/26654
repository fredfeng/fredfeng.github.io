{"id":26654,"className":"javax.xml.ws.Dispatch","methodName":"invokeAsync","signature":"\u003cjavax.xml.ws.Dispatch: javax.xml.ws.Response\u003cT\u003e invokeAsync(T)\u003e","javadoc":"/** \n * Invoke a service operation asynchronously.  The method returns without waiting for the response to the operation invocation, the results of the operation are obtained by polling the returned \u003ccode\u003eResponse\u003c/code\u003e. \u003cp\u003e The client is responsible for ensuring that the \u003ccode\u003emsg\u003c/code\u003e object when marshalled is formed according to the requirements of the protocol binding in use.\n * @param msg An object that will form the message or payload ofthe message used to invoke the operation.\n * @return The response message or message payload to theoperation invocation.\n * @throws WebServiceException If there is any error in the configuration ofthe \u003ccode\u003eDispatch\u003c/code\u003e instance\n */\n","tf":{"freq":{"result":1,"asynchron":1,"client":1,"servic":2,"theoper":1,"payload":2,"use":2,"wait":1,"object":2,"ensur":1,"poll":1,"requir":1,"oper":4,"ofth":2,"dispatch":1,"marshal":1,"except":1,"protocol":1,"error":1,"respons":4,"form":2,"messag":4,"invok":3,"web":1,"accord":1,"without":1,"msg":2,"invoc":2,"async":1,"instanc":1,"configur":1,"obtain":1,"will":1,"method":1,"bind":1},"maxFreq":4,"totalTerms":54},"loc":0}