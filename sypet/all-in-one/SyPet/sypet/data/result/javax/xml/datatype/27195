{"id":27195,"className":"javax.xml.datatype.XMLGregorianCalendar","methodName":"toGregorianCalendar","signature":"\u003cjavax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar(java.util.TimeZone,java.util.Locale,javax.xml.datatype.XMLGregorianCalendar)\u003e","javadoc":"/** \n * \u003cp\u003eConvert this \u003ccode\u003eXMLGregorianCalendar\u003c/code\u003e along with provided parameters to a  {@link GregorianCalendar} instance.\u003c/p\u003e\u003cp\u003e Since XML Schema 1.0 date/time datetypes has no concept of timezone ids or daylight savings timezone ids, this conversion operation allows the user to explicitly specify one with \u003ccode\u003etimezone\u003c/code\u003e parameter.\u003c/p\u003e \u003cp\u003eTo compute the return value\u0027s \u003ccode\u003eTimeZone\u003c/code\u003e field, \u003cul\u003e \u003cli\u003ewhen parameter \u003ccode\u003etimeZone\u003c/code\u003e is non-null, it is the timezone field.\u003c/li\u003e \u003cli\u003eelse when \u003ccode\u003ethis.getTimezone() !\u003d FIELD_UNDEFINED\u003c/code\u003e, create a \u003ccode\u003ejava.util.TimeZone\u003c/code\u003e with a custom timezone id using the \u003ccode\u003ethis.getTimezone()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eelse when \u003ccode\u003edefaults.getTimezone() !\u003d FIELD_UNDEFINED\u003c/code\u003e, create a \u003ccode\u003ejava.util.TimeZone\u003c/code\u003e with a custom timezone id using \u003ccode\u003edefaults.getTimezone()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eelse use the \u003ccode\u003eGregorianCalendar\u003c/code\u003e default timezone value for the host is defined as specified by \u003ccode\u003ejava.util.TimeZone.getDefault()\u003c/code\u003e.\u003c/li\u003e\u003c/p\u003e \u003cp\u003eTo ensure consistency in conversion implementations, the new \u003ccode\u003eGregorianCalendar\u003c/code\u003e should be instantiated in following manner. \u003cul\u003e \u003cli\u003eCreate a new \u003ccode\u003ejava.util.GregorianCalendar(TimeZone, Locale)\u003c/code\u003e with TimeZone set as specified above and the \u003ccode\u003eLocale\u003c/code\u003e parameter. \u003c/li\u003e \u003cli\u003eInitialize all GregorianCalendar fields by calling  {@link GregorianCalendar#clear()}\u003c/li\u003e \u003cli\u003eObtain a pure Gregorian Calendar by invoking \u003ccode\u003eGregorianCalendar.setGregorianChange( new Date(Long.MIN_VALUE))\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eIts fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, SECOND and MILLISECOND are set using the method \u003ccode\u003eCalendar.set(int,int)\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e\n * @param timezone provide Timezone. \u003ccode\u003enull\u003c/code\u003e is a legal value.\n * @param aLocale  provide explicit Locale. Use default GregorianCalendar locale ifvalue is \u003ccode\u003enull\u003c/code\u003e.\n * @param defaults provide default field values to use when correspondingfield for this instance is FIELD_UNDEFINED or null. If \u003ccode\u003edefaults\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e or a field within the specified \u003ccode\u003edefaults\u003c/code\u003e is undefined, just use \u003ccode\u003ejava.util.GregorianCalendar\u003c/code\u003e defaults.\n * @return a java.util.GregorianCalendar conversion of this instance.\n */\n","tf":{"freq":{"save":1,"instanti":1,"timezon":13,"specifi":4,"schema":1,"time":8,"oper":1,"along":1,"undefin":1,"custom":2,"follow":1,"host":1,"creat":3,"consist":1,"invok":1,"provid":4,"els":3,"instanc":3,"non":1,"pure":1,"obtain":1,"explicit":2,"comput":1,"util":6,"legal":1,"defin":1,"call":1,"concept":1,"allow":1,"datetyp":1,"link":2,"one":1,"convers":3,"convert":1,"use":7,"date":2,"ensur":1,"id":2,"clear":1,"correspondingfield":1,"valu":4,"initi":1,"calendar":14,"just":1,"paramet":4,"field":6,"ifvalu":1,"lgregorian":1,"method":1,"java":6,"manner":1,"within":1,"chang":1,"local":5,"gregorian":13,"user":1,"daylight":1,"zone":7},"maxFreq":14,"totalTerms":158},"loc":0}