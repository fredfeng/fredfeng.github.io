{"id":27225,"className":"javax.xml.datatype.Duration","methodName":"toString","signature":"\u003cjavax.xml.datatype.Duration: java.lang.String toString()\u003e","javadoc":"/** \n * \u003cp\u003eReturns a \u003ccode\u003eString\u003c/code\u003e representation of this \u003ccode\u003eDuration\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThe result is formatted according to the XML Schema 1.0 spec and can be always parsed back later into the equivalent \u003ccode\u003eDuration\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e by  {@link DatatypeFactory#newDuration(String lexicalRepresentation)}.\u003c/p\u003e \u003cp\u003eFormally, the following holds for any \u003ccode\u003eDuration\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e x:\u003c/p\u003e \u003cpre\u003e new Duration(x.toString()).equals(x) \u003c/pre\u003e\n * @return A non-\u003ccode\u003enull\u003c/code\u003e valid \u003ccode\u003eString\u003c/code\u003e representation of this \u003ccode\u003eDuration\u003c/code\u003e.\n */\n","tf":{"freq":{"spec":1,"valid":1,"result":1,"link":1,"object":3,"schema":1,"durat":6,"lexic":1,"equival":1,"factori":1,"datatyp":1,"follow":1,"alway":1,"later":1,"hold":1,"back":1,"equal":1,"accord":1,"format":1,"represent":3,"non":1,"formal":1,"pre":2,"string":5,"pars":1},"maxFreq":6,"totalTerms":39},"loc":42}