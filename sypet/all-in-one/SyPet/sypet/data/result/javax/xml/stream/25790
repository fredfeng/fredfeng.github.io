{"id":25790,"className":"javax.xml.stream.XMLStreamReader","methodName":"getElementText","signature":"\u003cjavax.xml.stream.XMLStreamReader: java.lang.String getElementText()\u003e","javadoc":"/** \n * Reads the content of a text-only element, an exception is thrown if this is not a text-only element. Regardless of value of javax.xml.stream.isCoalescing this method always returns coalesced content. \u003cbr /\u003e Precondition: the current event is START_ELEMENT. \u003cbr /\u003e Postcondition: the current event is the corresponding END_ELEMENT. \u003cbr /\u003eThe method does the following (implementations are free to optimized but must do equivalent processing): \u003cpre\u003e if(getEventType() !\u003d XMLStreamConstants.START_ELEMENT) { throw new XMLStreamException( \"parser must be on START_ELEMENT to read next text\", getLocation()); } int eventType \u003d next(); StringBuffer content \u003d new StringBuffer(); while(eventType !\u003d XMLStreamConstants.END_ELEMENT ) { if(eventType \u003d\u003d XMLStreamConstants.CHARACTERS || eventType \u003d\u003d XMLStreamConstants.CDATA || eventType \u003d\u003d XMLStreamConstants.SPACE || eventType \u003d\u003d XMLStreamConstants.ENTITY_REFERENCE) { buf.append(getText()); } else if(eventType \u003d\u003d XMLStreamConstants.PROCESSING_INSTRUCTION || eventType \u003d\u003d XMLStreamConstants.COMMENT) { // skipping } else if(eventType \u003d\u003d XMLStreamConstants.END_DOCUMENT) { throw new XMLStreamException( \"unexpected end of document when reading element text content\", this); } else if(eventType \u003d\u003d XMLStreamConstants.START_ELEMENT) { throw new XMLStreamException( \"element text content may not contain START_ELEMENT\", getLocation()); } else { throw new XMLStreamException( \"Unexpected event type \"+eventType, getLocation()); } eventType \u003d next(); } return buf.toString(); \u003c/pre\u003e\n * @throws XMLStreamException if the current event is not a START_ELEMENTor if a non text element is encountered\n */\n","tf":{"freq":{"stream":1,"unexpect":2,"correspond":1,"next":3,"precondit":1,"skip":1,"type":14,"must":2,"buffer":2,"document":1,"free":1,"lstream":15,"equival":1,"javax":1,"event":17,"current":3,"read":3,"postcondit":1,"valu":1,"tor":1,"end":1,"regardless":1,"follow":1,"append":1,"element":6,"may":1,"locat":3,"thrown":1,"except":6,"text":8,"constant":10,"optim":1,"alway":1,"xml":1,"els":4,"non":1,"process":1,"content":5,"coalesc":2,"encount":1,"pre":2,"contain":1,"string":3,"method":2,"parser":1,"buf":2},"maxFreq":17,"totalTerms":139},"loc":0}