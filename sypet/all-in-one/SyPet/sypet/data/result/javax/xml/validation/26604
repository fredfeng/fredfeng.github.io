{"id":26604,"className":"javax.xml.validation.ValidatorHandler","methodName":"setFeature","signature":"\u003cjavax.xml.validation.ValidatorHandler: void setFeature(java.lang.String,boolean)\u003e","javadoc":"/** \n * \u003cp\u003eSet a feature for this \u003ccode\u003eValidatorHandler\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFeature can be used to control the way a {@link ValidatorHandler} parses schemas. The feature name isany fully-qualified URI. It is possible for a {@link SchemaFactory} toexpose a feature value but to be unable to change the current value. Some feature values may be immutable or mutable only in specific contexts, such as before, during, or after a validation.\u003c/p\u003e \u003cp\u003eAll implementations are required to support the  {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.When the feature is:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003ccode\u003etrue\u003c/code\u003e: the implementation will limit XML processing to conform to implementation limits. Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources. If XML processing is limited for security reasons, it will be reported via a call to the registered {@link ErrorHandler#fatalError(SAXParseException exception)}. See  {@link #setErrorHandler(ErrorHandler errorHandler)}. \u003c/li\u003e \u003cli\u003e \u003ccode\u003efalse\u003c/code\u003e: the implementation will processing XML according to the XML specifications without regard to possible implementation limits. \u003c/li\u003e \u003c/ul\u003e\n * @param name The feature name, which is a non-null fully-qualified URI.\n * @param value The requested value of the feature (true or false).\n * @throws SAXNotRecognizedException If the featurevalue can\u0027t be assigned or retrieved.\n * @throws SAXNotSupportedException When the{@link ValidatorHandler} recognizes the feature name butcannot set the requested value.\n * @throws NullPointerException When \u003ccode\u003ename\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see #getFeature(String)\n */\n","tf":{"freq":{"fals":2,"assign":1,"via":1,"reason":1,"mutabl":1,"possibl":2,"schema":3,"eniti":1,"amount":1,"requir":1,"javax":1,"request":2,"report":1,"recogn":2,"limit":5,"control":1,"except":5,"support":2,"fatal":1,"toexpos":1,"immut":1,"expans":1,"regard":1,"xml":1,"without":1,"non":1,"isani":1,"xpars":1,"will":3,"pointer":1,"lconstant":1,"call":1,"valid":4,"link":6,"use":1,"way":1,"consum":1,"resourc":1,"factori":1,"name":5,"current":1,"regist":1,"valu":6,"featurevalu":1,"may":1,"includ":1,"error":5,"true":2,"fulli":2,"accord":1,"unabl":1,"process":3,"specif":2,"secur":1,"conform":1,"retriev":1,"larg":1,"string":1,"featur":12,"context":1,"exampl":1,"butcannot":1,"chang":1,"construct":1,"pars":1,"qualifi":2,"xnot":2,"handler":7},"maxFreq":12,"totalTerms":130},"loc":8}