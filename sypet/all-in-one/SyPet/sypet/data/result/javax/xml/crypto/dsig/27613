{"id":27613,"className":"javax.xml.crypto.dsig.XMLSignatureFactory","methodName":"newReference","signature":"\u003cjavax.xml.crypto.dsig.XMLSignatureFactory: javax.xml.crypto.dsig.Reference newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod,java.util.List,javax.xml.crypto.Data,java.util.List,java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Creates a \u003ccode\u003eReference\u003c/code\u003e with the specified parameters. \u003cp\u003eThis method is useful when a list of transforms have already been applied to the \u003ccode\u003eReference\u003c/code\u003e. See for example, the \u003ca href\u003d\"http://www.oasis-open.org/committees/tc_home.php?wg_abbrev\u003ddss\"\u003e OASIS-DSS (Digital Signature Services)\u003c/a\u003e specification. \u003cp\u003eWhen an \u003ccode\u003eXMLSignature\u003c/code\u003e containing this reference is generated, the specified \u003ccode\u003etransforms\u003c/code\u003e (if non-null) are applied to the specified \u003ccode\u003eresult\u003c/code\u003e. The \u003ccode\u003eTransforms\u003c/code\u003e element of the resulting \u003ccode\u003eReference\u003c/code\u003e element is set to the concatenation of the \u003ccode\u003eappliedTransforms\u003c/code\u003e and \u003ccode\u003etransforms\u003c/code\u003e.\n * @param uri the reference URI (may be \u003ccode\u003enull\u003c/code\u003e)\n * @param dm the digest method\n * @param appliedTransforms a list of {@link Transform}s that have already been applied. The list is defensively copied to protect against subsequent modification. The list must contain at least one entry.\n * @param result the result of processing the sequence of\u003ccode\u003eappliedTransforms\u003c/code\u003e\n * @param transforms a list of {@link Transform}s that are to be applied when generating the signature. The list is defensively copied to protect against subsequent modification. May be \u003ccode\u003enull\u003c/code\u003e or empty.\n * @param type the reference type, as a URI (may be \u003ccode\u003enull\u003c/code\u003e)\n * @param id the reference ID (may be \u003ccode\u003enull\u003c/code\u003e)\n * @return a \u003ccode\u003eReference\u003c/code\u003e\n * @throws ClassCastException if any of the transforms (in either list)are not of type \u003ccode\u003eTransform\u003c/code\u003e\n * @throws IllegalArgumentException if \u003ccode\u003euri\u003c/code\u003e is not RFC 2396compliant or \u003ccode\u003eappliedTransforms\u003c/code\u003e is empty\n * @throws NullPointerException if \u003ccode\u003edm\u003c/code\u003e,\u003ccode\u003eappliedTransforms\u003c/code\u003e or \u003ccode\u003eresult\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n */\n","tf":{"freq":{"oasi":1,"least":1,"servic":1,"dss":1,"type":3,"copi":2,"must":1,"specifi":3,"defens":2,"open":1,"refer":9,"sequenc":1,"php":1,"href":1,"argument":1,"element":2,"except":3,"creat":1,"concaten":1,"uri":2,"non":1,"digit":1,"appli":9,"cast":1,"http":1,"contain":2,"compliant":1,"pointer":1,"committe":1,"home":1,"result":5,"link":2,"one":1,"www":1,"use":1,"digest":1,"org":1,"signatur":2,"transform":14,"subsequ":2,"may":4,"entri":1,"paramet":1,"list":7,"illeg":1,"empti":2,"process":1,"either":1,"specif":1,"generat":2,"exampl":1,"abbrev":1,"lsignatur":1,"method":2,"alreadi":2,"modif":2},"maxFreq":14,"totalTerms":117},"loc":0}