{"id":26612,"className":"javax.xml.validation.Validator","methodName":"setResourceResolver","signature":"\u003cjavax.xml.validation.Validator: void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)\u003e","javadoc":"/** \n * Sets the  {@link LSResourceResolver} to customizeresource resolution while in a validation episode. \u003cp\u003e {@link Validator} uses a {@link LSResourceResolver}when it needs to locate external resources while a validation, although exactly what constitutes \"locating external resources\" is up to each schema language. \u003cp\u003e When the  {@link LSResourceResolver} is null, the implementation willbehave as if the following  {@link LSResourceResolver} is set:\u003cpre\u003e class DumbLSResourceResolver implements  {@link LSResourceResolver} {public  {@link org.w3c.dom.ls.LSInput} resolveResource(String publicId, String systemId, String baseURI) { return null; // always return null } } \u003c/pre\u003e \u003cp\u003e If a  {@link LSResourceResolver} throws a {@link RuntimeException}(or instances of its derived classes), then the  {@link Validator} will abort the parsing andthe caller of the \u003ccode\u003evalidate\u003c/code\u003e method will receive the same  {@link RuntimeException}. \u003cp\u003e When a new  {@link Validator} object is created, initiallythis field is set to null.\n * @param resourceResolver A new resource resolver to be set. This parameter can be null.\n */\n","tf":{"freq":{"caller":1,"need":1,"episod":1,"valid":6,"deriv":1,"dom":1,"constitut":1,"link":12,"use":1,"languag":1,"object":1,"org":1,"willbehav":1,"resolut":1,"schema":1,"dumb":1,"although":1,"resourc":13,"extern":2,"exact":1,"customizeresourc":1,"follow":1,"except":2,"locat":2,"creat":1,"alway":1,"runtim":2,"paramet":1,"resolv":11,"receiv":1,"instanc":1,"field":1,"initiallythi":1,"system":1,"input":1,"pre":2,"string":3,"will":2,"base":1,"method":1,"pars":1,"andth":1,"abort":1},"maxFreq":13,"totalTerms":89},"loc":0}