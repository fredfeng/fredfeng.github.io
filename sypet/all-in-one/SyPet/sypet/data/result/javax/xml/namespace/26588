{"id":26588,"className":"javax.xml.namespace.QName","methodName":"equals","signature":"\u003cjavax.xml.namespace.QName: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * \u003cp\u003eTest this \u003ccode\u003eQName\u003c/code\u003e for equality with another \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eIf the \u003ccode\u003eObject\u003c/code\u003e to be tested is not a \u003ccode\u003eQName\u003c/code\u003e or is \u003ccode\u003enull\u003c/code\u003e, then this method returns \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eTwo \u003ccode\u003eQName\u003c/code\u003es are considered equal if and only if both the Namespace URI and local part are equal. This method uses \u003ccode\u003eString.equals()\u003c/code\u003e to check equality of the Namespace URI and local part. The prefix is \u003cstrong\u003e\u003cem\u003eNOT\u003c/em\u003e\u003c/strong\u003e used to determine equality.\u003c/p\u003e \u003cp\u003eThis method satisfies the general contract of  {@link java.lang.Object#equals(Object) Object.equals(Object)}\u003c/p\u003e\n * @param objectToTest the \u003ccode\u003eObject\u003c/code\u003e to test forequality with this \u003ccode\u003eQName\u003c/code\u003e\n * @return \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003eObject\u003c/code\u003e isequal to this \u003ccode\u003eQName\u003c/code\u003e else \u003ccode\u003efalse\u003c/code\u003e\n */\n","tf":{"freq":{"fals":2,"test":4,"link":1,"use":2,"isequ":1,"object":9,"anoth":1,"lang":1,"consid":1,"namespac":2,"given":1,"qname":5,"check":1,"contract":1,"forequ":1,"true":1,"equal":9,"els":1,"general":1,"two":1,"strong":2,"string":1,"prefix":1,"determin":1,"satisfi":1,"method":3,"java":1,"local":2,"part":2},"maxFreq":9,"totalTerms":60},"loc":14}