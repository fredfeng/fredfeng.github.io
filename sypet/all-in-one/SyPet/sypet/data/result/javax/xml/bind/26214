{"id":26214,"className":"javax.xml.bind.Binder","methodName":"updateXML","signature":"\u003cjavax.xml.bind.Binder: XmlNode updateXML(java.lang.Object,XmlNode)\u003e","javadoc":"/** \n * Changes in JAXB object tree are updated in its associated XML parse tree. \u003cp\u003e This operation can be thought of as an \"in-place\" marshalling. The difference is that instead of creating a whole new XML tree, this operation updates an existing tree while trying to preserve the XML as much as possible. \u003cp\u003e For example, unknown elements/attributes in XML that were not bound to JAXB will be left untouched (whereas a marshalling operation would create a new tree that doesn\u0027t contain any of those.) \u003cp\u003e As a side-effect, this operation updates the association between XML nodes and JAXB objects.\n * @param jaxbObject root of potentially modified JAXB object tree\n * @param xmlNode    root of update target XML parse tree\n * @return Returns the updated XML node. Typically, this is the same node you passed in as \u003ci\u003exmlNode\u003c/i\u003e, but it maybe a different object, for example when the tag name of the object has changed.\n * @throws JAXBException If any unexpected problem occurs updating corresponding XML content.\n * @throws IllegalArgumentException If any of the input parameters are null\n */\n","tf":{"freq":{"root":2,"tag":1,"possibl":1,"tree":7,"oper":4,"place":1,"marshal":2,"argument":1,"element":1,"wherea":1,"except":2,"creat":2,"preserv":1,"xml":2,"much":1,"content":1,"input":1,"node":5,"updat":7,"whole":1,"contain":1,"will":1,"jaxb":1,"unexpect":1,"correspond":1,"typic":1,"thought":1,"object":6,"attribut":1,"associ":2,"side":1,"name":1,"left":1,"exist":1,"paramet":1,"problem":1,"unknown":1,"illeg":1,"mayb":1,"potenti":1,"pass":1,"differ":2,"effect":1,"exampl":2,"instead":1,"modifi":1,"target":1,"chang":2,"pars":2,"untouch":1,"bound":1,"occur":1},"maxFreq":7,"totalTerms":86},"loc":0}