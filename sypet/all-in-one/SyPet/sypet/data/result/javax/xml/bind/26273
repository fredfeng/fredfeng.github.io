{"id":26273,"className":"javax.xml.bind.Unmarshaller","methodName":"unmarshal","signature":"\u003cjavax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.InputStream)\u003e","javadoc":"/** \n * Unmarshal XML data from the specified InputStream and return the resulting content tree.  Validation event location information may be incomplete when using this form of the unmarshal API. \u003cp\u003e Implements \u003ca href\u003d\"#unmarshalGlobal\"\u003eUnmarshal Global Root Element\u003c/a\u003e.\n * @param is the InputStream to unmarshal XML data from\n * @return the newly created root object of the java content tree\n * @throws JAXBException If any unexpected errors occur while unmarshalling\n * @throws UnmarshalException If the  {@link ValidationEventHandler ValidationEventHandler}returns false from its \u003ctt\u003ehandleEvent\u003c/tt\u003e method or the \u003ctt\u003eUnmarshaller\u003c/tt\u003e is unable to perform the XML to Java binding.  See \u003ca href\u003d\"#unmarshalEx\"\u003eUnmarshalling XML Data\u003c/a\u003e\n * @throws IllegalArgumentException If the InputStream parameter is null\n */\n","tf":{"freq":{"fals":1,"valid":3,"result":1,"incomplet":1,"stream":3,"unexpect":1,"root":2,"link":1,"data":3,"use":1,"perform":1,"object":1,"unmarshal":3,"specifi":1,"tree":2,"event":4,"unmarsh":8,"href":2,"argument":1,"element":1,"except":3,"locat":1,"may":1,"error":1,"form":1,"creat":1,"global":2,"paramet":1,"illeg":1,"handl":1,"unabl":1,"content":2,"inform":1,"newli":1,"input":3,"method":1,"java":2,"bind":1,"handler":2,"occur":1},"maxFreq":8,"totalTerms":69},"loc":0}