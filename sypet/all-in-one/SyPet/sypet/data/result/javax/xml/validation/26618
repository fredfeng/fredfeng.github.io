{"id":26618,"className":"javax.xml.validation.SchemaFactory","methodName":"newInstance","signature":"\u003cjavax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)\u003e","javadoc":"/** \n * \u003cp\u003eLookup an implementation of the \u003ccode\u003eSchemaFactory\u003c/code\u003e that supports the specified schema language and return it.\u003c/p\u003e \u003cp\u003eTo find a \u003ccode\u003eSchemaFactory\u003c/code\u003e object for a given schema language, this method looks the following places in the following order where \"the class loader\" refers to the context class loader:\u003c/p\u003e \u003col\u003e \u003cli\u003e If the system property \u003ccode\u003e\"javax.xml.validation.SchemaFactory:\u003ci\u003eschemaLanguage\u003c/i\u003e\"\u003c/code\u003e is present (where \u003ci\u003eschemaLanguage\u003c/i\u003e is the parameter to this method), then its value is read as a class name. The method will try to create a new instance of this class by using the class loader, and returns it if it is successfully created. \u003c/li\u003e \u003cli\u003e \u003ccode\u003e$java.home/lib/jaxp.properties\u003c/code\u003e is read and the value associated with the key being the system property above is looked for. If present, the value is processed just like above. \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe class loader is asked for service provider provider-configuration files matching \u003ccode\u003ejavax.xml.validation.SchemaFactory\u003c/code\u003e in the resource directory META-INF/services. See the JAR File Specification for file format and parsing rules. Each potential service provider is required to implement the method:\u003c/p\u003e \u003cpre\u003e {@link #isSchemaLanguageSupported(String schemaLanguage)}\u003c/pre\u003e The first service provider found in class loader order that supports the specified schema language is returned. \u003c/li\u003e \u003cli\u003e Platform default \u003ccode\u003eSchemaFactory\u003c/code\u003e is located in a implementation specific way. There must be a platform default \u003ccode\u003eSchemaFactory\u003c/code\u003e for W3C XML Schema. \u003c/li\u003e \u003c/ol\u003e \u003cp\u003eIf everything fails,  {@link IllegalArgumentException} will be thrown.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTip for Trouble-shooting:\u003c/strong\u003e\u003c/p\u003e \u003cp\u003eSee  {@link java.util.Properties#load(java.io.InputStream)} forexactly how a property file is parsed. In particular, colons \u0027:\u0027 need to be escaped in a property file, so make sure schema language URIs are properly escaped in it. For example:\u003c/p\u003e \u003cpre\u003e http\\://www.w3.org/2001/XMLSchema\u003dorg.acme.foo.XSSchemaFactory \u003c/pre\u003e\n * @param schemaLanguage Specifies the schema language which the returned SchemaFactory will understand. See \u003ca href\u003d\"#schemaLanguage\"\u003ethe list of available schema languages\u003c/a\u003e for the possible values.\n * @return New instance of a \u003ccode\u003eSchemaFactory\u003c/code\u003e\n * @throws IllegalArgumentException If no implementation of the schema language is available.\n * @throws NullPointerException If the \u003ccode\u003eschemaLanguage\u003c/code\u003e parameter is null.\n * @see #newInstance(String schemaLanguage,String factoryClassName,ClassLoader classLoader)\n */\n","tf":{"freq":{"need":1,"understand":1,"servic":4,"particular":1,"languag":15,"foo":1,"lookup":1,"tip":1,"specifi":3,"schema":25,"given":1,"fail":1,"refer":1,"file":5,"place":1,"href":1,"platform":2,"support":3,"troubl":1,"loader":7,"avail":2,"like":1,"provid":4,"instanc":4,"present":2,"configur":1,"system":2,"shoot":1,"http":1,"will":3,"pointer":1,"load":1,"ask":1,"home":1,"stream":1,"directori":1,"link":3,"use":1,"org":2,"associ":1,"factori":10,"just":1,"look":2,"potenti":1,"process":1,"string":3,"exampl":1,"method":4,"pars":2,"possibl":1,"must":1,"requir":1,"javax":2,"proper":1,"key":1,"follow":2,"sure":1,"argument":2,"except":3,"thrown":1,"everyth":1,"creat":2,"xml":2,"format":1,"input":1,"jaxp":1,"strong":2,"match":1,"properti":6,"make":1,"util":1,"valid":2,"www":1,"way":1,"colon":1,"object":1,"escap":2,"resourc":1,"order":2,"name":2,"rule":1,"read":2,"valu":4,"find":1,"lschema":1,"locat":1,"acm":1,"paramet":2,"list":1,"illeg":2,"specif":2,"lib":1,"pre":4,"context":1,"java":3,"forexact":1,"success":1,"first":1,"found":1},"maxFreq":25,"totalTerms":214},"loc":19}