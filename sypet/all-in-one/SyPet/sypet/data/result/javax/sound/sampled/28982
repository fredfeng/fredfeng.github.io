{"id":28982,"className":"javax.sound.sampled.TargetDataLine","methodName":"read","signature":"\u003cjavax.sound.sampled.TargetDataLine: int read(byte[],int,int)\u003e","javadoc":"/** \n * Reads audio data from the data line\u0027s input buffer.   The requested number of bytes is read into the specified array, starting at the specified offset into the array in bytes.  This method blocks until the requested amount of data has been read.  However, if the data line is closed, stopped, drained, or flushed before the requested amount has been read, the method no longer blocks, but returns the number of bytes read thus far. \u003cp\u003e The number of bytes that can be read without blocking can be ascertained using the \u003ccode\u003e {@link DataLine#available available}\u003c/code\u003e method of the \u003ccode\u003eDataLine\u003c/code\u003e interface.  (While it is guaranteed that this number of bytes can be read without blocking, there is no guarantee that attempts to read additional data will block.) \u003cp\u003e The number of bytes to be read must represent an integral number of sample frames, such that: \u003cbr\u003e \u003ccenter\u003e\u003ccode\u003e[ bytes read ] % [frame size in bytes ] \u003d\u003d 0\u003c/code\u003e\u003c/center\u003e \u003cbr\u003e The return value will always meet this requirement.  A request to read a number of bytes representing a non-integral number of sample frames cannot be fulfilled and may result in an IllegalArgumentException.\n * @param b a byte array that will contain the requested input data whenthis method returns\n * @param off the offset from the beginning of the array, in bytes\n * @param len the requested number of bytes to read\n * @return the number of bytes actually read\n * @throws IllegalArgumentException if the requested number of bytes doesnot represent an integral number of sample frames. or if \u003ccode\u003elen\u003c/code\u003e is negative.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eoff\u003c/code\u003e is negative,or \u003ccode\u003eoff+len\u003c/code\u003e is greater than the length of the array \u003ccode\u003eb\u003c/code\u003e.\n * @see SourceDataLine#write\n * @see DataLine#available\n */\n","tf":{"freq":{"greater":1,"integr":3,"must":1,"close":1,"specifi":2,"amount":2,"buffer":1,"center":2,"requir":1,"request":7,"longer":1,"howev":1,"argument":2,"index":1,"except":3,"alway":1,"far":1,"number":12,"ascertain":1,"avail":3,"meet":1,"without":2,"drain":1,"size":1,"non":1,"input":2,"frame":4,"start":1,"contain":1,"will":3,"sourc":1,"negat":2,"array":6,"attempt":1,"stop":1,"result":1,"link":1,"data":10,"block":5,"line":6,"use":1,"fulfil":1,"whenthi":1,"write":1,"length":1,"read":14,"doesnot":1,"valu":1,"offset":2,"addit":1,"may":1,"audio":1,"thus":1,"repres":3,"guarante":2,"len":3,"illeg":2,"begin":1,"flush":1,"actual":1,"method":4,"bound":1,"sampl":3},"maxFreq":14,"totalTerms":146},"loc":0}