{"id":28786,"className":"javax.sound.midi.MetaMessage","methodName":"setMessage","signature":"\u003cjavax.sound.midi.MetaMessage: void setMessage(int,byte[],int)\u003e","javadoc":"/** \n * Sets the message parameters for a \u003ccode\u003eMetaMessage\u003c/code\u003e. Since only one status byte value, \u003ccode\u003e0xFF\u003c/code\u003e, is allowed for meta-messages, it does not need to be specified here.  Calls to \u003ccode\u003e {@link MidiMessage#getStatus getStatus}\u003c/code\u003e return \u003ccode\u003e0xFF\u003c/code\u003e for all meta-messages. \u003cp\u003e The \u003ccode\u003etype\u003c/code\u003e argument should be a valid value for the byte that follows the status byte in the \u003ccode\u003eMetaMessage\u003c/code\u003e.  The \u003ccode\u003edata\u003c/code\u003e argument should contain all the subsequent bytes of the \u003ccode\u003eMetaMessage\u003c/code\u003e.  In other words, the byte that specifies the type of \u003ccode\u003eMetaMessage\u003c/code\u003e is not considered a data byte.\n * @param type              meta-message type (must be less than 128)\n * @param data              the data bytes in the MIDI message\n * @param length    the number of bytes in the \u003ccode\u003edata\u003c/code\u003ebyte array\n * @throws                  \u003ccode\u003eInvalidMidiDataException\u003c/code\u003e  if theparameter values do not specify a valid MIDI meta message\n */\n","tf":{"freq":{"need":1,"call":1,"valid":2,"allow":1,"link":1,"one":1,"data":6,"theparamet":1,"type":4,"meta":8,"consid":1,"must":1,"specifi":3,"midi":2,"invalid":1,"length":1,"valu":3,"subsequ":1,"less":1,"follow":1,"argument":2,"except":1,"status":4,"messag":12,"paramet":1,"number":1,"contain":1,"word":1,"array":1},"maxFreq":12,"totalTerms":65},"loc":19}