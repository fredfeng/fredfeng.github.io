{"id":28952,"className":"javax.sound.sampled.Mixer","methodName":"synchronize","signature":"\u003cjavax.sound.sampled.Mixer: void synchronize(javax.sound.sampled.Line[],boolean)\u003e","javadoc":"/** \n * Synchronizes two or more lines.  Any subsequent command that starts or stops audio playback or capture for one of these lines will exert the same effect on the other lines in the group, so that they start or stop playing or capturing data simultaneously.\n * @param lines the lines that should be synchronized\n * @param maintainSync \u003ccode\u003etrue\u003c/code\u003e if the synchronizationmust be precisely maintained (i.e., the synchronization must be sample-accurate) at all times during operation of the lines , or \u003ccode\u003efalse\u003c/code\u003e if precise synchronization is required only during start and stop operations\n * @throws IllegalArgumentException if the lines cannot be synchronized.This may occur if the lines are of different types or have different formats for which this mixer does not support synchronization, or if all lines specified do not belong to this mixer.\n */\n","tf":{"freq":{"fals":1,"stop":3,"belong":1,"one":1,"maintain":2,"data":1,"line":9,"simultan":1,"type":1,"exert":1,"must":1,"specifi":1,"time":1,"requir":1,"oper":2,"sync":1,"accur":1,"command":1,"precis":2,"synchronizationmust":1,"mixer":2,"captur":2,"subsequ":1,"argument":1,"may":1,"except":1,"support":1,"audio":1,"play":1,"true":1,"format":1,"illeg":1,"differ":2,"two":1,"playback":1,"effect":1,"start":3,"will":1,"group":1,"sampl":1,"occur":1},"maxFreq":9,"totalTerms":59},"loc":0}