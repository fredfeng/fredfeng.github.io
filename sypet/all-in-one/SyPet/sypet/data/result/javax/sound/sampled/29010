{"id":29010,"className":"javax.sound.sampled.DataLine","methodName":"drain","signature":"\u003cjavax.sound.sampled.DataLine: void drain()\u003e","javadoc":"/** \n * Drains queued data from the line by continuing data I/O until the data line\u0027s internal buffer has been emptied. This method blocks until the draining is complete.  Because this is a blocking method, it should be used with care.  If \u003ccode\u003edrain()\u003c/code\u003e is invoked on a stopped line that has data in its queue, the method will block until the line is running and the data queue becomes empty.  If \u003ccode\u003edrain()\u003c/code\u003e is invoked by one thread, and another continues to fill the data queue, the operation will not complete. This method always returns when the data line is closed.\n * @see #flush()\n */\n","tf":{"freq":{"stop":1,"queue":3,"one":1,"data":7,"use":1,"block":3,"line":5,"anoth":1,"run":1,"close":1,"buffer":1,"becom":1,"oper":1,"thread":1,"care":1,"complet":2,"alway":1,"invok":2,"fill":1,"queu":1,"drain":5,"continu":2,"empti":2,"flush":1,"intern":1,"will":2,"method":4},"maxFreq":7,"totalTerms":53},"loc":0}