{"id":28863,"className":"javax.sound.sampled.AudioSystem","methodName":"getClip","signature":"\u003cjavax.sound.sampled.AudioSystem: javax.sound.sampled.Clip getClip(javax.sound.sampled.Mixer$Info)\u003e","javadoc":"/** \n * Obtains a clip from the specified mixer that can be used for playing back an audio file or an audio stream. \u003cp\u003eThe returned clip must be opened with the \u003ccode\u003eopen(AudioFormat)\u003c/code\u003e or \u003ccode\u003eopen(AudioInputStream)\u003c/code\u003e method. \u003cp\u003eThis is a high-level method that uses \u003ccode\u003egetMixer\u003c/code\u003e and \u003ccode\u003egetLine\u003c/code\u003e internally.\n * @param mixerInfo a \u003ccode\u003eMixer.Info\u003c/code\u003e object representing thedesired mixer, or \u003ccode\u003enull\u003c/code\u003e for the system default mixer\n * @return a clip object from the specified mixer\n * @throws LineUnavailableException if a clipis not available from this mixer due to resource restrictions\n * @throws SecurityException if a clipis not available from this mixer due to security restrictions\n * @throws IllegalArgumentException if the system does notsupport at least one clip through the specified mixer\n * @see #getClip()\n * @since 1.5\n */\n","tf":{"freq":{"stream":2,"least":1,"one":1,"use":2,"line":2,"object":2,"must":1,"specifi":3,"info":2,"open":3,"resourc":1,"level":1,"file":1,"unavail":1,"mixer":10,"argument":1,"clip":6,"except":3,"audio":4,"repres":1,"play":1,"back":1,"avail":2,"format":1,"illeg":1,"restrict":2,"notsupport":1,"obtain":1,"input":1,"system":2,"secur":2,"thedesir":1,"clipi":2,"intern":1,"due":2,"method":2,"high":1},"maxFreq":10,"totalTerms":72},"loc":9}