{"id":28948,"className":"javax.sound.sampled.Mixer","methodName":"getLine","signature":"\u003cjavax.sound.sampled.Mixer: javax.sound.sampled.Line getLine(javax.sound.sampled.Line$Info)\u003e","javadoc":"/** \n * Obtains a line that is available for use and that matches the description in the specified \u003ccode\u003eLine.Info\u003c/code\u003e object. \u003cp\u003eIf a \u003ccode\u003eDataLine\u003c/code\u003e is requested, and \u003ccode\u003einfo\u003c/code\u003e is an instance of \u003ccode\u003eDataLine.Info\u003c/code\u003e specifying at least one fully qualified audio format, the last one will be used as the default format of the returned \u003ccode\u003eDataLine\u003c/code\u003e.\n * @param info describes the desired line\n * @throws LineUnavailableException if a matching lineis not available due to resource restrictions\n * @throws IllegalArgumentException if this mixer doesnot support any lines matching the description\n * @throws SecurityException if a matching lineis not available due to security restrictions\n */\n","tf":{"freq":{"last":1,"least":1,"one":2,"data":3,"use":2,"line":9,"object":1,"desir":1,"info":4,"specifi":2,"resourc":1,"request":1,"unavail":1,"doesnot":1,"mixer":1,"argument":1,"except":3,"support":1,"audio":1,"descript":2,"describ":1,"avail":3,"fulli":1,"format":2,"illeg":1,"restrict":2,"instanc":1,"linei":2,"obtain":1,"secur":2,"will":1,"due":2,"match":4,"qualifi":1},"maxFreq":9,"totalTerms":63},"loc":0}