{"id":29026,"className":"javax.sound.sampled.DataLine$Info","methodName":"getFormats","signature":"\u003cjavax.sound.sampled.DataLine$Info: javax.sound.sampled.AudioFormat[] getFormats()\u003e","javadoc":"/** \n * Obtains a set of audio formats supported by the data line. Note that \u003ccode\u003eisFormatSupported(AudioFormat)\u003c/code\u003e might return \u003ccode\u003etrue\u003c/code\u003e for certain additional formats that are missing from the set returned by \u003ccode\u003egetFormats()\u003c/code\u003e.  The reverse is not the case: \u003ccode\u003eisFormatSupported(AudioFormat)\u003c/code\u003e is guaranteed to return \u003ccode\u003etrue\u003c/code\u003e for all formats returned by \u003ccode\u003egetFormats()\u003c/code\u003e. Some fields in the AudioFormat instances can be set to {@link javax.sound.sampled.AudioSystem#NOT_SPECIFIED NOT_SPECIFIED}if that field does not apply to the format, or if the format supports a wide range of values for that field. For example, a multi-channel device supporting up to 64 channels, could set the channel field in the \u003ccode\u003eAudioFormat\u003c/code\u003e instances returned by this method to \u003ccode\u003eNOT_SPECIFIED\u003c/code\u003e.\n * @return a set of supported audio formats.\n * @see #isFormatSupported(AudioFormat)\n */\n","tf":{"freq":{"might":1,"link":1,"data":1,"line":1,"revers":1,"javax":1,"rang":1,"valu":1,"note":1,"addit":1,"support":7,"audio":8,"guarante":1,"true":2,"format":17,"wide":1,"instanc":2,"field":4,"obtain":1,"system":1,"appli":1,"sound":1,"multi":1,"exampl":1,"method":1,"devic":1,"certain":1,"channel":3,"miss":1,"sampl":1},"maxFreq":17,"totalTerms":66},"loc":6}