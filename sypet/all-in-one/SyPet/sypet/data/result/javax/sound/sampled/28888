{"id":28888,"className":"javax.sound.sampled.AudioFormat","methodName":"AudioFormat","signature":"\u003cjavax.sound.sampled.AudioFormat: void AudioFormat(javax.sound.sampled.AudioFormat$Encoding,float,int,int,int,float,boolean,java.util.Map)\u003e","javadoc":"/** \n * Constructs an \u003ccode\u003eAudioFormat\u003c/code\u003e with the given parameters. The encoding specifies the convention used to represent the data. The other parameters are further explained in the  {@link AudioFormat class description}.\n * @param encoding         the audio encoding technique\n * @param sampleRate       the number of samples per second\n * @param sampleSizeInBits the number of bits in each sample\n * @param channels         the number of channels (1 for mono, 2 forstereo, and so on)\n * @param frameSize        the number of bytes in each frame\n * @param frameRate        the number of frames per second\n * @param bigEndian        indicates whether the data for a single sampleis stored in big-endian byte order (\u003ccode\u003efalse\u003c/code\u003e means little-endian)\n * @param properties       a \u003ccode\u003eMap\u0026lt;String,Object\u0026gt;\u003c/code\u003e objectcontaining format properties\n * @since 1.5\n */\n","tf":{"freq":{"littl":1,"fals":1,"store":1,"convent":1,"second":2,"singl":1,"link":1,"data":2,"use":1,"object":1,"objectcontain":1,"whether":1,"specifi":1,"rate":2,"order":1,"indic":1,"given":1,"map":1,"mean":1,"samplei":1,"audio":4,"repres":1,"paramet":2,"descript":1,"number":5,"format":4,"forstereo":1,"techniqu":1,"size":2,"bit":2,"encod":3,"frame":4,"per":2,"endian":3,"string":1,"properti":2,"construct":1,"big":2,"explain":1,"channel":2,"mono":1,"sampl":4},"maxFreq":5,"totalTerms":72},"loc":5}