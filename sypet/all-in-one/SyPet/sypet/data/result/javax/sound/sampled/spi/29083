{"id":29083,"className":"javax.sound.sampled.spi.AudioFileReader","methodName":"getAudioInputStream","signature":"\u003cjavax.sound.sampled.spi.AudioFileReader: javax.sound.sampled.AudioInputStream getAudioInputStream(java.io.InputStream)\u003e","javadoc":"/** \n * Obtains an audio input stream from the input stream provided.  The stream must point to valid audio file data.  In general, audio file readers may need to read some data from the stream before determining whether they support it.  These parsers must be able to mark the stream, read enough data to determine whether they support the stream, and, if not, reset the stream\u0027s read pointer to its original position.  If the input stream does not support this, this method may fail with an \u003ccode\u003eIOException\u003c/code\u003e.\n * @param stream the input stream from which the \u003ccode\u003eAudioInputStream\u003c/code\u003e should beconstructed\n * @return an \u003ccode\u003eAudioInputStream\u003c/code\u003e object based on the audio file data containedin the input stream.\n * @throws UnsupportedAudioFileException if the stream does not point to valid audiofile data recognized by the system\n * @throws IOException if an I/O exception occurs\n * @see InputStream#markSupported\n * @see InputStream#mark\n */\n","tf":{"freq":{"audiofil":1,"need":1,"valid":2,"unsupport":1,"stream":17,"data":5,"object":1,"abl":1,"enough":1,"must":2,"whether":2,"fail":1,"file":4,"read":3,"reset":1,"recogn":1,"except":4,"may":2,"containedin":1,"support":4,"audio":8,"origin":1,"mark":3,"provid":1,"beconstruct":1,"general":1,"point":2,"system":1,"obtain":1,"input":10,"reader":1,"determin":2,"base":1,"pointer":1,"method":1,"posit":1,"parser":1,"occur":1},"maxFreq":17,"totalTerms":93},"loc":0}