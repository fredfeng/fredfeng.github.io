{"id":29013,"className":"javax.sound.sampled.DataLine","methodName":"stop","signature":"\u003cjavax.sound.sampled.DataLine: void stop()\u003e","javadoc":"/** \n * Stops the line.  A stopped line should cease I/O activity. If the line is open and running, however, it should retain the resources required to resume activity.  A stopped line should retain any audio data in its buffer instead of discarding it, so that upon resumption the I/O can continue where it left off, if possible.  (This doesn\u0027t guarantee that there will never be discontinuities beyond the current buffer, of course; if the stopped condition continues for too long, input or output samples might be dropped.)  If desired, the retained data can be discarded by invoking the \u003ccode\u003eflush\u003c/code\u003e method. When audio capture or playback stops, a \u003ccode\u003e {@link LineEvent.Type#STOP STOP}\u003c/code\u003e event is generated.\n * @see #start()\n * @see #isRunning()\n * @see #flush()\n * @see LineEvent\n */\n","tf":{"freq":{"might":1,"stop":6,"ceas":1,"drop":1,"link":1,"cours":1,"data":2,"line":6,"possibl":1,"type":1,"desir":1,"run":2,"activ":2,"discard":2,"resum":1,"beyond":1,"buffer":2,"open":1,"resourc":1,"requir":1,"event":3,"current":1,"left":1,"resumpt":1,"captur":1,"howev":1,"condit":1,"audio":2,"invok":1,"guarante":1,"continu":2,"input":1,"never":1,"flush":2,"playback":1,"start":1,"discontinu":1,"generat":1,"instead":1,"will":1,"retain":3,"method":1,"output":1,"sampl":1,"upon":1},"maxFreq":6,"totalTerms":67},"loc":0}