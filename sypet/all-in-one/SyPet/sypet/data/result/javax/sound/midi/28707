{"id":28707,"className":"javax.sound.midi.MidiSystem","methodName":"getSequence","signature":"\u003cjavax.sound.midi.MidiSystem: javax.sound.midi.Sequence getSequence(java.io.File)\u003e","javadoc":"/** \n * Obtains a MIDI sequence from the specified \u003ccode\u003eFile\u003c/code\u003e. The \u003ccode\u003eFile\u003c/code\u003e must point to valid MIDI file data for a file type recognized by the system. \u003cp\u003e This operation can only succeed for files of a type which can be parsed by an installed file reader.  It may fail with an InvalidMidiDataException even for valid files if no compatible file reader is installed.  It will also fail with an InvalidMidiDataException if a compatible file reader is installed, but encounters errors while constructing the \u003ccode\u003eSequence\u003c/code\u003e object from the file data.\n * @param file the \u003ccode\u003eFile\u003c/code\u003e from which the \u003ccode\u003eSequence\u003c/code\u003eshould be constructed\n * @return a \u003ccode\u003eSequence\u003c/code\u003e object based on the MIDI file datapointed to by the File\n * @throws InvalidMidiDataException if the File does not point to valid MIDIfile data recognized by the system\n * @throws IOException if an I/O exception occurs\n */\n","tf":{"freq":{"datapoint":1,"valid":3,"data":6,"object":2,"type":2,"must":1,"specifi":1,"midi":3,"fail":2,"invalid":3,"oper":1,"file":15,"sequenc":5,"recogn":2,"may":1,"except":5,"succeed":1,"error":1,"difil":1,"instal":3,"point":2,"system":2,"obtain":1,"reader":3,"encount":1,"base":1,"will":1,"even":1,"construct":2,"also":1,"pars":1,"occur":1,"compat":2},"maxFreq":15,"totalTerms":78},"loc":21}