{"id":28979,"className":"javax.sound.sampled.Clip","methodName":"loop","signature":"\u003cjavax.sound.sampled.Clip: void loop(int)\u003e","javadoc":"/** \n * Starts looping playback from the current position.   Playback will continue to the loop\u0027s end point, then loop back to the loop start point \u003ccode\u003ecount\u003c/code\u003e times, and finally continue playback to the end of the clip. \u003cp\u003e If the current position when this method is invoked is greater than the loop end point, playback simply continues to the end of the clip without looping. \u003cp\u003e A \u003ccode\u003ecount\u003c/code\u003e value of 0 indicates that any current looping should cease and playback should continue to the end of the clip.  The behavior is undefined when this method is invoked with any other value during a loop operation. \u003cp\u003e If playback is stopped during looping, the current loop status is cleared; the behavior of subsequent loop and start requests is not affected by an interrupted loop operation.\n * @param count the number of times playback should loop back from theloop\u0027s end position to the loop\u0027s  start position, or \u003ccode\u003e {@link #LOOP_CONTINUOUSLY}\u003c/code\u003e to indicate that looping should continue until interrupted\n */\n","tf":{"freq":{"theloop":1,"stop":1,"simpli":1,"greater":1,"count":3,"ceas":1,"behavior":2,"link":1,"affect":1,"clear":1,"time":2,"indic":2,"oper":2,"request":1,"current":4,"loop":16,"valu":2,"subsequ":1,"undefin":1,"end":6,"clip":3,"status":1,"invok":2,"back":2,"number":1,"without":1,"interrupt":2,"continu":5,"point":3,"playback":7,"start":4,"will":1,"method":2,"posit":4},"maxFreq":16,"totalTerms":88},"loc":0}