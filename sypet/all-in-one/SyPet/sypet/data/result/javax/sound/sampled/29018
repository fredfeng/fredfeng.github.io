{"id":29018,"className":"javax.sound.sampled.DataLine","methodName":"available","signature":"\u003cjavax.sound.sampled.DataLine: int available()\u003e","javadoc":"/** \n * Obtains the number of bytes of data currently available to the application for processing in the data line\u0027s internal buffer.  For a source data line, this is the amount of data that can be written to the buffer without blocking.  For a target data line, this is the amount of data available to be read by the application.  For a clip, this value is always 0 because the audio data is loaded into the buffer when the clip is opened, and persists without modification until the clip is closed. \u003cp\u003e Note that the units used are bytes, but will always correspond to an integral number of sample frames of audio data. \u003cp\u003e An application is guaranteed that a read or write operation of up to the number of bytes returned from \u003ccode\u003eavailable()\u003c/code\u003e will not block; however, there is no guarantee that attempts to read or write more data will block.\n * @return the amount of data available, in bytes\n */\n","tf":{"freq":{"attempt":1,"integr":1,"correspond":1,"data":10,"use":1,"line":3,"block":3,"persist":1,"applic":3,"close":1,"amount":3,"buffer":3,"open":1,"oper":1,"written":1,"write":2,"current":1,"read":3,"valu":1,"howev":1,"note":1,"clip":3,"audio":2,"guarante":2,"alway":2,"number":3,"avail":5,"without":2,"process":1,"unit":1,"obtain":1,"frame":1,"will":3,"intern":1,"target":1,"sourc":1,"load":1,"sampl":1,"modif":1},"maxFreq":10,"totalTerms":75},"loc":0}