{"id":12120,"className":"javax.naming.directory.DirContext","methodName":"search","signature":"\u003cjavax.naming.directory.DirContext: javax.naming.NamingEnumeration\u003cjavax.naming.directory.SearchResult\u003e search(javax.naming.Name,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls)\u003e","javadoc":"/** \n * Searches in the named context or object for entries that satisfy the given search filter.  Performs the search as specified by the search controls. \u003cp\u003e The interpretation of \u003ccode\u003efilterExpr\u003c/code\u003e is based on RFC 2254.  It may additionally contain variables of the form \u003ccode\u003e{i}\u003c/code\u003e -- where \u003ccode\u003ei\u003c/code\u003e is an integer -- that refer to objects in the \u003ccode\u003efilterArgs\u003c/code\u003e array.  The interpretation of \u003ccode\u003efilterExpr\u003c/code\u003e is otherwise identical to that of the \u003ccode\u003efilter\u003c/code\u003e parameter of the method \u003ccode\u003esearch(Name, String, SearchControls)\u003c/code\u003e. \u003cp\u003e When a variable \u003ccode\u003e{i}\u003c/code\u003e appears in a search filter, it indicates that the filter argument \u003ccode\u003efilterArgs[i]\u003c/code\u003e is to be used in that place.  Such variables may be used wherever an \u003cem\u003eattr\u003c/em\u003e, \u003cem\u003evalue\u003c/em\u003e, or \u003cem\u003ematchingrule\u003c/em\u003e production appears in the filter grammar of RFC 2254, section 4.  When a string-valued filter argument is substituted for a variable, the filter is interpreted as if the string were given in place of the variable, with any characters having special significance within filters (such as \u003ccode\u003e\u0027*\u0027\u003c/code\u003e) having been escaped according to the rules of RFC 2254. \u003cp\u003e For directories that do not use a string representation for some or all of their attributes, the filter argument corresponding to an attribute value may be of a type other than String.  Directories that support unstructured binary-valued attributes, for example, should accept byte arrays as filter arguments.  The interpretation (if any) of filter arguments of any other type is determined by the service provider for that directory, which maps the filter operations onto operations with corresponding semantics in the underlying directory. \u003cp\u003e This method returns an enumeration of the results. Each element in the enumeration contains the name of the object and other information about the object (see \u003ccode\u003eSearchResult\u003c/code\u003e). The name is either relative to the target context of the search (which is named by the \u003ccode\u003ename\u003c/code\u003e parameter), or it is a URL string. If the target context is included in the enumeration (as is possible when \u003ccode\u003econs\u003c/code\u003e specifies a search scope of \u003ccode\u003eSearchControls.OBJECT_SCOPE\u003c/code\u003e or \u003ccode\u003eSearchControls.SUBSTREE_SCOPE\u003c/code\u003e), its name is the empty string. \u003cp\u003e The \u003ctt\u003eSearchResult\u003c/tt\u003e may also contain attributes of the matching object if the \u003ctt\u003econs\u003c/tt\u003e argument specifies that attributes be returned. \u003cp\u003e If the object does not have a requested attribute, that nonexistent attribute will be ignored.  Those requested attributes that the object does have will be returned. \u003cp\u003e A directory might return more attributes than were requested (see \u003cstrong\u003eAttribute Type Names\u003c/strong\u003e in the class description) but is not allowed to return arbitrary, unrelated attributes. \u003cp\u003e If a search filter with invalid variable substitutions is provided to this method, the result is undefined. When changes are made to this DirContext, the effect on enumerations returned by prior calls to this method is undefined. \u003cp\u003e See also \u003cstrong\u003eOperational Attributes\u003c/strong\u003e in the class description.\n * @param name the name of the context or object to search\n * @param filterExpr the filter expression to use for the search. The expression may contain variables of the form \"\u003ccode\u003e{i}\u003c/code\u003e\" where \u003ccode\u003ei\u003c/code\u003e is a nonnegative integer.  May not be null.\n * @param filterArgs the array of arguments to substitute for the variables in \u003ccode\u003efilterExpr\u003c/code\u003e.  The value of \u003ccode\u003efilterArgs[i]\u003c/code\u003e will replace each occurrence of \"\u003ccode\u003e{i}\u003c/code\u003e\". If null, equivalent to an empty array.\n * @param cons the search controls that control the search.  If null, the default search controls are used (equivalent to \u003ctt\u003e(new SearchControls())\u003c/tt\u003e).\n * @return  an enumeration of \u003ctt\u003eSearchResult\u003c/tt\u003es of the objectsthat satisfy the filter; never null\n * @throws ArrayIndexOutOfBoundsException if \u003ctt\u003efilterExpr\u003c/tt\u003e contains\u003ccode\u003e{i}\u003c/code\u003e expressions where \u003ccode\u003ei\u003c/code\u003e is outside the bounds of the array \u003ccode\u003efilterArgs\u003c/code\u003e\n * @throws InvalidSearchControlsException if \u003ctt\u003econs\u003c/tt\u003e containsinvalid settings\n * @throws InvalidSearchFilterException if \u003ctt\u003efilterExpr\u003c/tt\u003e with\u003ctt\u003efilterArgs\u003c/tt\u003e represents an invalid search filter\n * @throws NamingException if a naming exception is encountered\n * @see #search(Name,Attributes,String[])\n * @see java.text.MessageFormat\n */\n","tf":{"freq":{"appear":2,"accept":1,"variabl":8,"servic":1,"substitut":3,"occurr":1,"specifi":3,"arg":6,"wherev":1,"given":2,"search":26,"refer":1,"oper":3,"relat":1,"containsinvalid":1,"place":2,"undefin":2,"element":1,"ignor":1,"support":1,"form":2,"charact":1,"attr":1,"provid":2,"will":3,"array":6,"might":1,"directori":5,"correspond":2,"made":1,"use":5,"express":3,"attribut":13,"indic":1,"semant":1,"map":1,"addit":1,"may":6,"repres":1,"messag":1,"represent":1,"empti":2,"product":1,"either":1,"encount":1,"nonneg":1,"string":8,"satisfi":2,"base":1,"exampl":1,"method":4,"within":1,"bound":2,"con":4,"possibl":1,"perform":1,"type":3,"prior":1,"arbitrari":1,"invalid":4,"equival":2,"request":3,"argument":7,"control":9,"onto":1,"text":1,"except":5,"index":1,"unrel":1,"nonexist":1,"signific":1,"descript":2,"format":1,"inform":1,"outsid":1,"strong":4,"contain":5,"determin":1,"match":1,"filter":29,"otherwis":1,"unstructur":1,"result":5,"call":1,"binari":1,"scope":1,"allow":1,"matchingrul":1,"interpret":4,"expr":6,"object":8,"escap":1,"ident":1,"dir":1,"rule":1,"name":13,"valu":5,"includ":1,"entri":1,"paramet":2,"accord":1,"section":1,"grammar":1,"never":1,"effect":1,"replac":1,"context":5,"target":2,"java":1,"special":1,"chang":1,"objectsthat":1,"integ":2,"also":2},"maxFreq":29,"totalTerms":319},"loc":0}