{"id":12200,"className":"javax.naming.ldap.LdapReferralException","methodName":"getReferralContext","signature":"\u003cjavax.naming.ldap.LdapReferralException: javax.naming.Context getReferralContext(java.util.Hashtable,javax.naming.ldap.Control[])\u003e","javadoc":"/** \n * Retrieves the context at which to continue the method using request controls and environment properties. Regardless of whether a referral is encountered directly during a context operation, or indirectly, for example, during a search enumeration, the referral exception should provide a context at which to continue the operation. To continue the operation, the client program should re-invoke the method using the same arguments as the original invocation. \u003cp\u003e \u003ctt\u003ereqCtls\u003c/tt\u003e is used when creating the connection to the referred server. These controls will be used as the connection request controls for the context and context instances derived from the context. \u003ctt\u003ereqCtls\u003c/tt\u003e will also be the context\u0027s request controls for subsequent context operations. See the \u003ctt\u003eLdapContext\u003c/tt\u003e class description for details. \u003cp\u003e This method should be used instead of the other two overloaded forms when the caller needs to supply request controls for creating the referral context. It might need to do this, for example, when it needs to supply special controls relating to authentication. \u003cp\u003e Service provider implementors should read the \"Service Provider\" section in the \u003ctt\u003eLdapContext\u003c/tt\u003e class description for implementation details.\n * @param reqCtls The possibly null request controls to use for the new context.If null or the empty array means use no request controls.\n * @param env The possibly null environment properties to use whenfor the new context. If null, the context is initialized with no environment properties.\n * @return The non-null context at which to continue the method.\n * @exception NamingException If a naming exception was encountered.Call either \u003ctt\u003eretryReferral()\u003c/tt\u003e or \u003ctt\u003eskipReferral()\u003c/tt\u003e to continue processing referrals.\n */\n","tf":{"freq":{"need":3,"detail":2,"client":1,"deriv":1,"servic":2,"possibl":2,"skip":1,"whether":1,"search":1,"oper":4,"refer":1,"request":6,"relat":1,"implementor":1,"argument":1,"control":8,"except":4,"form":1,"creat":2,"invok":1,"environ":3,"descript":2,"whenfor":1,"provid":3,"continu":5,"invoc":1,"non":1,"instanc":1,"ldap":2,"program":1,"will":2,"properti":3,"array":1,"caller":1,"call":1,"might":1,"connect":2,"use":8,"retri":1,"authent":1,"indirect":1,"name":2,"mean":1,"read":1,"initi":1,"subsequ":1,"regardless":1,"direct":1,"ctls":3,"origin":1,"referr":7,"overload":1,"suppli":2,"env":1,"section":1,"empti":1,"process":1,"two":1,"either":1,"encount":2,"retriev":1,"exampl":2,"context":16,"instead":1,"special":1,"method":4,"server":1,"req":3,"also":1},"maxFreq":16,"totalTerms":146},"loc":0}