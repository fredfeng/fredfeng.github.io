{"id":11883,"className":"javax.naming.spi.NamingManager","methodName":"getObjectInstance","signature":"\u003cjavax.naming.spi.NamingManager: java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)\u003e","javadoc":"/** \n * Creates an instance of an object for the specified object and environment. \u003cp\u003e If an object factory builder has been installed, it is used to create a factory for creating the object. Otherwise, the following rules are used to create the object: \u003col\u003e \u003cli\u003eIf \u003ccode\u003erefInfo\u003c/code\u003e is a \u003ccode\u003eReference\u003c/code\u003e or \u003ccode\u003eReferenceable\u003c/code\u003e containing a factory class name, use the named factory to create the object. Return \u003ccode\u003erefInfo\u003c/code\u003e if the factory cannot be created. Under JDK 1.1, if the factory class must be loaded from a location specified in the reference, a \u003ctt\u003eSecurityManager\u003c/tt\u003e must have been installed or the factory creation will fail. If an exception is encountered while creating the factory, it is passed up to the caller. \u003cli\u003eIf \u003ctt\u003erefInfo\u003c/tt\u003e is a \u003ctt\u003eReference\u003c/tt\u003e or \u003ctt\u003eReferenceable\u003c/tt\u003e with no factory class name, and the address or addresses are \u003ctt\u003eStringRefAddr\u003c/tt\u003es with address type \"URL\", try the URL context factory corresponding to each URL\u0027s scheme id to create the object (see \u003ctt\u003egetURLContext()\u003c/tt\u003e). If that fails, continue to the next step. \u003cli\u003e Use the object factories specified in the \u003ctt\u003eContext.OBJECT_FACTORIES\u003c/tt\u003e property of the environment, and of the provider resource file associated with \u003ctt\u003enameCtx\u003c/tt\u003e, in that order. The value of this property is a colon-separated list of factory class names that are tried in order, and the first one that succeeds in creating an object is the one used. If none of the factories can be loaded, return \u003ccode\u003erefInfo\u003c/code\u003e. If an exception is encountered while creating the object, the exception is passed up to the caller. \u003c/ol\u003e \u003cp\u003e Service providers that implement the \u003ctt\u003eDirContext\u003c/tt\u003e interface should use \u003ctt\u003eDirectoryManager.getObjectInstance()\u003c/tt\u003e, not this method. Service providers that implement only the \u003ctt\u003eContext\u003c/tt\u003e interface should use this method. \u003cp\u003e Note that an object factory (an object that implements the ObjectFactory interface) must be public and must have a public constructor that accepts no arguments. \u003cp\u003e The \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003enameCtx\u003c/code\u003e parameters may optionally be used to specify the name of the object being created. \u003ccode\u003ename\u003c/code\u003e is the name of the object, relative to context \u003ccode\u003enameCtx\u003c/code\u003e.  This information could be useful to the object factory or to the object implementation. If there are several possible contexts from which the object could be named -- as will often be the case -- it is up to the caller to select one.  A good rule of thumb is to select the \"deepest\" context available. If \u003ccode\u003enameCtx\u003c/code\u003e is null, \u003ccode\u003ename\u003c/code\u003e is relative to the default initial context.  If no name is being specified, the \u003ccode\u003ename\u003c/code\u003e parameter should be null.\n * @param refInfo The possibly null object for which to create an object.\n * @param name The name of this object relative to \u003ccode\u003enameCtx\u003c/code\u003e.Specifying a name is optional; if it is omitted, \u003ccode\u003ename\u003c/code\u003e should be null.\n * @param nameCtx The context relative to which the \u003ccode\u003ename\u003c/code\u003eparameter is specified.  If null, \u003ccode\u003ename\u003c/code\u003e is relative to the default initial context.\n * @param environment The possibly null environment tobe used in the creation of the object factory and the object.\n * @return An object created using \u003ccode\u003erefInfo\u003c/code\u003e; or\u003ccode\u003erefInfo\u003c/code\u003e if an object cannot be created using the algorithm described above.\n * @exception NamingException if a naming exception was encounteredwhile attempting to get a URL context, or if one of the factories accessed throws a NamingException.\n * @exception Exception if one of the factories accessed throws anexception, or if an error was encountered while loading and instantiating the factory and object classes. A factory should only throw an exception if it does not want other factories to be used in an attempt to create an object. See ObjectFactory.getObjectInstance().\n * @see #getURLContext\n * @see ObjectFactory\n * @see ObjectFactory#getObjectInstance\n */\n","tf":{"freq":{"instanti":1,"accept":1,"servic":2,"possibl":3,"good":1,"addr":1,"type":1,"must":4,"info":7,"specifi":7,"referenc":2,"fail":2,"scheme":1,"refer":3,"file":1,"relat":5,"ctx":6,"none":1,"tobe":1,"option":2,"follow":1,"argument":1,"except":10,"succeed":1,"creat":15,"select":2,"environ":4,"builder":1,"describ":1,"avail":1,"lcontext":2,"provid":3,"continu":1,"instanc":5,"inform":1,"anexcept":1,"separ":1,"often":1,"contain":1,"will":2,"load":3,"properti":2,"encounteredwhil":1,"thumb":1,"deepest":1,"attempt":2,"otherwis":1,"caller":3,"creation":2,"directori":1,"correspond":1,"one":5,"next":1,"use":13,"colon":1,"object":34,"algorithm":1,"resourc":1,"order":2,"dir":1,"associ":1,"factori":25,"name":27,"rule":2,"valu":1,"initi":2,"want":1,"note":1,"constructor":1,"may":1,"locat":1,"error":1,"manag":2,"instal":2,"paramet":3,"list":1,"access":2,"sever":1,"pass":2,"ref":8,"secur":1,"address":3,"omit":1,"encount":3,"string":1,"context":11,"method":2,"first":1,"step":1},"maxFreq":34,"totalTerms":293},"loc":54}