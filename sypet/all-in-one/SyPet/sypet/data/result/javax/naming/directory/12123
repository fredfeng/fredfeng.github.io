{"id":12123,"className":"javax.naming.directory.BasicAttribute","methodName":"equals","signature":"\u003cjavax.naming.directory.BasicAttribute: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Determines whether obj is equal to this attribute. Two attributes are equal if their attribute-ids, syntaxes and values are equal. If the attribute values are unordered, the order that the values were added are irrelevant. If the attribute values are ordered, then the order the values must match. If obj is null or not an Attribute, false is returned. \u003cp\u003e By default \u003ctt\u003eObject.equals()\u003c/tt\u003e is used when comparing the attribute id and its values except when a value is an array. For an array, each element of the array is checked using \u003ctt\u003eObject.equals()\u003c/tt\u003e. A subclass may override this to make use of schema syntax information and matching rules, which define what it means for two attributes to be equal. How and whether a subclass makes use of the schema information is determined by the subclass. If a subclass overrides \u003ctt\u003eequals()\u003c/tt\u003e, it should also override \u003ctt\u003ehashCode()\u003c/tt\u003e such that two attributes that are equal have the same hash code.\n * @param obj      The possibly null object to check.\n * @return true if obj is equal to this attribute; false otherwise.\n * @see #hashCode\n * @see #contains\n */\n","tf":{"freq":{"otherwis":1,"fals":2,"defin":1,"possibl":1,"use":4,"object":3,"whether":2,"must":1,"schema":2,"id":1,"attribut":10,"order":3,"rule":1,"mean":1,"valu":7,"element":1,"may":1,"except":1,"check":2,"hash":3,"true":1,"equal":10,"inform":2,"two":3,"syntax":2,"unord":1,"contain":1,"determin":2,"subclass":4,"ad":1,"irrelev":1,"obj":4,"match":2,"also":1,"make":2,"compar":1,"array":3},"maxFreq":10,"totalTerms":89},"loc":35}