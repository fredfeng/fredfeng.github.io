{"id":11884,"className":"javax.naming.spi.NamingManager","methodName":"getURLContext","signature":"\u003cjavax.naming.spi.NamingManager: javax.naming.Context getURLContext(java.lang.String,java.util.Hashtable)\u003e","javadoc":"/** \n * Creates a context for the given URL scheme id. \u003cp\u003e The resulting context is for resolving URLs of the scheme \u003ccode\u003escheme\u003c/code\u003e. The resulting context is not tied to a specific URL. It is able to handle arbitrary URLs with the specified scheme. \u003cp\u003e The class name of the factory that creates the resulting context has the naming convention \u003ci\u003escheme-id\u003c/i\u003eURLContextFactory (e.g. \"ftpURLContextFactory\" for the \"ftp\" scheme-id), in the package specified as follows. The \u003ctt\u003eContext.URL_PKG_PREFIXES\u003c/tt\u003e environment property (which may contain values taken from applet parameters, system properties, or application resource files) contains a colon-separated list of package prefixes. Each package prefix in the property is tried in the order specified to load the factory class. The default package prefix is \"com.sun.jndi.url\" (if none of the specified packages work, this default is tried). The complete package name is constructed using the package prefix, concatenated with the scheme id. \u003cp\u003e For example, if the scheme id is \"ldap\", and the \u003ctt\u003eContext.URL_PKG_PREFIXES\u003c/tt\u003e property contains \"com.widget:com.wiz.jndi\", the naming manager would attempt to load the following classes until one is successfully instantiated: \u003cul\u003e \u003cli\u003ecom.widget.ldap.ldapURLContextFactory \u003cli\u003ecom.wiz.jndi.ldap.ldapURLContextFactory \u003cli\u003ecom.sun.jndi.url.ldap.ldapURLContextFactory \u003c/ul\u003e If none of the package prefixes work, null is returned. \u003cp\u003e If a factory is instantiated, it is invoked with the following parameters to produce the resulting context. \u003cp\u003e \u003ccode\u003efactory.getObjectInstance(null, environment);\u003c/code\u003e \u003cp\u003e For example, invoking getObjectInstance() as shown above on a LDAP URL context factory would return a context that can resolve LDAP urls (e.g. \"ldap://ldap.wiz.com/o\u003dwiz,c\u003dus\", \"ldap://ldap.umich.edu/o\u003dumich,c\u003dus\", ...). \u003cp\u003e Note that an object factory (an object that implements the ObjectFactory interface) must be public and must have a public constructor that accepts no arguments.\n * @param scheme    The non-null scheme-id of the URLs supported by the context.\n * @param environment The possibly null environment properties to beused in the creation of the object factory and the context.\n * @return A context for resolving URLs with thescheme id \u003ccode\u003escheme\u003c/code\u003e; \u003ccode\u003enull\u003c/code\u003e if the factory for creating the context is not found.\n * @exception NamingException If a naming exception occurs while creatingthe context.\n * @see #getObjectInstance\n * @see ObjectFactory#getObjectInstance\n */\n","tf":{"freq":{"com":7,"tie":1,"accept":1,"instanti":2,"possibl":1,"abl":1,"must":2,"specifi":4,"arbitrari":1,"given":1,"scheme":11,"file":1,"none":2,"taken":1,"umich":2,"follow":3,"argument":1,"work":2,"except":3,"support":1,"creat":3,"invok":2,"beus":1,"concaten":1,"environ":4,"shown":1,"resolv":3,"lcontext":6,"url":3,"non":1,"instanc":4,"system":1,"creatingth":1,"ldap":11,"separ":1,"contain":3,"ftp":2,"prefix":5,"load":2,"properti":5,"attempt":1,"creation":1,"result":4,"convent":1,"one":1,"use":1,"colon":1,"object":9,"applic":1,"sun":2,"resourc":1,"order":1,"factori":15,"name":6,"applet":1,"valu":1,"edu":1,"wiz":4,"widget":2,"jndi":4,"note":1,"constructor":1,"complet":1,"may":1,"manag":1,"paramet":2,"produc":1,"list":1,"handl":1,"specif":1,"context":14,"exampl":2,"construct":1,"theschem":1,"success":1,"occur":1,"found":1},"maxFreq":15,"totalTerms":198},"loc":11}