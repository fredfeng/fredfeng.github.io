{"id":12179,"className":"javax.naming.ldap.ControlFactory","methodName":"getControlInstance","signature":"\u003cjavax.naming.ldap.ControlFactory: javax.naming.ldap.Control getControlInstance(javax.naming.ldap.Control)\u003e","javadoc":"/** \n * Creates a control using this control factory. \u003cp\u003e The factory is used by the service provider to return controls that it reads from the LDAP protocol as specialized control classes. Without this mechanism, the provider would be returning controls that only contained data in BER encoded format. \u003cp\u003e Typically, \u003ctt\u003ectl\u003c/tt\u003e is a \"basic\" control containing BER encoded data. The factory is used to create a specialized control implementation, usually by decoding the BER encoded data, that provides methods to access that data in a type-safe and friendly manner. \u003cp\u003e For example, a factory might use the BER encoded data in basic control and return an instance of a VirtualListReplyControl. \u003cp\u003e If this factory cannot create a control using the argument supplied, it should return null. A factory should only throw an exception if it is sure that it is the only intended factory and that no other control factories should be tried. This might happen, for example, if the BER data in the control does not match what is expected of a control with the given OID. Since this method throws \u003ctt\u003eNamingException\u003c/tt\u003e, any other internally generated exception that should be propagated must be wrapped inside a \u003ctt\u003eNamingException\u003c/tt\u003e.\n * @param ctl A non-null control.\n * @return A possibly null Control.\n * @exception NamingException If \u003ctt\u003ectl\u003c/tt\u003e contains invalid data that prevents itfrom being used to create a control. A factory should only throw an exception if it knows how to produce the control (identified by the OID) but is unable to because of, for example invalid BER data.\n */\n","tf":{"freq":{"servic":1,"possibl":1,"type":1,"must":1,"expect":1,"invalid":2,"given":1,"basic":2,"propag":1,"happen":1,"sure":1,"argument":1,"decod":1,"control":18,"wrap":1,"except":7,"creat":4,"ctl":3,"prevent":1,"format":1,"provid":3,"without":1,"non":1,"instanc":2,"encod":4,"contain":3,"match":1,"friend":1,"virtual":1,"might":2,"typic":1,"data":8,"use":6,"identifi":1,"itfrom":1,"factori":9,"name":3,"read":1,"usual":1,"safe":1,"protocol":1,"produc":1,"list":1,"repli":1,"suppli":1,"access":1,"know":1,"unabl":1,"mechan":1,"generat":1,"exampl":3,"intern":1,"method":2,"special":2,"manner":1,"insid":1,"intend":1},"maxFreq":18,"totalTerms":122},"loc":0}