{"id":11604,"className":"javax.naming.CompoundName","methodName":"compareTo","signature":"\u003cjavax.naming.CompoundName: int compareTo(java.lang.Object)\u003e","javadoc":"/** \n * Compares this CompoundName with the specified Object for order. Returns a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object. \u003cp\u003e If obj is null or not an instance of CompoundName, ClassCastException is thrown. \u003cp\u003e See equals() for what it means for two compound names to be equal. If two compound names are equal, 0 is returned. \u003cp\u003e Ordering of compound names depend on the syntax of the compound name. By default, they follow lexicographical rules for string comparison with the extension that this applies to all the components in the compound name and that comparison of individual components is affected by the jndi.syntax.ignorecase and jndi.syntax.trimblanks properties, identical to how they affect equals(). If this compound name is \"lexicographically\" lesser than obj, a negative number is returned. If this compound name is \"lexicographically\" greater than obj, a positive number is returned. \u003cp\u003e Implementation note: Currently the syntax properties of the two compound names are not compared when checking order. They might be in the future.\n * @param obj     The non-null object to compare against.\n * @return  a negative integer, zero, or a positive integer as this Nameis less than, equal to, or greater than the given Object.\n * @exception ClassCastException if obj is not a CompoundName.\n * @see #equals(java.lang.Object)\n */\n","tf":{"freq":{"greater":3,"compound":11,"ignorecas":1,"zero":2,"lesser":1,"specifi":1,"given":2,"trimblank":1,"follow":1,"thrown":1,"except":3,"lexicograph":3,"number":2,"comparison":2,"instanc":1,"non":1,"syntax":4,"appli":1,"cast":2,"negat":3,"properti":2,"compar":4,"posit":3,"might":1,"namei":1,"object":5,"lang":1,"affect":2,"order":3,"ident":1,"extens":1,"name":12,"rule":1,"current":1,"mean":1,"jndi":2,"less":2,"note":1,"individu":1,"futur":1,"check":1,"depend":1,"equal":7,"two":3,"compon":2,"string":1,"obj":5,"java":1,"integ":4},"maxFreq":12,"totalTerms":117},"loc":6}