{"id":11885,"className":"javax.naming.spi.NamingManager","methodName":"getInitialContext","signature":"\u003cjavax.naming.spi.NamingManager: javax.naming.Context getInitialContext(java.util.Hashtable)\u003e","javadoc":"/** \n * Creates an initial context using the specified environment properties. \u003cp\u003e If an InitialContextFactoryBuilder has been installed, it is used to create the factory for creating the initial context. Otherwise, the class specified in the \u003ctt\u003eContext.INITIAL_CONTEXT_FACTORY\u003c/tt\u003e environment property is used. Note that an initial context factory (an object that implements the InitialContextFactory interface) must be public and must have a public constructor that accepts no arguments.\n * @param env The possibly null environment properties used whencreating the context.\n * @return A non-null initial context.\n * @exception NoInitialContextException If the\u003ctt\u003eContext.INITIAL_CONTEXT_FACTORY\u003c/tt\u003e property is not found or names a nonexistent class or a class that cannot be instantiated, or if the initial context could not be created for some other reason.\n * @exception NamingException If some other naming exception was encountered.\n * @see javax.naming.InitialContext\n * @see javax.naming.directory.InitialDirContext\n */\n","tf":{"freq":{"otherwis":1,"directori":1,"reason":1,"instanti":1,"accept":1,"use":4,"possibl":1,"object":1,"must":2,"specifi":2,"dir":1,"javax":2,"factori":4,"name":5,"initi":11,"note":1,"constructor":1,"argument":1,"except":5,"whencreat":1,"nonexist":1,"creat":4,"instal":1,"builder":1,"environ":3,"env":1,"non":1,"encount":1,"context":14,"properti":4,"found":1},"maxFreq":14,"totalTerms":79},"loc":35}