{"id":11892,"className":"javax.naming.spi.DirectoryManager","methodName":"getStateToBind","signature":"\u003cjavax.naming.spi.DirectoryManager: javax.naming.spi.DirStateFactory$Result getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable,javax.naming.directory.Attributes)\u003e","javadoc":"/** \n * Retrieves the state of an object for binding when given the original object and its attributes. \u003cp\u003e This method is like \u003ctt\u003eNamingManager.getStateToBind\u003c/tt\u003e except for the following differences: \u003cul\u003e \u003cli\u003eIt accepts an \u003ctt\u003eAttributes\u003c/tt\u003e parameter containing attributes that were passed to the \u003ctt\u003eDirContext.bind()\u003c/tt\u003e method. \u003cli\u003eIt returns a non-null \u003ctt\u003eDirStateFactory.Result\u003c/tt\u003e instance containing the object to be bound, and the attributes to accompany the binding. Either the object or the attributes may be null. \u003cli\u003e The state factories tried must each implement either \u003ctt\u003eStateFactory\u003c/tt\u003e or \u003ctt\u003eDirStateFactory\u003c/tt\u003e. If it implements \u003ctt\u003eDirStateFactory\u003c/tt\u003e, then \u003ctt\u003eDirStateFactory.getStateToBind()\u003c/tt\u003e is called; otherwise, \u003ctt\u003eStateFactory.getStateToBind()\u003c/tt\u003e is called. \u003c/ul\u003e Service providers that implement the \u003ctt\u003eDirContext\u003c/tt\u003e interface should use this method, not \u003ctt\u003eNamingManager.getStateToBind()\u003c/tt\u003e. \u003cp\u003e See NamingManager.getStateToBind() for a description of how the list of state factories to be tried is determined. \u003cp\u003e The object returned by this method is owned by the caller. The implementation will not subsequently modify it. It will contain either a new \u003ctt\u003eAttributes\u003c/tt\u003e object that is likewise owned by the caller, or a reference to the original \u003ctt\u003eattrs\u003c/tt\u003e parameter.\n * @param obj The non-null object for which to get state to bind.\n * @param name The name of this object relative to \u003ccode\u003enameCtx\u003c/code\u003e,or null if no name is specified.\n * @param nameCtx The context relative to which the \u003ccode\u003ename\u003c/code\u003eparameter is specified, or null if \u003ccode\u003ename\u003c/code\u003e is relative to the default initial context.\n * @param environment The possibly null environment tobe used in the creation of the state factory and the object\u0027s state.\n * @param attrs The possibly null Attributes that is to be bound with theobject.\n * @return A non-null DirStateFactory.Result containingthe object and attributes to be bound. If no state factory returns a non-null answer, the result will contain the object (\u003ctt\u003eobj\u003c/tt\u003e) itself with the original attributes.\n * @exception NamingException If a naming exception was encounteredwhile using the factories. A factory should only throw an exception if it does not want other factories to be used in an attempt to create an object. See \u003ctt\u003eDirStateFactory.getStateToBind()\u003c/tt\u003e.\n * @see DirStateFactory\n * @see DirStateFactory#getStateToBind\n * @see NamingManager#getStateToBind\n * @since 1.3\n */\n","tf":{"freq":{"accept":1,"servic":1,"possibl":2,"must":1,"specifi":2,"given":1,"refer":1,"relat":3,"ctx":2,"tobe":1,"follow":1,"except":5,"creat":1,"answer":1,"environ":2,"descript":1,"attr":2,"like":1,"provid":1,"instanc":1,"non":4,"likewis":1,"contain":4,"determin":1,"will":3,"encounteredwhil":1,"attempt":1,"otherwis":1,"caller":2,"creation":1,"result":3,"call":2,"containingth":1,"state":26,"use":4,"object":12,"attribut":9,"dir":10,"factori":17,"name":13,"initi":1,"subsequ":1,"want":1,"may":1,"manag":4,"paramet":3,"origin":3,"list":1,"accompani":1,"pass":1,"differ":1,"either":3,"retriev":1,"context":4,"modifi":1,"method":4,"obj":2,"theobject":1,"bind":13,"bound":3},"maxFreq":26,"totalTerms":197},"loc":32}