{"id":11965,"className":"javax.naming.spi.ObjectFactory","methodName":"getObjectInstance","signature":"\u003cjavax.naming.spi.ObjectFactory: java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)\u003e","javadoc":"/** \n * Creates an object using the location or reference information specified. \u003cp\u003e Special requirements of this object are supplied using \u003ccode\u003eenvironment\u003c/code\u003e. An example of such an environment property is user identity information. \u003cp\u003e \u003ctt\u003eNamingManager.getObjectInstance()\u003c/tt\u003e successively loads in object factories and invokes this method on them until one produces a non-null answer.  When an exception is thrown by an object factory, the exception is passed on to the caller of \u003ctt\u003eNamingManager.getObjectInstance()\u003c/tt\u003e (and no search is made for other factories that may produce a non-null answer). An object factory should only throw an exception if it is sure that it is the only intended factory and that no other object factories should be tried. If this factory cannot create an object using the arguments supplied, it should return null. \u003cp\u003e A \u003cem\u003eURL context factory\u003c/em\u003e is a special ObjectFactory that creates contexts for resolving URLs or objects whose locations are specified by URLs.  The \u003ctt\u003egetObjectInstance()\u003c/tt\u003e method of a URL context factory will obey the following rules. \u003col\u003e \u003cli\u003eIf \u003ccode\u003eobj\u003c/code\u003e is null, create a context for resolving URLs of the scheme associated with this factory. The resulting context is not tied to a specific URL:  it is able to handle arbitrary URLs with this factory\u0027s scheme id.  For example, invoking \u003ctt\u003egetObjectInstance()\u003c/tt\u003e with \u003ccode\u003eobj\u003c/code\u003e set to null on an LDAP URL context factory would return a context that can resolve LDAP URLs such as \"ldap://ldap.wiz.com/o\u003dwiz,c\u003dus\" and \"ldap://ldap.umich.edu/o\u003dumich,c\u003dus\". \u003cli\u003e If \u003ccode\u003eobj\u003c/code\u003e is a URL string, create an object (typically a context) identified by the URL.  For example, suppose this is an LDAP URL context factory.  If \u003ccode\u003eobj\u003c/code\u003e is \"ldap://ldap.wiz.com/o\u003dwiz,c\u003dus\", getObjectInstance() would return the context named by the distinguished name \"o\u003dwiz, c\u003dus\" at the LDAP server ldap.wiz.com.  This context can then be used to resolve LDAP names (such as \"cn\u003dGeorge\") relative to that context. \u003cli\u003e If \u003ccode\u003eobj\u003c/code\u003e is an array of URL strings, the assumption is that the URLs are equivalent in terms of the context to which they refer. Verification of whether the URLs are, or need to be, equivalent is up to the context factory. The order of the URLs in the array is not significant. The object returned by getObjectInstance() is like that of the single URL case.  It is the object named by the URLs. \u003cli\u003e If \u003ccode\u003eobj\u003c/code\u003e is of any other type, the behavior of \u003ctt\u003egetObjectInstance()\u003c/tt\u003e is determined by the context factory implementation. \u003c/ol\u003e \u003cp\u003e The \u003ctt\u003ename\u003c/tt\u003e and \u003ctt\u003eenvironment\u003c/tt\u003e parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies. \u003cp\u003e \u003cb\u003eName and Context Parameters.\u003c/b\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ca name\u003dNAMECTX\u003e\u003c/a\u003e The \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003enameCtx\u003c/code\u003e parameters may optionally be used to specify the name of the object being created. \u003ccode\u003ename\u003c/code\u003e is the name of the object, relative to context \u003ccode\u003enameCtx\u003c/code\u003e. If there are several possible contexts from which the object could be named -- as will often be the case -- it is up to the caller to select one.  A good rule of thumb is to select the \"deepest\" context available. If \u003ccode\u003enameCtx\u003c/code\u003e is null, \u003ccode\u003ename\u003c/code\u003e is relative to the default initial context.  If no name is being specified, the \u003ccode\u003ename\u003c/code\u003e parameter should be null. If a factory uses \u003ccode\u003enameCtx\u003c/code\u003e it should synchronize its use against concurrent access, since context implementations are not guaranteed to be thread-safe. \u003cp\u003e\n * @param obj The possibly null object containing location or referenceinformation that can be used in creating an object.\n * @param name The name of this object relative to \u003ccode\u003enameCtx\u003c/code\u003e,or null if no name is specified.\n * @param nameCtx The context relative to which the \u003ccode\u003ename\u003c/code\u003eparameter is specified, or null if \u003ccode\u003ename\u003c/code\u003e is relative to the default initial context.\n * @param environment The possibly null environment that is used increating the object.\n * @return The object created; null if an object cannot be created.\n * @exception Exception if this object factory encountered an exceptionwhile attempting to create an object, and no other object factories are to be tried.\n * @see NamingManager#getObjectInstance\n * @see NamingManager#getURLContext\n */\n","tf":{"freq":{"georg":1,"need":1,"tie":1,"singl":1,"abl":1,"whether":1,"copi":1,"specifi":6,"although":1,"scheme":2,"search":1,"refer":4,"thread":1,"relat":6,"ctx":6,"umich":2,"option":1,"nbsp":3,"clone":1,"invok":2,"answer":2,"resolv":4,"avail":1,"like":1,"non":2,"instanc":9,"obey":1,"ldap":7,"will":3,"load":1,"referenceinform":1,"deepest":1,"array":2,"caller":3,"concurr":1,"behavior":1,"increat":1,"made":1,"typic":1,"use":9,"associ":1,"factori":19,"initi":2,"safe":1,"may":3,"suppos":1,"access":1,"encount":1,"string":2,"exampl":3,"obj":7,"method":2,"assumpt":1,"keep":2,"verif":1,"com":3,"possibl":3,"good":1,"type":1,"arbitrari":1,"requir":1,"equival":2,"follow":1,"sure":1,"argument":1,"thrown":1,"except":5,"whose":1,"creat":10,"select":2,"environ":5,"signific":1,"lcontext":1,"inform":2,"often":1,"contain":1,"determin":1,"distinguish":1,"properti":1,"thumb":1,"attempt":1,"result":1,"one":2,"identifi":1,"object":34,"ident":1,"order":1,"rule":2,"name":30,"exceptionwhil":1,"edu":1,"wiz":6,"locat":3,"guarante":1,"manag":4,"paramet":5,"produc":2,"suppli":2,"sever":1,"pass":1,"handl":1,"specif":1,"term":1,"context":23,"modifi":1,"special":2,"server":1,"intend":1,"user":1,"success":1},"maxFreq":34,"totalTerms":324},"loc":0}