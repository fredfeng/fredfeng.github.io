{"id":11768,"className":"javax.naming.ReferralException","methodName":"skipReferral","signature":"\u003cjavax.naming.ReferralException: boolean skipReferral()\u003e","javadoc":"/** \n * Discards the referral about to be processed. A call to this method should be followed by a call to \u003ccode\u003egetReferralContext\u003c/code\u003e to allow the processing of other referrals to continue. The following code fragment shows a typical usage pattern. \u003cp\u003e\u003cblockquote\u003e\u003cpre\u003e } catch (ReferralException e) { if (!shallIFollow(e.getReferralInfo())) { if (!e.skipReferral()) { return; } } ctx \u003d e.getReferralContext(); } \u003c/pre\u003e\u003c/blockquote\u003e\n * @return true If more referral processing is pending; false otherwise.\n */\n","tf":{"freq":{"otherwis":1,"fals":1,"call":2,"allow":1,"typic":1,"show":1,"discard":1,"skip":2,"info":1,"blockquot":2,"ctx":1,"fragment":1,"follow":2,"pend":1,"except":1,"true":1,"referr":9,"continu":1,"shall":1,"process":3,"ifollow":1,"pattern":1,"pre":2,"context":2,"method":1,"usag":1},"maxFreq":9,"totalTerms":42},"loc":0}