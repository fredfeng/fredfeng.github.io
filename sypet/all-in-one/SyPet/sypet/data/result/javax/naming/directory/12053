{"id":12053,"className":"javax.naming.directory.BasicAttributes","methodName":"equals","signature":"\u003cjavax.naming.directory.BasicAttributes: boolean equals(java.lang.Object)\u003e","javadoc":"/** \n * Determines whether this \u003ctt\u003eBasicAttributes\u003c/tt\u003e is equal to another \u003ctt\u003eAttributes\u003c/tt\u003e Two \u003ctt\u003eAttributes\u003c/tt\u003e are equal if they are both instances of \u003ctt\u003eAttributes\u003c/tt\u003e, treat the case of attribute IDs the same way, and contain the same attributes. Each \u003ctt\u003eAttribute\u003c/tt\u003e in this \u003ctt\u003eBasicAttributes\u003c/tt\u003e is checked for equality using \u003ctt\u003eObject.equals()\u003c/tt\u003e, which may have be overridden by implementations of \u003ctt\u003eAttribute\u003c/tt\u003e). If a subclass overrides \u003ctt\u003eequals()\u003c/tt\u003e, it should override \u003ctt\u003ehashCode()\u003c/tt\u003e as well so that two \u003ctt\u003eAttributes\u003c/tt\u003e instances that are equal have the same hash code.\n * @param obj the possibly null object to compare against.\n * @return true If obj is equal to this BasicAttributes.\n * @see #hashCode\n */\n","tf":{"freq":{"may":1,"check":1,"hash":3,"overridden":1,"true":1,"possibl":1,"use":1,"way":1,"equal":8,"well":1,"object":2,"anoth":1,"whether":1,"instanc":2,"id":1,"two":2,"attribut":11,"basic":3,"determin":1,"contain":1,"subclass":1,"obj":2,"compar":1,"treat":1},"maxFreq":11,"totalTerms":49},"loc":28}