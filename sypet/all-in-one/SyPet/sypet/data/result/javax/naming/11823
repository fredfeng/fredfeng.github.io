{"id":11823,"className":"javax.naming.CompositeName","methodName":"compareTo","signature":"\u003cjavax.naming.CompositeName: int compareTo(java.lang.Object)\u003e","javadoc":"/** \n * Compares this CompositeName with the specified Object for order. Returns a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object. \u003cp\u003e If obj is null or not an instance of CompositeName, ClassCastException is thrown. \u003cp\u003e See equals() for what it means for two composite names to be equal. If two composite names are equal, 0 is returned. \u003cp\u003e Ordering of composite names follows the lexicographical rules for string comparison, with the extension that this applies to all the components in the composite name. The effect is as if all the components were lined up in their specified ordered and the lexicographical rules applied over the two line-ups. If this composite name is \"lexicographically\" lesser than obj, a negative number is returned. If this composite name is \"lexicographically\" greater than obj, a positive number is returned.\n * @param obj The non-null object to compare against.\n * @return  a negative integer, zero, or a positive integer as this Nameis less than, equal to, or greater than the given Object.\n * @exception ClassCastException if obj is not a CompositeName.\n */\n","tf":{"freq":{"greater":3,"namei":1,"line":2,"object":4,"zero":2,"lesser":1,"specifi":2,"order":3,"given":2,"extens":1,"name":10,"rule":2,"mean":1,"less":2,"follow":1,"except":3,"thrown":1,"composit":9,"number":2,"equal":5,"lexicograph":4,"comparison":1,"non":1,"instanc":1,"two":3,"appli":2,"effect":1,"compon":2,"cast":2,"string":1,"negat":3,"obj":5,"posit":3,"integ":4,"compar":3},"maxFreq":10,"totalTerms":93},"loc":6}