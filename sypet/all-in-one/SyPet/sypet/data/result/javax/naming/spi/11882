{"id":11882,"className":"javax.naming.spi.NamingManager","methodName":"setObjectFactoryBuilder","signature":"\u003cjavax.naming.spi.NamingManager: void setObjectFactoryBuilder(javax.naming.spi.ObjectFactoryBuilder)\u003e","javadoc":"/** \n * The ObjectFactoryBuilder determines the policy used when trying to load object factories. See getObjectInstance() and class ObjectFactory for a description of the default policy. setObjectFactoryBuilder() overrides this default policy by installing an ObjectFactoryBuilder. Subsequent object factories will be loaded and created using the installed builder. \u003cp\u003e The builder can only be installed if the executing thread is allowed (by the security manager\u0027s checkSetFactory() method) to do so. Once installed, the builder cannot be replaced. \u003cp\u003e\n * @param builder The factory builder to install. If null, no builderis installed.\n * @exception SecurityException builder cannot be installedfor security reasons.\n * @exception NamingException builder cannot be installed fora non-security-related reason.\n * @exception IllegalStateException If a factory has already been installed.\n * @see #getObjectInstance\n * @see ObjectFactory\n * @see ObjectFactoryBuilder\n * @see java.lang.SecurityManager#checkSetFactory\n */\n","tf":{"freq":{"allow":1,"reason":2,"state":1,"use":2,"object":11,"lang":1,"installedfor":1,"factori":13,"name":1,"thread":1,"relat":1,"subsequ":1,"fora":1,"except":6,"check":2,"creat":1,"manag":2,"instal":8,"descript":1,"builder":12,"polici":3,"illeg":1,"non":1,"instanc":2,"secur":5,"determin":1,"replac":1,"will":1,"java":1,"alreadi":1,"load":2,"method":1,"execut":1,"builderi":1},"maxFreq":13,"totalTerms":91},"loc":10}