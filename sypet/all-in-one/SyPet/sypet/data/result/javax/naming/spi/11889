{"id":11889,"className":"javax.naming.spi.NamingManager","methodName":"getStateToBind","signature":"\u003cjavax.naming.spi.NamingManager: java.lang.Object getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)\u003e","javadoc":"/** \n * Retrieves the state of an object for binding. \u003cp\u003e Service providers that implement the \u003ctt\u003eDirContext\u003c/tt\u003e interface should use \u003ctt\u003eDirectoryManager.getStateToBind()\u003c/tt\u003e, not this method. Service providers that implement only the \u003ctt\u003eContext\u003c/tt\u003e interface should use this method. \u003cp\u003e This method uses the specified state factories in the \u003ctt\u003eContext.STATE_FACTORIES\u003c/tt\u003e property from the environment properties, and from the provider resource file associated with \u003ctt\u003enameCtx\u003c/tt\u003e, in that order. The value of this property is a colon-separated list of factory class names that are tried in order, and the first one that succeeds in returning the object\u0027s state is the one used. If no object\u0027s state can be retrieved in this way, return the object itself. If an exception is encountered while retrieving the state, the exception is passed up to the caller. \u003cp\u003e Note that a state factory (an object that implements the StateFactory interface) must be public and must have a public constructor that accepts no arguments. \u003cp\u003e The \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003enameCtx\u003c/code\u003e parameters may optionally be used to specify the name of the object being created. See the description of \"Name and Context Parameters\" in {@link ObjectFactory#getObjectInstance ObjectFactory.getObjectInstance()}for details. \u003cp\u003e This method may return a \u003ctt\u003eReferenceable\u003c/tt\u003e object.  The service provider obtaining this object may choose to store it directly, or to extract its reference (using \u003ctt\u003eReferenceable.getReference()\u003c/tt\u003e) and store that instead.\n * @param obj The non-null object for which to get state to bind.\n * @param name The name of this object relative to \u003ccode\u003enameCtx\u003c/code\u003e,or null if no name is specified.\n * @param nameCtx The context relative to which the \u003ccode\u003ename\u003c/code\u003eparameter is specified, or null if \u003ccode\u003ename\u003c/code\u003e is relative to the default initial context.\n * @param environment The possibly null environment tobe used in the creation of the state factory and the object\u0027s state.\n * @return The non-null object representing \u003ctt\u003eobj\u003c/tt\u003e\u0027s state forbinding.  It could be the object (\u003ctt\u003eobj\u003c/tt\u003e) itself.\n * @exception NamingException If one of the factories accessed throws anexception, or if an error was encountered while loading and instantiating the factory and object classes. A factory should only throw an exception if it does not want other factories to be used in an attempt to create an object. See \u003ctt\u003eStateFactory.getStateToBind()\u003c/tt\u003e.\n * @see StateFactory\n * @see StateFactory#getStateToBind\n * @see DirectoryManager#getStateToBind\n * @since 1.3\n */\n","tf":{"freq":{"detail":1,"store":2,"instanti":1,"accept":1,"servic":3,"possibl":1,"must":2,"specifi":4,"referenc":2,"refer":2,"file":1,"relat":3,"ctx":4,"tobe":1,"option":1,"argument":1,"except":5,"succeed":1,"creat":2,"environ":3,"descript":1,"provid":4,"extract":1,"non":2,"instanc":2,"obtain":1,"anexcept":1,"separ":1,"load":1,"properti":3,"attempt":1,"caller":1,"creation":1,"directori":2,"one":3,"link":1,"state":19,"use":8,"way":1,"colon":1,"object":19,"resourc":1,"order":2,"associ":1,"dir":1,"factori":14,"name":14,"choos":1,"valu":1,"initi":1,"want":1,"note":1,"constructor":1,"direct":1,"may":3,"error":1,"repres":1,"manag":2,"paramet":3,"list":1,"access":1,"pass":1,"retriev":3,"encount":2,"forbind":1,"instead":1,"context":6,"obj":3,"method":4,"bind":7,"first":1},"maxFreq":19,"totalTerms":196},"loc":19}