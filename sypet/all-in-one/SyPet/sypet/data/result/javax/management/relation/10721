{"id":10721,"className":"javax.management.relation.RelationServiceMBean","methodName":"sendRoleUpdateNotification","signature":"\u003cjavax.management.relation.RelationServiceMBean: void sendRoleUpdateNotification(java.lang.String,javax.management.relation.Role,java.util.List)\u003e","javadoc":"/** \n * Sends a notification (RelationNotification) for a role update in the given relation. The notification type is: \u003cP\u003e- RelationNotification.RELATION_BASIC_UPDATE if the relation is an object internal to the Relation Service \u003cP\u003e- RelationNotification.RELATION_MBEAN_UPDATE if the relation is a MBean added as a relation. \u003cP\u003eThe source object is the Relation Service itself. \u003cP\u003eIt is called in relation MBean setRole() (for given role) and setRoles() (for each role) methods (implementation provided in RelationSupport class). \u003cP\u003eIt is also called in Relation Service setRole() (for given role) and setRoles() (for each role) methods.\n * @param relationId  relation identifier of the updated relation\n * @param newRole  new role (name and new value)\n * @param oldRoleValue  old role value (List of ObjectName objects)\n * @exception IllegalArgumentException  if null parameter\n * @exception RelationNotFoundException  if there is no relation for givenrelation id\n */\n","tf":{"freq":{"mbean":2,"call":2,"old":2,"send":2,"servic":3,"identifi":1,"object":4,"type":1,"notif":6,"givenrel":1,"given":3,"name":2,"relat":17,"role":14,"valu":3,"argument":1,"except":4,"support":1,"paramet":1,"list":1,"illeg":1,"provid":1,"updat":3,"intern":1,"ad":1,"sourc":1,"method":2,"also":1,"found":1},"maxFreq":17,"totalTerms":83},"loc":0}