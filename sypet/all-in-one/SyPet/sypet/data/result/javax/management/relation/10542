{"id":10542,"className":"javax.management.relation.Relation","methodName":"setRoles","signature":"\u003cjavax.management.relation.Relation: javax.management.relation.RoleResult setRoles(javax.management.relation.RoleList)\u003e","javadoc":"/** \n * Sets the given roles. \u003cP\u003eWill check the role according to its corresponding role definition provided in relation\u0027s relation type \u003cP\u003eWill send one notification (RelationNotification with type RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the relation is a MBean or not) per updated role.\n * @param roleList  list of roles to be set\n * @return a RoleResult object, including a RoleList (for rolessuccessfully set) and a RoleUnresolvedList (for roles not set).\n * @exception IllegalArgumentException  if null role list\n * @exception RelationServiceNotRegisteredException  if the RelationService is not registered in the MBean Server\n * @exception RelationTypeNotFoundException  if the relation type has notbeen declared in the Relation Service.\n * @exception RelationNotFoundException  if the relation MBean has not beenadded in the Relation Service.\n * @see #getRoles\n */\n","tf":{"freq":{"mbean":3,"result":1,"send":1,"correspond":1,"servic":4,"one":1,"rolessuccess":1,"object":1,"type":4,"unresolv":1,"notif":2,"declar":1,"given":1,"relat":12,"regist":2,"role":13,"beenad":1,"argument":1,"except":8,"includ":1,"check":1,"depend":1,"list":5,"accord":1,"illeg":1,"provid":1,"per":1,"updat":1,"definit":1,"will":2,"notbeen":1,"server":1,"found":2},"maxFreq":13,"totalTerms":79},"loc":0}