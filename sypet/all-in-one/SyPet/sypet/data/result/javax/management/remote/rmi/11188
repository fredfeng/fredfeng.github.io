{"id":11188,"className":"javax.management.remote.rmi.RMIConnection","methodName":"fetchNotifications","signature":"\u003cjavax.management.remote.rmi.RMIConnection: javax.management.remote.NotificationResult fetchNotifications(long,int,long)\u003e","javadoc":"/** \n * \u003cp\u003eRetrieves notifications from the connector server.  This method can block until there is at least one notification or until the specified timeout is reached.  The method can also return at any time with zero notifications.\u003c/p\u003e \u003cp\u003eA notification can be included in the result if its sequence number is no less than \u003ccode\u003eclientSequenceNumber\u003c/code\u003e and this client has registered at least one listener for the MBean generating the notification, with a filter that accepts the notification.  Each listener that is interested in the notification is identified by an Integer ID that was returned by  {@link #addNotificationListeners(ObjectName[],MarshalledObject[],Subject[])}.\u003c/p\u003e\n * @param clientSequenceNumber the first sequence number that theclient is interested in.  If negative, it is interpreted as meaning the sequence number that the next notification will have.\n * @param maxNotifications the maximum number of differentnotifications to return.  The \u003ccode\u003eTargetedNotification\u003c/code\u003e array in the returned \u003ccode\u003eNotificationResult\u003c/code\u003e can have more elements than this if the same notification appears more than once.  The behavior is unspecified if this parameter is negative.\n * @param timeout the maximum time in milliseconds to wait for anotification to arrive.  This can be 0 to indicate that the method should not wait if there are no notifications, but should return at once.  It can be \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e to indicate that there is no timeout.  The behavior is unspecified if this parameter is negative.\n * @return A \u003ccode\u003eNotificationResult\u003c/code\u003e.\n * @throws IOException if a general communication exception occurred.\n */\n","tf":{"freq":{"mbean":1,"appear":1,"client":3,"least":2,"accept":1,"wait":2,"zero":1,"specifi":1,"notif":16,"time":2,"sequenc":5,"interest":2,"marshal":1,"element":1,"fetch":1,"except":2,"anotif":1,"number":6,"theclient":1,"maximum":2,"will":1,"connector":1,"negat":3,"arriv":1,"filter":1,"array":1,"unspecifi":2,"result":3,"differentnotif":1,"behavior":2,"subject":1,"one":2,"link":1,"next":1,"interpret":1,"block":1,"identifi":1,"object":2,"add":1,"reach":1,"indic":2,"millisecond":1,"name":1,"regist":1,"mean":1,"listen":3,"less":1,"includ":1,"max":1,"paramet":2,"general":1,"communic":1,"retriev":1,"generat":1,"target":1,"server":1,"method":3,"also":1,"integ":1,"first":1,"timeout":3,"occur":1},"maxFreq":16,"totalTerms":110},"loc":0}