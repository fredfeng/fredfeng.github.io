{"id":10457,"className":"javax.management.ImmutableDescriptor","methodName":"union","signature":"\u003cjavax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])\u003e","javadoc":"/** \n * \u003cp\u003eReturn an  {@code ImmutableDescriptor} whose contents are the union ofthe given descriptors.  Every field name that appears in any of the descriptors will appear in the result with the value that it has when the method is called.  Subsequent changes to any of the descriptors do not affect the ImmutableDescriptor returned here.\u003c/p\u003e \u003cp\u003eIn the simplest case, there is only one descriptor and the returned  {@code ImmutableDescriptor} is a copy of its fields at thetime this method is called:\u003c/p\u003e \u003cpre\u003e Descriptor d \u003d something(); ImmutableDescriptor copy \u003d ImmutableDescriptor.union(d); \u003c/pre\u003e\n * @param descriptors the descriptors to be combined.  Any of thedescriptors can be null, in which case it is skipped.\n * @return an {@code ImmutableDescriptor} that is the union of the givendescriptors.  The returned object may be identical to one of the input descriptors if it is an ImmutableDescriptor that contains all of the required fields.\n * @throws IllegalArgumentException if two Descriptors contain thesame field name with different associated values.  Primitive array values are considered the same if they are of the same type with the same elements.  Object array values are considered the same if {@link Arrays#deepEquals(Object[],Object[])} returns true.\n */\n","tf":{"freq":{"appear":2,"simplest":1,"skip":1,"type":1,"copi":2,"requir":1,"given":1,"combin":1,"thesam":1,"deep":1,"everi":1,"argument":1,"element":1,"except":1,"whose":1,"thetim":1,"immut":7,"content":1,"input":1,"contain":2,"will":1,"array":3,"call":2,"result":1,"primit":1,"descriptor":16,"one":2,"link":1,"object":4,"affect":1,"someth":1,"consid":2,"ident":1,"associ":1,"union":4,"ofth":1,"name":2,"valu":4,"subsequ":1,"may":1,"givendescriptor":1,"true":1,"equal":1,"thedescriptor":1,"illeg":1,"field":4,"two":1,"differ":1,"pre":2,"method":2,"chang":1},"maxFreq":16,"totalTerms":95},"loc":48}