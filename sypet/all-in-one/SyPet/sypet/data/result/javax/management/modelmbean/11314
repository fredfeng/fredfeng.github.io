{"id":11314,"className":"javax.management.modelmbean.DescriptorSupport","methodName":"toXMLString","signature":"\u003cjavax.management.modelmbean.DescriptorSupport: java.lang.String toXMLString()\u003e","javadoc":"/** \n * \u003cp\u003eReturns an XML String representing the descriptor.\u003c/p\u003e \u003cp\u003eThe format is not defined, but an implementation must ensure that the string returned by this method can be used to build an equivalent descriptor when instantiated using the constructor  {@link #DescriptorSupport(String) DescriptorSupport(String inStr)}.\u003c/p\u003e \u003cp\u003eFields which are not String objects will have toString() called on them to create the value. The value will be enclosed in parentheses.  It is not guaranteed that you can reconstruct these objects unless they have been specifically set up to support toString() in a meaningful format and have a matching constructor that accepts a String in the same format.\u003c/p\u003e \u003cp\u003eIf the descriptor is empty the following String is returned: \u0026lt;Descriptor\u0026gt;\u0026lt;/Descriptor\u0026gt;\u003c/p\u003e\n * @return the XML string.\n * @exception RuntimeOperationsException for illegal value forfield Names or field Values.  If the XML formatted string construction fails for any reason, this exception will be thrown.\n */\n","tf":{"freq":{"defin":1,"call":1,"reason":1,"descriptor":7,"accept":1,"instanti":1,"link":1,"use":2,"object":2,"build":1,"forfield":1,"must":1,"parenthes":1,"ensur":1,"fail":1,"unless":1,"oper":1,"equival":1,"reconstruct":1,"name":1,"valu":4,"follow":1,"constructor":2,"thrown":1,"except":3,"support":3,"repres":1,"creat":1,"guarante":1,"runtim":1,"meaning":1,"format":4,"illeg":1,"empti":1,"field":2,"specif":1,"str":1,"string":11,"enclos":1,"will":3,"method":1,"construct":1,"match":1,"lstring":1},"maxFreq":11,"totalTerms":76},"loc":25}