{"id":11049,"className":"javax.management.remote.JMXConnector","methodName":"getMBeanServerConnection","signature":"\u003cjavax.management.remote.JMXConnector: javax.management.MBeanServerConnection getMBeanServerConnection(javax.security.auth.Subject)\u003e","javadoc":"/** \n * \u003cp\u003eReturns an \u003ccode\u003eMBeanServerConnection\u003c/code\u003e object representing a remote MBean server on which operations are performed on behalf of the supplied delegation subject. For a given \u003ccode\u003eJMXConnector\u003c/code\u003e and \u003ccode\u003eSubject\u003c/code\u003e, two successful calls to this method will usually return the same \u003ccode\u003eMBeanServerConnection\u003c/code\u003e object, though this is not required.\u003c/p\u003e \u003cp\u003eFor each method in the returned \u003ccode\u003eMBeanServerConnection\u003c/code\u003e, calling the method causes the corresponding method to be called in the remote MBean server on behalf of the given delegation subject instead of the authenticated subject. The value returned by the MBean server method is the value returned to the client. If the MBean server method produces an \u003ccode\u003eException\u003c/code\u003e, the same \u003ccode\u003eException\u003c/code\u003e is seen by the client. If the MBean server method, or the attempt to call it, produces an \u003ccode\u003eError\u003c/code\u003e, the \u003ccode\u003eError\u003c/code\u003e is wrapped in a {@link JMXServerErrorException}, which is seen by the client.\u003c/p\u003e\n * @param delegationSubject the \u003ccode\u003eSubject\u003c/code\u003e on behalf ofwhich requests will be performed.  Can be null, in which case requests will be performed on behalf of the authenticated Subject, if any.\n * @return an object that implements the \u003ccode\u003eMBeanServerConnection\u003c/code\u003einterface by forwarding its methods to the remote MBean server on behalf of a given delegation subject.\n * @exception IOException if a valid \u003ccode\u003eMBeanServerConnection\u003c/code\u003ecannot be created, for instance because the connection to the remote MBean server has not yet been established (with the  {@link #connect(Map) connect} method), or it has been closed, or it has broken.\n */\n","tf":{"freq":{"attempt":1,"behalf":5,"valid":1,"mbean":13,"call":4,"client":3,"connect":9,"subject":8,"correspond":1,"link":2,"perform":3,"object":3,"though":1,"close":1,"ofwhich":1,"authent":2,"xconnector":1,"deleg":4,"requir":1,"given":3,"forward":1,"oper":1,"request":2,"map":1,"valu":2,"xserver":1,"usual":1,"wrap":1,"except":5,"error":3,"creat":1,"repres":1,"establish":1,"produc":2,"suppli":1,"seen":2,"instanc":1,"broken":1,"two":1,"caus":1,"remot":4,"instead":1,"will":3,"server":13,"method":9,"success":1,"yet":1},"maxFreq":13,"totalTerms":129},"loc":0}