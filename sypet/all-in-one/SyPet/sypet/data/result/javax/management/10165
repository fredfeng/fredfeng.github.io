{"id":10165,"className":"javax.management.MBeanServer","methodName":"getClassLoader","signature":"\u003cjavax.management.MBeanServer: java.lang.ClassLoader getClassLoader(javax.management.ObjectName)\u003e","javadoc":"/** \n * \u003cp\u003eReturn the named  {@link java.lang.ClassLoader}.\u003c/p\u003e\n * @param loaderName The ObjectName of the ClassLoader.  May benull, in which case the MBean server\u0027s own ClassLoader is returned.\n * @return The named ClassLoader.  If \u003cvar\u003el\u003c/var\u003e is the actualClassLoader with that name, and \u003cvar\u003er\u003c/var\u003e is the returned value, then either: \u003cul\u003e \u003cli\u003e\u003cvar\u003er\u003c/var\u003e is identical to \u003cvar\u003el\u003c/var\u003e; or \u003cli\u003ethe result of \u003cvar\u003er\u003c/var\u003e {@link ClassLoader#loadClass(String) .loadClass(\u003cvar\u003es\u003c/var\u003e)} is thesame as \u003cvar\u003el\u003c/var\u003e {@link ClassLoader#loadClass(String) .loadClass(\u003cvar\u003es\u003c/var\u003e)} for any string \u003cvar\u003es\u003c/var\u003e.\u003c/ul\u003e What this means is that the ClassLoader may be wrapped in another ClassLoader for security or other reasons.\n * @exception InstanceNotFoundException if the named ClassLoader isnot found.\n */\n","tf":{"freq":{"mbean":1,"result":1,"reason":1,"var":18,"link":3,"object":1,"anoth":1,"lang":1,"isnot":1,"ident":1,"name":6,"mean":1,"valu":1,"thesam":1,"wrap":1,"except":2,"may":2,"loader":12,"instanc":1,"either":1,"secur":1,"string":3,"actual":1,"server":1,"java":1,"load":4,"found":2,"benul":1},"maxFreq":18,"totalTerms":71},"loc":0}