{"id":11320,"className":"javax.management.modelmbean.ModelMBeanNotificationBroadcaster","methodName":"addAttributeChangeNotificationListener","signature":"\u003cjavax.management.modelmbean.ModelMBeanNotificationBroadcaster: void addAttributeChangeNotificationListener(javax.management.NotificationListener,java.lang.String,java.lang.Object)\u003e","javadoc":"/** \n * Registers an object which implements the NotificationListener interface as a listener.  This object\u0027s \u0027handleNotification()\u0027 method will be invoked when any attributeChangeNotification is issued through or by the ModelMBean.  This does not include other Notifications.  They must be registered for independently. An AttributeChangeNotification will be generated for this attributeName.\n * @param listener The listener object which will handles notifications emitted by the registered MBean.\n * @param attributeName The name of the ModelMBean attribute for which to receive change notifications.If null, then all attribute changes will cause an attributeChangeNotification to be issued.\n * @param handback The context to be sent to the listener with the notification when a notification is emitted.\n * @exception IllegalArgumentException The listener cannot be null.\n * @exception MBeanException Wraps a distributed communication Exception.\n * @exception RuntimeOperationsException Wraps an IllegalArgumentException The attribute name passed in parameter does not exist.\n * @see #removeAttributeChangeNotificationListener\n */\n","tf":{"freq":{"mbean":4,"model":2,"distribut":1,"object":3,"add":1,"issu":2,"must":1,"notif":12,"sent":1,"independ":1,"attribut":10,"oper":1,"name":4,"handback":1,"regist":3,"exist":1,"listen":8,"argument":2,"wrap":2,"emit":2,"except":8,"includ":1,"invok":1,"runtim":1,"remov":1,"paramet":1,"receiv":1,"illeg":2,"pass":1,"handl":2,"caus":1,"communic":1,"generat":1,"will":4,"context":1,"method":1,"chang":7},"maxFreq":12,"totalTerms":97},"loc":0}