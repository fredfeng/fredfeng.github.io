{"id":10073,"className":"javax.management.NotificationBroadcasterSupport","methodName":"NotificationBroadcasterSupport","signature":"\u003cjavax.management.NotificationBroadcasterSupport: void NotificationBroadcasterSupport(java.util.concurrent.Executor)\u003e","javadoc":"/** \n * Constructs a NotificationBroadcasterSupport where each listener is invoked using the given  {@link java.util.concurrent.Executor}. When  {@link #sendNotification sendNotification} is called, a listener is selected if it was added with a null{@link NotificationFilter}, or if  {@link NotificationFilter#isNotificationEnabled isNotificationEnabled} returns true for the notification being sent. The call to\u003ccode\u003eNotificationFilter.isNotificationEnabled\u003c/code\u003e takes place in the thread that called \u003ccode\u003esendNotification\u003c/code\u003e. Then, for each selected listener, {@link Executor#execute executor.execute} is called with a commandthat calls the \u003ccode\u003ehandleNotification\u003c/code\u003e method. This constructor is equivalent to {@link NotificationBroadcasterSupport#NotificationBroadcasterSupport(Executor,\n     * MBeanNotificationInfo[] info) NotificationBroadcasterSupport(executor, null)}.\n * @param executor an executor used by the method \u003ccode\u003esendNotification\u003c/code\u003e tosend each notification. If it is null, the thread calling \u003ccode\u003esendNotification\u003c/code\u003e will invoke the \u003ccode\u003ehandleNotification\u003c/code\u003e method itself.\n * @since 1.6\n */\n","tf":{"freq":{"mbean":1,"call":6,"send":5,"tosend":1,"concurr":1,"link":6,"broadcast":5,"use":2,"info":2,"notif":21,"sent":1,"given":1,"equival":1,"thread":2,"commandthat":1,"place":1,"listen":3,"constructor":1,"support":5,"invok":2,"select":2,"enabl":3,"executor":7,"true":1,"handl":2,"take":1,"will":1,"ad":1,"method":3,"java":1,"construct":1,"execut":2,"util":1,"filter":3},"maxFreq":21,"totalTerms":97},"loc":3}