{"id":10365,"className":"javax.management.MBeanRegistration","methodName":"postRegister","signature":"\u003cjavax.management.MBeanRegistration: void postRegister(java.lang.Boolean)\u003e","javadoc":"/** \n * Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed. \u003cp\u003eIf the implementation of this method throws a  {@link RuntimeException}or an  {@link Error}, the MBean Server will rethrow those inside a  {@link RuntimeMBeanException} or {@link RuntimeErrorException}, respectively. However, throwing an exception in  {@code postRegister}will not change the state of the MBean: if the MBean was already registered ( {@code registrationDone} is{@code true}), the MBean will remain registered. \u003c/p\u003e \u003cp\u003eThis might be confusing for the code calling  {@code createMBean()}or  {@code registerMBean()}, as such code might assume that MBean registration has failed when such an exception is raised. Therefore it is recommended that implementations of {@code postRegister} do not throw Runtime Exceptions or Errors if itcan be avoided.\u003c/p\u003e\n * @param registrationDone Indicates whether or not the MBean hasbeen successfully registered in the MBean server. The value false means that the registration phase has failed.\n */\n","tf":{"freq":{"fals":1,"need":1,"call":1,"might":2,"mbean":12,"allow":1,"link":4,"state":1,"perform":1,"therefor":1,"recommend":1,"whether":1,"avoid":1,"itcan":1,"hasbeen":1,"rais":1,"indic":1,"fail":3,"oper":1,"mean":1,"regist":8,"valu":1,"howev":1,"rethrow":1,"except":6,"assum":1,"post":3,"error":3,"creat":1,"runtim":4,"done":2,"true":1,"registr":5,"confus":1,"remain":1,"will":3,"method":1,"server":3,"insid":1,"alreadi":1,"chang":1,"phase":1,"success":1,"respect":1},"maxFreq":12,"totalTerms":89},"loc":0}