{"id":10399,"className":"javax.management.JMX","methodName":"newMBeanProxy","signature":"\u003cjavax.management.JMX: T newMBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class)\u003e","javadoc":"/** \n * \u003cp\u003eMake a proxy for a Standard MBean in a local or remote MBean Server.\u003c/p\u003e \u003cp\u003eIf you have an MBean Server  {@code mbs} containing an MBeanwith  {@link ObjectName} {@code name}, and if the MBean\u0027s management interface is described by the Java interface {@code MyMBean}, you can construct a proxy for the MBean like this:\u003c/p\u003e \u003cpre\u003e MyMBean proxy \u003d JMX.newMBeanProxy(mbs, name, MyMBean.class); \u003c/pre\u003e \u003cp\u003eSuppose, for example,  {@code MyMBean} looks like this:\u003c/p\u003e\u003cpre\u003e public interface MyMBean { public String getSomeAttribute(); public void setSomeAttribute(String value); public void someOperation(String param1, int param2); } \u003c/pre\u003e \u003cp\u003eThen you can execute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e {@code proxy.getSomeAttribute()} which will result in acall to  {@code mbs.}{@link MBeanServerConnection#getAttribute getAttribute}{@code (name, \"SomeAttribute\")}. \u003cli\u003e {@code proxy.setSomeAttribute(\"whatever\")} which will resultin a call to  {@code mbs.}{@link MBeanServerConnection#setAttribute setAttribute}{@code (name, new Attribute(\"SomeAttribute\", \"whatever\"))}. \u003cli\u003e {@code proxy.someOperation(\"param1\", 2)} which will betranslated into a call to  {@code mbs.}{@link MBeanServerConnection#invoke invoke}{@code (name, \"someOperation\", \u003cetc\u003e)}. \u003c/ul\u003e \u003cp\u003eThe object returned by this method is a {@link Proxy} whose {@code InvocationHandler} is an{@link MBeanServerInvocationHandler}.\u003c/p\u003e \u003cp\u003eThis method is equivalent to  {@link #newMBeanProxy(MBeanServerConnection,ObjectName,Class,boolean) newMBeanProxy(connection, objectName, interfaceClass,false)}.\u003c/p\u003e\n * @param connection the MBean server to forward to.\n * @param objectName the name of the MBean within{@code connection} to forward to.\n * @param interfaceClass the management interface that the MBeanexports, which will also be implemented by the returned proxy.\n * @param \u003c T \u003e allows the compiler to know that if the {@code interfaceClass} parameter is {@code MyMBean.class}, for example, then the return type is  {@code MyMBean}.\n * @return the new proxy instance.\n */\n","tf":{"freq":{"fals":1,"mbean":23,"etc":1,"type":1,"oper":3,"equival":1,"forward":2,"whatev":2,"whose":1,"invok":2,"resultin":1,"describ":1,"like":2,"mbeanwith":1,"invoc":2,"instanc":1,"remot":1,"contain":1,"will":4,"execut":1,"make":1,"compil":1,"result":1,"call":2,"connect":7,"allow":1,"link":7,"object":5,"betransl":1,"attribut":11,"name":10,"valu":1,"look":1,"proxi":13,"standard":1,"manag":2,"paramet":1,"suppos":1,"know":1,"acal":1,"mbeanexport":1,"pre":4,"string":3,"exampl":2,"mbs":5,"java":1,"server":8,"method":2,"construct":1,"local":1,"within":1,"also":1,"handler":2},"maxFreq":23,"totalTerms":153},"loc":3}