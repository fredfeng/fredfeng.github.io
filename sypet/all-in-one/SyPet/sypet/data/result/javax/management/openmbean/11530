{"id":11530,"className":"javax.management.openmbean.ArrayType","methodName":"getPrimitiveArrayType","signature":"\u003cjavax.management.openmbean.ArrayType: javax.management.openmbean.ArrayType\u003cT\u003e getPrimitiveArrayType(java.lang.Class)\u003e","javadoc":"/** \n * Create an  {@code ArrayType} instance in a type-safe manner.\u003cp\u003e Calling this method twice with the same parameters may return the same object or two equal but not identical objects. \u003cp\u003e As an example, the following piece of code: \u003cpre\u003e ArrayType\u003cint[][][]\u003e t \u003d ArrayType.getPrimitiveArrayType(int[][][].class); System.out.println(\"array class name       \u003d \" + t.getClassName()); System.out.println(\"element class name     \u003d \" + t.getElementOpenType().getClassName()); System.out.println(\"array type name        \u003d \" + t.getTypeName()); System.out.println(\"array type description \u003d \" + t.getDescription()); \u003c/pre\u003e would produce the following output: \u003cpre\u003e array class name       \u003d [[[I element class name     \u003d java.lang.Integer array type name        \u003d [[[I array type description \u003d 3-dimension array of int \u003c/pre\u003e\n * @param arrayClass a primitive array class such as {@code int[].class}, {@code boolean[][].class}, etc. The  {@link #getElementOpenType()} method of the returned{@code ArrayType} returns the {@link SimpleType}corresponding to the wrapper type of the primitive type of the array.\n * @throws IllegalArgumentException if \u003cvar\u003earrayClass\u003c/var\u003e is nota primitive array.\n * @since 1.6\n */\n","tf":{"freq":{"call":1,"primit":5,"nota":1,"simpl":1,"var":2,"correspond":1,"link":2,"etc":1,"object":2,"type":17,"lang":1,"open":2,"twice":1,"wrapper":1,"ident":1,"println":4,"name":9,"follow":2,"argument":1,"safe":1,"element":4,"except":1,"may":1,"creat":1,"descript":3,"paramet":1,"produc":1,"equal":1,"piec":1,"dimens":1,"illeg":1,"instanc":1,"two":1,"system":4,"pre":4,"exampl":1,"java":1,"method":2,"manner":1,"output":1,"integ":1,"array":18},"maxFreq":18,"totalTerms":107},"loc":41}