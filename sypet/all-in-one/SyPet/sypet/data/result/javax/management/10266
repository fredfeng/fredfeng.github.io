{"id":10266,"className":"javax.management.StandardMBean","methodName":"preRegister","signature":"\u003cjavax.management.StandardMBean: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)\u003e","javadoc":"/** \n * \u003cp\u003eAllows the MBean to perform any operations it needs before being registered in the MBean server.  If the name of the MBean is not specified, the MBean can provide a name for its registration.  If any exception is raised, the MBean will not be registered in the MBean server.\u003c/p\u003e \u003cp\u003eThe default implementation of this method returns the  {@code name}parameter.  It does nothing else for Standard MBeans.  For MXBeans, it records the  {@code MBeanServer}and  {@code ObjectName} parameters so they can be used to translateinter-MXBean references.\u003c/p\u003e \u003cp\u003eIt is good practice for a subclass that overrides this method to call the overridden method via  {@code super.preRegister(...)}. This is necessary if this object is an MXBean that is referenced by attributes or operations in other MXBeans.\u003c/p\u003e\n * @param server The MBean server in which the MBean will be registered.\n * @param name The object name of the MBean.  This name is null ifthe name parameter to one of the \u003ccode\u003ecreateMBean\u003c/code\u003e or \u003ccode\u003eregisterMBean\u003c/code\u003e methods in the  {@link MBeanServer}interface is null.  In that case, this method must return a non-null ObjectName for the new MBean.\n * @return The name under which the MBean is to be registered.This value must not be null.  If the \u003ccode\u003ename\u003c/code\u003e parameter is not null, it will usually but not necessarily be the returned value.\n * @throws IllegalArgumentException if this is an MXBean and{@code name} is null.\n * @throws InstanceAlreadyExistsException if this is an MXBean andit has already been registered under another name (in this MBean Server or another).\n * @throws Exception no other checked exceptions are thrown bythis method but  {@code Exception} is declared so that subclassescan override the method and throw their own exceptions.\n * @since 1.6\n */\n","tf":{"freq":{"need":1,"mbean":17,"via":1,"overridden":1,"perform":1,"good":1,"andit":1,"necessari":1,"must":2,"specifi":1,"referenc":1,"oper":2,"refer":1,"bythi":1,"argument":1,"thrown":1,"except":7,"creat":1,"provid":1,"els":1,"non":1,"instanc":1,"record":1,"will":3,"subclass":1,"call":1,"allow":1,"one":1,"link":1,"use":1,"anoth":2,"object":4,"rais":1,"attribut":1,"declar":1,"name":13,"practic":1,"noth":1,"regist":8,"valu":2,"exist":1,"usual":1,"check":1,"bean":6,"standard":1,"ifth":1,"paramet":4,"registr":1,"translateint":1,"illeg":1,"pre":2,"subclassescan":1,"method":7,"server":7,"alreadi":2,"necessarili":1},"maxFreq":17,"totalTerms":128},"loc":4}