{"id":10681,"className":"javax.management.relation.RelationService","methodName":"setRoles","signature":"\u003cjavax.management.relation.RelationService: javax.management.relation.RoleResult setRoles(java.lang.String,javax.management.relation.RoleList)\u003e","javadoc":"/** \n * Sets the given roles in given relation. \u003cP\u003eWill check the role according to its corresponding role definition provided in relation\u0027s relation type \u003cP\u003eThe Relation Service keeps track of the changes to keep the consistency of relations by handling referenced MBean unregistrations.\n * @param relationId  relation id\n * @param roleList  list of roles to be set\n * @return a RoleResult object, including a RoleList (for rolessuccessfully set) and a RoleUnresolvedList (for roles not set).\n * @exception RelationServiceNotRegisteredException  if the RelationService is not registered in the MBean Server\n * @exception IllegalArgumentException  if null parameter\n * @exception RelationNotFoundException  if no relation with given id\n * @see #getRoles\n */\n","tf":{"freq":{"mbean":2,"result":1,"correspond":1,"servic":3,"rolessuccess":1,"object":1,"type":1,"unresolv":1,"referenc":1,"given":3,"relat":11,"regist":2,"role":11,"argument":1,"except":6,"includ":1,"check":1,"consist":1,"paramet":1,"track":1,"list":4,"accord":1,"unregistr":1,"illeg":1,"provid":1,"handl":1,"definit":1,"will":1,"server":1,"chang":1,"found":1,"keep":2},"maxFreq":11,"totalTerms":67},"loc":59}