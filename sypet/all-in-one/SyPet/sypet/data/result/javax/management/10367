{"id":10367,"className":"javax.management.MBeanRegistration","methodName":"postDeregister","signature":"\u003cjavax.management.MBeanRegistration: void postDeregister()\u003e","javadoc":"/** \n * Allows the MBean to perform any operations needed after having been unregistered in the MBean server. \u003cp\u003eIf the implementation of this method throws a  {@link RuntimeException}or an  {@link Error}, the MBean Server will rethrow those inside a  {@link RuntimeMBeanException} or {@link RuntimeErrorException}, respectively. However, throwing an exception in  {@code postDeregister}will not change the state of the MBean: the MBean was already successfully deregistered and will remain so. \u003c/p\u003e \u003cp\u003eThis might be confusing for the code calling {@code unregisterMBean()}, as it might assume that MBean deregistration has failed. Therefore it is recommended that implementations of {@code postDeregister} do not throw Runtime Exceptions or Errors if itcan be avoided.\u003c/p\u003e\n */\n","tf":{"freq":{"need":1,"call":1,"might":2,"mbean":8,"allow":1,"link":4,"state":1,"perform":1,"therefor":1,"recommend":1,"avoid":1,"itcan":1,"fail":1,"oper":1,"deregist":4,"howev":1,"rethrow":1,"except":5,"assum":1,"post":3,"error":3,"runtim":4,"confus":1,"remain":1,"deregistr":1,"will":3,"method":1,"server":2,"insid":1,"alreadi":1,"unregist":2,"chang":1,"success":1,"respect":1},"maxFreq":8,"totalTerms":63},"loc":0}