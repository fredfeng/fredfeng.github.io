{"id":11302,"className":"javax.management.modelmbean.DescriptorSupport","methodName":"DescriptorSupport","signature":"\u003cjavax.management.modelmbean.DescriptorSupport: void DescriptorSupport(java.lang.String[])\u003e","javadoc":"/** \n * Constructor taking fields in the \u003ci\u003efieldName\u003dfieldValue\u003c/i\u003e format.\n * @param fields String array with each element containing afield name and value.  If this array is null or empty, then the default constructor will be executed. Null strings or empty strings will be ignored. \u003cp\u003eAll field values should be Strings.  If the field values are not Strings, the programmer will have to reset or convert these fields correctly. \u003cp\u003eNote: Each string should be of the form \u003ci\u003efieldName\u003dfieldValue\u003c/i\u003e.  The field name ends at the first  {@code \u003d} character; for example if the Stringis  {@code a\u003db\u003dc} then the field name is {@code a} and its valueis  {@code b\u003dc}.\n * @exception RuntimeOperationsException for illegal value forfield Names or field Values.  The field must contain an \"\u003d\". \"\u003dfieldValue\", \"fieldName\", and \"fieldValue\" are illegal. FieldName cannot be null.  \"fieldName\u003d\" will cause the value to be null.  If the descriptor construction fails for any reason, this exception will be thrown.\n */\n","tf":{"freq":{"reason":1,"descriptor":2,"convert":1,"forfield":1,"must":1,"fail":1,"correct":1,"oper":1,"name":9,"reset":1,"valu":10,"note":1,"end":1,"constructor":2,"element":1,"thrown":1,"except":3,"ignor":1,"support":1,"form":1,"charact":1,"runtim":1,"programm":1,"valuei":1,"format":1,"illeg":2,"empti":2,"field":18,"caus":1,"take":1,"contain":2,"string":6,"exampl":1,"will":5,"construct":1,"execut":1,"first":1,"stringi":1,"afield":1,"array":2},"maxFreq":18,"totalTerms":91},"loc":59}