{"id":11248,"className":"javax.management.remote.rmi.RMIConnectorServer","methodName":"start","signature":"\u003cjavax.management.remote.rmi.RMIConnectorServer: void start()\u003e","javadoc":"/** \n * \u003cp\u003eActivates the connector server, that is starts listening for client connections.  Calling this method when the connector server is already active has no effect.  Calling this method when the connector server has been stopped will generate an \u003ccode\u003eIOException\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThe behavior of this method when called for the first time depends on the parameters that were supplied at construction, as described below.\u003c/p\u003e \u003cp\u003eFirst, an object of a subclass of  {@link RMIServerImpl} isrequired, to export the connector server through RMI:\u003c/p\u003e \u003cul\u003e \u003cli\u003eIf an \u003ccode\u003eRMIServerImpl\u003c/code\u003e was supplied to the constructor, it is used. \u003cli\u003eOtherwise, if the protocol part of the \u003ccode\u003eJMXServiceURL\u003c/code\u003e supplied to the constructor was \u003ccode\u003eiiop\u003c/code\u003e, an object of type  {@link RMIIIOPServerImpl}is created. \u003cli\u003eOtherwise, if the \u003ccode\u003eJMXServiceURL\u003c/code\u003e was null, or its protocol part was \u003ccode\u003ermi\u003c/code\u003e, an object of type  {@link RMIJRMPServerImpl} is created.\u003cli\u003eOtherwise, the implementation can create an implementation-specific  {@link RMIServerImpl} or it can throw{@link MalformedURLException}. \u003c/ul\u003e \u003cp\u003eIf the given address includes a JNDI directory URL as specified in the package documentation for  {@link javax.management.remote.rmi}, then this \u003ccode\u003eRMIConnectorServer\u003c/code\u003e will bootstrap by binding the \u003ccode\u003eRMIServerImpl\u003c/code\u003e to the given address.\u003c/p\u003e \u003cp\u003eIf the URL path part of the \u003ccode\u003eJMXServiceURL\u003c/code\u003e was empty or a single slash (\u003ccode\u003e/\u003c/code\u003e), then the RMI object will not be bound to a directory.  Instead, a reference to it will be encoded in the URL path of the RMIConnectorServer address (returned by  {@link #getAddress()}).  The encodings for \u003ccode\u003ermi\u003c/code\u003e and \u003ccode\u003eiiop\u003c/code\u003e are described in the package documentation for  {@link javax.management.remote.rmi}.\u003c/p\u003e \u003cp\u003eThe behavior when the URL path is neither empty nor a JNDI directory URL, or when the protocol is neither \u003ccode\u003ermi\u003c/code\u003e nor \u003ccode\u003eiiop\u003c/code\u003e, is implementation defined, and may include throwing  {@link MalformedURLException} when theconnector server is created or when it is started.\u003c/p\u003e\n * @exception IllegalStateException if the connector server hasnot been attached to an MBean server.\n * @exception IOException if the connector server cannot bestarted.\n */\n","tf":{"freq":{"mbean":1,"client":1,"singl":1,"lexcept":2,"type":2,"pserver":2,"specifi":1,"time":1,"given":2,"refer":1,"javax":2,"iconnector":2,"except":5,"creat":4,"describ":2,"hasnot":1,"encod":2,"malform":2,"start":3,"remot":2,"iiop":3,"will":4,"subclass":1,"connector":6,"otherwis":3,"defin":1,"call":3,"stop":1,"bootstrap":1,"isrequir":1,"connect":1,"directori":3,"behavior":2,"link":9,"state":1,"theconnector":1,"use":1,"object":4,"activ":2,"document":2,"path":3,"listen":1,"constructor":2,"may":1,"export":1,"protocol":3,"slash":1,"includ":2,"impl":6,"bestart":1,"manag":2,"depend":1,"paramet":1,"iserv":4,"suppli":3,"illeg":1,"empti":2,"neither":2,"xservic":3,"specif":1,"effect":1,"address":4,"attach":1,"generat":1,"instead":1,"server":10,"method":3,"alreadi":1,"construct":1,"part":3,"bind":1,"first":2,"bound":1,"rmi":5},"maxFreq":10,"totalTerms":165},"loc":130}