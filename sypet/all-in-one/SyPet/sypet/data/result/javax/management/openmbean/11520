{"id":11520,"className":"javax.management.openmbean.ArrayType","methodName":"ArrayType","signature":"\u003cjavax.management.openmbean.ArrayType: void ArrayType(int,javax.management.openmbean.OpenType)\u003e","javadoc":"/** \n * Constructs an \u003ctt\u003eArrayType\u003c/tt\u003e instance describing \u003ci\u003eopen data\u003c/i\u003e values which are arrays with dimension \u003cvar\u003edimension\u003c/var\u003e of elements whose \u003ci\u003eopen type\u003c/i\u003e is \u003cvar\u003eelementType\u003c/var\u003e. \u003cp\u003e When invoked on an \u003ctt\u003eArrayType\u003c/tt\u003e instance, the  {@link OpenType#getClassName() getClassName} methodreturns the class name of the array instances it describes (following the rules defined by the {@link Class#getName() getName} method of \u003ccode\u003ejava.lang.Class\u003c/code\u003e), not the class name of the array elements(which is returned by a call to \u003ctt\u003egetElementOpenType().getClassName()\u003c/tt\u003e). \u003cp\u003e The internal field corresponding to the type name of this \u003ccode\u003eArrayType\u003c/code\u003e instance is also set to the class name of the array instances it describes. In other words, the methods \u003ccode\u003egetClassName\u003c/code\u003e and \u003ccode\u003egetTypeName\u003c/code\u003e return the same string value. The internal field corresponding to the description of this \u003ccode\u003eArrayType\u003c/code\u003e instance is set to a string value which follows the following template: \u003cul\u003e \u003cli\u003eif non-primitive array: \u003ctt\u003e\u003ci\u003e\u0026lt;dimension\u0026gt;\u003c/i\u003e-dimension array of \u003ci\u003e\u0026lt;element_class_name\u0026gt;\u003c/i\u003e\u003c/tt\u003e\u003c/li\u003e \u003cli\u003eif primitive array: \u003ctt\u003e\u003ci\u003e\u0026lt;dimension\u0026gt;\u003c/i\u003e-dimension array of \u003ci\u003e\u0026lt;primitive_type_of_the_element_class_name\u0026gt;\u003c/i\u003e\u003c/tt\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e As an example, the following piece of code: \u003cpre\u003e ArrayType\u003cString[][][]\u003e t \u003d new ArrayType\u003cString[][][]\u003e(3, SimpleType.STRING); System.out.println(\"array class name       \u003d \" + t.getClassName()); System.out.println(\"element class name     \u003d \" + t.getElementOpenType().getClassName()); System.out.println(\"array type name        \u003d \" + t.getTypeName()); System.out.println(\"array type description \u003d \" + t.getDescription()); \u003c/pre\u003e would produce the following output: \u003cpre\u003e array class name       \u003d [[[Ljava.lang.String; element class name     \u003d java.lang.String array type name        \u003d [[[Ljava.lang.String; array type description \u003d 3-dimension array of java.lang.String \u003c/pre\u003e And the following piece of code which is equivalent to the one listed above would also produce the same output: \u003cpre\u003e ArrayType\u003cString[]\u003e t1 \u003d new ArrayType\u003cString[]\u003e(1, SimpleType.STRING); ArrayType\u003cString[][]\u003e t2 \u003d new ArrayType\u003cString[][]\u003e(1, t1); ArrayType\u003cString[][][]\u003e t3 \u003d new ArrayType\u003cString[][][]\u003e(1, t2); System.out.println(\"array class name       \u003d \" + t3.getClassName()); System.out.println(\"element class name     \u003d \" + t3.getElementOpenType().getClassName()); System.out.println(\"array type name        \u003d \" + t3.getTypeName()); System.out.println(\"array type description \u003d \" + t3.getDescription()); \u003c/pre\u003e\n * @param dimension  the dimension of arrays described by this \u003ctt\u003eArrayType\u003c/tt\u003e instance;must be greater than or equal to 1.\n * @param elementType  the \u003ci\u003eopen type\u003c/i\u003e of element values containedin the arrays described by this \u003ctt\u003eArrayType\u003c/tt\u003e instance; must be an instance of either \u003ctt\u003eSimpleType\u003c/tt\u003e, \u003ctt\u003eCompositeType\u003c/tt\u003e, \u003ctt\u003eTabularType\u003c/tt\u003e or another \u003ctt\u003eArrayType\u003c/tt\u003e with a \u003ctt\u003eSimpleType\u003c/tt\u003e, \u003ctt\u003eCompositeType\u003c/tt\u003e or \u003ctt\u003eTabularType\u003c/tt\u003e as its \u003ctt\u003eelementType\u003c/tt\u003e.\n * @throws IllegalArgumentException if {@code dimension} is not a positiveinteger.\n * @throws OpenDataException  if \u003cvar\u003eelementType\u0027s className\u003c/var\u003e is notone of the allowed Java class names for open data.\n */\n","tf":{"freq":{"greater":1,"simpl":4,"templat":1,"type":45,"must":2,"open":9,"println":8,"equival":1,"follow":6,"argument":1,"element":15,"except":2,"methodreturn":1,"composit":2,"whose":1,"invok":1,"descript":6,"describ":5,"piec":2,"instanc":9,"non":1,"positiveinteg":1,"system":8,"word":1,"output":2,"array":36,"call":1,"defin":1,"primit":3,"allow":1,"var":6,"correspond":2,"link":2,"one":1,"data":3,"anoth":1,"lang":5,"tabular":2,"ljava":2,"rule":1,"name":30,"valu":4,"noton":1,"containedin":1,"produc":2,"list":1,"equal":1,"dimens":10,"illeg":1,"field":2,"either":1,"pre":6,"string":14,"intern":2,"exampl":1,"java":4,"method":2,"construct":1,"also":2},"maxFreq":45,"totalTerms":288},"loc":21}