{"id":11410,"className":"javax.management.openmbean.CompositeDataSupport","methodName":"hashCode","signature":"\u003cjavax.management.openmbean.CompositeDataSupport: int hashCode()\u003e","javadoc":"/** \n * Returns the hash code value for this \u003ccode\u003eCompositeDataSupport\u003c/code\u003e instance. \u003cp\u003e The hash code of a \u003ccode\u003eCompositeDataSupport\u003c/code\u003e instance is the sum of the hash codes of all elements of information used in \u003ccode\u003eequals\u003c/code\u003e comparisons (ie: its \u003ci\u003ecomposite type\u003c/i\u003e and all the item values). \u003cp\u003e This ensures that \u003ccode\u003e t1.equals(t2) \u003c/code\u003e implies that \u003ccode\u003e t1.hashCode()\u003d\u003dt2.hashCode() \u003c/code\u003e for any two \u003ccode\u003eCompositeDataSupport\u003c/code\u003e instances \u003ccode\u003et1\u003c/code\u003e and \u003ccode\u003et2\u003c/code\u003e, as required by the general contract of the method {@link Object#hashCode() Object.hashCode()}. \u003cp\u003e Each item value\u0027s hash code is added to the returned hash code. If an item value is an array, its hash code is obtained as if by calling the {@link java.util.Arrays#deepHashCode(Object[]) deepHashCode} methodfor arrays of object reference types or the appropriate overloading of  {@code Arrays.hashCode(e)} for arrays of primitive types.\n * @return the hash code value for this \u003ccode\u003eCompositeDataSupport\u003c/code\u003e instance\n */\n","tf":{"freq":{"primit":1,"call":1,"link":2,"data":4,"use":1,"sum":1,"object":4,"type":3,"ensur":1,"requir":1,"refer":1,"impli":1,"valu":5,"deep":2,"element":1,"support":4,"composit":5,"hash":15,"contract":1,"overload":1,"equal":2,"comparison":1,"general":1,"instanc":4,"inform":1,"two":1,"obtain":1,"methodfor":1,"appropri":1,"item":3,"ad":1,"java":1,"method":1,"util":1,"array":5},"maxFreq":15,"totalTerms":80},"loc":28}