{"id":11187,"className":"javax.management.remote.rmi.RMIConnection","methodName":"removeNotificationListeners","signature":"\u003cjavax.management.remote.rmi.RMIConnection: void removeNotificationListeners(javax.management.ObjectName,java.lang.Integer[],javax.security.auth.Subject)\u003e","javadoc":"/** \n * \u003cp\u003eHandles the {@link javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener) removeNotificationListener(ObjectName, NotificationListener)} and{@link javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object) removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)} methods.\u003c/p\u003e\u003cp\u003eThis method removes one or more \u003ccode\u003eNotificationListener\u003c/code\u003es from a given MBean in the MBean server.\u003c/p\u003e \u003cp\u003eThe \u003ccode\u003eNotificationListeners\u003c/code\u003e are identified by the IDs which were returned by the  {@link #addNotificationListeners(ObjectName[],MarshalledObject[],Subject[])} method.\u003c/p\u003e\n * @param name the \u003ccode\u003eObjectName\u003c/code\u003e identifying the MBeanemitting the Notifications.\n * @param listenerIDs the list of the IDs corresponding to thelisteners to remove.\n * @param delegationSubject The \u003ccode\u003eSubject\u003c/code\u003e containing thedelegation principals or \u003ccode\u003enull\u003c/code\u003e if the authentication principal is used instead.\n * @throws InstanceNotFoundException if the given\u003ccode\u003ename\u003c/code\u003e does not correspond to any registered MBean.\n * @throws ListenerNotFoundException if one of the listeners wasnot found on the server side.  This exception can happen if the MBean discarded a listener for some reason other than a call to \u003ccode\u003eMBeanServer.removeNotificationListener\u003c/code\u003e.\n * @throws SecurityException if the client, or the delegated Subjectif any, does not have permission to remove the listeners.\n * @throws IOException if a general communication exception occurred.\n * @throws IllegalArgumentException if \u003ccode\u003eObjectName\u003c/code\u003e or\u003ccode\u003elistenerIds\u003c/code\u003e is null or if \u003ccode\u003elistenerIds\u003c/code\u003e contains a null element.\n */\n","tf":{"freq":{"mbean":7,"client":1,"reason":1,"notif":16,"given":2,"javax":2,"permiss":1,"thelisten":1,"happen":1,"marshal":1,"argument":1,"element":1,"except":7,"remov":9,"instanc":1,"contain":2,"filter":2,"princip":2,"call":1,"connect":2,"correspond":2,"subject":3,"one":2,"link":3,"use":1,"identifi":2,"object":10,"add":1,"discard":1,"id":5,"authent":1,"deleg":2,"subjectif":1,"side":1,"name":9,"regist":1,"listen":20,"manag":2,"list":1,"illeg":1,"general":1,"handl":1,"secur":1,"mbeanemit":1,"communic":1,"instead":1,"method":3,"server":5,"thedeleg":1,"wasnot":1,"occur":1,"found":3},"maxFreq":20,"totalTerms":150},"loc":0}