{"id":11050,"className":"javax.management.remote.JMXConnector","methodName":"close","signature":"\u003cjavax.management.remote.JMXConnector: void close()\u003e","javadoc":"/** \n * \u003cp\u003eCloses the client connection to its server.  Any ongoing or new request using the MBeanServerConnection returned by  {@link #getMBeanServerConnection()} will get an\u003ccode\u003eIOException\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eIf \u003ccode\u003eclose\u003c/code\u003e has already been called successfully on this object, calling it again has no effect.  If \u003ccode\u003eclose\u003c/code\u003e has never been called, or if it was called but produced an exception, an attempt will be made to close the connection.  This attempt can succeed, in which case \u003ccode\u003eclose\u003c/code\u003e will return normally, or it can generate an exception.\u003c/p\u003e \u003cp\u003eClosing a connection is a potentially slow operation.  For example, if the server has crashed, the close operation might have to wait for a network protocol timeout.  Callers that do not want to block in a close operation should do it in a separate thread.\u003c/p\u003e\n * @exception IOException if the connection cannot be closedcleanly.  If this exception is thrown, it is not known whether the server end of the connection has been cleanly closed.\n */\n","tf":{"freq":{"caller":1,"attempt":2,"might":1,"mbean":2,"call":4,"connect":7,"client":1,"closedclean":1,"link":1,"normal":1,"made":1,"block":1,"use":1,"wait":1,"object":1,"whether":1,"network":1,"close":10,"clean":1,"oper":3,"thread":1,"request":1,"slow":1,"end":1,"want":1,"crash":1,"thrown":1,"protocol":1,"except":6,"succeed":1,"produc":1,"potenti":1,"never":1,"effect":1,"separ":1,"generat":1,"exampl":1,"will":3,"ongo":1,"alreadi":1,"server":5,"known":1,"success":1,"timeout":1},"maxFreq":10,"totalTerms":77},"loc":0}