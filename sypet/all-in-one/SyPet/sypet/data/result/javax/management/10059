{"id":10059,"className":"javax.management.ObjectName","methodName":"unquote","signature":"\u003cjavax.management.ObjectName: java.lang.String unquote(java.lang.String)\u003e","javadoc":"/** \n * \u003cp\u003eReturns an unquoted form of the given String.  If \u003ccode\u003eq\u003c/code\u003e is a String returned by  {@link #quote quote(s)}, then \u003ccode\u003eunquote(q).equals(s)\u003c/code\u003e.  If there is no String \u003ccode\u003es\u003c/code\u003e for which \u003ccode\u003equote(s).equals(q)\u003c/code\u003e, then unquote(q) throws an IllegalArgumentException.\u003c/p\u003e \u003cp\u003eThese rules imply that there is a one-to-one mapping between quoted and unquoted forms.\u003c/p\u003e\n * @param q the String to be unquoted.\n * @return the unquoted String.\n * @exception IllegalArgumentException if \u003ccode\u003eq\u003c/code\u003e could nothave been returned by the  {@link #quote} method, for instanceif it does not begin and end with a quote (\").\n * @exception NullPointerException if \u003ccode\u003eq\u003c/code\u003e is null.\n */\n","tf":{"freq":{"argument":2,"except":5,"form":2,"nothav":1,"one":2,"link":2,"equal":2,"illeg":2,"begin":1,"unquot":7,"given":1,"string":5,"rule":1,"map":1,"impli":1,"pointer":1,"method":1,"instanceif":1,"quot":6,"end":1},"maxFreq":7,"totalTerms":45},"loc":39}