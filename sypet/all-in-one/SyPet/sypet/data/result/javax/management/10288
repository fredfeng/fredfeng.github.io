{"id":10288,"className":"javax.management.MBeanServerConnection","methodName":"invoke","signature":"\u003cjavax.management.MBeanServerConnection: java.lang.Object invoke(javax.management.ObjectName,java.lang.String,java.lang.Object[],java.lang.String[])\u003e","javadoc":"/** \n * \u003cp\u003eInvokes an operation on an MBean.\u003c/p\u003e \u003cp\u003eBecause of the need for a  {@code signature} to differentiatepossibly-overloaded operations, it is much simpler to invoke operations through an  {@linkplain JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class) MBean proxy} where possible.  For example, suppose you have aStandard MBean interface like this:\u003c/p\u003e \u003cpre\u003e public interface FooMBean { public int countMatches(String[] patterns, boolean ignoreCase); } \u003c/pre\u003e \u003cp\u003eThe  {@code countMatches} operation can be invoked as follows:\u003c/p\u003e\u003cpre\u003e String[] myPatterns \u003d ...; int count \u003d (Integer) mbeanServerConnection.invoke( objectName, \"countMatches\", new Object[] {myPatterns, true}, new String[] {String[].class.getName(), boolean.class.getName()}); \u003c/pre\u003e \u003cp\u003eAlternatively, it can be invoked through a proxy as follows:\u003c/p\u003e \u003cpre\u003e String[] myPatterns \u003d ...; FooMBean fooProxy \u003d JMX.newMBeanProxy( mbeanServerConnection, objectName, FooMBean.class); int count \u003d fooProxy.countMatches(myPatterns, true); \u003c/pre\u003e\n * @param name The object name of the MBean on which the method isto be invoked.\n * @param operationName The name of the operation to be invoked.\n * @param params An array containing the parameters to be set whenthe operation is invoked\n * @param signature An array containing the signature of theoperation, an array of class names in the format returned by {@link Class#getName()}. The class objects will be loaded using the same class loader as the one used for loading the MBean on which the operation was invoked.\n * @return The object returned by the operation, which representsthe result of invoking the operation on the MBean specified.\n * @exception InstanceNotFoundException The MBean specified is notregistered in the MBean server.\n * @exception MBeanException Wraps an exception thrown by theMBean\u0027s invoked method.\n * @exception ReflectionException Wraps a\u003cCODE\u003ejava.lang.Exception\u003c/CODE\u003e thrown while trying to invoke the method.\n * @exception IOException A communication problem occurred whentalking to the MBean server.\n */\n","tf":{"freq":{"need":1,"mbean":19,"count":6,"whenth":1,"possibl":1,"theoper":1,"foo":5,"specifi":2,"altern":1,"oper":10,"follow":2,"notregist":1,"wrap":2,"thrown":2,"except":10,"ignor":1,"representsth":1,"invok":13,"loader":1,"format":1,"like":1,"much":1,"instanc":1,"differentiateposs":1,"whentalk":1,"contain":2,"will":1,"load":2,"match":4,"array":3,"linkplain":1,"result":1,"connect":3,"link":1,"one":1,"use":2,"object":7,"lang":1,"signatur":3,"simpler":1,"name":11,"standard":1,"proxi":6,"isto":1,"paramet":1,"suppos":1,"true":2,"problem":1,"overload":1,"communic":1,"pattern":5,"pre":6,"string":5,"exampl":1,"java":1,"server":5,"method":3,"integ":1,"reflect":1,"occur":1,"found":1},"maxFreq":19,"totalTerms":175},"loc":0}