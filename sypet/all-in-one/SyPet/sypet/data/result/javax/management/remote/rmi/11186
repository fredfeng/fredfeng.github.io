{"id":11186,"className":"javax.management.remote.rmi.RMIConnection","methodName":"addNotificationListeners","signature":"\u003cjavax.management.remote.rmi.RMIConnection: java.lang.Integer[] addNotificationListeners(javax.management.ObjectName[],java.rmi.MarshalledObject[],javax.security.auth.Subject[])\u003e","javadoc":"/** \n * \u003cp\u003eHandles the method  {@link javax.management.MBeanServerConnection#addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)}.\u003c/p\u003e \u003cp\u003eRegister for notifications from the given MBeans that match the given filters.  The remote client can subsequently retrieve the notifications using the  {@link #fetchNotifications fetchNotifications} method.\u003c/p\u003e\u003cp\u003eFor each listener, the original \u003ccode\u003eNotificationListener\u003c/code\u003e and \u003ccode\u003ehandback\u003c/code\u003e are kept on the client side; in order for the client to be able to identify them, the server generates and returns a unique \u003ccode\u003elistenerID\u003c/code\u003e.  This \u003ccode\u003elistenerID\u003c/code\u003e is forwarded with the \u003ccode\u003eNotifications\u003c/code\u003e to the remote client.\u003c/p\u003e \u003cp\u003eIf any one of the given (name, filter) pairs cannot be registered, then the operation fails with an exception, and no names or filters are registered.\u003c/p\u003e\n * @param names the \u003ccode\u003eObjectNames\u003c/code\u003e identifying theMBeans emitting the Notifications.\n * @param filters an array of marshalled representations of the\u003ccode\u003eNotificationFilters\u003c/code\u003e.  Elements of this array can be null.\n * @param delegationSubjects the \u003ccode\u003eSubjects\u003c/code\u003e on behalfof which the listeners are being added.  Elements of this array can be null.  Also, the \u003ccode\u003edelegationSubjects\u003c/code\u003e parameter itself can be null, which is equivalent to an array of null values with the same size as the \u003ccode\u003enames\u003c/code\u003e and \u003ccode\u003efilters\u003c/code\u003e arrays.\n * @return an array of \u003ccode\u003elistenerIDs\u003c/code\u003e identifying thelocal listeners.  This array has the same number of elements as the parameters.\n * @throws IllegalArgumentException if \u003ccode\u003enames\u003c/code\u003e or\u003ccode\u003efilters\u003c/code\u003e is null, or if \u003ccode\u003enames\u003c/code\u003e contains a null element, or if the three arrays do not all have the same size.\n * @throws ClassCastException if one of the elements of\u003ccode\u003efilters\u003c/code\u003e unmarshalls as a non-null object that is not a \u003ccode\u003eNotificationFilter\u003c/code\u003e.\n * @throws InstanceNotFoundException if one of the\u003ccode\u003enames\u003c/code\u003e does not correspond to any registered MBean.\n * @throws SecurityException if, for one of the MBeans, theclient, or the delegated Subject if any, does not have permission to add a listener.\n * @throws IOException if a general communication exception occurred.\n */\n","tf":{"freq":{"mbean":5,"client":4,"abl":1,"unmarshal":1,"notif":13,"uniqu":1,"given":3,"fail":1,"equival":1,"forward":1,"oper":1,"javax":1,"permiss":1,"three":1,"marshal":1,"argument":1,"fetch":2,"element":5,"except":7,"number":1,"instanc":1,"non":1,"size":2,"theclient":1,"cast":1,"remot":2,"contain":1,"match":1,"filter":10,"array":8,"theloc":1,"connect":1,"pair":1,"correspond":1,"subject":4,"link":2,"one":4,"use":1,"identifi":3,"object":4,"add":3,"id":1,"deleg":3,"order":1,"behalfof":1,"side":1,"name":9,"handback":1,"regist":4,"valu":1,"subsequ":1,"listen":11,"kept":1,"emit":1,"manag":1,"paramet":2,"origin":1,"illeg":1,"general":1,"handl":1,"represent":1,"secur":1,"communic":1,"retriev":1,"generat":1,"ad":1,"method":2,"server":2,"also":1,"occur":1,"found":1},"maxFreq":13,"totalTerms":161},"loc":0}