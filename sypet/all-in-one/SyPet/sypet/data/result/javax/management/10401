{"id":10401,"className":"javax.management.JMX","methodName":"newMXBeanProxy","signature":"\u003cjavax.management.JMX: T newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class)\u003e","javadoc":"/** \n * \u003cp\u003eMake a proxy for an MXBean in a local or remote MBean Server.\u003c/p\u003e \u003cp\u003eIf you have an MBean Server  {@code mbs} containing anMXBean with  {@link ObjectName} {@code name}, and if the MXBean\u0027s management interface is described by the Java interface  {@code MyMXBean}, you can construct a proxy for the MXBean like this:\u003c/p\u003e \u003cpre\u003e MyMXBean proxy \u003d JMX.newMXBeanProxy(mbs, name, MyMXBean.class); \u003c/pre\u003e \u003cp\u003eSuppose, for example,  {@code MyMXBean} looks like this:\u003c/p\u003e\u003cpre\u003e public interface MyMXBean { public String getSimpleAttribute(); public void setSimpleAttribute(String value); public  {@link java.lang.management.MemoryUsage} getMappedAttribute();public void setMappedAttribute(MemoryUsage memoryUsage); public MemoryUsage someOperation(String param1, MemoryUsage param2); } \u003c/pre\u003e \u003cp\u003eThen:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e {@code proxy.getSimpleAttribute()} will result in acall to  {@code mbs.}{@link MBeanServerConnection#getAttribute getAttribute}{@code (name, \"SimpleAttribute\")}.\u003c/p\u003e \u003cli\u003e\u003cp\u003e {@code proxy.setSimpleAttribute(\"whatever\")} will resultin a call to  {@code mbs.}{@link MBeanServerConnection#setAttribute setAttribute}\u003ccode\u003e(name, new Attribute(\"SimpleAttribute\", \"whatever\"))\u003c/code\u003e.\u003cp\u003e \u003cp\u003eBecause  {@code String} is a \u003cem\u003esimple type\u003c/em\u003e, in thesense of  {@link javax.management.openmbean.SimpleType}, it is not changed in the context of an MXBean.  The MXBean proxy behaves the same as a Standard MBean proxy (see {@link #newMBeanProxy(MBeanServerConnection,ObjectName,Class) newMBeanProxy}) for the attribute  {@code SimpleAttribute}.\u003c/p\u003e \u003cli\u003e\u003cp\u003e {@code proxy.getMappedAttribute()} will result in a callto  {@code mbs.getAttribute(\"MappedAttribute\")}.  The MXBean mapping rules mean that the actual type of the attribute  {@code MappedAttribute} will be {@link javax.management.openmbean.CompositeData CompositeData} andthat is what the  {@code mbs.getAttribute} call will return.The proxy will then convert the  {@code CompositeData} back intothe expected type  {@code MemoryUsage} using the MXBean mappingrules.\u003c/p\u003e \u003cli\u003e\u003cp\u003eSimilarly,  {@code proxy.setMappedAttribute(memoryUsage)}will convert the  {@code MemoryUsage} argument into a {@code CompositeData} before calling {@code mbs.setAttribute}.\u003c/p\u003e \u003cli\u003e\u003cp\u003e {@code proxy.someOperation(\"whatever\", memoryUsage)}will convert the  {@code MemoryUsage} argument into a {@code CompositeData} and call {@code mbs.invoke}.  The value returned by  {@code mbs.invoke} will be also be a {@code CompositeData}, and the proxy will convert this into the expected type  {@code MemoryUsage} using the MXBean mapping rules.\u003c/p\u003e\u003c/ul\u003e \u003cp\u003eThe object returned by this method is a {@link Proxy} whose {@code InvocationHandler} is an{@link MBeanServerInvocationHandler}.\u003c/p\u003e \u003cp\u003eThis method is equivalent to  {@link #newMXBeanProxy(MBeanServerConnection,ObjectName,Class,boolean) newMXBeanProxy(connection, objectName, interfaceClass,false)}.\u003c/p\u003e\n * @param connection the MBean server to forward to.\n * @param objectName the name of the MBean within{@code connection} to forward to.\n * @param interfaceClass the MXBean interface,which will also be implemented by the returned proxy.\n * @param \u003c T \u003e allows the compiler to know that if the {@code interfaceClass} parameter is {@code MyMXBean.class}, for example, then the return type is  {@code MyMXBean}.\n * @return the new proxy instance.\n */\n","tf":{"freq":{"fals":1,"mbean":12,"memori":11,"simpl":9,"behav":1,"type":6,"expect":2,"forward":2,"equival":1,"oper":2,"javax":2,"whatev":3,"argument":2,"whose":1,"composit":6,"invok":2,"resultin":1,"describ":1,"like":2,"invoc":2,"instanc":1,"mappingrul":1,"remot":1,"contain":1,"will":11,"openmbean":2,"make":1,"compil":1,"result":2,"call":4,"allow":1,"connect":7,"link":10,"data":6,"use":2,"convert":4,"object":6,"lang":1,"intoth":1,"attribut":23,"name":10,"rule":2,"map":8,"mean":1,"valu":2,"similar":1,"look":1,"callto":1,"bean":21,"proxi":21,"standard":1,"manag":4,"paramet":1,"back":1,"suppos":1,"know":1,"acal":1,"thesens":1,"andthat":1,"pre":4,"string":4,"exampl":2,"mbs":9,"context":1,"actual":1,"method":2,"java":2,"server":8,"within":1,"construct":1,"local":1,"usag":11,"chang":1,"also":2,"handler":2},"maxFreq":23,"totalTerms":287},"loc":3}