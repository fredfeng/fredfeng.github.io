{"id":10164,"className":"javax.management.MBeanServer","methodName":"getClassLoaderFor","signature":"\u003cjavax.management.MBeanServer: java.lang.ClassLoader getClassLoaderFor(javax.management.ObjectName)\u003e","javadoc":"/** \n * \u003cp\u003eReturn the  {@link java.lang.ClassLoader} that was used forloading the class of the named MBean.\u003c/p\u003e\n * @param mbeanName The ObjectName of the MBean.\n * @return The ClassLoader used for that MBean.  If \u003cvar\u003el\u003c/var\u003eis the MBean\u0027s actual ClassLoader, and \u003cvar\u003er\u003c/var\u003e is the returned value, then either: \u003cul\u003e \u003cli\u003e\u003cvar\u003er\u003c/var\u003e is identical to \u003cvar\u003el\u003c/var\u003e; or \u003cli\u003ethe result of \u003cvar\u003er\u003c/var\u003e {@link ClassLoader#loadClass(String) .loadClass(\u003cvar\u003es\u003c/var\u003e)} is thesame as \u003cvar\u003el\u003c/var\u003e {@link ClassLoader#loadClass(String) .loadClass(\u003cvar\u003es\u003c/var\u003e)} for any string \u003cvar\u003es\u003c/var\u003e.\u003c/ul\u003e What this means is that the ClassLoader may be wrapped in another ClassLoader for security or other reasons.\n * @exception InstanceNotFoundException if the named MBean is not found.\n */\n","tf":{"freq":{"mbean":6,"result":1,"forload":1,"reason":1,"var":18,"link":3,"use":2,"object":1,"anoth":1,"lang":1,"ident":1,"name":4,"mean":1,"valu":1,"thesam":1,"wrap":1,"except":2,"may":1,"loader":8,"instanc":1,"either":1,"secur":1,"string":3,"actual":1,"java":1,"load":4,"found":2},"maxFreq":18,"totalTerms":69},"loc":0}