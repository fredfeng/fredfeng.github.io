{"id":10621,"className":"javax.management.relation.RelationNotification","methodName":"RelationNotification","signature":"\u003cjavax.management.relation.RelationNotification: void RelationNotification(java.lang.String,java.lang.Object,long,long,java.lang.String,java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String,java.util.List,java.util.List)\u003e","javadoc":"/** \n * Creates a notification for a role update in a relation.\n * @param notifType  type of the notification; either:\u003cP\u003e- RELATION_BASIC_UPDATE \u003cP\u003e- RELATION_MBEAN_UPDATE\n * @param sourceObj  source object, sending the notification. This is eitheran ObjectName or a RelationService object.  In the latter case it must be the MBean emitting the notification; the MBean Server will rewrite the source to be the ObjectName under which that MBean is registered.\n * @param sequence  sequence number to identify the notification\n * @param timeStamp  time stamp\n * @param message  human-readable message describing the notification\n * @param id  relation id identifying the relation in the RelationService\n * @param typeName  name of the relation type\n * @param objectName  ObjectName of the relation object if it is an MBean(null for relations internally handled by the Relation Service)\n * @param name  name of the updated role\n * @param newValue  new role value (List of ObjectName objects)\n * @param oldValue  old role value (List of ObjectName objects)\n * @exception IllegalArgumentException  if null parameter\n */\n","tf":{"freq":{"mbean":4,"old":2,"send":1,"readabl":1,"servic":3,"identifi":2,"object":11,"type":4,"must":1,"eitheran":1,"notif":8,"time":2,"latter":1,"rewrit":1,"sequenc":2,"name":10,"relat":10,"role":4,"regist":1,"valu":4,"argument":1,"stamp":2,"emit":1,"except":2,"creat":1,"messag":2,"paramet":1,"describ":1,"list":2,"number":1,"illeg":1,"handl":1,"human":1,"either":1,"updat":2,"intern":1,"will":1,"obj":1,"sourc":3,"server":1},"maxFreq":11,"totalTerms":100},"loc":20}