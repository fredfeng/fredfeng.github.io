{"id":11103,"className":"javax.management.remote.JMXConnectorFactory","methodName":"connect","signature":"\u003cjavax.management.remote.JMXConnectorFactory: javax.management.remote.JMXConnector connect(javax.management.remote.JMXServiceURL,java.util.Map)\u003e","javadoc":"/** \n * \u003cp\u003eCreates a connection to the connector server at the given address.\u003c/p\u003e \u003cp\u003eThis method is equivalent to:\u003c/p\u003e \u003cpre\u003e JMXConnector conn \u003d JMXConnectorFactory.newJMXConnector(serviceURL, environment); conn.connect(environment); \u003c/pre\u003e\n * @param serviceURL the address of the connector server to connect to.\n * @param environment a set of attributes to determine how theconnection is made.  This parameter can be null.  Keys in this map must be Strings.  The appropriate type of each associated value depends on the attribute.  The contents of \u003ccode\u003eenvironment\u003c/code\u003e are not changed by this call.\n * @return a \u003ccode\u003eJMXConnector\u003c/code\u003e representing the newly-madeconnection.  Each successful call to this method produces a different object.\n * @exception NullPointerException if \u003ccode\u003eserviceURL\u003c/code\u003e is null.\n * @exception IOException if the connector client or theconnection cannot be made because of a communication problem.\n * @exception SecurityException if the connection cannot be madefor security reasons.\n */\n","tf":{"freq":{"call":2,"conn":2,"client":1,"connect":5,"reason":1,"servic":3,"made":2,"theconnect":2,"object":1,"type":1,"must":1,"xconnector":4,"attribut":2,"given":1,"associ":1,"equival":1,"factori":1,"map":1,"valu":1,"madeconnect":1,"key":1,"except":6,"repres":1,"creat":1,"depend":1,"environ":4,"paramet":1,"problem":1,"produc":1,"madefor":1,"content":1,"differ":1,"newli":1,"secur":2,"communic":1,"address":2,"pre":2,"appropri":1,"determin":1,"string":1,"pointer":1,"connector":3,"method":2,"server":2,"chang":1,"success":1},"maxFreq":6,"totalTerms":75},"loc":7}