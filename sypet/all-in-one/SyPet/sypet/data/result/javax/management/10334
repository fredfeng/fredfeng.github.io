{"id":10334,"className":"javax.management.MBeanServerInvocationHandler","methodName":"newProxyInstance","signature":"\u003cjavax.management.MBeanServerInvocationHandler: T newProxyInstance(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean)\u003e","javadoc":"/** \n * \u003cp\u003eReturn a proxy that implements the given interface by forwarding its methods through the given MBean server to the named MBean.  As of 1.6, the methods  {@link JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class)} and{@link JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class,boolean)} are preferred to this method.\u003c/p\u003e\u003cp\u003eThis method is equivalent to  {@link Proxy#newProxyInstance Proxy.newProxyInstance}\u003ccode\u003e(interfaceClass.getClassLoader(), interfaces, handler)\u003c/code\u003e.  Here \u003ccode\u003ehandler\u003c/code\u003e is the result of  {@link #MBeanServerInvocationHandler newMBeanServerInvocationHandler(connection, objectName)}, and \u003ccode\u003einterfaces\u003c/code\u003e is an array that has one element if \u003ccode\u003enotificationBroadcaster\u003c/code\u003e is false and two if it is true.  The first element of \u003ccode\u003einterfaces\u003c/code\u003e is \u003ccode\u003einterfaceClass\u003c/code\u003e and the second, if present, is \u003ccode\u003eNotificationEmitter.class\u003c/code\u003e.\n * @param connection the MBean server to forward to.\n * @param objectName the name of the MBean within\u003ccode\u003econnection\u003c/code\u003e to forward to.\n * @param interfaceClass the management interface that the MBeanexports, which will also be implemented by the returned proxy.\n * @param notificationBroadcaster make the returned proxyimplement  {@link NotificationEmitter} by forwarding its methodsvia \u003ccode\u003econnection\u003c/code\u003e. A call to  {@link NotificationBroadcaster#addNotificationListener} on the proxy willresult in a call to  {@link MBeanServerConnection#addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)}, and likewise for the other methods of  {@link NotificationBroadcaster} and {@link NotificationEmitter}.\n * @param \u003c T \u003e allows the compiler to know that if the {@code interfaceClass} parameter is {@code MyMBean.class}, for example, then the return type is  {@code MyMBean}.\n * @return the new proxy instance.\n * @see JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class)\n */\n","tf":{"freq":{"fals":1,"mbean":15,"second":1,"broadcast":4,"type":1,"notif":11,"given":2,"equival":1,"forward":4,"element":2,"loader":1,"invoc":2,"instanc":4,"present":1,"likewis":1,"will":1,"prefer":1,"make":1,"filter":1,"array":1,"compil":1,"result":1,"call":2,"connect":8,"allow":1,"one":1,"link":9,"object":7,"add":2,"name":8,"listen":3,"willresult":1,"emitt":3,"methodsvia":1,"proxyimpl":1,"proxi":12,"manag":1,"paramet":1,"true":1,"know":1,"mbeanexport":1,"two":1,"exampl":1,"method":5,"server":8,"within":1,"first":1,"also":1,"handler":4},"maxFreq":15,"totalTerms":144},"loc":16}