{"id":11521,"className":"javax.management.openmbean.ArrayType","methodName":"ArrayType","signature":"\u003cjavax.management.openmbean.ArrayType: void ArrayType(javax.management.openmbean.SimpleType,boolean)\u003e","javadoc":"/** \n * Constructs a unidimensional  {@code ArrayType} instance for thesupplied  {@code SimpleType}. \u003cp\u003e This constructor supports the creation of arrays of primitive types when  {@code primitiveArray} is {@code true}. \u003cp\u003e For primitive arrays the  {@link #getElementOpenType()} methodreturns the  {@link SimpleType} corresponding to the wrappertype of the primitive type of the array. \u003cp\u003e When invoked on an \u003ctt\u003eArrayType\u003c/tt\u003e instance, the  {@link OpenType#getClassName() getClassName} methodreturns the class name of the array instances it describes (following the rules defined by the {@link Class#getName() getName} method of \u003ccode\u003ejava.lang.Class\u003c/code\u003e), not the class name of the array elements(which is returned by a call to \u003ctt\u003egetElementOpenType().getClassName()\u003c/tt\u003e). \u003cp\u003e The internal field corresponding to the type name of this \u003ccode\u003eArrayType\u003c/code\u003e instance is also set to the class name of the array instances it describes. In other words, the methods \u003ccode\u003egetClassName\u003c/code\u003e and \u003ccode\u003egetTypeName\u003c/code\u003e return the same string value. The internal field corresponding to the description of this \u003ccode\u003eArrayType\u003c/code\u003e instance is set to a string value which follows the following template: \u003cul\u003e \u003cli\u003eif non-primitive array: \u003ctt\u003e1-dimension array of \u003ci\u003e\u0026lt;element_class_name\u0026gt;\u003c/i\u003e\u003c/tt\u003e\u003c/li\u003e \u003cli\u003eif primitive array: \u003ctt\u003e1-dimension array of \u003ci\u003e\u0026lt;primitive_type_of_the_element_class_name\u0026gt;\u003c/i\u003e\u003c/tt\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e As an example, the following piece of code: \u003cpre\u003e ArrayType\u003cint[]\u003e t \u003d new ArrayType\u003cint[]\u003e(SimpleType.INTEGER, true); System.out.println(\"array class name       \u003d \" + t.getClassName()); System.out.println(\"element class name     \u003d \" + t.getElementOpenType().getClassName()); System.out.println(\"array type name        \u003d \" + t.getTypeName()); System.out.println(\"array type description \u003d \" + t.getDescription()); \u003c/pre\u003e would produce the following output: \u003cpre\u003e array class name       \u003d [I element class name     \u003d java.lang.Integer array type name        \u003d [I array type description \u003d 1-dimension array of int \u003c/pre\u003e\n * @param elementType the {@code SimpleType} of the element valuescontained in the arrays described by this {@code ArrayType} instance.\n * @param primitiveArray {@code true} when this array describesprimitive arrays.\n * @throws IllegalArgumentException if {@code dimension} is not a positiveinteger.\n * @throws OpenDataException if {@code primitiveArray} is {@code true} and{@code elementType} is not a valid {@code SimpleType} for a primitivetype.\n * @since 1.6\n */\n","tf":{"freq":{"simpl":5,"templat":1,"type":29,"thesuppli":1,"open":5,"println":4,"follow":5,"argument":1,"element":11,"except":2,"methodreturn":2,"support":1,"primitivetyp":1,"invok":1,"descript":4,"describ":3,"piec":1,"instanc":7,"non":1,"positiveinteg":1,"system":4,"valuescontain":1,"word":1,"output":1,"array":31,"valid":1,"defin":1,"creation":1,"primit":9,"call":1,"correspond":3,"link":4,"data":1,"describesprimit":1,"lang":2,"unidimension":1,"wrappertyp":1,"rule":1,"name":22,"valu":2,"constructor":1,"true":4,"produc":1,"dimens":4,"illeg":1,"field":2,"pre":4,"string":2,"intern":2,"exampl":1,"method":2,"java":2,"construct":1,"also":1,"integ":1},"maxFreq":31,"totalTerms":204},"loc":16}