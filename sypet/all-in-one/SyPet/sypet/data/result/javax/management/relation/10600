{"id":10600,"className":"javax.management.relation.RelationSupport","methodName":"RelationSupport","signature":"\u003cjavax.management.relation.RelationSupport: void RelationSupport(java.lang.String,javax.management.ObjectName,java.lang.String,javax.management.relation.RoleList)\u003e","javadoc":"/** \n * Creates a  {@code RelationSupport} object.\u003cP\u003eThis constructor has to be used when the RelationSupport object will be registered as a MBean by the user, or when creating a user relation MBean whose class extends RelationSupport. \u003cP\u003eNothing is done at the Relation Service level, i.e. the  {@code RelationSupport} object is not added to the{@code RelationService} and no checks are performed tosee if the provided values are correct. The object is always created, EXCEPT if: \u003cP\u003e- any of the required parameters is  {@code null}. \u003cP\u003e- the same name is used for two roles. \u003cP\u003eTo be handled as a relation, the  {@code RelationSupport} object hasto be added to the Relation Service using the Relation Service method addRelation().\n * @param relationId  relation identifier, to identify the relation in theRelation Service. \u003cP\u003eExpected to be unique in the given Relation Service.\n * @param relationServiceName  ObjectName of the Relation Service wherethe relation will be registered. \u003cP\u003eThis parameter is required as it is the Relation Service that is aware of the definition of the relation type of the given relation, so that will be able to check update operations (set).\n * @param relationTypeName  Name of relation type.\u003cP\u003eExpected to have been created in the given Relation Service.\n * @param list  list of roles (Role objects) to initialize therelation. Can be  {@code null}. \u003cP\u003eExpected to conform to relation info in associated relation type.\n * @exception InvalidRoleValueException  if the same name is used for tworoles.\n * @exception IllegalArgumentException  if any of the required parameters(relation id, relation service ObjectName, or relation type name) is {@code null}.\n */\n","tf":{"freq":{"mbean":2,"servic":11,"perform":1,"abl":1,"type":5,"hasto":1,"info":1,"expect":3,"uniqu":1,"whereth":1,"requir":3,"level":1,"invalid":1,"correct":1,"given":3,"oper":1,"relat":32,"role":4,"argument":1,"except":4,"support":6,"creat":4,"whose":1,"alway":1,"done":1,"tose":1,"provid":1,"updat":1,"definit":1,"therel":1,"will":3,"tworol":1,"use":4,"identifi":2,"object":8,"add":1,"associ":1,"name":8,"regist":2,"noth":1,"valu":2,"initi":1,"constructor":1,"check":2,"paramet":3,"list":2,"illeg":1,"handl":1,"two":1,"conform":1,"awar":1,"ad":2,"method":1,"user":2},"maxFreq":32,"totalTerms":148},"loc":17}