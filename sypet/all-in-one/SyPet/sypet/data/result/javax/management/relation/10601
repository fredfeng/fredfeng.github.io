{"id":10601,"className":"javax.management.relation.RelationSupport","methodName":"RelationSupport","signature":"\u003cjavax.management.relation.RelationSupport: void RelationSupport(java.lang.String,javax.management.ObjectName,javax.management.MBeanServer,java.lang.String,javax.management.relation.RoleList)\u003e","javadoc":"/** \n * Creates a  {@code RelationSupport} object.\u003cP\u003eThis constructor has to be used when the user relation MBean implements the interfaces expected to be supported by a relation by delegating to a RelationSupport object. \u003cP\u003eThis object needs to know the Relation Service expected to handle the relation. So it has to know the MBean Server where the Relation Service is registered. \u003cP\u003eAccording to a limitation, a relation MBean must be registered in the same MBean Server as the Relation Service expected to handle it. So the user relation MBean has to be created and registered, and then the wrapped RelationSupport object can be created within the identified MBean Server. \u003cP\u003eNothing is done at the Relation Service level, i.e. the  {@code RelationSupport} object is not added to the{@code RelationService} and no checks are performed tosee if the provided values are correct. The object is always created, EXCEPT if: \u003cP\u003e- any of the required parameters is  {@code null}. \u003cP\u003e- the same name is used for two roles. \u003cP\u003eTo be handled as a relation, the  {@code RelationSupport} object hasto be added to the Relation Service using the Relation Service method addRelation().\n * @param relationId  relation identifier, to identify the relation in theRelation Service. \u003cP\u003eExpected to be unique in the given Relation Service.\n * @param relationServiceName  ObjectName of the Relation Service wherethe relation will be registered. \u003cP\u003eThis parameter is required as it is the Relation Service that is aware of the definition of the relation type of the given relation, so that will be able to check update operations (set).\n * @param relationServiceMBeanServer  MBean Server where the wrapping MBeanis or will be registered. \u003cP\u003eExpected to be the MBean Server where the Relation Service is or will be registered.\n * @param relationTypeName  Name of relation type.\u003cP\u003eExpected to have been created in the given Relation Service.\n * @param list  list of roles (Role objects) to initialize therelation. Can be  {@code null}. \u003cP\u003eExpected to conform to relation info in associated relation type.\n * @exception InvalidRoleValueException  if the same name is used for tworoles.\n * @exception IllegalArgumentException  if any of the required parameters(relation id, relation service ObjectName, relation service MBeanServer, or relation type name) is  {@code null}.\n */\n","tf":{"freq":{"need":1,"mbean":10,"servic":17,"perform":1,"abl":1,"type":5,"must":1,"info":1,"hasto":1,"expect":7,"uniqu":1,"whereth":1,"level":1,"requir":3,"invalid":1,"correct":1,"given":3,"oper":1,"relat":42,"role":4,"argument":1,"limit":1,"wrap":2,"except":4,"support":7,"creat":5,"alway":1,"done":1,"tose":1,"provid":1,"updat":1,"therel":1,"definit":1,"will":4,"tworol":1,"mbeani":1,"use":4,"identifi":3,"object":10,"add":1,"deleg":1,"associ":1,"name":8,"noth":1,"regist":6,"valu":2,"initi":1,"constructor":1,"check":2,"paramet":3,"list":2,"accord":1,"illeg":1,"know":2,"handl":3,"two":1,"conform":1,"awar":1,"ad":2,"server":7,"method":1,"within":1,"user":2},"maxFreq":42,"totalTerms":205},"loc":23}