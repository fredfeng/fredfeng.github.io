{"id":11265,"className":"javax.management.modelmbean.ModelMBeanInfo","methodName":"getDescriptor","signature":"\u003cjavax.management.modelmbean.ModelMBeanInfo: javax.management.Descriptor getDescriptor(java.lang.String,java.lang.String)\u003e","javadoc":"/** \n * Returns a Descriptor requested by name and descriptorType.\n * @param inDescriptorName The name of the descriptor.\n * @param inDescriptorType The type of the descriptor beingrequested.  If this is null or empty then all types are searched. Valid types are \u0027mbean\u0027, \u0027attribute\u0027, \u0027constructor\u0027 \u0027operation\u0027, and \u0027notification\u0027. This value will be equal to the \u0027descriptorType\u0027 field in the descriptor that is returned.\n * @return Descriptor containing the descriptor for the ModelMBeanwith the same name and descriptorType.  If no descriptor is found, null is returned.\n * @exception MBeanException Wraps a distributed communication Exception.\n * @exception RuntimeOperationsException Wraps an IllegalArgumentException for a null descriptor name or null or invalid type.The type must be \"mbean\",\"attribute\", \"constructor\", \"operation\", or \"notification\".\n * @see #setDescriptor\n */\n","tf":{"freq":{"mbean":3,"valid":1,"model":1,"descriptor":15,"distribut":1,"type":9,"beingrequest":1,"must":1,"notif":2,"attribut":2,"invalid":1,"oper":3,"search":1,"name":5,"request":1,"valu":1,"constructor":2,"argument":1,"wrap":2,"except":6,"runtim":1,"equal":1,"mbeanwith":1,"illeg":1,"empti":1,"field":1,"communic":1,"contain":1,"will":1,"found":1},"maxFreq":15,"totalTerms":69},"loc":0}