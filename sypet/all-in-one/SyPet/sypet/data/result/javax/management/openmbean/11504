{"id":11504,"className":"javax.management.openmbean.OpenMBeanParameterInfoSupport","methodName":"OpenMBeanParameterInfoSupport","signature":"\u003cjavax.management.openmbean.OpenMBeanParameterInfoSupport: void OpenMBeanParameterInfoSupport(java.lang.String,java.lang.String,javax.management.openmbean.OpenType,T)\u003e","javadoc":"/** \n * Constructs an  {@code OpenMBeanParameterInfoSupport} instance,which describes the parameter used in one or more operations or constructors of a class of open MBeans, with the specified {@code name},  {@code openType},  {@code description} and {@code defaultValue}.\n * @param name  cannot be a null or empty string.\n * @param description  cannot be a null or empty string.\n * @param openType  cannot be null.\n * @param defaultValue must be a valid value for the {@code openType} specified for this parameter; default value notsupported for  {@code ArrayType} and {@code TabularType}; can be null, in which case it means that no default value is set.\n * @param \u003c T \u003e allows the compiler to check that the {@code defaultValue}, if non-null, has the correct Java type for the given  {@code openType}.\n * @throws IllegalArgumentException if {@code name} or {@code description} are null or empty string, or {@code openType} isnull.\n * @throws OpenDataException if {@code defaultValue} is not avalid value for the specified  {@code openType}, or  {@code defaultValue} is non null and {@code openType} is an {@code ArrayType} or a {@code TabularType}.\n */\n","tf":{"freq":{"mbean":3,"valid":1,"allow":1,"one":1,"data":1,"use":1,"type":12,"must":1,"info":2,"specifi":3,"open":11,"tabular":2,"avalid":1,"given":1,"correct":1,"oper":1,"isnul":1,"name":3,"mean":1,"valu":9,"constructor":1,"argument":1,"except":2,"support":2,"check":1,"paramet":4,"descript":3,"describ":1,"illeg":1,"non":2,"instanc":1,"empti":3,"notsupport":1,"string":3,"java":1,"construct":1,"compil":1,"array":2},"maxFreq":12,"totalTerms":88},"loc":3}