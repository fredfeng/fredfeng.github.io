{"id":11178,"className":"javax.management.remote.rmi.RMIConnection","methodName":"invoke","signature":"\u003cjavax.management.remote.rmi.RMIConnection: java.lang.Object invoke(javax.management.ObjectName,java.lang.String,java.rmi.MarshalledObject,java.lang.String[],javax.security.auth.Subject)\u003e","javadoc":"/** \n * Handles the method  {@link javax.management.MBeanServerConnection#invoke(ObjectName,String,Object[],String[])}.  The \u003ccode\u003eObject[]\u003c/code\u003e parameter is wrapped in a \u003ccode\u003eMarshalledObject\u003c/code\u003e.\n * @param name The object name of the MBean on which the method isto be invoked.\n * @param operationName The name of the operation to be invoked.\n * @param params An array containing the parameters to be set whenthe operation is invoked, encapsulated into a \u003ccode\u003eMarshalledObject\u003c/code\u003e.  The encapsulated array can be null, equivalent to an empty array.\n * @param signature An array containing the signature of theoperation. The class objects will be loaded using the same class loader as the one used for loading the MBean on which the operation was invoked.  Can be null, equivalent to an empty array.\n * @param delegationSubject The \u003ccode\u003eSubject\u003c/code\u003e containing thedelegation principals or \u003ccode\u003enull\u003c/code\u003e if the authentication principal is used instead.\n * @return The object returned by the operation, which representsthe result of invoking the operation on the MBean specified.\n * @throws InstanceNotFoundException The MBean specified is notregistered in the MBean server.\n * @throws MBeanException Wraps an exception thrown by theMBean\u0027s invoked method.\n * @throws ReflectionException Wraps a\u003ccode\u003ejava.lang.Exception\u003c/code\u003e thrown while trying to invoke the method.\n * @throws SecurityException if the client, or the delegated Subjectif any, does not have permission to perform this operation.\n * @throws IOException if a general communication exception occurred.\n * @throws RuntimeOperationsException Wraps an {@link IllegalArgumentException} when \u003ccode\u003ename\u003c/code\u003e or\u003ccode\u003eoperationName\u003c/code\u003e is null.\n */\n","tf":{"freq":{"mbean":8,"client":1,"whenth":1,"theoper":1,"perform":1,"specifi":2,"equival":2,"oper":9,"javax":1,"permiss":1,"marshal":2,"argument":1,"notregist":1,"wrap":4,"representsth":1,"except":10,"thrown":2,"invok":9,"loader":1,"runtim":1,"instanc":1,"contain":3,"will":1,"load":2,"array":5,"princip":2,"result":1,"connect":1,"subject":2,"link":2,"one":1,"use":3,"object":8,"signatur":2,"lang":1,"authent":1,"subjectif":1,"deleg":2,"name":7,"isto":1,"manag":1,"paramet":2,"illeg":1,"general":1,"empti":2,"handl":1,"secur":1,"communic":1,"string":2,"encapsul":2,"instead":1,"method":4,"server":2,"java":1,"thedeleg":1,"reflect":1,"occur":1,"found":1},"maxFreq":10,"totalTerms":132},"loc":0}