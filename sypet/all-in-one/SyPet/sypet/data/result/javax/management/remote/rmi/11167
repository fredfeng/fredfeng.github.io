{"id":11167,"className":"javax.management.remote.rmi.RMIConnection","methodName":"createMBean","signature":"\u003cjavax.management.remote.rmi.RMIConnection: javax.management.ObjectInstance createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.rmi.MarshalledObject,java.lang.String[],javax.security.auth.Subject)\u003e","javadoc":"/** \n * Handles the method  {@link javax.management.MBeanServerConnection#createMBean(String,ObjectName,ObjectName,Object[],String[])}.  The \u003ccode\u003eObject[]\u003c/code\u003e parameter is wrapped in a \u003ccode\u003eMarshalledObject\u003c/code\u003e.\n * @param className The class name of the MBean to be instantiated.\n * @param name The object name of the MBean. May be null.\n * @param loaderName The object name of the class loader to be used.\n * @param params An array containing the parameters of theconstructor to be invoked, encapsulated into a \u003ccode\u003eMarshalledObject\u003c/code\u003e.  The encapsulated array can be null, equivalent to an empty array.\n * @param signature An array containing the signature of theconstructor to be invoked.  Can be null, equivalent to an empty array.\n * @param delegationSubject The \u003ccode\u003eSubject\u003c/code\u003e containing thedelegation principals or \u003ccode\u003enull\u003c/code\u003e if the authentication principal is used instead.\n * @return An \u003ccode\u003eObjectInstance\u003c/code\u003e, containing the\u003ccode\u003eObjectName\u003c/code\u003e and the Java class name of the newly instantiated MBean.  If the contained \u003ccode\u003eObjectName\u003c/code\u003e is \u003ccode\u003en\u003c/code\u003e, the contained Java class name is \u003ccode\u003e {@link #getMBeanInfo getMBeanInfo(n)}.getClassName()\u003c/code\u003e.\n * @throws ReflectionException Wraps a\u003ccode\u003ejava.lang.ClassNotFoundException\u003c/code\u003e or a \u003ccode\u003ejava.lang.Exception\u003c/code\u003e that occurred when trying to invoke the MBean\u0027s constructor.\n * @throws InstanceAlreadyExistsException The MBean is alreadyunder the control of the MBean server.\n * @throws MBeanRegistrationException The\u003ccode\u003epreRegister\u003c/code\u003e (\u003ccode\u003eMBeanRegistration\u003c/code\u003e interface) method of the MBean has thrown an exception. The MBean will not be registered.\n * @throws MBeanException The constructor of the MBean hasthrown an exception.\n * @throws NotCompliantMBeanException This class is not a JMXcompliant MBean.\n * @throws InstanceNotFoundException The specified class loaderis not registered in the MBean server.\n * @throws RuntimeOperationsException Wraps a\u003ccode\u003ejava.lang.IllegalArgumentException\u003c/code\u003e: The className passed in parameter is null, the \u003ccode\u003eObjectName\u003c/code\u003e passed in parameter contains a pattern, or no \u003ccode\u003eObjectName\u003c/code\u003e is specified for the MBean.\n * @throws SecurityException if the client, or the delegated Subjectif any, does not have permission to perform this operation.\n * @throws IOException if a general communication exception occurred.\n */\n","tf":{"freq":{"mbean":21,"client":1,"instanti":2,"perform":1,"specifi":2,"info":2,"oper":2,"equival":2,"javax":1,"permiss":1,"xcompliant":1,"marshal":2,"argument":1,"wrap":3,"control":1,"thrown":1,"except":15,"creat":2,"invok":3,"loader":2,"runtim":1,"instanc":3,"newli":1,"contain":7,"compliant":1,"will":1,"array":5,"princip":2,"connect":1,"subject":2,"link":2,"use":2,"theconstructor":2,"object":13,"alreadyund":1,"signatur":2,"lang":3,"authent":1,"subjectif":1,"deleg":2,"name":16,"regist":3,"exist":1,"constructor":2,"may":1,"manag":1,"paramet":4,"registr":2,"illeg":1,"general":1,"pass":2,"handl":1,"empti":2,"loaderi":1,"secur":1,"communic":1,"pattern":1,"hasthrown":1,"pre":1,"string":2,"encapsul":2,"instead":1,"method":2,"server":3,"java":5,"alreadi":1,"thedeleg":1,"reflect":1,"found":2,"occur":2},"maxFreq":21,"totalTerms":184},"loc":0}