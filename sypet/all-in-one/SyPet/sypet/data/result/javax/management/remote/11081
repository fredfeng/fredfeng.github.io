{"id":11081,"className":"javax.management.remote.JMXConnectionNotification","methodName":"JMXConnectionNotification","signature":"\u003cjavax.management.remote.JMXConnectionNotification: void JMXConnectionNotification(java.lang.String,java.lang.Object,java.lang.String,long,java.lang.String,java.lang.Object)\u003e","javadoc":"/** \n * Constructs a new connection notification.  The  {@link #getSource() source} of the notification depends on whether itis being sent by a connector server or a connector client: \u003cul\u003e \u003cli\u003eFor a connector server, if it is registered in an MBean server, the source is the  {@link ObjectName} under which it isregistered.  Otherwise, it is a reference to the connector server object itself, an instance of a subclass of  {@link JMXConnectorServer}. \u003cli\u003eFor a connector client, the source is a reference to the connector client object, an instance of a class implementing {@link JMXConnector}. \u003c/ul\u003e\n * @param type the type of the notification.  This is usually oneof the constants  {@link #OPENED},  {@link #CLOSED},  {@link #FAILED},  {@link #NOTIFS_LOST}.  It is not an error for it to be a different string.\n * @param source the connector server or client emitting thenotification.\n * @param connectionId the ID of the connection within itsconnector server.\n * @param sequenceNumber a non-negative integer.  It is expectedbut not required that this number will be greater than any previous \u003ccode\u003esequenceNumber\u003c/code\u003e in a notification from this source.\n * @param message an unspecified text message, typically containinga human-readable description of the event.  Can be null.\n * @param userData an object whose type and meaning is defined bythe connector server.  Can be null.\n * @exception NullPointerException if \u003ccode\u003etype\u003c/code\u003e,\u003ccode\u003esource\u003c/code\u003e, or \u003ccode\u003econnectionId\u003c/code\u003e is null.\n * @exception IllegalArgumentException if\u003ccode\u003esequenceNumber\u003c/code\u003e is negative.\n */\n","tf":{"freq":{"mbean":1,"greater":1,"client":4,"isregist":1,"type":4,"whether":1,"notif":5,"sent":1,"expectedbut":1,"thenotif":1,"requir":1,"refer":2,"byth":1,"event":1,"sequenc":3,"argument":1,"except":4,"text":1,"whose":1,"descript":1,"number":4,"containinga":1,"itsconnector":1,"instanc":2,"non":1,"subclass":1,"will":1,"pointer":1,"connector":8,"sourc":7,"negat":2,"iti":1,"otherwis":1,"defin":1,"unspecifi":1,"connect":5,"readabl":1,"link":8,"data":1,"typic":1,"object":4,"xconnector":2,"name":1,"mean":1,"regist":1,"usual":1,"emit":1,"constant":1,"error":1,"previous":1,"depend":1,"messag":2,"illeg":1,"human":1,"differ":1,"string":1,"server":8,"construct":1,"within":1,"oneof":1,"user":1,"integ":1},"maxFreq":8,"totalTerms":119},"loc":19}