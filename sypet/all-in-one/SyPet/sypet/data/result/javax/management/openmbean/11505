{"id":11505,"className":"javax.management.openmbean.OpenMBeanParameterInfoSupport","methodName":"OpenMBeanParameterInfoSupport","signature":"\u003cjavax.management.openmbean.OpenMBeanParameterInfoSupport: void OpenMBeanParameterInfoSupport(java.lang.String,java.lang.String,javax.management.openmbean.OpenType,T,T[])\u003e","javadoc":"/** \n * \u003cp\u003eConstructs an  {@code OpenMBeanParameterInfoSupport} instance,which describes the parameter used in one or more operations or constructors of a class of open MBeans, with the specified {@code name},  {@code openType},  {@code description},  {@code defaultValue} and {@code legalValues}.\u003c/p\u003e \u003cp\u003eThe contents of  {@code legalValues} are copied, so subsequentmodifications of the array referenced by  {@code legalValues}have no impact on this  {@code OpenMBeanParameterInfoSupport}instance.\u003c/p\u003e\n * @param name  cannot be a null or empty string.\n * @param description  cannot be a null or empty string.\n * @param openType  cannot be null.\n * @param defaultValue must be a valid value for the {@code openType} specified for this parameter; default value notsupported for  {@code ArrayType} and {@code TabularType}; can be null, in which case it means that no default value is set.\n * @param legalValues each contained value must be valid for the{@code openType} specified for this parameter; legal values notsupported for  {@code ArrayType} and {@code TabularType}; can be null or empty.\n * @param \u003c T \u003e allows the compiler to check that the {@code defaultValue} and {@code legalValues}, if non-null, have the correct Java type for the given  {@code openType}.\n * @throws IllegalArgumentException if {@code name} or {@code description} are null or empty string, or {@code openType} isnull.\n * @throws OpenDataException if {@code defaultValue} is not avalid value for the specified  {@code openType}, or one value in {@code legalValues} is not valid for the specified {@code openType}, or  {@code defaultValue} is non null and {@code openType} is an {@code ArrayType} or a {@code TabularType}, or {@code legalValues} is non null and non empty and {@code openType} is an {@code ArrayType} or a {@code TabularType}, or {@code legalValues} is non null and non empty and {@code defaultValue} is not contained in {@code legalValues}.\n */\n","tf":{"freq":{"legal":10,"valid":3,"mbean":4,"allow":1,"one":2,"data":1,"use":1,"type":19,"must":2,"copi":1,"impact":1,"info":3,"specifi":5,"referenc":1,"tabular":4,"open":15,"avalid":1,"given":1,"correct":1,"oper":1,"isnul":1,"name":3,"mean":1,"valu":22,"constructor":1,"argument":1,"except":2,"support":3,"check":1,"paramet":6,"descript":3,"describ":1,"illeg":1,"non":6,"notsupport":2,"empti":6,"instanc":2,"content":1,"contain":2,"string":3,"java":1,"construct":1,"subsequentmodif":1,"compil":1,"array":5},"maxFreq":22,"totalTerms":154},"loc":4}