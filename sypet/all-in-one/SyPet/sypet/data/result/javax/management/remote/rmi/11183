{"id":11183,"className":"javax.management.remote.rmi.RMIConnection","methodName":"addNotificationListener","signature":"\u003cjavax.management.remote.rmi.RMIConnection: void addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,java.rmi.MarshalledObject,java.rmi.MarshalledObject,javax.security.auth.Subject)\u003e","javadoc":"/** \n * Handles the method  {@link javax.management.MBeanServerConnection#addNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)}.  The \u003ccode\u003eNotificationFilter\u003c/code\u003e parameter is wrapped in a \u003ccode\u003eMarshalledObject\u003c/code\u003e.  The \u003ccode\u003eObject\u003c/code\u003e (handback) parameter is also wrapped in a \u003ccode\u003eMarshalledObject\u003c/code\u003e.\n * @param name The name of the MBean on which the listener shouldbe added.\n * @param listener The object name of the listener which willhandle the notifications emitted by the registered MBean.\n * @param filter The filter object, encapsulated into a\u003ccode\u003eMarshalledObject\u003c/code\u003e. If filter encapsulated in the \u003ccode\u003eMarshalledObject\u003c/code\u003e has a null value, no filtering will be performed before handling notifications.\n * @param handback The context to be sent to the listener when anotification is emitted, encapsulated into a \u003ccode\u003eMarshalledObject\u003c/code\u003e.\n * @param delegationSubject The \u003ccode\u003eSubject\u003c/code\u003e containing thedelegation principals or \u003ccode\u003enull\u003c/code\u003e if the authentication principal is used instead.\n * @throws InstanceNotFoundException The MBean name of thenotification listener or of the notification broadcaster does not match any of the registered MBeans.\n * @throws RuntimeOperationsException Wraps an {@link IllegalArgumentException}.  The MBean named by \u003ccode\u003elistener\u003c/code\u003e exists but does not implement the {@link javax.management.NotificationListener} interface,or \u003ccode\u003ename\u003c/code\u003e or \u003ccode\u003elistener\u003c/code\u003e is null.\n * @throws SecurityException if the client, or the delegated Subjectif any, does not have permission to perform this operation.\n * @throws IOException if a general communication exception occurred.\n * @see #removeNotificationListener(ObjectName,ObjectName,Subject)\n * @see #removeNotificationListener(ObjectName,ObjectName,MarshalledObject,MarshalledObject,Subject)\n */\n","tf":{"freq":{"mbean":6,"client":1,"willhandl":1,"broadcast":1,"perform":2,"notif":10,"sent":1,"thenotif":1,"oper":2,"javax":2,"permiss":1,"marshal":7,"argument":1,"wrap":3,"except":6,"runtim":1,"remov":2,"anotif":1,"instanc":1,"shouldb":1,"contain":1,"will":1,"match":1,"filter":6,"princip":2,"connect":1,"subject":4,"link":3,"use":1,"object":17,"add":2,"authent":1,"subjectif":1,"deleg":2,"handback":2,"name":12,"regist":2,"valu":1,"exist":1,"listen":12,"emit":2,"manag":2,"paramet":2,"illeg":1,"general":1,"handl":2,"secur":1,"communic":1,"encapsul":3,"context":1,"instead":1,"ad":1,"method":1,"server":1,"also":1,"thedeleg":1,"occur":1,"found":1},"maxFreq":17,"totalTerms":148},"loc":0}