{"id":11300,"className":"javax.management.modelmbean.DescriptorSupport","methodName":"DescriptorSupport","signature":"\u003cjavax.management.modelmbean.DescriptorSupport: void DescriptorSupport(java.lang.String)\u003e","javadoc":"/** \n * \u003cp\u003eDescriptor constructor taking an XML String.\u003c/p\u003e \u003cp\u003eThe format of the XML string is not defined, but an implementation must ensure that the string returned by {@link #toXMLString() toXMLString()} on an existingdescriptor can be used to instantiate an equivalent descriptor using this constructor.\u003c/p\u003e \u003cp\u003eIn this implementation, all field values will be created as Strings.  If the field values are not Strings, the programmer will have to reset or convert these fields correctly.\u003c/p\u003e\n * @param inStr An XML-formatted string used to populate thisDescriptor.  The format is not defined, but any implementation must ensure that the string returned by method  {@link #toXMLString toXMLString} on an existingdescriptor can be used to instantiate an equivalent descriptor when instantiated using this constructor.\n * @exception RuntimeOperationsException If the String inStrpassed in parameter is null\n * @exception XMLParseException XML parsing problem while parsingthe input String\n * @exception MBeanException Wraps a distributed communication Exception.\n */\n","tf":{"freq":{"mbean":1,"defin":2,"parsingth":1,"lpars":1,"descriptor":5,"strpass":1,"instanti":3,"link":2,"distribut":1,"use":5,"convert":1,"must":2,"ensur":2,"popul":1,"correct":1,"oper":1,"equival":2,"reset":1,"valu":2,"constructor":3,"wrap":1,"except":7,"support":1,"existingdescriptor":2,"creat":1,"runtim":1,"programm":1,"paramet":1,"problem":1,"format":3,"field":3,"input":1,"communic":1,"str":1,"take":1,"string":9,"will":2,"method":1,"pars":1,"lstring":4},"maxFreq":9,"totalTerms":81},"loc":91}