{"id":11401,"className":"javax.management.openmbean.CompositeDataSupport","methodName":"CompositeDataSupport","signature":"\u003cjavax.management.openmbean.CompositeDataSupport: void CompositeDataSupport(javax.management.openmbean.CompositeType,java.lang.String[],java.lang.Object[])\u003e","javadoc":"/** \n * \u003cp\u003eConstructs a \u003ctt\u003eCompositeDataSupport\u003c/tt\u003e instance with the specified \u003ctt\u003ecompositeType\u003c/tt\u003e, whose item values are specified by \u003ctt\u003eitemValues[]\u003c/tt\u003e, in the same order as in \u003ctt\u003eitemNames[]\u003c/tt\u003e. As a \u003ctt\u003eCompositeType\u003c/tt\u003e does not specify any order on its items, the \u003ctt\u003eitemNames[]\u003c/tt\u003e parameter is used to specify the order in which the values are given in \u003ctt\u003eitemValues[]\u003c/tt\u003e. The items contained in this \u003ctt\u003eCompositeDataSupport\u003c/tt\u003e instance are internally stored in a \u003ctt\u003eTreeMap\u003c/tt\u003e, thus sorted in ascending lexicographic order of their names, for faster retrieval of individual item values.\u003c/p\u003e \u003cp\u003eThe constructor checks that all the constraints listed below for each parameter are satisfied, and throws the appropriate exception if they are not.\u003c/p\u003e\n * @param compositeType the \u003ci\u003ecomposite type \u003c/i\u003e of this \u003ci\u003ecompositedata\u003c/i\u003e instance; must not be null.\n * @param itemNames \u003ctt\u003eitemNames\u003c/tt\u003e must list, in any order, all theitem names defined in \u003ctt\u003ecompositeType\u003c/tt\u003e; the order in which the names are listed, is used to match values in \u003ctt\u003eitemValues[]\u003c/tt\u003e; must not be null or empty.\n * @param itemValues the values of the items, listed in the same order astheir respective names in \u003ctt\u003eitemNames\u003c/tt\u003e; each item value can be null, but if it is non-null it must be a valid value for the open type defined in \u003ctt\u003ecompositeType\u003c/tt\u003e for the corresponding item; must be of the same size as \u003ctt\u003eitemNames\u003c/tt\u003e; must not be null or empty.\n * @throws IllegalArgumentException \u003ctt\u003ecompositeType\u003c/tt\u003e is null, or\u003ctt\u003eitemNames[]\u003c/tt\u003e or \u003ctt\u003eitemValues[]\u003c/tt\u003e is null or empty, or one of the elements in \u003ctt\u003eitemNames[]\u003c/tt\u003e is a null or empty string, or \u003ctt\u003eitemNames[]\u003c/tt\u003e and \u003ctt\u003eitemValues[]\u003c/tt\u003e are not of the same size.\n * @throws OpenDataException \u003ctt\u003eitemNames[]\u003c/tt\u003e or\u003ctt\u003eitemValues[]\u003c/tt\u003e\u0027s size differs from the number of items defined in \u003ctt\u003ecompositeType\u003c/tt\u003e, or one of the elements in \u003ctt\u003eitemNames[]\u003c/tt\u003e does not exist as an item name defined in \u003ctt\u003ecompositeType\u003c/tt\u003e, or one of the elements in \u003ctt\u003eitemValues[]\u003c/tt\u003e is not a valid value for the corresponding item as defined in \u003ctt\u003ecompositeType\u003c/tt\u003e.\n */\n","tf":{"freq":{"theitem":1,"store":1,"compositedata":1,"type":11,"must":6,"specifi":4,"open":2,"tree":1,"given":1,"argument":1,"element":3,"except":3,"support":3,"composit":13,"whose":1,"number":1,"lexicograph":1,"astheir":1,"instanc":3,"non":1,"size":3,"contain":1,"match":1,"ascend":1,"defin":5,"valid":2,"sort":1,"correspond":2,"one":3,"data":4,"use":2,"constraint":1,"faster":1,"order":7,"name":16,"map":1,"valu":16,"exist":1,"individu":1,"constructor":1,"check":1,"thus":1,"paramet":2,"list":4,"illeg":1,"empti":4,"differ":1,"retriev":1,"appropri":1,"string":1,"item":29,"satisfi":1,"intern":1,"construct":1,"respect":1},"maxFreq":29,"totalTerms":179},"loc":3}