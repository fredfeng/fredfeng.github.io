{"id":11496,"className":"javax.management.openmbean.CompositeType","methodName":"isValue","signature":"\u003cjavax.management.openmbean.CompositeType: boolean isValue(java.lang.Object)\u003e","javadoc":"/** \n * Tests whether \u003cvar\u003eobj\u003c/var\u003e is a value which could be described by this \u003ccode\u003eCompositeType\u003c/code\u003e instance. \u003cp\u003eIf \u003cvar\u003eobj\u003c/var\u003e is null or is not an instance of \u003ccode\u003ejavax.management.openmbean.CompositeData\u003c/code\u003e, \u003ccode\u003eisValue\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eIf \u003cvar\u003eobj\u003c/var\u003e is an instance of \u003ccode\u003ejavax.management.openmbean.CompositeData\u003c/code\u003e, then let {@code ct} be its {@code CompositeType} as returned by {@link CompositeData#getCompositeType()}.  The result is true if {@code this} is \u003cem\u003eassignable from\u003c/em\u003e {@code ct}.  This means that:\u003c/p\u003e \u003cul\u003e \u003cli\u003e {@link #getTypeName() this.getTypeName()} equals{@code ct.getTypeName()}, and \u003cli\u003ethere are no item names present in  {@code this} that arenot also present in  {@code ct}, and \u003cli\u003efor every item in  {@code this}, its type is assignable from the type of the corresponding item in  {@code ct}. \u003c/ul\u003e \u003cp\u003eA  {@code TabularType} is assignable from another {@code TabularType} if they have the same {@linkplain TabularType#getTypeName() typeName} and {@linkplain TabularType#getIndexNames() index name list}, and the {@linkplain TabularType#getRowType() row type} of the first isassignable from the row type of the second. \u003cp\u003eAn  {@code ArrayType} is assignable from another {@code ArrayType} if they have the same {@linkplain ArrayType#getDimension() dimension}; and both are  {@linkplain ArrayType#isPrimitiveArray() primitive arrays} or neither is;and the  {@linkplain ArrayType#getElementOpenType() elementtype} of the first is assignable from the element type of thesecond. \u003cp\u003eIn every other case, an  {@code OpenType} is assignable fromanother  {@code OpenType} only if they are equal.\u003c/p\u003e\u003cp\u003eThese rules mean that extra items can be added to a  {@code CompositeData} without making it invalid for a {@code CompositeType}that does not have those items.\u003c/p\u003e\n * @param obj  the value whose open type is to be tested for compatibilitywith this \u003ccode\u003eCompositeType\u003c/code\u003e instance.\n * @return \u003ccode\u003etrue\u003c/code\u003e if \u003cvar\u003eobj\u003c/var\u003e is a value for thiscomposite type, \u003ccode\u003efalse\u003c/code\u003e otherwise.\n */\n","tf":{"freq":{"fals":2,"assign":6,"second":1,"test":2,"compatibilitywith":1,"fromanoth":1,"type":31,"whether":1,"open":4,"elementtyp":1,"invalid":1,"javax":2,"everi":2,"element":2,"index":2,"whose":1,"composit":9,"extra":1,"describ":1,"without":1,"row":3,"instanc":4,"present":2,"openmbean":2,"make":1,"array":7,"otherwis":1,"result":1,"linkplain":6,"primit":2,"thiscomposit":1,"var":8,"correspond":1,"link":2,"data":4,"anoth":2,"isassign":1,"tabular":5,"name":8,"rule":1,"mean":2,"valu":5,"manag":2,"true":2,"equal":2,"list":1,"dimens":2,"neither":1,"item":5,"thesecond":1,"ad":1,"obj":5,"arenot":1,"also":1,"first":2},"maxFreq":31,"totalTerms":167},"loc":17}