{"id":10666,"className":"javax.management.relation.RelationService","methodName":"checkRoleWriting","signature":"\u003cjavax.management.relation.RelationService: java.lang.Integer checkRoleWriting(javax.management.relation.Role,java.lang.String,java.lang.Boolean)\u003e","javadoc":"/** \n * Checks if given Role can be set in a relation of given type.\n * @param role  role to be checked\n * @param relationTypeName  name of relation type\n * @param initFlag  flag to specify that the checking is done for theinitialization of a role, write access shall not be verified.\n * @return an Integer wrapping an integer corresponding to possibleproblems represented as constants in RoleUnresolved: \u003cP\u003e- 0 if role can be set \u003cP\u003e- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME \u003cP\u003e- integer for RoleStatus.ROLE_NOT_WRITABLE \u003cP\u003e- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE \u003cP\u003e- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE \u003cP\u003e- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS \u003cP\u003e- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED\n * @exception IllegalArgumentException  if null parameter\n * @exception RelationTypeNotFoundException  if unknown relation type\n */\n","tf":{"freq":{"correspond":2,"type":5,"unresolv":1,"specifi":1,"given":2,"name":2,"verifi":1,"theiniti":1,"relat":5,"write":2,"role":13,"argument":1,"wrap":1,"except":4,"constant":1,"check":4,"repres":1,"status":6,"done":1,"paramet":1,"init":1,"unknown":1,"access":1,"illeg":1,"shall":1,"flag":2,"possibleproblem":1,"integ":8,"found":1},"maxFreq":13,"totalTerms":72},"loc":42}