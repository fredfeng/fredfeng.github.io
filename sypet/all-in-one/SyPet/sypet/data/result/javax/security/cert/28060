{"id":28060,"className":"javax.security.cert.X509Certificate","methodName":"getInstance","signature":"\u003cjavax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(java.io.InputStream)\u003e","javadoc":"/** \n * Instantiates an X509Certificate object, and initializes it with the data read from the input stream \u003ccode\u003einStream\u003c/code\u003e. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the \u003ccode\u003ecert.provider.x509v1\u003c/code\u003e property in the security properties file. \u003cp\u003eNote: Only one DER-encoded certificate is expected to be in the input stream. Also, all X509Certificate subclasses must provide a constructor of the form: \u003ccode\u003e\u003cpre\u003e public \u0026lt;subClass\u0026gt;(InputStream inStream) ... \u003c/pre\u003e\u003c/code\u003e\n * @param inStream an input stream with the data to be read toinitialize the certificate.\n * @return an X509Certificate object initialized with the datafrom the input stream.\n * @exception CertificateException if a class initializationor certificate parsing error occurs.\n */\n","tf":{"freq":{"sub":1,"stream":8,"instanti":1,"one":1,"data":2,"object":2,"must":1,"specifi":1,"expect":1,"cert":1,"file":1,"read":2,"toiniti":1,"valu":1,"initi":2,"note":1,"constructor":1,"except":2,"certif":8,"error":1,"form":1,"initializationor":1,"provid":3,"instanc":1,"input":5,"encod":1,"secur":1,"datafrom":1,"pre":2,"subclass":1,"properti":2,"pars":1,"also":1,"occur":1},"maxFreq":8,"totalTerms":61},"loc":3}