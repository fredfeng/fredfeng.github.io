{"id":28360,"className":"javax.security.auth.x500.X500Principal","methodName":"X500Principal","signature":"\u003cjavax.security.auth.x500.X500Principal: void X500Principal(java.lang.String)\u003e","javadoc":"/** \n * Creates an \u003ccode\u003eX500Principal\u003c/code\u003e from a string representation of an X.500 distinguished name (ex: \"CN\u003dDuke, OU\u003dJavaSoft, O\u003dSun Microsystems, C\u003dUS\"). The distinguished name must be specified using the grammar defined in RFC 1779 or RFC 2253 (either format is acceptable). \u003cp\u003eThis constructor recognizes the attribute type keywords defined in RFC 1779 and RFC 2253 (and listed in  {@link #getName(String format) getName(String format)}), as well as the T, DNQ or DNQUALIFIER, SURNAME, GIVENNAME, INITIALS, GENERATION, EMAILADDRESS, and SERIALNUMBER keywords whose OIDs are defined in RFC 3280 and its successor. Any other attribute type must be specified as an OID.\n * @param name an X.500 distinguished name in RFC 1779 or RFC 2253 format\n * @exception NullPointerException if the \u003ccode\u003ename\u003c/code\u003eis \u003ccode\u003enull\u003c/code\u003e\n * @exception IllegalArgumentException if the \u003ccode\u003ename\u003c/code\u003eis improperly specified\n */\n","tf":{"freq":{"defin":3,"successor":1,"accept":1,"link":1,"use":1,"well":1,"type":2,"must":2,"sun":1,"specifi":3,"attribut":2,"name":8,"duke":1,"recogn":1,"constructor":1,"argument":1,"except":4,"whose":1,"creat":1,"keyword":2,"list":1,"format":4,"illeg":1,"soft":1,"represent":1,"grammar":1,"improp":1,"microsystem":1,"either":1,"string":3,"pointer":1,"distinguish":3,"java":1,"princip":2},"maxFreq":8,"totalTerms":60},"loc":3}