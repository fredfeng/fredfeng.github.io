{"id":28170,"className":"javax.security.auth.callback.CallbackHandler","methodName":"handle","signature":"\u003cjavax.security.auth.callback.CallbackHandler: void handle(javax.security.auth.callback.Callback[])\u003e","javadoc":"/** \n * \u003cp\u003e Retrieve or display the information requested in the provided Callbacks. \u003cp\u003e The \u003ccode\u003ehandle\u003c/code\u003e method implementation checks the instance(s) of the \u003ccode\u003eCallback\u003c/code\u003e object(s) passed in to retrieve or display the requested information. The following example is provided to help demonstrate what an \u003ccode\u003ehandle\u003c/code\u003e method implementation might look like. This example code is for guidance only.  Many details, including proper error handling, are left out for simplicity. \u003cpre\u003e public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { for (int i \u003d 0; i \u003c callbacks.length; i++) { if (callbacks[i] instanceof TextOutputCallback) { // display the message according to the specified type TextOutputCallback toc \u003d (TextOutputCallback)callbacks[i]; switch (toc.getMessageType()) { case TextOutputCallback.INFORMATION: System.out.println(toc.getMessage()); break; case TextOutputCallback.ERROR: System.out.println(\"ERROR: \" + toc.getMessage()); break; case TextOutputCallback.WARNING: System.out.println(\"WARNING: \" + toc.getMessage()); break; default: throw new IOException(\"Unsupported message type: \" + toc.getMessageType()); } } else if (callbacks[i] instanceof NameCallback) { // prompt the user for a username NameCallback nc \u003d (NameCallback)callbacks[i]; // ignore the provided defaultName System.err.print(nc.getPrompt()); System.err.flush(); nc.setName((new BufferedReader (new InputStreamReader(System.in))).readLine()); } else if (callbacks[i] instanceof PasswordCallback) { // prompt the user for sensitive information PasswordCallback pc \u003d (PasswordCallback)callbacks[i]; System.err.print(pc.getPrompt()); System.err.flush(); pc.setPassword(readPassword(System.in)); } else { throw new UnsupportedCallbackException (callbacks[i], \"Unrecognized Callback\"); } } } // Reads user password from given input stream. private char[] readPassword(InputStream in) throws IOException { // insert code to read a user password from the input stream } \u003c/pre\u003e\n * @param callbacks an array of \u003ccode\u003eCallback\u003c/code\u003e objects providedby an underlying security service which contains the information requested to be retrieved or displayed.\n * @exception java.io.IOException if an input or output error occurs. \u003cp\u003e\n * @exception UnsupportedCallbackException if the implementation of thismethod does not support one or more of the Callbacks specified in the \u003ccode\u003ecallbacks\u003c/code\u003e parameter.\n */\n","tf":{"freq":{"detail":1,"unsupport":4,"servic":1,"usernam":1,"type":4,"password":8,"specifi":2,"buffer":1,"help":1,"given":1,"println":3,"request":3,"proper":1,"follow":1,"mani":1,"sensit":1,"except":9,"text":6,"ignor":1,"support":1,"providedbi":1,"display":4,"guidanc":1,"like":1,"provid":3,"els":3,"instanc":1,"inform":4,"input":5,"system":9,"reader":2,"contain":1,"simplic":1,"demonstr":1,"output":7,"array":1,"might":1,"stream":4,"toc":6,"one":1,"line":1,"object":2,"thismethod":1,"name":5,"length":1,"read":5,"left":1,"look":1,"includ":1,"check":1,"error":2,"messag":7,"paramet":1,"accord":1,"unrecogn":1,"print":2,"handl":5,"pass":1,"secur":1,"flush":2,"retriev":3,"pre":2,"exampl":2,"callback":32,"err":4,"java":1,"method":2,"prompt":4,"insert":1,"user":4,"occur":1},"maxFreq":32,"totalTerms":206},"loc":0}