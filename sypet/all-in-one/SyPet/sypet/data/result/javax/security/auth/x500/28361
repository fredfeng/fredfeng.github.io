{"id":28361,"className":"javax.security.auth.x500.X500Principal","methodName":"X500Principal","signature":"\u003cjavax.security.auth.x500.X500Principal: void X500Principal(java.lang.String,java.util.Map)\u003e","javadoc":"/** \n * Creates an \u003ccode\u003eX500Principal\u003c/code\u003e from a string representation of an X.500 distinguished name (ex: \"CN\u003dDuke, OU\u003dJavaSoft, O\u003dSun Microsystems, C\u003dUS\"). The distinguished name must be specified using the grammar defined in RFC 1779 or RFC 2253 (either format is acceptable). \u003cp\u003e This constructor recognizes the attribute type keywords specified in  {@link #X500Principal(String)} and also recognizes additionalkeywords that have entries in the \u003ccode\u003ekeywordMap\u003c/code\u003e parameter. Keyword entries in the keywordMap take precedence over the default keywords recognized by \u003ccode\u003eX500Principal(String)\u003c/code\u003e. Keywords MUST be specified in all upper-case, otherwise they will be ignored. Improperly specified keywords are ignored; however if a keyword in the name maps to an improperly specified OID, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown. It is permissible to have 2 different keywords that map to the same OID.\n * @param name an X.500 distinguished name in RFC 1779 or RFC 2253 format\n * @param keywordMap an attribute type keyword map, where each key is akeyword String that maps to a corresponding object identifier in String form (a sequence of nonnegative integers separated by periods). The map may be empty but never \u003ccode\u003enull\u003c/code\u003e.\n * @exception NullPointerException if \u003ccode\u003ename\u003c/code\u003e or\u003ccode\u003ekeywordMap\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @exception IllegalArgumentException if the \u003ccode\u003ename\u003c/code\u003e isimproperly specified or a keyword in the \u003ccode\u003ename\u003c/code\u003e maps to an OID that is not in the correct form\n * @since 1.6\n */\n","tf":{"freq":{"accept":1,"type":2,"must":1,"specifi":6,"correct":1,"sequenc":1,"permiss":1,"duke":1,"howev":1,"recogn":3,"key":1,"argument":2,"ignor":2,"except":5,"thrown":1,"form":2,"creat":1,"format":2,"period":1,"separ":1,"will":1,"pointer":1,"distinguish":3,"princip":4,"otherwis":1,"defin":1,"additionalkeyword":1,"correspond":1,"link":1,"use":1,"identifi":1,"object":1,"sun":1,"upper":1,"attribut":2,"isimprop":1,"name":8,"map":10,"constructor":1,"may":1,"entri":2,"keyword":13,"paramet":1,"illeg":2,"akeyword":1,"empti":1,"grammar":1,"represent":1,"soft":1,"improp":2,"preced":1,"differ":1,"never":1,"either":1,"microsystem":1,"nonneg":1,"take":1,"string":5,"java":1,"integ":1,"also":1},"maxFreq":13,"totalTerms":118},"loc":21}