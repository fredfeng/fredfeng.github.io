{"id":28095,"className":"javax.security.auth.Subject","methodName":"setReadOnly","signature":"\u003cjavax.security.auth.Subject: void setReadOnly()\u003e","javadoc":"/** \n * Set this \u003ccode\u003eSubject\u003c/code\u003e to be read-only. \u003cp\u003e Modifications (additions and removals) to this Subject\u0027s \u003ccode\u003ePrincipal\u003c/code\u003e \u003ccode\u003eSet\u003c/code\u003e and credential Sets will be disallowed. The \u003ccode\u003edestroy\u003c/code\u003e operation on this Subject\u0027s credentials will still be permitted. \u003cp\u003e Subsequent attempts to modify the Subject\u0027s \u003ccode\u003ePrincipal\u003c/code\u003e and credential Sets will result in an \u003ccode\u003eIllegalStateException\u003c/code\u003e being thrown. Also, once a \u003ccode\u003eSubject\u003c/code\u003e is read-only, it can not be reset to being writable again. \u003cp\u003e\n * @exception SecurityException if the caller does not have permissionto set this \u003ccode\u003eSubject\u003c/code\u003e to be read-only.\n */\n","tf":{"freq":{"caller":1,"attempt":1,"result":1,"subject":6,"permit":1,"state":1,"destroy":1,"disallow":1,"oper":1,"permissionto":1,"read":4,"reset":1,"subsequ":1,"addit":1,"except":3,"thrown":1,"credenti":3,"remov":1,"still":1,"writabl":1,"illeg":1,"secur":1,"will":3,"modifi":1,"also":1,"modif":1,"princip":2},"maxFreq":6,"totalTerms":42},"loc":8}