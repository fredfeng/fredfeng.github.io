{"id":28365,"className":"javax.security.auth.x500.X500Principal","methodName":"getName","signature":"\u003cjavax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)\u003e","javadoc":"/** \n * Returns a string representation of the X.500 distinguished name using the specified format. Valid values for the format are \"RFC1779\", \"RFC2253\", and \"CANONICAL\" (case insensitive). \u003cp\u003e If \"RFC1779\" is specified as the format, this method emits the attribute type keywords defined in RFC 1779 (CN, L, ST, O, OU, C, STREET). Any other attribute type is emitted as an OID. \u003cp\u003e If \"RFC2253\" is specified as the format, this method emits the attribute type keywords defined in RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID). Any other attribute type is emitted as an OID. Under a strict reading, RFC 2253 only specifies a UTF-8 string representation. The String returned by this method is the Unicode string achieved by decoding this UTF-8 representation. \u003cp\u003e If \"CANONICAL\" is specified as the format, this method returns an RFC 2253 conformant string representation with the following additional canonicalizations: \u003cp\u003e\u003col\u003e \u003cli\u003e Leading zeros are removed from attribute types that are encoded as dotted decimal OIDs \u003cli\u003e DirectoryString attribute values of type PrintableString and UTF8String are not output in hexadecimal format \u003cli\u003e DirectoryString attribute values of types other than PrintableString and UTF8String are output in hexadecimal format \u003cli\u003e Leading and trailing white space characters are removed from non-hexadecimal attribute values (unless the value consists entirely of white space characters) \u003cli\u003e Internal substrings of one or more white space characters are converted to a single space in non-hexadecimal attribute values \u003cli\u003e Relative Distinguished Names containing more than one Attribute Value Assertion (AVA) are output in the following order: an alphabetical ordering of AVAs containing standard keywords, followed by a numeric ordering of AVAs containing OID keywords. \u003cli\u003e The only characters in attribute values that are escaped are those which section 2.4 of RFC 2253 states must be escaped (they are escaped using a preceding backslash character) \u003cli\u003e The entire name is converted to upper case using \u003ccode\u003eString.toUpperCase(Locale.US)\u003c/code\u003e \u003cli\u003e The entire name is converted to lower case using \u003ccode\u003eString.toLowerCase(Locale.US)\u003c/code\u003e \u003cli\u003e The name is finally normalized using normalization form KD, as described in the Unicode Standard and UAX #15 \u003c/ol\u003e \u003cp\u003e Additional standard formats may be introduced in the future.\n * @param format the format to use\n * @return a string representation of this \u003ccode\u003eX500Principal\u003c/code\u003eusing the specified format\n * @throws IllegalArgumentException if the specified format is invalidor null\n */\n","tf":{"freq":{"lower":2,"singl":1,"normal":2,"lead":2,"type":7,"zero":1,"must":1,"dot":1,"specifi":7,"trail":1,"relat":1,"substr":1,"follow":3,"argument":1,"decod":1,"except":1,"form":1,"numer":1,"charact":5,"consist":1,"remov":2,"white":3,"describ":1,"format":12,"non":2,"encod":1,"contain":3,"distinguish":2,"alphabet":1,"strict":1,"output":3,"entir":3,"princip":1,"defin":2,"valid":1,"directori":2,"one":2,"state":1,"use":7,"convert":3,"decim":1,"space":4,"escap":3,"introduc":1,"backslash":1,"upper":2,"attribut":11,"order":3,"unless":1,"name":6,"read":1,"valu":8,"addit":2,"emit":4,"may":1,"invalidor":1,"futur":1,"standard":3,"canonic":1,"keyword":4,"hexadecim":4,"illeg":1,"section":1,"printabl":2,"achiev":1,"represent":5,"preced":1,"insensit":1,"conform":1,"string":14,"unicod":2,"intern":1,"method":4,"local":2},"maxFreq":14,"totalTerms":193},"loc":12}