{"id":28037,"className":"javax.security.sasl.Sasl","methodName":"createSaslClient","signature":"\u003cjavax.security.sasl.Sasl: javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,javax.security.auth.callback.CallbackHandler)\u003e","javadoc":"/** \n * Creates a \u003ctt\u003eSaslClient\u003c/tt\u003e using the parameters supplied. This method uses the \u003ca href\u003d\" {@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#Provider\"\u003eJCA Security Provider Framework\u003c/a\u003e, described in the \"Java Cryptography Architecture API Specification \u0026 Reference\", for locating and selecting a \u003ctt\u003eSaslClient\u003c/tt\u003e implementation. First, it obtains an ordered list of \u003ctt\u003eSaslClientFactory\u003c/tt\u003e instances from the registered security providers for the \"SaslClientFactory\" service and the specified SASL mechanism(s). It then invokes \u003ctt\u003ecreateSaslClient()\u003c/tt\u003e on each factory instance on the list until one produces a non-null \u003ctt\u003eSaslClient\u003c/tt\u003e instance. It returns the non-null \u003ctt\u003eSaslClient\u003c/tt\u003e instance, or null if the search fails to produce a non-null \u003ctt\u003eSaslClient\u003c/tt\u003e instance. \u003cp\u003e A security provider for SaslClientFactory registers with the JCA Security Provider Framework keys of the form \u003cbr\u003e \u003ctt\u003eSaslClientFactory.\u003cem\u003emechanism_name\u003c/em\u003e\u003c/tt\u003e \u003cbr\u003e and values that are class names of implementations of \u003ctt\u003ejavax.security.sasl.SaslClientFactory\u003c/tt\u003e. For example, a provider that contains a factory class, \u003ctt\u003ecom.wiz.sasl.digest.ClientFactory\u003c/tt\u003e, that supports the \"DIGEST-MD5\" mechanism would register the following entry with the JCA: \u003ctt\u003eSaslClientFactory.DIGEST-MD5 com.wiz.sasl.digest.ClientFactory\u003c/tt\u003e \u003cp\u003e See the \"Java Cryptography Architecture API Specification \u0026 Reference\" for information about how to install and configure security service providers.\n * @param mechanisms The non-null list of mechanism names to try. Each is theIANA-registered name of a SASL mechanism. (e.g. \"GSSAPI\", \"CRAM-MD5\").\n * @param authorizationId The possibly null protocol-dependentidentification to be used for authorization. If null or empty, the server derives an authorization ID from the client\u0027s authentication credentials. When the SASL authentication completes successfully, the specified entity is granted access.\n * @param protocol The non-null string name of the protocol for whichthe authentication is being performed (e.g., \"ldap\").\n * @param serverName The non-null fully-qualified host name of the serverto authenticate to.\n * @param props The possibly null set of properties used toselect the SASL mechanism and to configure the authentication exchange of the selected mechanism. For example, if \u003ctt\u003eprops\u003c/tt\u003e contains the \u003ccode\u003eSasl.POLICY_NOPLAINTEXT\u003c/code\u003e property with the value \u003ctt\u003e\"true\"\u003c/tt\u003e, then the selected SASL mechanism must not be susceptible to simple plain passive attacks. In addition to the standard properties declared in this class, other, possibly mechanism-specific, properties can be included. Properties not relevant to the selected mechanism are ignored, including any map entries with non-String keys.\n * @param cbh The possibly null callback handler to used by the SASLmechanisms to get further information from the application/library to complete the authentication. For example, a SASL mechanism might require the authentication ID, password and realm from the caller. The authentication ID is requested by using a \u003ctt\u003eNameCallback\u003c/tt\u003e. The password is requested by using a \u003ctt\u003ePasswordCallback\u003c/tt\u003e. The realm is requested by using a \u003ctt\u003eRealmChoiceCallback\u003c/tt\u003e if there is a list of realms to choose from, and by using a \u003ctt\u003eRealmCallback\u003c/tt\u003e if the realm must be entered.\n * @return A possibly null \u003ctt\u003eSaslClient\u003c/tt\u003e created using the parameterssupplied. If null, cannot find a \u003ctt\u003eSaslClientFactory\u003c/tt\u003e that will produce one.\n * @exception SaslException If cannot create a \u003ctt\u003eSaslClient\u003c/tt\u003e becauseof an error.\n */\n","tf":{"freq":{"deriv":1,"servic":2,"crypto":2,"specifi":2,"fail":1,"realm":6,"search":1,"refer":2,"href":1,"cryptographi":2,"ignor":1,"support":1,"host":1,"form":1,"invok":1,"describ":1,"slmechan":1,"provid":7,"non":7,"instanc":5,"obtain":1,"configur":2,"ldap":1,"will":1,"caller":1,"spec":1,"might":1,"use":10,"applic":1,"technot":1,"authent":8,"factori":11,"map":1,"complet":2,"addit":1,"credenti":1,"prop":2,"librari":1,"true":1,"fulli":1,"access":1,"framework":2,"exchang":1,"empti":1,"mechan":12,"string":2,"callback":5,"exampl":3,"method":1,"attack":1,"com":2,"passiv":1,"client":19,"grant":1,"simpl":1,"root":1,"relev":1,"possibl":5,"perform":1,"password":3,"toselect":1,"must":2,"requir":1,"javax":1,"request":3,"key":2,"follow":1,"except":2,"creat":5,"select":4,"enter":1,"dependentidentif":1,"whichth":1,"inform":2,"parameterssuppli":1,"entiti":1,"contain":2,"serverto":1,"properti":5,"becauseof":1,"one":2,"digest":2,"author":3,"order":1,"declar":1,"name":8,"choos":1,"regist":4,"valu":2,"sasl":21,"wiz":2,"plain":1,"find":1,"locat":1,"protocol":3,"includ":2,"error":1,"standard":1,"entri":2,"instal":1,"paramet":1,"choic":1,"produc":3,"list":4,"suppli":1,"guid":1,"specif":3,"secur":7,"architectur":2,"suscept":1,"html":1,"java":2,"server":2,"first":1,"success":1,"cbh":1,"qualifi":1,"handler":1},"maxFreq":21,"totalTerms":291},"loc":37}