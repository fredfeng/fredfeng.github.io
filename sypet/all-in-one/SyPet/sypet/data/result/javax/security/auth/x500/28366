{"id":28366,"className":"javax.security.auth.x500.X500Principal","methodName":"getName","signature":"\u003cjavax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String,java.util.Map)\u003e","javadoc":"/** \n * Returns a string representation of the X.500 distinguished name using the specified format. Valid values for the format are \"RFC1779\" and \"RFC2253\" (case insensitive). \"CANONICAL\" is not permitted and an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e will be thrown. \u003cp\u003eThis method returns Strings in the format as specified in {@link #getName(String)} and also emits additional attribute typekeywords for OIDs that have entries in the \u003ccode\u003eoidMap\u003c/code\u003e parameter. OID entries in the oidMap take precedence over the default OIDs recognized by \u003ccode\u003egetName(String)\u003c/code\u003e. Improperly specified OIDs are ignored; however if an OID in the name maps to an improperly specified keyword, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown. \u003cp\u003e Additional standard formats may be introduced in the future. \u003cp\u003e Warning: additional attribute type keywords may not be recognized by other implementations; therefore do not use this method if you are unsure if these keywords will be recognized by other implementations.\n * @param format the format to use\n * @param oidMap an OID map, where each key is an object identifier inString form (a sequence of nonnegative integers separated by periods) that maps to a corresponding attribute type keyword String. The map may be empty but never \u003ccode\u003enull\u003c/code\u003e.\n * @return a string representation of this \u003ccode\u003eX500Principal\u003c/code\u003eusing the specified format\n * @throws IllegalArgumentException if the specified format is invalid,null, or an OID in the name maps to an improperly specified keyword\n * @throws NullPointerException if \u003ccode\u003eoidMap\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n * @since 1.6\n */\n","tf":{"freq":{"permit":1,"type":2,"specifi":7,"invalid":1,"sequenc":1,"howev":1,"recogn":3,"key":1,"argument":3,"thrown":2,"except":4,"ignor":1,"form":1,"format":8,"period":1,"separ":1,"will":2,"pointer":1,"distinguish":1,"princip":1,"warn":1,"valid":1,"correspond":1,"link":1,"use":4,"identifi":1,"therefor":1,"object":1,"introduc":1,"attribut":3,"oid":4,"name":6,"map":9,"valu":1,"addit":3,"emit":1,"may":3,"futur":1,"standard":1,"entri":2,"keyword":5,"unsur":1,"paramet":1,"typekeyword":1,"illeg":3,"empti":1,"represent":2,"improp":3,"preced":1,"never":1,"insensit":1,"take":1,"nonneg":1,"string":7,"method":2,"integ":1,"also":1},"maxFreq":9,"totalTerms":122},"loc":15}