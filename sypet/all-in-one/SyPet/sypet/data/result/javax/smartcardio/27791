{"id":27791,"className":"javax.smartcardio.CardChannel","methodName":"transmit","signature":"\u003cjavax.smartcardio.CardChannel: int transmit(java.nio.ByteBuffer,java.nio.ByteBuffer)\u003e","javadoc":"/** \n * Transmits the command APDU stored in the command ByteBuffer and receives the reponse APDU in the response ByteBuffer. \u003cp\u003eThe command buffer must contain valid command APDU data starting at \u003ccode\u003ecommand.position()\u003c/code\u003e and the APDU must be \u003ccode\u003ecommand.remaining()\u003c/code\u003e bytes long. Upon return, the command buffer\u0027s position will be equal to its limit; its limit will not have changed. The output buffer will have received the response APDU bytes. Its position will have advanced by the number of bytes received, which is also the return value of this method. \u003cp\u003eThe CLA byte of the command APDU is automatically adjusted to match the channel number of this CardChannel. \u003cp\u003eNote that this method cannot be used to transmit \u003ccode\u003eMANAGE CHANNEL\u003c/code\u003e APDUs. Logical channels should be managed using the  {@linkplain Card#openLogicalChannel} and {@linkplain CardChannel#close CardChannel.close()} methods.\u003cp\u003eSee  {@linkplain #transmit transmit()} for a discussion of the handlingof response APDUs with the SW1 values \u003ccode\u003e61\u003c/code\u003e or \u003ccode\u003e6C\u003c/code\u003e.\n * @param command the buffer containing the command APDU\n * @param response the buffer that shall receive the response APDU fromthe card\n * @return the length of the received response APDU\n * @throws IllegalStateException if this channel has been{@linkplain #close closed} or if the corresponding Card has been{@linkplain Card#disconnect disconnected}.\n * @throws NullPointerException if command or response is null\n * @throws ReadOnlyBufferException if the response buffer is read-only\n * @throws IllegalArgumentException if command and response are thesame object, if \u003ccode\u003eresponse\u003c/code\u003e may not have sufficient space to receive the response APDU or if the APDU encodes a \u003ccode\u003eMANAGE CHANNEL\u003c/code\u003e command\n * @throws CardException if the card operation failed\n */\n","tf":{"freq":{"repons":1,"store":1,"must":2,"close":4,"buffer":9,"open":1,"fail":1,"oper":1,"card":9,"thesam":1,"fromth":1,"argument":1,"limit":2,"except":5,"respons":11,"number":2,"logic":2,"shall":1,"encod":1,"advanc":1,"start":1,"discuss":1,"handlingof":1,"contain":2,"will":4,"suffici":1,"pointer":1,"match":1,"output":1,"posit":3,"upon":1,"valid":1,"linkplain":5,"correspond":1,"data":1,"state":1,"use":2,"object":1,"space":1,"automat":1,"command":13,"adjust":1,"length":1,"read":2,"valu":2,"note":1,"transmit":5,"may":1,"manag":1,"equal":1,"receiv":6,"illeg":2,"remain":1,"dus":2,"method":3,"disconnect":2,"chang":1,"also":1,"channel":7},"maxFreq":13,"totalTerms":141},"loc":0}