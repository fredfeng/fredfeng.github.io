{"id":24650,"className":"javax.script.Bindings","methodName":"remove","signature":"\u003cjavax.script.Bindings: java.lang.Object remove(java.lang.Object)\u003e","javadoc":"/** \n * Removes the mapping for this key from this map if it is present (optional operation).   More formally, if this map contains a mapping from key \u003ctt\u003ek\u003c/tt\u003e to value \u003ctt\u003ev\u003c/tt\u003e such that \u003ccode\u003e(key\u003d\u003dnull ?  k\u003d\u003dnull : key.equals(k))\u003c/code\u003e, that mapping is removed.  (The map can contain at most one such mapping.) \u003cp\u003eReturns the value to which the map previously associated the key, or \u003ctt\u003enull\u003c/tt\u003e if the map contained no mapping for this key.  (A \u003ctt\u003enull\u003c/tt\u003e return can also indicate that the map previously associated \u003ctt\u003enull\u003c/tt\u003e with the specified key if the implementation supports \u003ctt\u003enull\u003c/tt\u003e values.)  The map will not contain a mapping for the specified  key once the call returns.\n * @param key key whose mapping is to be removed from the map.\n * @return previous value associated with specified key, or \u003ctt\u003enull\u003c/tt\u003eif there was no mapping for key.\n * @throws NullPointerException if key is null\n * @throws ClassCastException if key is not String\n * @throws IllegalArgumentException if key is empty String\n */\n","tf":{"freq":{"call":1,"one":1,"specifi":3,"indic":1,"oper":1,"associ":3,"map":16,"valu":4,"option":1,"key":15,"argument":1,"except":3,"support":1,"previous":3,"whose":1,"remov":4,"equal":1,"illeg":1,"empti":1,"present":1,"formal":1,"cast":1,"contain":4,"string":2,"will":1,"pointer":1,"also":1},"maxFreq":16,"totalTerms":74},"loc":0}