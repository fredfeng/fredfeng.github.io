{"id":24101,"className":"javax.print.PrintService","methodName":"getSupportedAttributeValues","signature":"\u003cjavax.print.PrintService: java.lang.Object getSupportedAttributeValues(java.lang.Class,javax.print.DocFlavor,javax.print.attribute.AttributeSet)\u003e","javadoc":"/** \n * Determines the printing attribute values a client can specify in the given category when setting up a job for this print service. A printing attribute value is an instance of a class that implements interface {@link javax.print.attribute.Attribute Attribute}. \u003cP\u003e If \u003cCODE\u003eflavor\u003c/CODE\u003e is null and \u003cCODE\u003eattributes\u003c/CODE\u003e is null or is an empty set, this method returns all the printing attribute values this Print Service supports for any possible job. If \u003cCODE\u003eflavor\u003c/CODE\u003e is not null or \u003cCODE\u003eattributes\u003c/CODE\u003e is not an empty set, this method returns just the printing attribute values that are compatible with the given doc flavor and/or set of attributes. That is, a null return value may indicate that specifying this attribute is incompatible with the specified DocFlavor. Also if DocFlavor is not null it must be a flavor supported by this PrintService, else IllegalArgumentException will be thrown. \u003cP\u003e If the \u003ccode\u003eattributes\u003c/code\u003e parameter contains an Attribute whose category is the same as the \u003ccode\u003ecategory\u003c/code\u003e parameter, the service must ignore this attribute in the AttributeSet. \u003cp\u003e \u003ccode\u003eDocAttribute\u003c/code\u003es which are to be specified on the \u003ccode\u003eDoc\u003c/code\u003e must be included in this set to accurately represent the context. \u003cp\u003e This method returns an Object because different printing attribute categories indicate the supported attribute values in different ways. The documentation for each printing attribute in package  {@link javax.print.attribute.standard javax.print.attribute.standard}describes how each attribute indicates its supported values. Possible ways of indicating support include: \u003cUL\u003e \u003cLI\u003e Return a single instance of the attribute category to indicate that any value is legal -- used, for example, by an attribute whose value is an arbitrary text string. (The value of the returned attribute object is irrelevant.) \u003cLI\u003e Return an array of one or more instances of the attribute category, containing the legal values -- used, for example, by an attribute with a list of enumerated values. The type of the array is an array of the specified attribute category type as returned by its \u003ccode\u003egetCategory(Class)\u003c/code\u003e. \u003cLI\u003e Return a single object (of some class other than the attribute category) that indicates bounds on the legal values -- used, for example, by an integer-valued attribute that must lie within a certain range. \u003c/UL\u003e \u003cP\u003e\n * @param category    Printing attribute category to test. It must be a{@link java.lang.Class Class} that implementsinterface  {@link javax.print.attribute.Attribute Attribute}.\n * @param flavor      Doc flavor for a supposed job, or null.\n * @param attributes  Set of printing attributes for a supposed job(both job-level attributes and document-level attributes), or null.\n * @return  Object indicating supported values for \u003cCODE\u003ecategory\u003c/CODE\u003e,or null if this Print Service does not support specifying a doc-level or job-level attribute in \u003cCODE\u003ecategory\u003c/CODE\u003e in a Print Request.\n * @exception NullPointerException (unchecked exception) Thrown if \u003cCODE\u003ecategory\u003c/CODE\u003e is null.\n * @exception IllegalArgumentException (unchecked exception) Thrown if \u003cCODE\u003ecategory\u003c/CODE\u003e is not a {@link java.lang.Class Class} that implements interface {@link javax.print.attribute.Attribute Attribute}, or \u003ccode\u003eDocFlavor\u003c/code\u003e is not supported by this service.\n */\n","tf":{"freq":{"client":1,"test":1,"singl":2,"servic":6,"uncheck":2,"possibl":2,"type":2,"must":5,"specifi":6,"arbitrari":1,"level":4,"given":2,"rang":1,"javax":5,"request":1,"accur":1,"argument":2,"text":1,"except":7,"thrown":3,"ignor":1,"support":9,"categori":15,"whose":2,"flavor":9,"job":6,"describ":1,"incompat":1,"els":1,"instanc":3,"determin":1,"contain":2,"will":1,"pointer":1,"array":3,"compat":1,"legal":3,"one":1,"link":6,"way":2,"use":3,"object":4,"lang":2,"document":2,"attribut":43,"indic":7,"valu":16,"just":1,"may":1,"includ":2,"standard":2,"implementsinterfac":1,"repres":1,"paramet":2,"suppos":2,"list":1,"illeg":2,"print":18,"empti":2,"differ":2,"string":1,"exampl":3,"context":1,"irrelev":1,"java":2,"method":3,"certain":1,"within":1,"integ":1,"also":1,"lie":1,"bound":1},"maxFreq":43,"totalTerms":255},"loc":0}